[{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/about/page.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":20,"column":15,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[635,765],"text":"\n            We&apos;re on a mission to make delivery services more accessible,\n            reliable, and community-focused.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[635,765],"text":"\n            We&lsquo;re on a mission to make delivery services more accessible,\n            reliable, and community-focused.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[635,765],"text":"\n            We&#39;re on a mission to make delivery services more accessible,\n            reliable, and community-focused.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[635,765],"text":"\n            We&rsquo;re on a mission to make delivery services more accessible,\n            reliable, and community-focused.\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Metadata } from 'next';\n\nexport const metadata: Metadata = {\n  title: 'About Us | On The Way',\n  description: \"Learn about On The Way's mission, values, and team\",\n};\n\nexport const dynamic = 'force-dynamic';\n\nexport default function AboutPage() {\n  return (\n    <div className=\"container mx-auto py-10\">\n      <div className=\"flex flex-col space-y-12\">\n        {/* Hero Section */}\n        <div className=\"text-center space-y-4\">\n          <h1 className=\"text-4xl font-bold tracking-tight md:text-5xl\">\n            About On The Way\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            We're on a mission to make delivery services more accessible,\n            reliable, and community-focused.\n          </p>\n        </div>\n\n        {/* Mission Section */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 items-center\">\n          <div className=\"space-y-4\">\n            <h2 className=\"text-3xl font-bold\">Our Mission</h2>\n            <p className=\"text-lg text-muted-foreground\">\n              At On The Way, we believe everyone deserves access to reliable\n              delivery services, regardless of where they live. We&apos;re a\n              team of passionate individuals dedicated to bringing you the best\n              products and services. Our mission is to provide a seamless and\n              enjoyable experience for all our customers, ensuring you find\n              exactly what you&apos;re looking for.\n            </p>\n            <p className=\"text-lg text-muted-foreground\">\n              {/* Terms Page Link */}\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/admin/page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterOrders'. Either include it or remove the dependency array.","line":68,"column":6,"nodeType":"ArrayExpression","endLine":68,"endColumn":52,"suggestions":[{"desc":"Update the dependencies array to be: [filterOrders, orders, searchTerm, statusFilter, typeFilter]","fix":{"range":[2096,2142],"text":"[filterOrders, orders, searchTerm, statusFilter, typeFilter]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":133,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4246,4249],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4246,4249],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":157,"column":49,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[4897,4943],"text":"You don&apos;t have permission to access this page."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[4897,4943],"text":"You don&lsquo;t have permission to access this page."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[4897,4943],"text":"You don&#39;t have permission to access this page."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[4897,4943],"text":"You don&rsquo;t have permission to access this page."},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { useRouter } from 'next/navigation';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../components/ui/card';\nimport { Button } from '../../components/ui/button';\nimport { Badge } from '../../components/ui/badge';\nimport { Input } from '../../components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../../components/ui/select';\nimport { Clock, MapPin, User, Package, DollarSign, Search, Filter, RefreshCw } from 'lucide-react';\nimport Link from 'next/link';\n\ninterface Order {\n  id: string;\n  orderId: string;\n  customerName: string;\n  customerPhone: string;\n  customerEmail: string;\n  orderType: 'food' | 'grocery' | 'package' | 'ride';\n  status: 'pending' | 'confirmed' | 'preparing' | 'out_for_delivery' | 'delivered' | 'cancelled';\n  items: string[];\n  total: number;\n  address: string;\n  estimatedDeliveryTime: string;\n  createdAt: string;\n  assignedDriver?: string;\n  specialInstructions?: string;\n}\n\nconst ADMIN_EMAILS = [\n  'admin@otw.com',\n  'manager@otw.com',\n  'supervisor@otw.com',\n];\n\nexport default function AdminDashboard() {\n  const { user, isLoading } = useAuth();\n  const router = useRouter();\n  const [orders, setOrders] = useState<Order[]>([]);\n  const [filteredOrders, setFilteredOrders] = useState<Order[]>([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [typeFilter, setTypeFilter] = useState('all');\n  const [isLoadingOrders, setIsLoadingOrders] = useState(true);\n\n  // Check if user is admin\n  const isAdmin = user && ADMIN_EMAILS.includes(user.email || '');\n\n  useEffect(() => {\n    if (!isLoading && !user) {\n      router.push('/signin?redirect=/admin');\n      return;\n    }\n\n    if (!isLoading && user && !isAdmin) {\n      router.push('/');\n      return;\n    }\n\n    if (isAdmin) {\n      fetchOrders();\n    }\n  }, [user, isLoading, isAdmin, router]);\n\n  useEffect(() => {\n    filterOrders();\n  }, [orders, searchTerm, statusFilter, typeFilter]);\n\n  const fetchOrders = async () => {\n    try {\n      setIsLoadingOrders(true);\n      // TODO: Replace with actual API call to fetch orders from backend\n      // const response = await fetch('/api/orders');\n      // const orders = await response.json();\n      // setOrders(orders);\n\n      // For now, set empty array until backend is implemented\n      setOrders([]);\n    } catch (error) {\n      console.error('Error fetching orders:', error);\n    } finally {\n      setIsLoadingOrders(false);\n    }\n  };\n\n  const filterOrders = () => {\n    let filtered = orders.filter(order => order.status !== 'delivered' && order.status !== 'cancelled');\n\n    if (searchTerm) {\n      filtered = filtered.filter(order =>\n        order.orderId.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        order.customerName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        order.customerEmail.toLowerCase().includes(searchTerm.toLowerCase()),\n      );\n    }\n\n    if (statusFilter !== 'all') {\n      filtered = filtered.filter(order => order.status === statusFilter);\n    }\n\n    if (typeFilter !== 'all') {\n      filtered = filtered.filter(order => order.orderType === typeFilter);\n    }\n\n    setFilteredOrders(filtered);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending': return 'bg-yellow-500/20 text-yellow-400';\n      case 'confirmed': return 'bg-blue-500/20 text-blue-400';\n      case 'preparing': return 'bg-orange-500/20 text-orange-400';\n      case 'out_for_delivery': return 'bg-green-500/20 text-green-400';\n      default: return 'bg-gray-500/20 text-gray-400';\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'food': return '🍕';\n      case 'grocery': return '🛒';\n      case 'package': return '📦';\n      case 'ride': return '🚗';\n      default: return '📋';\n    }\n  };\n\n  const updateOrderStatus = async (orderId: string, newStatus: string) => {\n    try {\n      // Mock update - replace with actual API call\n      setOrders(prev => prev.map(order =>\n        order.id === orderId ? { ...order, status: newStatus as any } : order,\n      ));\n    } catch (error) {\n      console.error('Error updating order status:', error);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-black flex items-center justify-center\">\n        <div className=\"text-white text-xl\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null; // Will redirect to signin\n  }\n\n  if (!isAdmin) {\n    return (\n      <div className=\"min-h-screen bg-black flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-red-500 mb-4\">Access Denied</h1>\n          <p className=\"text-white mb-4\">You don't have permission to access this page.</p>\n          <Link href=\"/\" className=\"text-otw-gold hover:underline\">Go Home</Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-black text-white p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold text-otw-gold mb-2\">Admin Dashboard</h1>\n          <p className=\"text-gray-300\">Manage all active orders and deliveries</p>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"bg-gray-900 border-gray-800\">\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-400\">Total Active Orders</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-white\">{filteredOrders.length}</div>\n            </CardContent>\n          </Card>\n          <Card className=\"bg-gray-900 border-gray-800\">\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-400\">Pending Orders</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-yellow-400\">\n                {filteredOrders.filter(o => o.status === 'pending').length}\n              </div>\n            </CardContent>\n          </Card>\n          <Card className=\"bg-gray-900 border-gray-800\">\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-400\">Out for Delivery</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-400\">\n                {filteredOrders.filter(o => o.status === 'out_for_delivery').length}\n              </div>\n            </CardContent>\n          </Card>\n          <Card className=\"bg-gray-900 border-gray-800\">\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-400\">Total Revenue</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-otw-gold\">\n                ${filteredOrders.reduce((sum, order) => sum + order.total, 0).toFixed(2)}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters */}\n        <Card className=\"bg-gray-900 border-gray-800 mb-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Filter className=\"w-5 h-5\" />\n              Filters\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 w-4 h-4 text-gray-400\" />\n                <Input\n                  placeholder=\"Search orders...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10 bg-gray-800 border-gray-700\"\n                />\n              </div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"bg-gray-800 border-gray-700\">\n                  <SelectValue placeholder=\"Filter by status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Statuses</SelectItem>\n                  <SelectItem value=\"pending\">Pending</SelectItem>\n                  <SelectItem value=\"confirmed\">Confirmed</SelectItem>\n                  <SelectItem value=\"preparing\">Preparing</SelectItem>\n                  <SelectItem value=\"out_for_delivery\">Out for Delivery</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select value={typeFilter} onValueChange={setTypeFilter}>\n                <SelectTrigger className=\"bg-gray-800 border-gray-700\">\n                  <SelectValue placeholder=\"Filter by type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Types</SelectItem>\n                  <SelectItem value=\"food\">Food Delivery</SelectItem>\n                  <SelectItem value=\"grocery\">Grocery</SelectItem>\n                  <SelectItem value=\"package\">Package</SelectItem>\n                  <SelectItem value=\"ride\">Ride</SelectItem>\n                </SelectContent>\n              </Select>\n              <Button onClick={fetchOrders} variant=\"outline\" className=\"border-gray-700\">\n                <RefreshCw className=\"w-4 h-4 mr-2\" />\n                Refresh\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Orders List */}\n        <div className=\"space-y-4\">\n          {isLoadingOrders ? (\n            <div className=\"text-center py-8\">\n              <div className=\"text-gray-400\">Loading orders...</div>\n            </div>\n          ) : filteredOrders.length === 0 ? (\n            <Card className=\"bg-gray-900 border-gray-800\">\n              <CardContent className=\"text-center py-8\">\n                <div className=\"text-gray-400\">No active orders found</div>\n              </CardContent>\n            </Card>\n          ) : (\n            filteredOrders.map((order) => (\n              <Card key={order.id} className=\"bg-gray-900 border-gray-800\">\n                <CardHeader>\n                  <div className=\"flex justify-between items-start\">\n                    <div>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <span className=\"text-2xl\">{getTypeIcon(order.orderType)}</span>\n                        {order.orderId}\n                      </CardTitle>\n                      <CardDescription className=\"text-gray-400\">\n                        {new Date(order.createdAt).toLocaleString()}\n                      </CardDescription>\n                    </div>\n                    <Badge className={getStatusColor(order.status)}>\n                      {order.status.replace('_', ' ').toUpperCase()}\n                    </Badge>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    <div>\n                      <h4 className=\"font-semibold text-white mb-2 flex items-center gap-2\">\n                        <User className=\"w-4 h-4\" />\n                        Customer\n                      </h4>\n                      <p className=\"text-gray-300\">{order.customerName}</p>\n                      <p className=\"text-gray-400 text-sm\">{order.customerPhone}</p>\n                      <p className=\"text-gray-400 text-sm\">{order.customerEmail}</p>\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold text-white mb-2 flex items-center gap-2\">\n                        <MapPin className=\"w-4 h-4\" />\n                        Delivery Address\n                      </h4>\n                      <p className=\"text-gray-300\">{order.address}</p>\n                      <p className=\"text-gray-400 text-sm flex items-center gap-1\">\n                        <Clock className=\"w-3 h-3\" />\n                        ETA: {order.estimatedDeliveryTime}\n                      </p>\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold text-white mb-2 flex items-center gap-2\">\n                        <Package className=\"w-4 h-4\" />\n                        Order Details\n                      </h4>\n                      <div className=\"text-gray-300 text-sm space-y-1\">\n                        {order.items.map((item, index) => (\n                          <div key={index}>{item}</div>\n                        ))}\n                      </div>\n                      <p className=\"text-otw-gold font-semibold mt-2 flex items-center gap-1\">\n                        <DollarSign className=\"w-4 h-4\" />\n                        ${order.total.toFixed(2)}\n                      </p>\n                    </div>\n                  </div>\n\n                  {order.assignedDriver && (\n                    <div className=\"mt-4 p-3 bg-gray-800 rounded-lg\">\n                      <p className=\"text-gray-300\">\n                        <strong>Assigned Driver:</strong> {order.assignedDriver}\n                      </p>\n                    </div>\n                  )}\n\n                  {order.specialInstructions && (\n                    <div className=\"mt-4 p-3 bg-gray-800 rounded-lg\">\n                      <p className=\"text-gray-300\">\n                        <strong>Special Instructions:</strong> {order.specialInstructions}\n                      </p>\n                    </div>\n                  )}\n\n                  <div className=\"mt-4 flex gap-2\">\n                    {order.status === 'pending' && (\n                      <Button\n                        onClick={() => updateOrderStatus(order.id, 'confirmed')}\n                        className=\"bg-blue-600 hover:bg-blue-700\"\n                      >\n                        Confirm Order\n                      </Button>\n                    )}\n                    {order.status === 'confirmed' && (\n                      <Button\n                        onClick={() => updateOrderStatus(order.id, 'preparing')}\n                        className=\"bg-orange-600 hover:bg-orange-700\"\n                      >\n                        Start Preparing\n                      </Button>\n                    )}\n                    {order.status === 'preparing' && (\n                      <Button\n                        onClick={() => updateOrderStatus(order.id, 'out_for_delivery')}\n                        className=\"bg-green-600 hover:bg-green-700\"\n                      >\n                        Out for Delivery\n                      </Button>\n                    )}\n                    {order.status === 'out_for_delivery' && (\n                      <Button\n                        onClick={() => updateOrderStatus(order.id, 'delivered')}\n                        className=\"bg-otw-gold hover:bg-yellow-600 text-black\"\n                      >\n                        Mark as Delivered\n                      </Button>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/admin/screenshot-orders/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardDescription' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardHeader' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":56},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardTitle' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":58,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":67},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchOrders'. Either include it or remove the dependency array.","line":140,"column":6,"nodeType":"ArrayExpression","endLine":140,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: [fetchOrders, statusFilter]","fix":{"range":[4388,4402],"text":"[fetchOrders, statusFilter]"}}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nexport const dynamic = 'force-dynamic';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../../components/ui/card';\nimport { Button } from '../../../components/ui/button';\nimport { Badge } from '../../../components/ui/badge';\nimport { Input } from '../../../components/ui/input';\nimport { Textarea } from '../../../components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../../../components/ui/select';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '../../../components/ui/alert-dialog';\nimport { Label } from '../../../components/ui/label';\nimport { Camera, Phone, Mail, MapPin, DollarSign, Clock, User, FileText, RefreshCw } from 'lucide-react';\nimport Image from 'next/image';\n\ninterface ScreenshotOrder {\n  id: string;\n  orderId: string;\n  status: string;\n  customerInfo: {\n    name: string;\n    phone: string;\n    email: string;\n  };\n  restaurantInfo: {\n    name: string;\n    pickupLocation: string;\n  };\n  orderDetails: {\n    estimatedTotal: string;\n    specialInstructions: string;\n    screenshotUrl: string;\n    originalFileName: string;\n  };\n  timestamps: {\n    created: string;\n    updated: string;\n  };\n  workflow: {\n    reviewRequired: boolean;\n    confirmationCalled: boolean;\n    orderPlaced: boolean;\n    pickedUp: boolean;\n    delivered: boolean;\n  };\n  adminNotes?: string;\n  lastUpdatedBy?: string;\n}\n\nconst statusColors = {\n  pending_review: 'bg-yellow-100 text-yellow-800',\n  confirmed: 'bg-blue-100 text-blue-800',\n  order_placed: 'bg-purple-100 text-purple-800',\n  picked_up: 'bg-orange-100 text-orange-800',\n  out_for_delivery: 'bg-indigo-100 text-indigo-800',\n  delivered: 'bg-green-100 text-green-800',\n  cancelled: 'bg-red-100 text-red-800',\n  failed: 'bg-gray-100 text-gray-800',\n};\n\nconst statusOptions = [\n  { value: 'pending_review', label: 'Pending Review' },\n  { value: 'confirmed', label: 'Confirmed' },\n  { value: 'order_placed', label: 'Order Placed' },\n  { value: 'picked_up', label: 'Picked Up' },\n  { value: 'out_for_delivery', label: 'Out for Delivery' },\n  { value: 'delivered', label: 'Delivered' },\n  { value: 'cancelled', label: 'Cancelled' },\n  { value: 'failed', label: 'Failed' },\n];\n\nexport default function ScreenshotOrdersAdmin() {\n  const [orders, setOrders] = useState<ScreenshotOrder[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedOrder, setSelectedOrder] = useState<ScreenshotOrder | null>(null);\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [updateStatus, setUpdateStatus] = useState('');\n  const [updateNotes, setUpdateNotes] = useState('');\n  const [updating, setUpdating] = useState(false);\n\n  const fetchOrders = async () => {\n    try {\n      setLoading(true);\n      const params = new URLSearchParams();\n      if (statusFilter !== 'all') {\n        params.append('status', statusFilter);\n      }\n      params.append('limit', '100');\n\n      const response = await fetch(`/api/orders/screenshot?${params}`);\n      const data = await response.json();\n\n      if (data.orders) {\n        setOrders(data.orders);\n      }\n    } catch (error) {\n      console.error('Error fetching orders:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateOrderStatus = async () => {\n    if (!selectedOrder || !updateStatus) {return;}\n\n    try {\n      setUpdating(true);\n      const response = await fetch('/api/orders/screenshot', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          orderId: selectedOrder.id,\n          status: updateStatus,\n          notes: updateNotes,\n          adminId: 'admin', // In a real app, this would be the logged-in admin's ID\n        }),\n      });\n\n      if (response.ok) {\n        // Refresh orders\n        await fetchOrders();\n        // Reset form\n        setUpdateStatus('');\n        setUpdateNotes('');\n        setSelectedOrder(null);\n      }\n    } catch (error) {\n      console.error('Error updating order:', error);\n    } finally {\n      setUpdating(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchOrders();\n  }, [statusFilter]);\n\n  const filteredOrders = orders.filter(order => {\n    if (searchTerm) {\n      const searchLower = searchTerm.toLowerCase();\n      return (\n        order.orderId.toLowerCase().includes(searchLower) ||\n        order.customerInfo.name.toLowerCase().includes(searchLower) ||\n        order.customerInfo.phone.includes(searchTerm) ||\n        order.restaurantInfo.name.toLowerCase().includes(searchLower)\n      );\n    }\n    return true;\n  });\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleString();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"container mx-auto px-4 max-w-7xl\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Screenshot Orders</h1>\n            <p className=\"text-gray-600 mt-2\">Manage customer screenshot orders</p>\n          </div>\n          <Button onClick={fetchOrders} disabled={loading}>\n            <RefreshCw className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`} />\n            Refresh\n          </Button>\n        </div>\n\n        {/* Filters */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <div className=\"flex-1\">\n                <Label htmlFor=\"search\">Search Orders</Label>\n                <Input\n                  id=\"search\"\n                  placeholder=\"Search by order ID, customer name, phone, or restaurant...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                />\n              </div>\n              <div className=\"w-full sm:w-48\">\n                <Label htmlFor=\"status-filter\">Filter by Status</Label>\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"All statuses\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Statuses</SelectItem>\n                    {statusOptions.map((option) => (\n                      <SelectItem key={option.value} value={option.value}>\n                        {option.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Orders List */}\n        {loading ? (\n          <div className=\"flex items-center justify-center py-12\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n          </div>\n        ) : (\n          <div className=\"grid gap-6\">\n            {filteredOrders.length === 0 ? (\n              <Card>\n                <CardContent className=\"pt-6 text-center py-12\">\n                  <Camera className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-500\">No orders found</p>\n                </CardContent>\n              </Card>\n            ) : (\n              filteredOrders.map((order) => (\n                <Card key={order.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardContent className=\"pt-6\">\n                    <div className=\"flex flex-col lg:flex-row gap-6\">\n                      {/* Order Info */}\n                      <div className=\"flex-1 space-y-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <h3 className=\"text-lg font-semibold\">{order.orderId}</h3>\n                            <p className=\"text-sm text-gray-500\">\n                              Created: {formatDate(order.timestamps.created)}\n                            </p>\n                          </div>\n                          <Badge className={statusColors[order.status as keyof typeof statusColors]}>\n                            {statusOptions.find(s => s.value === order.status)?.label || order.status}\n                          </Badge>\n                        </div>\n\n                        <div className=\"grid md:grid-cols-2 gap-4\">\n                          <div className=\"space-y-2\">\n                            <div className=\"flex items-center gap-2\">\n                              <User className=\"h-4 w-4 text-gray-400\" />\n                              <span className=\"font-medium\">{order.customerInfo.name}</span>\n                            </div>\n                            <div className=\"flex items-center gap-2\">\n                              <Phone className=\"h-4 w-4 text-gray-400\" />\n                              <span className=\"text-sm\">{order.customerInfo.phone}</span>\n                            </div>\n                            <div className=\"flex items-center gap-2\">\n                              <Mail className=\"h-4 w-4 text-gray-400\" />\n                              <span className=\"text-sm\">{order.customerInfo.email}</span>\n                            </div>\n                          </div>\n                          <div className=\"space-y-2\">\n                            <div className=\"flex items-center gap-2\">\n                              <MapPin className=\"h-4 w-4 text-gray-400\" />\n                              <span className=\"font-medium\">{order.restaurantInfo.name}</span>\n                            </div>\n                            <div className=\"flex items-center gap-2\">\n                              <MapPin className=\"h-4 w-4 text-gray-400\" />\n                              <span className=\"text-sm\">{order.restaurantInfo.pickupLocation}</span>\n                            </div>\n                            <div className=\"flex items-center gap-2\">\n                              <DollarSign className=\"h-4 w-4 text-gray-400\" />\n                              <span className=\"text-sm font-medium\">{order.orderDetails.estimatedTotal}</span>\n                            </div>\n                          </div>\n                        </div>\n\n                        {order.orderDetails.specialInstructions && (\n                          <div className=\"bg-gray-50 p-3 rounded-lg\">\n                            <div className=\"flex items-center gap-2 mb-1\">\n                              <FileText className=\"h-4 w-4 text-gray-400\" />\n                              <span className=\"text-sm font-medium\">Special Instructions:</span>\n                            </div>\n                            <p className=\"text-sm text-gray-600\">{order.orderDetails.specialInstructions}</p>\n                          </div>\n                        )}\n                      </div>\n\n                      {/* Screenshot Preview */}\n                      <div className=\"lg:w-64\">\n                        <div className=\"bg-gray-100 rounded-lg p-4 h-full\">\n                          <h4 className=\"text-sm font-medium mb-2\">Order Screenshot</h4>\n                          <div className=\"relative aspect-square bg-white rounded border\">\n                            <Image\n                              src={order.orderDetails.screenshotUrl}\n                              alt=\"Order screenshot\"\n                              fill\n                              className=\"object-contain rounded\"\n                            />\n                          </div>\n                          <p className=\"text-xs text-gray-500 mt-2 truncate\">\n                            {order.orderDetails.originalFileName}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Action Buttons */}\n                    <div className=\"flex justify-between items-center mt-6 pt-4 border-t\">\n                      <div className=\"flex gap-2\">\n                        {/* Workflow indicators */}\n                        {order.workflow.confirmationCalled && (\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            <Phone className=\"h-3 w-3 mr-1\" />\n                            Called\n                          </Badge>\n                        )}\n                        {order.workflow.orderPlaced && (\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            <Clock className=\"h-3 w-3 mr-1\" />\n                            Placed\n                          </Badge>\n                        )}\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Button variant=\"outline\" size=\"sm\">\n                          View Details\n                        </Button>\n                        <AlertDialog>\n                          <AlertDialogTrigger\n                            className=\"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-9 px-3\"\n                            onClick={() => {\n                              setSelectedOrder(order);\n                              setUpdateStatus(order.status);\n                              setUpdateNotes(order.adminNotes || '');\n                            }}\n                          >\n                            Update Status\n                          </AlertDialogTrigger>\n                          <AlertDialogContent>\n                            <AlertDialogHeader>\n                              <AlertDialogTitle>Update Order Status</AlertDialogTitle>\n                              <AlertDialogDescription>\n                                Update the status and add notes for order {order.orderId}\n                              </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <div className=\"space-y-4\">\n                              <div>\n                                <Label htmlFor=\"status\">Status</Label>\n                                <Select value={updateStatus} onValueChange={setUpdateStatus}>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select status\" />\n                                  </SelectTrigger>\n                                  <SelectContent>\n                                    {statusOptions.map((option) => (\n                                      <SelectItem key={option.value} value={option.value}>\n                                        {option.label}\n                                      </SelectItem>\n                                    ))}\n                                  </SelectContent>\n                                </Select>\n                              </div>\n                              <div>\n                                <Label htmlFor=\"notes\">Admin Notes</Label>\n                                <Textarea\n                                  id=\"notes\"\n                                  placeholder=\"Add notes about this order...\"\n                                  value={updateNotes}\n                                  onChange={(e) => setUpdateNotes(e.target.value)}\n                                />\n                              </div>\n                              <AlertDialogFooter>\n                                <AlertDialogCancel\n                                  onClick={() => setSelectedOrder(null)}\n                                >\n                                  Cancel\n                                </AlertDialogCancel>\n                                <AlertDialogAction\n                                  onClick={updateOrderStatus}\n                                  disabled={updating || !updateStatus}\n                                >\n                                  {updating ? 'Updating...' : 'Update'}\n                                </AlertDialogAction>\n                              </AlertDialogFooter>\n                            </div>\n                          </AlertDialogContent>\n                        </AlertDialog>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => window.open(`tel:${order.customerInfo.phone}`)}\n                        >\n                          <Phone className=\"h-4 w-4 mr-1\" />\n                          Call\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/api/admin/menu/[id]/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'req' is defined but never used. Allowed unused args must match /^_/u.","line":5,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'req' is defined but never used. Allowed unused args must match /^_/u.","line":11,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'req' is defined but never used. Allowed unused args must match /^_/u.","line":17,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'req' is defined but never used. Allowed unused args must match /^_/u.","line":23,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":33}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\n\nexport const dynamic = 'force-dynamic';\n\nexport async function GET(req: NextRequest) {\n  return NextResponse.json({\n    error: 'This feature is currently being set up. Please check back soon!',\n  }, { status: 503 });\n}\n\nexport async function POST(req: NextRequest) {\n  return NextResponse.json({\n    error: 'This feature is currently being set up. Please check back soon!',\n  }, { status: 503 });\n}\n\nexport async function PUT(req: NextRequest) {\n  return NextResponse.json({\n    error: 'This feature is currently being set up. Please check back soon!',\n  }, { status: 503 });\n}\n\nexport async function DELETE(req: NextRequest) {\n  return NextResponse.json({\n    error: 'This feature is currently being set up. Please check back soon!',\n  }, { status: 503 });\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/api/admin/menu/bulk/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AuthUser' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":11},{"ruleId":"no-unreachable","severity":2,"message":"Unreachable code.","line":58,"column":5,"nodeType":"VariableDeclaration","messageId":"unreachableCode","endLine":170,"endColumn":6},{"ruleId":"no-unreachable","severity":2,"message":"Unreachable code.","line":117,"column":7,"nodeType":"VariableDeclaration","messageId":"unreachableCode","endLine":169,"endColumn":8},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":136,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4219,4222],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4219,4222],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unreachable","severity":2,"message":"Unreachable code.","line":173,"column":5,"nodeType":"IfStatement","messageId":"unreachableCode","endLine":187,"endColumn":8}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\n// import { firestore } from \"../../../../../lib/firebaseAdmin\";\n// import { auth } from \"../../../../../lib/firebaseAdmin\";\nimport { menuItemSchema } from '../../../../../lib/firestoreModels';\nimport { handleAPIError, apiErrors } from '../../../../../lib/utils/apiErrors';\nimport { z } from 'zod';\nimport {\n  AuthUser,\n  BulkOperationResult,\n  VerifiedItem,\n} from '../../../../../lib/types/firebase';\n\nexport const dynamic = 'force-dynamic';\n\n// Bulk operation schema\nconst bulkOperationSchema = z.object({\n  operation: z.enum(['update', 'delete']),\n  items: z\n    .array(\n      z.object({\n        id: z.string().min(1),\n        data: z.object({}).optional(), // For updates only\n      }),\n    )\n    .min(1)\n    .max(1000),\n});\n\n// async function isAdmin(userId: string) {\n//   const userSnap = await firestore.collection(\"users\").doc(userId).get();\n//   const userData = userSnap.data();\n//   return userSnap.exists && userData ? userData.role === \"admin\" : false;\n// }\n\nexport async function POST(req: NextRequest) {\n  try {\n    // Temporarily disabled admin functionality\n    return NextResponse.json({\n      error: 'Admin functionality is currently being set up. Please check back soon!',\n    }, { status: 503 });\n\n    // const authHeader = req.headers.get(\"authorization\");\n    // if (!authHeader?.startsWith(\"Bearer \")) {\n    //   throw apiErrors.unauthorized();\n    // }\n\n    // const idToken = authHeader.split(\" \")[1];\n    // if (!idToken) {\n    //   throw apiErrors.unauthorized(\"Invalid authentication token\");\n    // }\n    // const decoded = (await auth.verifyIdToken(idToken)) as AuthUser;\n    // const userId = decoded.uid;\n\n    // if (!(await isAdmin(userId))) {\n    //   throw apiErrors.forbidden(\"Only admins can perform bulk operations\");\n    // }\n\n    const data = await req.json();\n    const { operation, items } = bulkOperationSchema.parse(data);\n\n    // Validate update data if operation is update\n    if (operation === 'update') {\n      const invalidItems = items.filter((item) => !item.data);\n      if (invalidItems.length > 0) {\n        throw apiErrors.badRequest(\n          'Data field is required for update operations',\n          { invalidItems: invalidItems.map((item) => item.id) },\n        );\n      }\n    }\n\n    const results: BulkOperationResult = {\n      success: [],\n      failed: [],\n    };\n\n    // Process items in batches of 500 (Firestore limit)\n    for (let i = 0; i < items.length; i += 500) {\n      const batch = firestore.batch();\n      const batchItems = items.slice(i, i + 500);\n\n      // First, verify all documents exist and validate update data\n      const verificationPromises = batchItems.map(async (item) => {\n        try {\n          const docRef = firestore.collection('menuItems').doc(item.id);\n          const docSnap = await docRef.get();\n\n          if (!docSnap.exists) {\n            throw apiErrors.notFound(`Menu item ${item.id} not found`);\n          }\n\n          if (operation === 'update' && item.data) {\n            // Validate update data\n            const validatedData = menuItemSchema.partial().parse(item.data);\n            return {\n              docRef,\n              docSnap,\n              validatedData,\n              id: item.id,\n            };\n          }\n\n          return {\n            docRef,\n            docSnap,\n            id: item.id,\n          };\n        } catch {\n          results.failed.push({\n            id: item.id,\n            error: 'Unknown error',\n          });\n          return null;\n        }\n      });\n\n      const verifiedItems = (await Promise.all(verificationPromises)).filter(\n        Boolean,\n      ) as VerifiedItem[];\n\n      // Apply batch operations for verified items\n      for (const item of verifiedItems) {\n        if (!item) {continue;}\n\n        try {\n          if (operation === 'delete') {\n            batch.delete(item.docRef);\n          } else if (operation === 'update' && 'validatedData' in item) {\n            batch.update(item.docRef, {\n              ...item.validatedData,\n              updatedAt: new Date(),\n              // updatedBy: userId,\n            });\n          }\n          if ('validatedData' in item) {\n            const successItem: any = { id: item.id };\n            if (item.validatedData) {\n              successItem.data = item.validatedData;\n            }\n            results.success.push(successItem);\n          } else {\n            results.success.push({\n              id: item.id,\n            });\n          }\n        } catch {\n          results.failed.push({\n            id: item.id,\n            error: 'Unknown error',\n          });\n        }\n      }\n\n      // Commit the batch if there are any operations\n      if (verifiedItems.length > 0) {\n        try {\n          await batch.commit();\n        } catch {\n          // Move all items in this batch to failed\n          verifiedItems.forEach((item: VerifiedItem) => {\n            if (!item) {return;}\n            results.success = results.success.filter((s) => s.id !== item.id);\n            results.failed.push({\n              id: item.id,\n              error: 'Batch commit failed',\n            });\n          });\n        }\n      }\n    }\n\n    // If all operations failed, return an error\n    if (results.success.length === 0 && results.failed.length > 0) {\n      throw apiErrors.badRequest('All operations failed', {\n        failed: results.failed,\n      });\n    }\n\n    return NextResponse.json({\n      message: `Bulk ${operation} completed`,\n      results: {\n        successCount: results.success.length,\n        failureCount: results.failed.length,\n        successful: results.success,\n        failed: results.failed,\n      },\n    });\n  } catch (err: unknown) {\n    return handleAPIError(err);\n  }\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/api/admin/menu/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getAuth' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":60,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":17}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { db } from '../../../../lib/firebase';\nimport { collection, doc, getDocs, getDoc, addDoc, updateDoc, deleteDoc, query, orderBy } from 'firebase/firestore';\nimport { getAuth } from 'firebase-admin/auth';\n\nexport const dynamic = 'force-dynamic';\n\ninterface MenuItem {\n  id?: string;\n  name: string;\n  description: string;\n  price: number;\n  category: string;\n  image?: string;\n  available: boolean;\n  ingredients?: string[];\n  allergens?: string[];\n  nutritionalInfo?: {\n    calories?: number;\n    protein?: number;\n    carbs?: number;\n    fat?: number;\n  };\n  preparationTime?: number;\n  spicyLevel?: number;\n  isVegetarian?: boolean;\n  isVegan?: boolean;\n  isGlutenFree?: boolean;\n  createdAt?: string;\n  updatedAt?: string;\n}\n\n// Verify admin access\nasync function verifyAdminAccess(request: NextRequest) {\n  const authHeader = request.headers.get('authorization');\n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    throw new Error('Authentication required');\n  }\n\n  const token = authHeader.split(' ')[1];\n\n  try {\n    const { getAuth } = await import('firebase-admin/auth');\n    const decodedToken = await getAuth().verifyIdToken(token);\n\n    // Check if user has admin role\n    const userRef = doc(db, 'users', decodedToken.uid);\n    const userDoc = await getDoc(userRef);\n\n    if (!userDoc.exists()) {\n      throw new Error('User not found');\n    }\n\n    const userData = userDoc.data();\n    if (userData.role !== 'admin' && userData.role !== 'super_admin') {\n      throw new Error('Admin access required');\n    }\n\n    return decodedToken.uid;\n  } catch (error) {\n    throw new Error('Invalid authentication token');\n  }\n}\n\n// GET - Retrieve all menu items\nexport async function GET(req: NextRequest) {\n  try {\n    await verifyAdminAccess(req);\n\n    const menuCollection = collection(db, 'menu_items');\n    const q = query(menuCollection, orderBy('category'), orderBy('name'));\n    const querySnapshot = await getDocs(q);\n\n    const menuItems: MenuItem[] = [];\n    querySnapshot.forEach((doc) => {\n      menuItems.push({\n        id: doc.id,\n        ...doc.data(),\n      } as MenuItem);\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: menuItems,\n      count: menuItems.length,\n    });\n\n  } catch (error) {\n    console.error('Admin menu GET error:', error);\n\n    if (error instanceof Error) {\n      if (error.message.includes('Authentication') || error.message.includes('Admin access')) {\n        return NextResponse.json(\n          { error: error.message },\n          { status: 401 },\n        );\n      }\n    }\n\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 },\n    );\n  }\n}\n\n// POST - Create new menu item\nexport async function POST(req: NextRequest) {\n  try {\n    await verifyAdminAccess(req);\n\n    const menuItem: MenuItem = await req.json();\n\n    // Validate required fields\n    if (!menuItem.name || !menuItem.description || !menuItem.price || !menuItem.category) {\n      return NextResponse.json(\n        { error: 'Missing required fields: name, description, price, category' },\n        { status: 400 },\n      );\n    }\n\n    // Add timestamps\n    const now = new Date().toISOString();\n    const newMenuItem = {\n      ...menuItem,\n      available: menuItem.available ?? true,\n      createdAt: now,\n      updatedAt: now,\n    };\n\n    const docRef = await addDoc(collection(db, 'menu_items'), newMenuItem);\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        id: docRef.id,\n        ...newMenuItem,\n      },\n      message: 'Menu item created successfully',\n    });\n\n  } catch (error) {\n    console.error('Admin menu POST error:', error);\n\n    if (error instanceof Error) {\n      if (error.message.includes('Authentication') || error.message.includes('Admin access')) {\n        return NextResponse.json(\n          { error: error.message },\n          { status: 401 },\n        );\n      }\n    }\n\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 },\n    );\n  }\n}\n\n// PUT - Update existing menu item\nexport async function PUT(req: NextRequest) {\n  try {\n    await verifyAdminAccess(req);\n\n    const { searchParams } = new URL(req.url);\n    const itemId = searchParams.get('id');\n\n    if (!itemId) {\n      return NextResponse.json(\n        { error: 'Menu item ID required' },\n        { status: 400 },\n      );\n    }\n\n    const updates: Partial<MenuItem> = await req.json();\n\n    // Check if item exists\n    const itemRef = doc(db, 'menu_items', itemId);\n    const itemDoc = await getDoc(itemRef);\n\n    if (!itemDoc.exists()) {\n      return NextResponse.json(\n        { error: 'Menu item not found' },\n        { status: 404 },\n      );\n    }\n\n    // Add update timestamp\n    const updatedData = {\n      ...updates,\n      updatedAt: new Date().toISOString(),\n    };\n\n    await updateDoc(itemRef, updatedData);\n\n    // Get updated document\n    const updatedDoc = await getDoc(itemRef);\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        id: updatedDoc.id,\n        ...updatedDoc.data(),\n      },\n      message: 'Menu item updated successfully',\n    });\n\n  } catch (error) {\n    console.error('Admin menu PUT error:', error);\n\n    if (error instanceof Error) {\n      if (error.message.includes('Authentication') || error.message.includes('Admin access')) {\n        return NextResponse.json(\n          { error: error.message },\n          { status: 401 },\n        );\n      }\n    }\n\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 },\n    );\n  }\n}\n\n// DELETE - Remove menu item\nexport async function DELETE(req: NextRequest) {\n  try {\n    await verifyAdminAccess(req);\n\n    const { searchParams } = new URL(req.url);\n    const itemId = searchParams.get('id');\n\n    if (!itemId) {\n      return NextResponse.json(\n        { error: 'Menu item ID required' },\n        { status: 400 },\n      );\n    }\n\n    // Check if item exists\n    const itemRef = doc(db, 'menu_items', itemId);\n    const itemDoc = await getDoc(itemRef);\n\n    if (!itemDoc.exists()) {\n      return NextResponse.json(\n        { error: 'Menu item not found' },\n        { status: 404 },\n      );\n    }\n\n    await deleteDoc(itemRef);\n\n    return NextResponse.json({\n      success: true,\n      message: 'Menu item deleted successfully',\n    });\n\n  } catch (error) {\n    console.error('Admin menu DELETE error:', error);\n\n    if (error.message.includes('Authentication') || error.message.includes('Admin access')) {\n      return NextResponse.json(\n        { error: error.message },\n        { status: 401 },\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 },\n    );\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/api/admin/menu/search/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'req' is defined but never used. Allowed unused args must match /^_/u.","line":5,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'req' is defined but never used. Allowed unused args must match /^_/u.","line":11,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'req' is defined but never used. Allowed unused args must match /^_/u.","line":17,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'req' is defined but never used. Allowed unused args must match /^_/u.","line":23,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":33}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\n\nexport const dynamic = 'force-dynamic';\n\nexport async function GET(req: NextRequest) {\n  return NextResponse.json({\n    error: 'This feature is currently being set up. Please check back soon!',\n  }, { status: 503 });\n}\n\nexport async function POST(req: NextRequest) {\n  return NextResponse.json({\n    error: 'This feature is currently being set up. Please check back soon!',\n  }, { status: 503 });\n}\n\nexport async function PUT(req: NextRequest) {\n  return NextResponse.json({\n    error: 'This feature is currently being set up. Please check back soon!',\n  }, { status: 503 });\n}\n\nexport async function DELETE(req: NextRequest) {\n  return NextResponse.json({\n    error: 'This feature is currently being set up. Please check back soon!',\n  }, { status: 503 });\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/api/chat/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'NextRequest' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport OpenAI from 'openai';\n\ninterface ChatMessage {\n  role: string;\n  text: string;\n}\n\ninterface ChatRequest {\n  messages: ChatMessage[];\n  userId?: string;\n}\n\n// Initialize OpenAI client\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n});\n\n// System prompt for the OTW assistant\nconst SYSTEM_PROMPT = `You are an AI assistant for OTW (On The Way), a comprehensive delivery and service platform. You help customers with:\n\n1. Food delivery from Broski's Kitchen (luxury street gourmet cuisine)\n2. OTW Services (rides, package delivery, grocery shopping)\n3. Order tracking and support\n4. Account and membership questions\n5. General platform navigation\n\nKey information about OTW:\n- Broski's Kitchen specializes in luxury street food with items like gourmet burgers, truffle fries, and street tacos\n- OTW Services offers rides, package delivery, and grocery shopping\n- Users can track orders, manage profiles, and earn loyalty points\n- The platform serves the Fort Wayne, Indiana area\n- We have a membership program with bronze, silver, and gold tiers\n\nBe helpful, friendly, and provide accurate information about our services. If you don't know something specific, direct users to contact support.`;\n\nexport async function POST(request: Request) {\n  try {\n    // Check if OpenAI API key is configured\n    if (!process.env.OPENAI_API_KEY) {\n      return NextResponse.json(\n        { error: 'Chat service is not configured. Please contact support.' },\n        { status: 503 },\n      );\n    }\n\n    const data = await request.json();\n    const { messages } = data as ChatRequest;\n\n    if (!messages || !Array.isArray(messages)) {\n      return NextResponse.json(\n        { error: 'Invalid request format' },\n        { status: 400 },\n      );\n    }\n\n    // Validate message format\n    for (const message of messages) {\n      if (\n        typeof message !== 'object' ||\n        !message.role ||\n        typeof message.text !== 'string'\n      ) {\n        return NextResponse.json(\n          { error: 'Invalid message format' },\n          { status: 400 },\n        );\n      }\n    }\n\n    // Convert messages to OpenAI format\n    const openaiMessages = [\n      { role: 'system', content: SYSTEM_PROMPT },\n      ...messages.map(msg => ({\n        role: msg.role === 'user' ? 'user' : 'assistant',\n        content: msg.text,\n      })),\n    ];\n\n    // Generate response using OpenAI\n    const completion = await openai.chat.completions.create({\n      model: 'gpt-3.5-turbo',\n      messages: openaiMessages,\n      max_tokens: 500,\n      temperature: 0.7,\n    });\n\n    const responseText = completion.choices[0]?.message?.content || \"I'm sorry, I couldn't generate a response. Please try again.\";\n\n    return NextResponse.json({\n      message: {\n        role: 'assistant',\n        text: responseText,\n      },\n    });\n  } catch (error) {\n    console.error('Chat API error:', error);\n\n    // Handle specific OpenAI errors\n    if (error instanceof Error && error.message.includes('API key')) {\n      return NextResponse.json(\n        { error: 'Chat service configuration error. Please contact support.' },\n        { status: 503 },\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 },\n    );\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/api/checkout/session/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'req' is defined but never used. Allowed unused args must match /^_/u.","line":63,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'req' is defined but never used. Allowed unused args must match /^_/u.","line":69,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":69,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'req' is defined but never used. Allowed unused args must match /^_/u.","line":75,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":75,"endColumn":33}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport Stripe from 'stripe';\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n  apiVersion: '2024-06-20',\n});\n\nexport const dynamic = 'force-dynamic';\n\nexport async function GET(req: NextRequest) {\n  try {\n    const { searchParams } = new URL(req.url);\n    const sessionId = searchParams.get('session_id');\n\n    if (!sessionId) {\n      return NextResponse.json(\n        { error: 'Session ID is required' },\n        { status: 400 },\n      );\n    }\n\n    // Retrieve the checkout session from Stripe\n    const session = await stripe.checkout.sessions.retrieve(sessionId, {\n      expand: ['line_items', 'line_items.data.price.product'],\n    });\n\n    if (!session) {\n      return NextResponse.json(\n        { error: 'Session not found' },\n        { status: 404 },\n      );\n    }\n\n    // Format the response data\n    const orderDetails = {\n      id: session.id,\n      amount_total: session.amount_total,\n      customer_details: session.customer_details,\n      metadata: session.metadata,\n      line_items: {\n        data: session.line_items?.data?.map((item) => ({\n          description: item.description ||\n                      (item.price?.product as Stripe.Product)?.name ||\n                      'Unknown Item',\n          quantity: item.quantity || 1,\n          amount_total: item.amount_total || 0,\n        })) || [],\n      },\n      payment_status: session.payment_status,\n      status: session.status,\n    };\n\n    return NextResponse.json(orderDetails);\n  } catch (error) {\n    console.error('Error retrieving checkout session:', error);\n    return NextResponse.json(\n      { error: 'Failed to retrieve session details' },\n      { status: 500 },\n    );\n  }\n}\n\nexport async function POST(req: NextRequest) {\n  return NextResponse.json({\n    error: 'Method not allowed',\n  }, { status: 405 });\n}\n\nexport async function PUT(req: NextRequest) {\n  return NextResponse.json({\n    error: 'Method not allowed',\n  }, { status: 405 });\n}\n\nexport async function DELETE(req: NextRequest) {\n  return NextResponse.json({\n    error: 'Method not allowed',\n  }, { status: 405 });\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/api/create-checkout-session/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":31,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'req' is defined but never used. Allowed unused args must match /^_/u.","line":91,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":91,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'req' is defined but never used. Allowed unused args must match /^_/u.","line":97,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":97,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'req' is defined but never used. Allowed unused args must match /^_/u.","line":103,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":103,"endColumn":33}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { createCheckoutSession } from '../../../lib/stripe';\nimport { adminAuth } from '../../../lib/firebaseAdmin';\n\nexport const dynamic = 'force-dynamic';\n\nexport async function POST(req: NextRequest) {\n  try {\n    // Check if Firebase Admin is available\n    if (!adminAuth) {\n      return NextResponse.json(\n        { error: 'Firebase Admin not initialized' },\n        { status: 500 },\n      );\n    }\n\n    // Get the authorization header\n    const authHeader = req.headers.get('authorization');\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return NextResponse.json(\n        { error: 'Unauthorized - No valid token provided' },\n        { status: 401 },\n      );\n    }\n\n    // Verify the Firebase token\n    const token = authHeader.split('Bearer ')[1];\n    let decodedToken;\n    try {\n      decodedToken = await adminAuth.verifyIdToken(token);\n    } catch (error) {\n      return NextResponse.json(\n        { error: 'Unauthorized - Invalid token' },\n        { status: 401 },\n      );\n    }\n\n    const userId = decodedToken.uid;\n    const body = await req.json();\n    const { items, metadata = {} } = body;\n\n    // Validate items\n    if (!items || !Array.isArray(items) || items.length === 0) {\n      return NextResponse.json(\n        { error: 'Invalid items provided' },\n        { status: 400 },\n      );\n    }\n\n    // Validate each item\n    for (const item of items) {\n      if (!item.name || !item.price || !item.quantity) {\n        return NextResponse.json(\n          { error: 'Each item must have name, price, and quantity' },\n          { status: 400 },\n        );\n      }\n      if (item.price <= 0 || item.quantity <= 0) {\n        return NextResponse.json(\n          { error: 'Price and quantity must be positive numbers' },\n          { status: 400 },\n        );\n      }\n    }\n\n    // Create Stripe checkout session\n    const session = await createCheckoutSession({\n      userId,\n      items,\n      metadata: {\n        ...metadata,\n        userId,\n        userEmail: decodedToken.email || '',\n      },\n    });\n\n    return NextResponse.json({\n      sessionId: session.id,\n      url: session.url,\n    });\n\n  } catch (error) {\n    console.error('Error creating checkout session:', error);\n    return NextResponse.json(\n      { error: 'Failed to create checkout session' },\n      { status: 500 },\n    );\n  }\n}\n\nexport async function GET(req: NextRequest) {\n  return NextResponse.json({\n    error: 'Method not allowed',\n  }, { status: 405 });\n}\n\nexport async function PUT(req: NextRequest) {\n  return NextResponse.json({\n    error: 'Method not allowed',\n  }, { status: 405 });\n}\n\nexport async function DELETE(req: NextRequest) {\n  return NextResponse.json({\n    error: 'Method not allowed',\n  }, { status: 405 });\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/api/cron/sync-menu/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1814,1817],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1814,1817],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":90,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2475,2478],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2475,2478],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":459,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":459,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11687,11690],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11687,11690],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { db } from '../../../../lib/firebase';\nimport { collection, doc, getDocs, getDoc, addDoc, updateDoc, deleteDoc, query, where, orderBy, limit, writeBatch } from 'firebase/firestore';\n\nexport const dynamic = 'force-dynamic';\n\ninterface SyncConfig {\n  restaurantId: string;\n  source: 'documenu' | 'yelp' | 'zomato';\n  enabled: boolean;\n  lastSync?: string;\n  syncInterval: number; // hours\n  autoUpdate: boolean;\n}\n\ninterface SyncResult {\n  restaurantId: string;\n  source: string;\n  status: 'success' | 'error' | 'skipped';\n  itemsAdded: number;\n  itemsUpdated: number;\n  itemsRemoved: number;\n  error?: string;\n  timestamp: string;\n}\n\n// Verify cron authorization\nfunction verifyCronAuth(request: NextRequest) {\n  const authHeader = request.headers.get('authorization');\n  const cronSecret = process.env.CRON_SECRET;\n\n  if (!cronSecret) {\n    throw new Error('Cron secret not configured');\n  }\n\n  if (!authHeader || authHeader !== `Bearer ${cronSecret}`) {\n    throw new Error('Unauthorized cron request');\n  }\n}\n\n// GET - Get sync status and logs\nexport async function GET(req: NextRequest) {\n  try {\n    verifyCronAuth(req);\n\n    const { searchParams } = new URL(req.url);\n    const restaurantId = searchParams.get('restaurantId');\n    const limit_param = searchParams.get('limit');\n    const status = searchParams.get('status');\n\n    // Get sync configurations\n    const configQuery = collection(db, 'sync_configs');\n    const configConstraints = [];\n\n    if (restaurantId) {\n      configConstraints.push(where('restaurantId', '==', restaurantId));\n    }\n\n    configConstraints.push(where('enabled', '==', true));\n\n    const configQ = query(configQuery, ...configConstraints);\n    const configSnapshot = await getDocs(configQ);\n\n    const configs: any[] = [];\n    configSnapshot.forEach((doc) => {\n      configs.push({\n        id: doc.id,\n        ...doc.data(),\n      });\n    });\n\n    // Get recent sync logs\n    const logQuery = collection(db, 'sync_logs');\n    const logConstraints = [];\n\n    if (restaurantId) {\n      logConstraints.push(where('restaurantId', '==', restaurantId));\n    }\n\n    if (status) {\n      logConstraints.push(where('status', '==', status));\n    }\n\n    logConstraints.push(orderBy('timestamp', 'desc'));\n    logConstraints.push(limit(parseInt(limit_param || '50')));\n\n    const logQ = query(logQuery, ...logConstraints);\n    const logSnapshot = await getDocs(logQ);\n\n    const logs: any[] = [];\n    logSnapshot.forEach((doc) => {\n      logs.push({\n        id: doc.id,\n        ...doc.data(),\n      });\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        configs,\n        logs,\n        summary: {\n          totalConfigs: configs.length,\n          totalLogs: logs.length,\n          lastSync: logs[0]?.timestamp || null,\n        },\n      },\n    });\n\n  } catch (error) {\n    console.error('Sync status error:', error);\n\n    if (error instanceof Error && error.message.includes('Unauthorized')) {\n      return NextResponse.json(\n        { error: error.message },\n        { status: 401 },\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Failed to get sync status' },\n      { status: 500 },\n    );\n  }\n}\n\n// POST - Trigger manual sync or create sync job\nexport async function POST(req: NextRequest) {\n  try {\n    verifyCronAuth(req);\n\n    const { action, restaurantId, source, force } = await req.json();\n\n    if (action === 'sync') {\n      // Trigger manual sync\n      if (!restaurantId) {\n        return NextResponse.json(\n          { error: 'Restaurant ID required for manual sync' },\n          { status: 400 },\n        );\n      }\n\n      const result = await syncRestaurantMenu(restaurantId, source, force);\n\n      return NextResponse.json({\n        success: true,\n        data: result,\n      });\n    }\n\n    if (action === 'sync-all') {\n      // Sync all enabled restaurants\n      const results = await syncAllRestaurants(force);\n\n      return NextResponse.json({\n        success: true,\n        data: {\n          totalProcessed: results.length,\n          successful: results.filter(r => r.status === 'success').length,\n          failed: results.filter(r => r.status === 'error').length,\n          skipped: results.filter(r => r.status === 'skipped').length,\n          results,\n        },\n      });\n    }\n\n    return NextResponse.json(\n      { error: \"Invalid action. Use 'sync' or 'sync-all'\" },\n      { status: 400 },\n    );\n\n  } catch (error) {\n    console.error('Manual sync error:', error);\n\n    if (error instanceof Error && error.message.includes('Unauthorized')) {\n      return NextResponse.json(\n        { error: error.message },\n        { status: 401 },\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Failed to trigger sync' },\n      { status: 500 },\n    );\n  }\n}\n\n// PUT - Update sync configuration\nexport async function PUT(req: NextRequest) {\n  try {\n    verifyCronAuth(req);\n\n    const { searchParams } = new URL(req.url);\n    const configId = searchParams.get('id');\n\n    if (!configId) {\n      return NextResponse.json(\n        { error: 'Config ID required' },\n        { status: 400 },\n      );\n    }\n\n    const updates = await req.json();\n\n    const configRef = doc(db, 'sync_configs', configId);\n    const configDoc = await getDoc(configRef);\n\n    if (!configDoc.exists()) {\n      return NextResponse.json(\n        { error: 'Sync config not found' },\n        { status: 404 },\n      );\n    }\n\n    await updateDoc(configRef, {\n      ...updates,\n      updatedAt: new Date().toISOString(),\n    });\n\n    const updatedDoc = await getDoc(configRef);\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        id: updatedDoc.id,\n        ...updatedDoc.data(),\n      },\n      message: 'Sync config updated successfully',\n    });\n\n  } catch (error) {\n    console.error('Sync config update error:', error);\n\n    if (error instanceof Error && error.message.includes('Unauthorized')) {\n      return NextResponse.json(\n        { error: error.message },\n        { status: 401 },\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Failed to update sync config' },\n      { status: 500 },\n    );\n  }\n}\n\n// DELETE - Remove sync configuration\nexport async function DELETE(req: NextRequest) {\n  try {\n    verifyCronAuth(req);\n\n    const { searchParams } = new URL(req.url);\n    const configId = searchParams.get('id');\n\n    if (!configId) {\n      return NextResponse.json(\n        { error: 'Config ID required' },\n        { status: 400 },\n      );\n    }\n\n    const configRef = doc(db, 'sync_configs', configId);\n    const configDoc = await getDoc(configRef);\n\n    if (!configDoc.exists()) {\n      return NextResponse.json(\n        { error: 'Sync config not found' },\n        { status: 404 },\n      );\n    }\n\n    await deleteDoc(configRef);\n\n    return NextResponse.json({\n      success: true,\n      message: 'Sync config deleted successfully',\n    });\n\n  } catch (error) {\n    console.error('Sync config delete error:', error);\n\n    if (error instanceof Error && error.message.includes('Unauthorized')) {\n      return NextResponse.json(\n        { error: error.message },\n        { status: 401 },\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Failed to delete sync config' },\n      { status: 500 },\n    );\n  }\n}\n\n// Helper function to sync all restaurants\nasync function syncAllRestaurants(force = false): Promise<SyncResult[]> {\n  const results: SyncResult[] = [];\n\n  try {\n    // Get all enabled sync configs\n    const configQuery = query(\n      collection(db, 'sync_configs'),\n      where('enabled', '==', true),\n    );\n\n    const configSnapshot = await getDocs(configQuery);\n\n    for (const configDoc of configSnapshot.docs) {\n      const config = configDoc.data() as SyncConfig;\n\n      try {\n        const result = await syncRestaurantMenu(config.restaurantId, config.source, force);\n        results.push(result);\n      } catch (error) {\n        results.push({\n          restaurantId: config.restaurantId,\n          source: config.source,\n          status: 'error',\n          itemsAdded: 0,\n          itemsUpdated: 0,\n          itemsRemoved: 0,\n          error: error instanceof Error ? error.message : 'Unknown error',\n          timestamp: new Date().toISOString(),\n        });\n      }\n    }\n\n  } catch (error) {\n    console.error('Sync all restaurants error:', error);\n  }\n\n  return results;\n}\n\n// Helper function to sync individual restaurant menu\nasync function syncRestaurantMenu(restaurantId: string, source?: string, force = false): Promise<SyncResult> {\n  const timestamp = new Date().toISOString();\n\n  try {\n    // Get sync config\n    const configQuery = query(\n      collection(db, 'sync_configs'),\n      where('restaurantId', '==', restaurantId),\n      where('enabled', '==', true),\n    );\n\n    const configSnapshot = await getDocs(configQuery);\n\n    if (configSnapshot.empty) {\n      return {\n        restaurantId,\n        source: source || 'unknown',\n        status: 'skipped',\n        itemsAdded: 0,\n        itemsUpdated: 0,\n        itemsRemoved: 0,\n        error: 'No enabled sync config found',\n        timestamp,\n      };\n    }\n\n    const config = configSnapshot.docs[0].data() as SyncConfig;\n    const actualSource = source || config.source;\n\n    // Check if sync is needed (unless forced)\n    if (!force && config.lastSync) {\n      const lastSyncTime = new Date(config.lastSync);\n      const now = new Date();\n      const hoursSinceLastSync = (now.getTime() - lastSyncTime.getTime()) / (1000 * 60 * 60);\n\n      if (hoursSinceLastSync < config.syncInterval) {\n        return {\n          restaurantId,\n          source: actualSource,\n          status: 'skipped',\n          itemsAdded: 0,\n          itemsUpdated: 0,\n          itemsRemoved: 0,\n          error: `Sync not due yet. Last sync: ${config.lastSync}`,\n          timestamp,\n        };\n      }\n    }\n\n    // Fetch external menu data\n    const externalData = await fetchExternalMenuData(actualSource, restaurantId);\n\n    if (!externalData || !externalData.success) {\n      throw new Error(`Failed to fetch external data: ${externalData?.error || 'Unknown error'}`);\n    }\n\n    // Sync data to local database\n    const syncStats = await syncMenuData(restaurantId, externalData.data, actualSource);\n\n    // Update sync config\n    await updateDoc(configSnapshot.docs[0].ref, {\n      lastSync: timestamp,\n      updatedAt: timestamp,\n    });\n\n    // Log sync result\n    const result: SyncResult = {\n      restaurantId,\n      source: actualSource,\n      status: 'success',\n      ...syncStats,\n      timestamp,\n    };\n\n    await addDoc(collection(db, 'sync_logs'), result);\n\n    return result;\n\n  } catch (error) {\n    const result: SyncResult = {\n      restaurantId,\n      source: source || 'unknown',\n      status: 'error',\n      itemsAdded: 0,\n      itemsUpdated: 0,\n      itemsRemoved: 0,\n      error: error instanceof Error ? error.message : 'Unknown error',\n      timestamp,\n    };\n\n    // Log error\n    await addDoc(collection(db, 'sync_logs'), result);\n\n    return result;\n  }\n}\n\n// Helper function to fetch external menu data\nasync function fetchExternalMenuData(source: string, restaurantId: string) {\n  try {\n    const response = await fetch(`${process.env.NEXTAUTH_URL}/api/fetch-menu`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        source,\n        restaurantId,\n      }),\n    });\n\n    return await response.json();\n  } catch (error) {\n    console.error('External menu fetch error:', error);\n    return null;\n  }\n}\n\n// Helper function to sync menu data to local database\nasync function syncMenuData(restaurantId: string, externalItems: any[], source: string) {\n  const batch = writeBatch(db);\n  let itemsAdded = 0;\n  let itemsUpdated = 0;\n  let itemsRemoved = 0;\n\n  try {\n    // Get existing menu items for this restaurant\n    const existingQuery = query(\n      collection(db, 'menu_items'),\n      where('restaurantId', '==', restaurantId),\n      where('source', '==', source),\n    );\n\n    const existingSnapshot = await getDocs(existingQuery);\n    const existingItems = new Map();\n\n    existingSnapshot.forEach((doc) => {\n      const data = doc.data();\n      existingItems.set(data.externalId || doc.id, { id: doc.id, ...data });\n    });\n\n    // Process external items\n    const processedIds = new Set();\n\n    for (const externalItem of externalItems) {\n      const externalId = externalItem.id || externalItem.menu_item_id;\n      processedIds.add(externalId);\n\n      const menuItem = {\n        restaurantId,\n        source,\n        externalId,\n        name: externalItem.name || externalItem.menu_item_name,\n        description: externalItem.description || externalItem.menu_item_description,\n        price: externalItem.price || 0,\n        category: externalItem.category || externalItem.menu_item_category || 'Other',\n        image: externalItem.image || externalItem.menu_item_image,\n        available: externalItem.available !== false,\n        updatedAt: new Date().toISOString(),\n        syncedAt: new Date().toISOString(),\n      };\n\n      if (existingItems.has(externalId)) {\n        // Update existing item\n        const existing = existingItems.get(externalId);\n        const itemRef = doc(db, 'menu_items', existing.id);\n        batch.update(itemRef, menuItem);\n        itemsUpdated++;\n      } else {\n        // Add new item\n        const newItemRef = doc(collection(db, 'menu_items'));\n        batch.set(newItemRef, {\n          ...menuItem,\n          createdAt: new Date().toISOString(),\n        });\n        itemsAdded++;\n      }\n    }\n\n    // Remove items that are no longer in external source\n    for (const [externalId, existing] of existingItems) {\n      if (!processedIds.has(externalId)) {\n        const itemRef = doc(db, 'menu_items', existing.id);\n        batch.delete(itemRef);\n        itemsRemoved++;\n      }\n    }\n\n    // Commit batch\n    await batch.commit();\n\n    return { itemsAdded, itemsUpdated, itemsRemoved };\n\n  } catch (error) {\n    console.error('Menu sync error:', error);\n    throw error;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/api/delivery/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getAuth' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":44,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":122,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3541,3544],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3541,3544],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { db } from '../../../lib/firebase';\nimport { collection, doc, getDocs, getDoc, addDoc, updateDoc, query, where, orderBy, limit } from 'firebase/firestore';\nimport { getAuth } from 'firebase-admin/auth';\n\nexport const dynamic = 'force-dynamic';\n\ninterface DeliveryRequest {\n  orderId: string;\n  pickupAddress: string;\n  deliveryAddress: string;\n  customerPhone: string;\n  specialInstructions?: string;\n  deliveryType: 'food' | 'package' | 'grocery';\n  priority: 'standard' | 'express' | 'urgent';\n  estimatedValue?: number;\n}\n\ninterface DeliveryUpdate {\n  status: 'pending' | 'assigned' | 'picked_up' | 'in_transit' | 'delivered' | 'cancelled';\n  driverId?: string;\n  location?: {\n    lat: number;\n    lng: number;\n    timestamp: string;\n  };\n  notes?: string;\n  estimatedArrival?: string;\n}\n\n// Verify authentication\nasync function verifyAuth(request: NextRequest) {\n  const authHeader = request.headers.get('authorization');\n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    throw new Error('Authentication required');\n  }\n\n  const token = authHeader.split(' ')[1];\n\n  try {\n    const { getAuth } = await import('firebase-admin/auth');\n    const decodedToken = await getAuth().verifyIdToken(token);\n    return decodedToken.uid;\n  } catch (error) {\n    throw new Error('Invalid authentication token');\n  }\n}\n\n// GET - Retrieve delivery information\nexport async function GET(req: NextRequest) {\n  try {\n    const userId = await verifyAuth(req);\n    const { searchParams } = new URL(req.url);\n    const deliveryId = searchParams.get('id');\n    const orderId = searchParams.get('orderId');\n    const status = searchParams.get('status');\n    const driverId = searchParams.get('driverId');\n\n    if (deliveryId) {\n      // Get specific delivery\n      const deliveryRef = doc(db, 'deliveries', deliveryId);\n      const deliveryDoc = await getDoc(deliveryRef);\n\n      if (!deliveryDoc.exists()) {\n        return NextResponse.json(\n          { error: 'Delivery not found' },\n          { status: 404 },\n        );\n      }\n\n      const deliveryData = deliveryDoc.data();\n\n      // Check if user has access to this delivery\n      if (deliveryData.customerId !== userId && deliveryData.driverId !== userId) {\n        // Check if user is admin\n        const userRef = doc(db, 'users', userId);\n        const userDoc = await getDoc(userRef);\n        const userData = userDoc.data();\n\n        if (!userData || (userData.role !== 'admin' && userData.role !== 'driver')) {\n          return NextResponse.json(\n            { error: 'Access denied' },\n            { status: 403 },\n          );\n        }\n      }\n\n      return NextResponse.json({\n        success: true,\n        data: {\n          id: deliveryDoc.id,\n          ...deliveryData,\n        },\n      });\n    }\n\n    // Get multiple deliveries with filters\n    const q = collection(db, 'deliveries');\n    const constraints = [];\n\n    if (orderId) {\n      constraints.push(where('orderId', '==', orderId));\n    }\n\n    if (status) {\n      constraints.push(where('status', '==', status));\n    }\n\n    if (driverId) {\n      constraints.push(where('driverId', '==', driverId));\n    } else {\n      // If not filtering by driver, show user's deliveries\n      constraints.push(where('customerId', '==', userId));\n    }\n\n    constraints.push(orderBy('createdAt', 'desc'));\n    constraints.push(limit(50));\n\n    const deliveryQuery = query(q, ...constraints);\n    const querySnapshot = await getDocs(deliveryQuery);\n\n    const deliveries: any[] = [];\n    querySnapshot.forEach((doc) => {\n      deliveries.push({\n        id: doc.id,\n        ...doc.data(),\n      });\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: deliveries,\n      count: deliveries.length,\n    });\n\n  } catch (error) {\n    console.error('Delivery GET error:', error);\n\n    if (error instanceof Error && error.message.includes('Authentication')) {\n      return NextResponse.json(\n        { error: error.message },\n        { status: 401 },\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 },\n    );\n  }\n}\n\n// POST - Create new delivery request\nexport async function POST(req: NextRequest) {\n  try {\n    const userId = await verifyAuth(req);\n    const deliveryRequest: DeliveryRequest = await req.json();\n\n    // Validate required fields\n    if (!deliveryRequest.orderId || !deliveryRequest.pickupAddress ||\n        !deliveryRequest.deliveryAddress || !deliveryRequest.customerPhone) {\n      return NextResponse.json(\n        { error: 'Missing required fields' },\n        { status: 400 },\n      );\n    }\n\n    // Calculate estimated delivery time based on priority\n    const now = new Date();\n    const estimatedDelivery = new Date(now);\n\n    switch (deliveryRequest.priority) {\n      case 'urgent':\n        estimatedDelivery.setMinutes(now.getMinutes() + 30);\n        break;\n      case 'express':\n        estimatedDelivery.setMinutes(now.getMinutes() + 60);\n        break;\n      default:\n        estimatedDelivery.setMinutes(now.getMinutes() + 90);\n    }\n\n    const newDelivery = {\n      ...deliveryRequest,\n      customerId: userId,\n      status: 'pending',\n      createdAt: now.toISOString(),\n      updatedAt: now.toISOString(),\n      estimatedDelivery: estimatedDelivery.toISOString(),\n      trackingHistory: [{\n        status: 'pending',\n        timestamp: now.toISOString(),\n        notes: 'Delivery request created',\n      }],\n    };\n\n    const docRef = await addDoc(collection(db, 'deliveries'), newDelivery);\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        id: docRef.id,\n        ...newDelivery,\n      },\n      message: 'Delivery request created successfully',\n    });\n\n  } catch (error) {\n    console.error('Delivery POST error:', error);\n\n    if (error instanceof Error && error.message.includes('Authentication')) {\n      return NextResponse.json(\n        { error: error.message },\n        { status: 401 },\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 },\n    );\n  }\n}\n\n// PUT - Update delivery status\nexport async function PUT(req: NextRequest) {\n  try {\n    const userId = await verifyAuth(req);\n    const { searchParams } = new URL(req.url);\n    const deliveryId = searchParams.get('id');\n\n    if (!deliveryId) {\n      return NextResponse.json(\n        { error: 'Delivery ID required' },\n        { status: 400 },\n      );\n    }\n\n    const update: DeliveryUpdate = await req.json();\n\n    // Check if delivery exists\n    const deliveryRef = doc(db, 'deliveries', deliveryId);\n    const deliveryDoc = await getDoc(deliveryRef);\n\n    if (!deliveryDoc.exists()) {\n      return NextResponse.json(\n        { error: 'Delivery not found' },\n        { status: 404 },\n      );\n    }\n\n    const deliveryData = deliveryDoc.data();\n\n    // Check permissions - only driver assigned to delivery or admin can update\n    const userRef = doc(db, 'users', userId);\n    const userDoc = await getDoc(userRef);\n    const userData = userDoc.data();\n\n    const isDriver = deliveryData.driverId === userId;\n    const isAdmin = userData?.role === 'admin' || userData?.role === 'super_admin';\n\n    if (!isDriver && !isAdmin) {\n      return NextResponse.json(\n        { error: 'Access denied' },\n        { status: 403 },\n      );\n    }\n\n    // Update delivery\n    const now = new Date().toISOString();\n    const trackingHistory = deliveryData.trackingHistory || [];\n\n    // Add new tracking entry\n    trackingHistory.push({\n      status: update.status,\n      timestamp: now,\n      notes: update.notes || '',\n      location: update.location,\n      updatedBy: userId,\n    });\n\n    const updatedData = {\n      status: update.status,\n      updatedAt: now,\n      trackingHistory,\n      ...(update.driverId && { driverId: update.driverId }),\n      ...(update.estimatedArrival && { estimatedArrival: update.estimatedArrival }),\n      ...(update.location && { currentLocation: update.location }),\n    };\n\n    await updateDoc(deliveryRef, updatedData);\n\n    // Get updated document\n    const updatedDoc = await getDoc(deliveryRef);\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        id: updatedDoc.id,\n        ...updatedDoc.data(),\n      },\n      message: 'Delivery updated successfully',\n    });\n\n  } catch (error) {\n    console.error('Delivery PUT error:', error);\n\n    if (error instanceof Error && error.message.includes('Authentication')) {\n      return NextResponse.json(\n        { error: error.message },\n        { status: 401 },\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 },\n    );\n  }\n}\n\n// DELETE - Cancel delivery (soft delete)\nexport async function DELETE(req: NextRequest) {\n  try {\n    const userId = await verifyAuth(req);\n    const { searchParams } = new URL(req.url);\n    const deliveryId = searchParams.get('id');\n\n    if (!deliveryId) {\n      return NextResponse.json(\n        { error: 'Delivery ID required' },\n        { status: 400 },\n      );\n    }\n\n    // Check if delivery exists\n    const deliveryRef = doc(db, 'deliveries', deliveryId);\n    const deliveryDoc = await getDoc(deliveryRef);\n\n    if (!deliveryDoc.exists()) {\n      return NextResponse.json(\n        { error: 'Delivery not found' },\n        { status: 404 },\n      );\n    }\n\n    const deliveryData = deliveryDoc.data();\n\n    // Check permissions - only customer or admin can cancel\n    const userRef = doc(db, 'users', userId);\n    const userDoc = await getDoc(userRef);\n    const userData = userDoc.data();\n\n    const isCustomer = deliveryData.customerId === userId;\n    const isAdmin = userData?.role === 'admin' || userData?.role === 'super_admin';\n\n    if (!isCustomer && !isAdmin) {\n      return NextResponse.json(\n        { error: 'Access denied' },\n        { status: 403 },\n      );\n    }\n\n    // Check if delivery can be cancelled\n    if (deliveryData.status === 'delivered' || deliveryData.status === 'cancelled') {\n      return NextResponse.json(\n        { error: 'Cannot cancel completed or already cancelled delivery' },\n        { status: 400 },\n      );\n    }\n\n    // Update status to cancelled\n    const now = new Date().toISOString();\n    const trackingHistory = deliveryData.trackingHistory || [];\n\n    trackingHistory.push({\n      status: 'cancelled',\n      timestamp: now,\n      notes: 'Delivery cancelled by user',\n      updatedBy: userId,\n    });\n\n    await updateDoc(deliveryRef, {\n      status: 'cancelled',\n      updatedAt: now,\n      trackingHistory,\n      cancelledAt: now,\n      cancelledBy: userId,\n    });\n\n    return NextResponse.json({\n      success: true,\n      message: 'Delivery cancelled successfully',\n    });\n\n  } catch (error) {\n    console.error('Delivery DELETE error:', error);\n\n    if (error instanceof Error && error.message.includes('Authentication')) {\n      return NextResponse.json(\n        { error: error.message },\n        { status: 401 },\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 },\n    );\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/api/external/bestbuy/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[331,334],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[331,334],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { BestBuyService } from '@/lib/services/external-apis';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const action = searchParams.get('action');\n\n    if (action === 'products') {\n      const params: any = {};\n      const q = searchParams.get('q');\n      const categoryId = searchParams.get('categoryId');\n      const format = searchParams.get('format') as 'json' | 'xml';\n      const show = searchParams.get('show');\n      const sort = searchParams.get('sort');\n      const facet = searchParams.get('facet');\n      const cursorMark = searchParams.get('cursorMark');\n      const pageSize = searchParams.get('pageSize');\n      const page = searchParams.get('page');\n\n      if (q) {params.q = q;}\n      if (categoryId) {params.categoryId = categoryId;}\n      if (format) {params.format = format;}\n      if (show) {params.show = show;}\n      if (sort) {params.sort = sort;}\n      if (facet) {params.facet = facet;}\n      if (cursorMark) {params.cursorMark = cursorMark;}\n      if (pageSize) {params.pageSize = parseInt(pageSize);}\n      if (page) {params.page = parseInt(page);}\n\n      const result = await BestBuyService.searchProducts(params);\n      return NextResponse.json({ success: true, data: result });\n    }\n\n    if (action === 'product') {\n      const sku = searchParams.get('sku');\n      if (!sku) {\n        return NextResponse.json(\n          { success: false, error: 'SKU is required' },\n          { status: 400 },\n        );\n      }\n\n      const product = await BestBuyService.getProductDetails(parseInt(sku));\n      return NextResponse.json({ success: true, data: product });\n    }\n\n    if (action === 'stores') {\n      const params = {\n        area: searchParams.get('area') || undefined,\n        storeId: searchParams.get('storeId') ? parseInt(searchParams.get('storeId')!) : undefined,\n        storeType: searchParams.get('storeType') || undefined,\n        format: searchParams.get('format') as 'json' | 'xml' || undefined,\n        show: searchParams.get('show') || undefined,\n        sort: searchParams.get('sort') || undefined,\n        page: searchParams.get('page') ? parseInt(searchParams.get('page')!) : undefined,\n        pageSize: searchParams.get('pageSize') ? parseInt(searchParams.get('pageSize')!) : undefined,\n      };\n\n      const result = await BestBuyService.getStores(params);\n      return NextResponse.json({ success: true, data: result });\n    }\n\n    if (action === 'availability') {\n      const sku = searchParams.get('sku');\n      const storeId = searchParams.get('storeId');\n\n      if (!sku || !storeId) {\n        return NextResponse.json(\n          { success: false, error: 'Both SKU and Store ID are required' },\n          { status: 400 },\n        );\n      }\n\n      const availability = await BestBuyService.checkProductAvailability(\n        parseInt(sku),\n        parseInt(storeId),\n      );\n      return NextResponse.json({ success: true, data: availability });\n    }\n\n    return NextResponse.json(\n      { success: false, error: 'Invalid action. Use \"products\", \"product\", \"stores\", or \"availability\"' },\n      { status: 400 },\n    );\n  } catch (error) {\n    console.error('Best Buy API error:', error);\n    return NextResponse.json(\n      {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred',\n      },\n      { status: 500 },\n    );\n  }\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/api/external/documenu/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/api/external/kroger/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[330,333],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[330,333],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1257,1260],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1257,1260],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { KrogerService } from '@/lib/services/external-apis';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const action = searchParams.get('action');\n\n    if (action === 'products') {\n      const params: any = {};\n      const q = searchParams.get('q');\n      const locationId = searchParams.get('locationId');\n      const productId = searchParams.get('productId');\n      const brand = searchParams.get('brand');\n      const fulfillment = searchParams.get('fulfillment') as 'ais' | 'csp' | 'dug' | 'sto';\n      const start = searchParams.get('start');\n      const limit = searchParams.get('limit');\n\n      if (q) {params.q = q;}\n      if (locationId) {params.locationId = locationId;}\n      if (productId) {params.productId = productId;}\n      if (brand) {params.brand = brand;}\n      if (fulfillment) {params.fulfillment = fulfillment;}\n      if (start) {params.start = parseInt(start);}\n      if (limit) {params.limit = parseInt(limit);}\n\n      const result = await KrogerService.searchProducts(params);\n      return NextResponse.json({ success: true, data: result });\n    }\n\n    if (action === 'locations') {\n      const params: any = {};\n      const zipCode = searchParams.get('zipCode');\n      const radius = searchParams.get('radius');\n      const limit = searchParams.get('limit');\n      const chain = searchParams.get('chain');\n      const department = searchParams.get('department');\n\n      if (zipCode) {params['filter.zipCode.near'] = zipCode;}\n      if (radius) {params['filter.radiusInMiles'] = parseInt(radius);}\n      if (limit) {params['filter.limit'] = parseInt(limit);}\n      if (chain) {params['filter.chain'] = chain;}\n      if (department) {params['filter.department'] = department;}\n\n      const result = await KrogerService.getLocations(params);\n      return NextResponse.json({ success: true, data: result });\n    }\n\n    return NextResponse.json(\n      { success: false, error: 'Invalid action. Use \"products\" or \"locations\"' },\n      { status: 400 },\n    );\n  } catch (error) {\n    console.error('Kroger API error:', error);\n    return NextResponse.json(\n      {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred',\n      },\n      { status: 500 },\n    );\n  }\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/api/external/unified-search/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1625,1628],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1625,1628],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { UnifiedSearchService } from '@/lib/services/external-apis';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const type = searchParams.get('type');\n\n    if (type === 'restaurants') {\n      const params: {\n        latitude?: number;\n        longitude?: number;\n        location?: string;\n        term?: string;\n        radius?: number;\n        limit?: number;\n      } = {};\n\n      const latParam = searchParams.get('latitude');\n      if (latParam) {params.latitude = parseFloat(latParam);}\n\n      const lngParam = searchParams.get('longitude');\n      if (lngParam) {params.longitude = parseFloat(lngParam);}\n\n      const locationParam = searchParams.get('location');\n      if (locationParam) {params.location = locationParam;}\n\n      const termParam = searchParams.get('term');\n      if (termParam) {params.term = termParam;}\n\n      const radiusParam = searchParams.get('radius');\n      if (radiusParam) {params.radius = parseInt(radiusParam);}\n\n      const limitParam = searchParams.get('limit');\n      if (limitParam) {params.limit = parseInt(limitParam);}\n\n      const results = await UnifiedSearchService.searchRestaurants(params);\n      return NextResponse.json({ success: true, data: results });\n    }\n\n    if (type === 'products') {\n      const query = searchParams.get('query');\n      if (!query) {\n        return NextResponse.json(\n          { success: false, error: 'Query parameter is required for product search' },\n          { status: 400 },\n        );\n      }\n\n      const params: any = { query };\n      const location = searchParams.get('location');\n      const limit = searchParams.get('limit');\n\n      if (location) {params.location = location;}\n      if (limit) {params.limit = parseInt(limit);}\n\n      const results = await UnifiedSearchService.searchProducts(params);\n      return NextResponse.json({ success: true, data: results });\n    }\n\n    return NextResponse.json(\n      { success: false, error: 'Invalid type. Use \"restaurants\" or \"products\"' },\n      { status: 400 },\n    );\n  } catch (error) {\n    console.error('Unified search API error:', error);\n    return NextResponse.json(\n      {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred',\n      },\n      { status: 500 },\n    );\n  }\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/api/external/yelp/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/api/external/zomato/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/api/fetch-menu/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'doc' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getDoc' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MenuFilter' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":70,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2096,2099],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2096,2099],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'location' is defined but never used. Allowed unused args must match /^_/u.","line":160,"column":72,"nodeType":null,"messageId":"unusedVar","endLine":160,"endColumn":80},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":228,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":228,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6490,6493],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6490,6493],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { db } from '../../../lib/firebase';\nimport { collection, doc, getDocs, getDoc, query, where, orderBy, limit } from 'firebase/firestore';\n\nexport const dynamic = 'force-dynamic';\n\ninterface MenuFilter {\n  restaurantId?: string;\n  category?: string;\n  priceRange?: {\n    min: number;\n    max: number;\n  };\n  dietary?: string[];\n  available?: boolean;\n  search?: string;\n}\n\ninterface ExternalMenuRequest {\n  source: 'documenu' | 'yelp' | 'zomato';\n  restaurantId: string;\n  location?: string;\n}\n\n// GET - Fetch menu items\nexport async function GET(req: NextRequest) {\n  try {\n    const { searchParams } = new URL(req.url);\n    const restaurantId = searchParams.get('restaurantId');\n    const category = searchParams.get('category');\n    const search = searchParams.get('search');\n    const minPrice = searchParams.get('minPrice');\n    const maxPrice = searchParams.get('maxPrice');\n    const dietary = searchParams.get('dietary')?.split(',');\n    const available = searchParams.get('available');\n    const source = searchParams.get('source') as 'local' | 'external';\n    const external = searchParams.get('external') as 'documenu' | 'yelp' | 'zomato';\n\n    // Handle external menu fetching\n    if (source === 'external' && external && restaurantId) {\n      return await fetchExternalMenu(external, restaurantId);\n    }\n\n    // Fetch from local database\n    const menuQuery = collection(db, 'menu_items');\n    const constraints = [];\n\n    if (restaurantId) {\n      constraints.push(where('restaurantId', '==', restaurantId));\n    }\n\n    if (category) {\n      constraints.push(where('category', '==', category));\n    }\n\n    if (available !== null) {\n      constraints.push(where('available', '==', available === 'true'));\n    }\n\n    if (dietary && dietary.length > 0) {\n      constraints.push(where('dietary', 'array-contains-any', dietary));\n    }\n\n    constraints.push(orderBy('name'));\n    constraints.push(limit(100));\n\n    const q = query(menuQuery, ...constraints);\n    const querySnapshot = await getDocs(q);\n\n    let menuItems: any[] = [];\n    querySnapshot.forEach((doc) => {\n      const data = doc.data();\n      menuItems.push({\n        id: doc.id,\n        ...data,\n      });\n    });\n\n    // Apply additional filters\n    if (search) {\n      const searchLower = search.toLowerCase();\n      menuItems = menuItems.filter(item =>\n        item.name.toLowerCase().includes(searchLower) ||\n        item.description?.toLowerCase().includes(searchLower) ||\n        item.ingredients?.some((ing: string) => ing.toLowerCase().includes(searchLower)),\n      );\n    }\n\n    if (minPrice || maxPrice) {\n      menuItems = menuItems.filter(item => {\n        const price = item.price;\n        if (minPrice && price < parseFloat(minPrice)) {return false;}\n        if (maxPrice && price > parseFloat(maxPrice)) {return false;}\n        return true;\n      });\n    }\n\n    // Group by category if no specific category requested\n    let result;\n    if (!category) {\n      const grouped = menuItems.reduce((acc, item) => {\n        const cat = item.category || 'Other';\n        if (!acc[cat]) {acc[cat] = [];}\n        acc[cat].push(item);\n        return acc;\n      }, {});\n\n      result = {\n        success: true,\n        data: grouped,\n        totalItems: menuItems.length,\n        categories: Object.keys(grouped),\n      };\n    } else {\n      result = {\n        success: true,\n        data: menuItems,\n        totalItems: menuItems.length,\n        category,\n      };\n    }\n\n    return NextResponse.json(result);\n\n  } catch (error) {\n    console.error('Menu fetch error:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch menu' },\n      { status: 500 },\n    );\n  }\n}\n\n// POST - Fetch external menu and optionally cache it\nexport async function POST(req: NextRequest) {\n  try {\n    const request: ExternalMenuRequest = await req.json();\n\n    if (!request.source || !request.restaurantId) {\n      return NextResponse.json(\n        { error: 'Source and restaurant ID are required' },\n        { status: 400 },\n      );\n    }\n\n    const menuData = await fetchExternalMenu(request.source, request.restaurantId, request.location);\n\n    return menuData;\n\n  } catch (error) {\n    console.error('External menu fetch error:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch external menu' },\n      { status: 500 },\n    );\n  }\n}\n\n// Helper function to fetch from external APIs\nasync function fetchExternalMenu(source: string, restaurantId: string, location?: string) {\n  try {\n    let apiUrl = '';\n    const headers: Record<string, string> = {};\n\n    switch (source) {\n      case 'documenu':\n        const documenuKey = process.env.DOCUMENU_API_KEY;\n        if (!documenuKey) {\n          return NextResponse.json(\n            { error: 'Documenu API key not configured' },\n            { status: 503 },\n          );\n        }\n        apiUrl = `https://api.documenu.com/v2/restaurant/${restaurantId}/menuitems`;\n        headers['X-API-KEY'] = documenuKey;\n        break;\n\n      case 'yelp':\n        const yelpKey = process.env.YELP_API_KEY;\n        if (!yelpKey) {\n          return NextResponse.json(\n            { error: 'Yelp API key not configured' },\n            { status: 503 },\n          );\n        }\n        // Yelp doesn't have direct menu API, so we'll return business details\n        apiUrl = `https://api.yelp.com/v3/businesses/${restaurantId}`;\n        headers['Authorization'] = `Bearer ${yelpKey}`;\n        break;\n\n      case 'zomato':\n        const zomatoKey = process.env.ZOMATO_API_KEY;\n        if (!zomatoKey) {\n          return NextResponse.json(\n            { error: 'Zomato API key not configured' },\n            { status: 503 },\n          );\n        }\n        apiUrl = `https://developers.zomato.com/api/v2.1/restaurant?res_id=${restaurantId}`;\n        headers['user-key'] = zomatoKey;\n        break;\n\n      default:\n        return NextResponse.json(\n          { error: 'Unsupported menu source' },\n          { status: 400 },\n        );\n    }\n\n    const response = await fetch(apiUrl, {\n      headers,\n      method: 'GET',\n    });\n\n    if (!response.ok) {\n      throw new Error(`External API error: ${response.status}`);\n    }\n\n    const data = await response.json();\n\n    // Transform data based on source\n    let transformedData;\n    switch (source) {\n      case 'documenu':\n        transformedData = {\n          success: true,\n          source: 'documenu',\n          data: data.data?.map((item: any) => ({\n            id: item.menu_item_id,\n            name: item.menu_item_name,\n            description: item.menu_item_description,\n            price: item.menu_item_pricing?.[0]?.price || 0,\n            category: item.menu_item_category,\n            image: item.menu_item_image,\n            available: true,\n            external: true,\n          })) || [],\n          totalItems: data.data?.length || 0,\n        };\n        break;\n\n      case 'yelp':\n        // Yelp business details - no direct menu\n        transformedData = {\n          success: true,\n          source: 'yelp',\n          data: {\n            restaurant: {\n              id: data.id,\n              name: data.name,\n              categories: data.categories,\n              price: data.price,\n              rating: data.rating,\n              phone: data.phone,\n              location: data.location,\n              photos: data.photos,\n            },\n          },\n          message: \"Yelp doesn't provide direct menu access. Restaurant details provided.\",\n        };\n        break;\n\n      case 'zomato':\n        transformedData = {\n          success: true,\n          source: 'zomato',\n          data: {\n            restaurant: {\n              id: data.id,\n              name: data.name,\n              cuisines: data.cuisines,\n              average_cost_for_two: data.average_cost_for_two,\n              currency: data.currency,\n              rating: data.user_rating,\n              location: data.location,\n              photos_url: data.photos_url,\n              menu_url: data.menu_url,\n            },\n          },\n          message: 'Menu details available at menu_url',\n        };\n        break;\n\n      default:\n        transformedData = { success: false, error: 'Unknown source' };\n    }\n\n    return NextResponse.json(transformedData);\n\n  } catch (error) {\n    console.error(`External ${source} API error:`, error);\n    return NextResponse.json(\n      {\n        error: `Failed to fetch from ${source}`,\n        details: error instanceof Error ? error.message : 'Unknown error',\n      },\n      { status: 500 },\n    );\n  }\n}\n\n// PUT - Update menu cache or sync external data\nexport async function PUT(req: NextRequest) {\n  try {\n    const { searchParams } = new URL(req.url);\n    const action = searchParams.get('action');\n\n    if (action === 'sync') {\n      // Sync external menu data to local database\n      const { restaurantId, source } = await req.json();\n\n      if (!restaurantId || !source) {\n        return NextResponse.json(\n          { error: 'Restaurant ID and source are required for sync' },\n          { status: 400 },\n        );\n      }\n\n      // This would implement syncing logic\n      return NextResponse.json({\n        success: true,\n        message: 'Menu sync functionality would be implemented here',\n        restaurantId,\n        source,\n      });\n    }\n\n    return NextResponse.json(\n      { error: 'Invalid action' },\n      { status: 400 },\n    );\n\n  } catch (error) {\n    console.error('Menu update error:', error);\n    return NextResponse.json(\n      { error: 'Failed to update menu' },\n      { status: 500 },\n    );\n  }\n}\n\n// DELETE - Clear menu cache\nexport async function DELETE(req: NextRequest) {\n  try {\n    const { searchParams } = new URL(req.url);\n    const restaurantId = searchParams.get('restaurantId');\n    const category = searchParams.get('category');\n\n    if (!restaurantId) {\n      return NextResponse.json(\n        { error: 'Restaurant ID is required' },\n        { status: 400 },\n      );\n    }\n\n    // This would implement cache clearing logic\n    return NextResponse.json({\n      success: true,\n      message: 'Menu cache clearing functionality would be implemented here',\n      restaurantId,\n      category,\n    });\n\n  } catch (error) {\n    console.error('Menu cache clear error:', error);\n    return NextResponse.json(\n      { error: 'Failed to clear menu cache' },\n      { status: 500 },\n    );\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/api/loyalty/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":188,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":188,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5896,5899],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5896,5899],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { db } from '../../../lib/firebase';\nimport { collection, getDocs, addDoc, query, where, orderBy } from 'firebase/firestore';\n\nexport const dynamic = 'force-dynamic';\n\ninterface MembershipTier {\n  id: string;\n  name: string;\n  description: string;\n  minPoints: number;\n  benefits: string[];\n  color: string;\n  icon: string;\n  active: boolean;\n}\n\ninterface Testimonial {\n  id: string;\n  name: string;\n  location: string;\n  rating: number;\n  comment: string;\n  membershipTier: string;\n  date: string;\n  verified: boolean;\n}\n\ninterface LoyaltyUpdate {\n  userId: string;\n  points: number;\n  action: 'earn' | 'redeem';\n  description: string;\n}\n\n// GET - Retrieve membership tiers and testimonials\nexport async function GET(req: NextRequest) {\n  try {\n    const { searchParams } = new URL(req.url);\n    const type = searchParams.get('type');\n\n    if (type === 'tiers') {\n      // Fetch membership tiers from database\n      const tiersRef = collection(db, 'membershipTiers');\n      const tiersSnapshot = await getDocs(query(tiersRef, where('active', '==', true), orderBy('minPoints')));\n\n      const tiers: MembershipTier[] = [];\n      tiersSnapshot.forEach((doc) => {\n        tiers.push({ id: doc.id, ...doc.data() } as MembershipTier);\n      });\n\n      // If no tiers in database, return default data\n      if (tiers.length === 0) {\n        const defaultTiers: MembershipTier[] = [\n          {\n            id: '1',\n            name: 'Bronze',\n            description: 'Start your journey with basic rewards',\n            minPoints: 0,\n            benefits: [\n              '5% cashback on orders',\n              'Free delivery on orders over $25',\n              'Birthday discount',\n            ],\n            color: '#CD7F32',\n            icon: '🥉',\n            active: true,\n          },\n          {\n            id: '2',\n            name: 'Silver',\n            description: 'Enhanced benefits for regular customers',\n            minPoints: 500,\n            benefits: [\n              '8% cashback on orders',\n              'Free delivery on orders over $15',\n              'Priority customer support',\n              'Monthly exclusive offers',\n            ],\n            color: '#C0C0C0',\n            icon: '🥈',\n            active: true,\n          },\n          {\n            id: '3',\n            name: 'Gold',\n            description: 'Premium rewards for loyal customers',\n            minPoints: 1500,\n            benefits: [\n              '12% cashback on orders',\n              'Free delivery on all orders',\n              'Priority customer support',\n              'Weekly exclusive offers',\n              'Early access to new features',\n            ],\n            color: '#FFD700',\n            icon: '🥇',\n            active: true,\n          },\n          {\n            id: '4',\n            name: 'Platinum',\n            description: 'Ultimate rewards for VIP customers',\n            minPoints: 3000,\n            benefits: [\n              '15% cashback on orders',\n              'Free delivery on all orders',\n              'Dedicated VIP support',\n              'Daily exclusive offers',\n              'Early access to new features',\n              'Personal account manager',\n            ],\n            color: '#E5E4E2',\n            icon: '💎',\n            active: true,\n          },\n        ];\n        return NextResponse.json({ success: true, data: defaultTiers });\n      }\n\n      return NextResponse.json({ success: true, data: tiers });\n    }\n\n    if (type === 'testimonials') {\n      // Fetch testimonials from database\n      const testimonialsRef = collection(db, 'testimonials');\n      const testimonialsSnapshot = await getDocs(query(testimonialsRef, where('verified', '==', true), orderBy('date', 'desc')));\n\n      const testimonials: Testimonial[] = [];\n      testimonialsSnapshot.forEach((doc) => {\n        testimonials.push({ id: doc.id, ...doc.data() } as Testimonial);\n      });\n\n      // If no testimonials in database, return default data\n      if (testimonials.length === 0) {\n        const defaultTestimonials: Testimonial[] = [\n          {\n            id: '1',\n            name: 'Sarah Johnson',\n            location: 'New York, NY',\n            rating: 5,\n            comment: 'The loyalty program is amazing! I\\'ve saved so much money with the cashback rewards.',\n            membershipTier: 'Gold',\n            date: '2024-01-15',\n            verified: true,\n          },\n          {\n            id: '2',\n            name: 'Mike Chen',\n            location: 'San Francisco, CA',\n            rating: 5,\n            comment: 'Being a Platinum member has completely changed my experience. The VIP support is incredible!',\n            membershipTier: 'Platinum',\n            date: '2024-01-10',\n            verified: true,\n          },\n          {\n            id: '3',\n            name: 'Emily Rodriguez',\n            location: 'Austin, TX',\n            rating: 4,\n            comment: 'Love the exclusive offers I get as a Silver member. Great value for money!',\n            membershipTier: 'Silver',\n            date: '2024-01-08',\n            verified: true,\n          },\n          {\n            id: '4',\n            name: 'David Kim',\n            location: 'Seattle, WA',\n            rating: 5,\n            comment: 'The Bronze tier benefits are perfect for someone just starting out. Highly recommend!',\n            membershipTier: 'Bronze',\n            date: '2024-01-05',\n            verified: true,\n          },\n        ];\n        return NextResponse.json({ success: true, data: defaultTestimonials });\n      }\n\n      return NextResponse.json({ success: true, data: testimonials });\n    }\n\n    // Default: return all loyalty data\n    const loyaltyRef = collection(db, 'loyaltyProgram');\n    const loyaltySnapshot = await getDocs(query(loyaltyRef, orderBy('createdAt', 'desc')));\n\n    const loyaltyData: any[] = [];\n    loyaltySnapshot.forEach((doc) => {\n      loyaltyData.push({ id: doc.id, ...doc.data() });\n    });\n\n    return NextResponse.json({ success: true, data: loyaltyData });\n\n  } catch (error) {\n    console.error('Error fetching loyalty data:', error);\n    return NextResponse.json(\n      { success: false, error: 'Failed to fetch loyalty data' },\n      { status: 500 },\n    );\n  }\n}\n\n// POST - Update loyalty points or add testimonial\nexport async function POST(req: NextRequest) {\n  try {\n    const body = await req.json();\n    const { type, ...data } = body;\n\n    if (type === 'loyalty-update') {\n      const loyaltyUpdate: LoyaltyUpdate = data;\n\n      // Validate required fields\n      if (!loyaltyUpdate.userId || !loyaltyUpdate.points || !loyaltyUpdate.action) {\n        return NextResponse.json(\n          { success: false, error: 'Missing required fields for loyalty update' },\n          { status: 400 },\n        );\n      }\n\n      // Create loyalty update record\n      const updateData = {\n        ...loyaltyUpdate,\n        timestamp: new Date().toISOString(),\n      };\n\n      const loyaltyRef = collection(db, 'loyaltyProgram');\n      const docRef = await addDoc(loyaltyRef, updateData);\n\n      return NextResponse.json({\n        success: true,\n        data: { id: docRef.id, ...updateData },\n      });\n    }\n\n    if (type === 'testimonial') {\n      const testimonial: Omit<Testimonial, 'id'> = data;\n\n      // Validate required fields\n      if (!testimonial.name || !testimonial.comment || !testimonial.rating) {\n        return NextResponse.json(\n          { success: false, error: 'Missing required fields for testimonial' },\n          { status: 400 },\n        );\n      }\n\n      // Create testimonial\n      const testimonialData = {\n        ...testimonial,\n        date: new Date().toISOString().split('T')[0],\n        verified: false, // Testimonials need to be verified before showing\n      };\n\n      const testimonialsRef = collection(db, 'testimonials');\n      const docRef = await addDoc(testimonialsRef, testimonialData);\n\n      return NextResponse.json({\n        success: true,\n        data: { id: docRef.id, ...testimonialData },\n      });\n    }\n\n    return NextResponse.json(\n      { success: false, error: 'Invalid request type' },\n      { status: 400 },\n    );\n\n  } catch (error) {\n    console.error('Error processing loyalty request:', error);\n    return NextResponse.json(\n      { success: false, error: 'Failed to process loyalty request' },\n      { status: 500 },\n    );\n  }\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/api/maps/distance/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/api/maps/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'geocodeAddress' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'reverseGeocode' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":40}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { geocodeAddress, reverseGeocode } from '@/lib/maps';\nimport { geocodingService, type BatchGeocodingRequest } from '@/lib/services/geocoding-service';\n\nconst GOOGLE_MAPS_API_KEY = process.env.GOOGLE_MAPS_API_KEY;\n\nif (!GOOGLE_MAPS_API_KEY) {\n  console.warn('Google Maps API key not found in environment variables');\n}\n\n\n\nexport async function GET(request: NextRequest) {\n  const { searchParams } = new URL(request.url);\n  const action = searchParams.get('action');\n  const address = searchParams.get('address');\n  const lat = searchParams.get('lat');\n  const lng = searchParams.get('lng');\n  const query = searchParams.get('query');\n  const origin = searchParams.get('origin');\n  const destination = searchParams.get('destination');\n  const language = searchParams.get('language');\n  const region = searchParams.get('region');\n  const strict = searchParams.get('strict') === 'true';\n\n  if (!GOOGLE_MAPS_API_KEY) {\n    return NextResponse.json(\n      { error: 'Google Maps API key not configured' },\n      { status: 500 },\n    );\n  }\n\n  try {\n    switch (action) {\n      case 'geocode':\n        if (!address) {\n          return NextResponse.json(\n            { error: 'Address parameter is required' },\n            { status: 400 },\n          );\n        }\n        const geocodeResult = await geocodingService.geocode(address, {\n          language: language || undefined,\n          region: region || undefined,\n        });\n        return NextResponse.json(geocodeResult);\n\n      case 'reverse':\n        if (!lat || !lng) {\n          return NextResponse.json(\n            { error: 'Latitude and longitude parameters are required' },\n            { status: 400 },\n          );\n        }\n        const reverseResult = await geocodingService.reverseGeocode(\n          parseFloat(lat),\n          parseFloat(lng),\n          {\n            language: language || undefined,\n          },\n        );\n        return NextResponse.json(reverseResult);\n\n      case 'validate':\n        if (!address) {\n          return NextResponse.json(\n            { error: 'Address parameter is required' },\n            { status: 400 },\n          );\n        }\n        const validationResult = await geocodingService.validateAddress(address, {\n          strictValidation: strict,\n          checkDeliverability: true,\n          allowPOBoxes: false,\n          allowApproximateMatches: !strict,\n          requiredComponents: strict ? ['street_number', 'route', 'locality'] : undefined,\n        });\n        return NextResponse.json(validationResult);\n\n      case 'health':\n        const healthStatus = await geocodingService.healthCheck();\n        return NextResponse.json(healthStatus);\n\n      case 'stats':\n        const stats = geocodingService.getStats();\n        return NextResponse.json(stats);\n\n      case 'places':\n        if (!query) {\n          return NextResponse.json(\n            { error: 'Query parameter is required' },\n            { status: 400 },\n          );\n        }\n\n        const placesResponse = await fetch(\n          `https://maps.googleapis.com/maps/api/place/textsearch/json?query=${encodeURIComponent(\n            query,\n          )}&key=${GOOGLE_MAPS_API_KEY}${language ? `&language=${language}` : ''}`,\n        );\n        const placesData = await placesResponse.json();\n        return NextResponse.json(placesData);\n\n      case 'directions':\n        if (!origin || !destination) {\n          return NextResponse.json(\n            { error: 'Origin and destination parameters are required' },\n            { status: 400 },\n          );\n        }\n\n        const directionsResponse = await fetch(\n          `https://maps.googleapis.com/maps/api/directions/json?origin=${encodeURIComponent(\n            origin,\n          )}&destination=${encodeURIComponent(\n            destination,\n          )}&key=${GOOGLE_MAPS_API_KEY}${language ? `&language=${language}` : ''}`,\n        );\n        const directionsData = await directionsResponse.json();\n        return NextResponse.json(directionsData);\n\n      default:\n        return NextResponse.json(\n          { error: 'Invalid action parameter. Supported actions: geocode, reverse, validate, health, stats, places, directions' },\n          { status: 400 },\n        );\n    }\n  } catch (error) {\n    console.error('Maps API error:', error);\n\n    // Handle rate limiting errors\n    if (error instanceof Error && error.message.includes('Rate limit exceeded')) {\n      return NextResponse.json(\n        { error: 'Rate limit exceeded. Please try again later.' },\n        { status: 429 },\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Internal server error', details: error instanceof Error ? error.message : 'Unknown error' },\n      { status: 500 },\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  if (!GOOGLE_MAPS_API_KEY) {\n    return NextResponse.json(\n      { error: 'Google Maps API key not configured' },\n      { status: 500 },\n    );\n  }\n\n  try {\n    const body = await request.json();\n    const { action } = body;\n\n    switch (action) {\n      case 'geocode':\n        const { address, options = {} } = body;\n        if (!address) {\n          return NextResponse.json(\n            { error: 'Address is required' },\n            { status: 400 },\n          );\n        }\n        const result = await geocodingService.geocode(address, options);\n        return NextResponse.json(result);\n\n      case 'batch-geocode':\n        const batchRequest: BatchGeocodingRequest = body;\n        if (!batchRequest.addresses || !Array.isArray(batchRequest.addresses)) {\n          return NextResponse.json(\n            { error: 'Addresses array is required' },\n            { status: 400 },\n          );\n        }\n        if (batchRequest.addresses.length > 100) {\n          return NextResponse.json(\n            { error: 'Maximum 100 addresses allowed per batch request' },\n            { status: 400 },\n          );\n        }\n        const batchResult = await geocodingService.batchGeocode(batchRequest);\n        return NextResponse.json(batchResult);\n\n      case 'validate':\n        const { address: validateAddress, validationOptions = {} } = body;\n        if (!validateAddress) {\n          return NextResponse.json(\n            { error: 'Address is required' },\n            { status: 400 },\n          );\n        }\n        const validationResult = await geocodingService.validateAddress(\n          validateAddress,\n          validationOptions,\n        );\n        return NextResponse.json(validationResult);\n\n      case 'reverse-geocode':\n        const { lat, lng, options: reverseOptions = {} } = body;\n        if (lat === undefined || lng === undefined) {\n          return NextResponse.json(\n            { error: 'Latitude and longitude are required' },\n            { status: 400 },\n          );\n        }\n        const reverseResult = await geocodingService.reverseGeocode(\n          parseFloat(lat),\n          parseFloat(lng),\n          reverseOptions,\n        );\n        return NextResponse.json(reverseResult);\n\n      case 'clear-cache':\n        geocodingService.clearCache();\n        return NextResponse.json({ success: true, message: 'Cache cleared' });\n\n      case 'places':\n        const { query, location, radius, language } = body;\n        if (!query) {\n          return NextResponse.json(\n            { error: 'Query is required' },\n            { status: 400 },\n          );\n        }\n\n        let placesUrl = `https://maps.googleapis.com/maps/api/place/textsearch/json?query=${encodeURIComponent(\n          query,\n        )}&key=${GOOGLE_MAPS_API_KEY}`;\n\n        if (location && location.lat && location.lng) {\n          placesUrl += `&location=${location.lat},${location.lng}`;\n        }\n\n        if (radius) {\n          placesUrl += `&radius=${radius}`;\n        }\n\n        if (language) {\n          placesUrl += `&language=${language}`;\n        }\n\n        const placesResponse = await fetch(placesUrl);\n        const placesData = await placesResponse.json();\n        return NextResponse.json(placesData);\n\n      case 'directions':\n        const { origin, destination, mode = 'driving', directionsLanguage } = body;\n        if (!origin || !destination) {\n          return NextResponse.json(\n            { error: 'Origin and destination are required' },\n            { status: 400 },\n          );\n        }\n\n        let directionsUrl = `https://maps.googleapis.com/maps/api/directions/json?origin=${encodeURIComponent(\n          origin,\n        )}&destination=${encodeURIComponent(\n          destination,\n        )}&mode=${mode}&key=${GOOGLE_MAPS_API_KEY}`;\n\n        if (directionsLanguage) {\n          directionsUrl += `&language=${directionsLanguage}`;\n        }\n\n        const directionsResponse = await fetch(directionsUrl);\n        const directionsData = await directionsResponse.json();\n        return NextResponse.json(directionsData);\n\n      default:\n        return NextResponse.json(\n          { error: 'Invalid action. Supported actions: geocode, batch-geocode, validate, reverse-geocode, clear-cache, places, directions' },\n          { status: 400 },\n        );\n    }\n  } catch (error) {\n    console.error('Maps API POST error:', error);\n\n    // Handle rate limiting errors\n    if (error instanceof Error && error.message.includes('Rate limit exceeded')) {\n      return NextResponse.json(\n        { error: 'Rate limit exceeded. Please try again later.' },\n        { status: 429 },\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Internal server error', details: error instanceof Error ? error.message : 'Unknown error' },\n      { status: 500 },\n    );\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/api/orders/create/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'adminAuth' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'req' is defined but never used. Allowed unused args must match /^_/u.","line":86,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":86,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'req' is defined but never used. Allowed unused args must match /^_/u.","line":92,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":92,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'req' is defined but never used. Allowed unused args must match /^_/u.","line":98,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":98,"endColumn":33}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { adminAuth } from '../../../../lib/firebaseAdmin';\nimport { db } from '../../../../lib/firebase';\nimport { addDoc, collection } from 'firebase/firestore';\n\nexport const dynamic = 'force-dynamic';\n\nexport async function POST(req: NextRequest) {\n  try {\n    const body = await req.json();\n    const {\n      items,\n      orderType,\n      contactInfo,\n      deliveryInfo,\n      deliveryTime,\n      scheduledTime,\n      paymentMethod,\n      subtotal,\n      tax,\n      total,\n    } = body;\n\n    // Validate required fields\n    if (!items || !Array.isArray(items) || items.length === 0) {\n      return NextResponse.json(\n        { error: 'Items are required' },\n        { status: 400 },\n      );\n    }\n\n    if (!orderType || !contactInfo || !paymentMethod) {\n      return NextResponse.json(\n        { error: 'Missing required order information' },\n        { status: 400 },\n      );\n    }\n\n    // Generate order ID\n    const orderId = `OTW-${Date.now()}-${Math.floor(Math.random() * 1000)}`;\n\n    // Create order data\n    const orderData = {\n      orderId,\n      items,\n      orderType,\n      contactInfo,\n      deliveryInfo,\n      deliveryTime,\n      scheduledTime,\n      paymentMethod,\n      subtotal,\n      tax,\n      total,\n      status: 'pending',\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n\n    // Save order to Firestore\n    try {\n      await addDoc(collection(db, 'orders'), orderData);\n    } catch (firestoreError) {\n      console.error('Firestore error:', firestoreError);\n      // Continue without Firestore if it fails\n    }\n\n    // Send order confirmation email (you can implement this later)\n    // await sendOrderConfirmationEmail(contactInfo.email, orderData);\n\n    return NextResponse.json({\n      success: true,\n      orderId,\n      message: 'Order created successfully',\n    });\n\n  } catch (error) {\n    console.error('Error creating order:', error);\n    return NextResponse.json(\n      { error: 'Failed to create order' },\n      { status: 500 },\n    );\n  }\n}\n\nexport async function GET(req: NextRequest) {\n  return NextResponse.json({\n    error: 'Method not allowed',\n  }, { status: 405 });\n}\n\nexport async function PUT(req: NextRequest) {\n  return NextResponse.json({\n    error: 'Method not allowed',\n  }, { status: 405 });\n}\n\nexport async function DELETE(req: NextRequest) {\n  return NextResponse.json({\n    error: 'Method not allowed',\n  }, { status: 405 });\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/api/orders/screenshot/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":212,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":212,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6440,6443],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6440,6443],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { writeFile, mkdir } from 'fs/promises';\nimport { join } from 'path';\nimport { existsSync } from 'fs';\nimport { adminDb } from '../../../../lib/firebaseAdmin';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const formData = await request.formData();\n\n    // Extract form fields\n    const customerName = formData.get('customerName') as string;\n    const customerPhone = formData.get('customerPhone') as string;\n    const customerEmail = formData.get('customerEmail') as string;\n    const restaurantName = formData.get('restaurantName') as string;\n    const pickupLocation = formData.get('pickupLocation') as string;\n    const estimatedTotal = formData.get('estimatedTotal') as string;\n    const specialInstructions = formData.get('specialInstructions') as string;\n    const screenshot = formData.get('screenshot') as File;\n\n    // Validate required fields\n    if (!customerName || !customerPhone || !customerEmail || !restaurantName || !pickupLocation || !estimatedTotal || !screenshot) {\n      return NextResponse.json(\n        { error: 'Missing required fields' },\n        { status: 400 },\n      );\n    }\n\n    // Validate file type\n    if (!screenshot.type.startsWith('image/')) {\n      return NextResponse.json(\n        { error: 'Invalid file type. Please upload an image.' },\n        { status: 400 },\n      );\n    }\n\n    // Generate unique order ID\n    const orderId = `SS-${Date.now()}-${Math.floor(Math.random() * 1000).toString().padStart(3, '0')}`;\n\n    // Create uploads directory if it doesn't exist\n    const uploadsDir = join(process.cwd(), 'public', 'uploads', 'screenshots');\n    if (!existsSync(uploadsDir)) {\n      await mkdir(uploadsDir, { recursive: true });\n    }\n\n    // Save screenshot file\n    const bytes = await screenshot.arrayBuffer();\n    const buffer = Buffer.from(bytes);\n    const fileExtension = screenshot.name.split('.').pop() || 'jpg';\n    const fileName = `${orderId}.${fileExtension}`;\n    const filePath = join(uploadsDir, fileName);\n\n    await writeFile(filePath, buffer);\n    const screenshotUrl = `/uploads/screenshots/${fileName}`;\n\n    // Create order data\n    const orderData = {\n      orderId,\n      type: 'screenshot',\n      status: 'pending_review',\n      customerInfo: {\n        name: customerName,\n        phone: customerPhone,\n        email: customerEmail,\n      },\n      restaurantInfo: {\n        name: restaurantName,\n        pickupLocation: pickupLocation,\n      },\n      orderDetails: {\n        estimatedTotal: estimatedTotal,\n        specialInstructions: specialInstructions || '',\n        screenshotUrl: screenshotUrl,\n        originalFileName: screenshot.name,\n      },\n      timestamps: {\n        created: new Date().toISOString(),\n        updated: new Date().toISOString(),\n      },\n      workflow: {\n        reviewRequired: true,\n        confirmationCalled: false,\n        orderPlaced: false,\n        pickedUp: false,\n        delivered: false,\n      },\n      metadata: {\n        userAgent: request.headers.get('user-agent') || '',\n        ipAddress: request.headers.get('x-forwarded-for') || request.headers.get('x-real-ip') || 'unknown',\n      },\n    };\n\n    // Save to Firestore\n    const docRef = await adminDb.collection('screenshot_orders').add(orderData);\n\n    // Update order with Firestore document ID\n    await adminDb.collection('screenshot_orders').doc(docRef.id).update({\n      firestoreId: docRef.id,\n    });\n\n    // TODO: Send notification to admin team\n    // This could be an email, Slack notification, or push notification\n    // For now, we'll log it\n    console.log(`New screenshot order received: ${orderId}`);\n    console.log(`Customer: ${customerName} (${customerPhone})`);\n    console.log(`Restaurant: ${restaurantName}`);\n    console.log(`Estimated Total: ${estimatedTotal}`);\n\n    // TODO: Send confirmation email to customer\n    // This would typically use a service like SendGrid, Mailgun, etc.\n\n    return NextResponse.json({\n      success: true,\n      orderId: orderId,\n      message: 'Screenshot order submitted successfully',\n    });\n\n  } catch (error) {\n    console.error('Error processing screenshot order:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 },\n    );\n  }\n}\n\n// Handle GET requests to retrieve screenshot orders (for admin)\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const orderId = searchParams.get('orderId');\n    const status = searchParams.get('status');\n    const limit = parseInt(searchParams.get('limit') || '50');\n\n    let query = adminDb.collection('screenshot_orders');\n\n    // Filter by order ID if provided\n    if (orderId) {\n      const doc = await query.doc(orderId).get();\n      if (!doc.exists) {\n        return NextResponse.json(\n          { error: 'Order not found' },\n          { status: 404 },\n        );\n      }\n      return NextResponse.json({\n        order: { id: doc.id, ...doc.data() },\n      });\n    }\n\n    // Filter by status if provided\n    if (status) {\n      query = query.where('status', '==', status);\n    }\n\n    // Order by creation date (newest first) and limit results\n    const snapshot = await query\n      .orderBy('timestamps.created', 'desc')\n      .limit(limit)\n      .get();\n\n    const orders = snapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data(),\n    }));\n\n    return NextResponse.json({\n      orders,\n      count: orders.length,\n    });\n\n  } catch (error) {\n    console.error('Error retrieving screenshot orders:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 },\n    );\n  }\n}\n\n// Handle PUT requests to update order status\nexport async function PUT(request: NextRequest) {\n  try {\n    const { orderId, status, notes, adminId } = await request.json();\n\n    if (!orderId || !status) {\n      return NextResponse.json(\n        { error: 'Order ID and status are required' },\n        { status: 400 },\n      );\n    }\n\n    const validStatuses = [\n      'pending_review',\n      'confirmed',\n      'order_placed',\n      'picked_up',\n      'out_for_delivery',\n      'delivered',\n      'cancelled',\n      'failed',\n    ];\n\n    if (!validStatuses.includes(status)) {\n      return NextResponse.json(\n        { error: 'Invalid status' },\n        { status: 400 },\n      );\n    }\n\n    // Update order in Firestore\n    const updateData: any = {\n      status,\n      'timestamps.updated': new Date().toISOString(),\n    };\n\n    if (notes) {\n      updateData.adminNotes = notes;\n    }\n\n    if (adminId) {\n      updateData.lastUpdatedBy = adminId;\n    }\n\n    // Update workflow flags based on status\n    switch (status) {\n      case 'confirmed':\n        updateData['workflow.confirmationCalled'] = true;\n        break;\n      case 'order_placed':\n        updateData['workflow.orderPlaced'] = true;\n        break;\n      case 'picked_up':\n        updateData['workflow.pickedUp'] = true;\n        break;\n      case 'delivered':\n        updateData['workflow.delivered'] = true;\n        break;\n    }\n\n    await adminDb.collection('screenshot_orders').doc(orderId).update(updateData);\n\n    return NextResponse.json({\n      success: true,\n      message: 'Order status updated successfully',\n    });\n\n  } catch (error) {\n    console.error('Error updating screenshot order:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 },\n    );\n  }\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/api/otw/create-checkout-session/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[427,430],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[427,430],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { adminAuth, adminDb } from '@/lib/firebaseAdmin';\nimport Stripe from 'stripe';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n  apiVersion: '2024-06-20',\n});\n\ninterface ServiceDetails {\n  type: 'grocery' | 'rides' | 'package';\n  title: string;\n  description: string;\n  estimatedPrice: number;\n  serviceDetails: any;\n}\n\ninterface CustomerInfo {\n  name: string;\n  phone: string;\n  email: string;\n  address: string;\n  specialInstructions: string;\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Verify Firebase Admin is initialized\n    if (!adminAuth || !adminDb) {\n      console.error('Firebase Admin not initialized');\n      return NextResponse.json(\n        { error: 'Server configuration error' },\n        { status: 500 },\n      );\n    }\n\n    // Verify Stripe is configured\n    if (!process.env.STRIPE_SECRET_KEY) {\n      console.error('Stripe secret key not configured');\n      return NextResponse.json(\n        { error: 'Payment processing not configured' },\n        { status: 500 },\n      );\n    }\n\n    // Get and verify the authorization token\n    const authHeader = request.headers.get('authorization');\n    let userId = null;\n\n    if (authHeader && authHeader.startsWith('Bearer ')) {\n      try {\n        const token = authHeader.substring(7);\n        const decodedToken = await adminAuth.verifyIdToken(token);\n        userId = decodedToken.uid;\n      } catch (error) {\n        console.error('Token verification failed:', error);\n        // Continue without user ID for guest checkout\n      }\n    }\n\n    // Parse request body\n    const { serviceDetails, customerInfo, amount }: {\n      serviceDetails: ServiceDetails;\n      customerInfo: CustomerInfo;\n      amount: number;\n    } = await request.json();\n\n    // Validate required fields\n    if (!serviceDetails || !customerInfo || !amount) {\n      return NextResponse.json(\n        { error: 'Missing required checkout information' },\n        { status: 400 },\n      );\n    }\n\n    // Validate amount\n    if (typeof amount !== 'number' || amount <= 0) {\n      return NextResponse.json(\n        { error: 'Invalid amount' },\n        { status: 400 },\n      );\n    }\n\n    // Validate customer information\n    const { name, phone, email, address } = customerInfo;\n    if (!name || !phone || !email || !address) {\n      return NextResponse.json(\n        { error: 'Missing required customer information' },\n        { status: 400 },\n      );\n    }\n\n    // Generate order ID for tracking\n    const orderId = `OTW-${Date.now()}-${uuidv4().substring(0, 8).toUpperCase()}`;\n\n    // Create Stripe checkout session\n    const session = await stripe.checkout.sessions.create({\n      payment_method_types: ['card'],\n      line_items: [\n        {\n          price_data: {\n            currency: 'usd',\n            product_data: {\n              name: serviceDetails.title,\n              description: serviceDetails.description,\n              metadata: {\n                service_type: serviceDetails.type,\n                order_id: orderId,\n              },\n            },\n            unit_amount: amount,\n          },\n          quantity: 1,\n        },\n      ],\n      mode: 'payment',\n      success_url: `${process.env.NEXT_PUBLIC_BASE_URL}/otw/checkout/success?session_id={CHECKOUT_SESSION_ID}&order_id=${orderId}`,\n      cancel_url: `${process.env.NEXT_PUBLIC_BASE_URL}/otw/checkout?service=${serviceDetails.type}`,\n      customer_email: customerInfo.email,\n      metadata: {\n        order_id: orderId,\n        user_id: userId || 'guest',\n        service_type: serviceDetails.type,\n        service_title: serviceDetails.title,\n        customer_name: customerInfo.name,\n        customer_phone: customerInfo.phone,\n        customer_address: customerInfo.address,\n        special_instructions: customerInfo.specialInstructions || '',\n        source: 'otw_web',\n      },\n      billing_address_collection: 'auto',\n      shipping_address_collection: {\n        allowed_countries: ['US', 'CA'],\n      },\n      phone_number_collection: {\n        enabled: true,\n      },\n      custom_fields: [\n        {\n          key: 'service_address',\n          label: {\n            type: 'custom',\n            custom: 'Service Address',\n          },\n          type: 'text',\n          text: {\n            default_value: customerInfo.address,\n          },\n        },\n      ],\n    });\n\n    // Create pending order record\n    const orderData = {\n      orderId,\n      userId: userId || null,\n      serviceDetails,\n      customerInfo,\n      paymentMethod: 'card',\n      paymentStatus: 'pending',\n      orderStatus: 'pending_payment',\n      estimatedPrice: serviceDetails.estimatedPrice,\n      actualPrice: amount / 100, // Convert from cents\n      stripeSessionId: session.id,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n      assignedHelper: null,\n      completedAt: null,\n      notes: [],\n      metadata: {\n        source: 'otw_web',\n        userAgent: request.headers.get('user-agent') || '',\n        ip: request.headers.get('x-forwarded-for') || request.headers.get('x-real-ip') || 'unknown',\n      },\n    };\n\n    // Save pending order to Firestore\n    try {\n      await adminDb.collection('otw_orders').doc(orderId).set(orderData);\n\n      // Also save to user's orders if authenticated\n      if (userId) {\n        await adminDb.collection('users').doc(userId).collection('otw_orders').doc(orderId).set({\n          orderId,\n          serviceType: serviceDetails.type,\n          serviceTitle: serviceDetails.title,\n          estimatedPrice: serviceDetails.estimatedPrice,\n          paymentMethod: 'card',\n          orderStatus: 'pending_payment',\n          stripeSessionId: session.id,\n          createdAt: new Date().toISOString(),\n        });\n      }\n\n      console.log(`OTW Stripe session created: ${session.id} for order: ${orderId}`);\n\n      return NextResponse.json({\n        sessionId: session.id,\n        url: session.url,\n        orderId,\n      });\n    } catch (firestoreError) {\n      console.error('Firestore error:', firestoreError);\n      return NextResponse.json(\n        { error: 'Failed to create order record' },\n        { status: 500 },\n      );\n    }\n  } catch (error) {\n    console.error('Stripe checkout session creation error:', error);\n    return NextResponse.json(\n      { error: 'Failed to create checkout session' },\n      { status: 500 },\n    );\n  }\n}\n\nexport async function GET() {\n  return NextResponse.json(\n    { error: 'Method not allowed' },\n    { status: 405 },\n  );\n}\n\nexport async function PUT() {\n  return NextResponse.json(\n    { error: 'Method not allowed' },\n    { status: 405 },\n  );\n}\n\nexport async function DELETE() {\n  return NextResponse.json(\n    { error: 'Method not allowed' },\n    { status: 405 },\n  );\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/api/otw/orders/create/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[305,308],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[305,308],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[580,583],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[580,583],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { adminAuth, adminDb } from '@/lib/firebaseAdmin';\nimport { v4 as uuidv4 } from 'uuid';\n\ninterface ServiceDetails {\n  type: 'grocery' | 'rides' | 'package';\n  title: string;\n  description: string;\n  estimatedPrice: number;\n  serviceDetails: any;\n}\n\ninterface CustomerInfo {\n  name: string;\n  phone: string;\n  email: string;\n  address: string;\n  specialInstructions: string;\n}\n\ninterface OrderData {\n  serviceDetails: ServiceDetails;\n  customerInfo: CustomerInfo;\n  paymentMethod: 'contact' | 'card';\n  cardDetails?: any;\n  timestamp: string;\n  userId?: string;\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Verify Firebase Admin is initialized\n    if (!adminAuth || !adminDb) {\n      console.error('Firebase Admin not initialized');\n      return NextResponse.json(\n        { error: 'Server configuration error' },\n        { status: 500 },\n      );\n    }\n\n    // Get and verify the authorization token\n    const authHeader = request.headers.get('authorization');\n    let userId = null;\n\n    if (authHeader && authHeader.startsWith('Bearer ')) {\n      try {\n        const token = authHeader.substring(7);\n        const decodedToken = await adminAuth.verifyIdToken(token);\n        userId = decodedToken.uid;\n      } catch (error) {\n        console.error('Token verification failed:', error);\n        // Continue without user ID for guest orders\n      }\n    }\n\n    // Parse request body\n    const orderData: OrderData = await request.json();\n\n    // Validate required fields\n    if (!orderData.serviceDetails || !orderData.customerInfo || !orderData.paymentMethod) {\n      return NextResponse.json(\n        { error: 'Missing required order information' },\n        { status: 400 },\n      );\n    }\n\n    // Validate customer information\n    const { name, phone, email, address } = orderData.customerInfo;\n    if (!name || !phone || !email || !address) {\n      return NextResponse.json(\n        { error: 'Missing required customer information' },\n        { status: 400 },\n      );\n    }\n\n    // Validate service details\n    const { type, title, estimatedPrice } = orderData.serviceDetails;\n    if (!type || !title || typeof estimatedPrice !== 'number') {\n      return NextResponse.json(\n        { error: 'Invalid service details' },\n        { status: 400 },\n      );\n    }\n\n    // Generate order ID\n    const orderId = `OTW-${Date.now()}-${uuidv4().substring(0, 8).toUpperCase()}`;\n\n    // Create order document\n    const order = {\n      orderId,\n      userId: userId || null,\n      serviceDetails: orderData.serviceDetails,\n      customerInfo: {\n        name: orderData.customerInfo.name,\n        phone: orderData.customerInfo.phone,\n        email: orderData.customerInfo.email,\n        address: orderData.customerInfo.address,\n        specialInstructions: orderData.customerInfo.specialInstructions || '',\n      },\n      paymentMethod: orderData.paymentMethod,\n      paymentStatus: orderData.paymentMethod === 'contact' ? 'pending' : 'processing',\n      orderStatus: 'pending',\n      estimatedPrice: orderData.serviceDetails.estimatedPrice,\n      actualPrice: null,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n      assignedHelper: null,\n      completedAt: null,\n      notes: [],\n      metadata: {\n        source: 'otw_web',\n        userAgent: request.headers.get('user-agent') || '',\n        ip: request.headers.get('x-forwarded-for') || request.headers.get('x-real-ip') || 'unknown',\n      },\n    };\n\n    // Save order to Firestore\n    try {\n      await adminDb.collection('otw_orders').doc(orderId).set(order);\n\n      // Also save to user's orders if authenticated\n      if (userId) {\n        await adminDb.collection('users').doc(userId).collection('otw_orders').doc(orderId).set({\n          orderId,\n          serviceType: orderData.serviceDetails.type,\n          serviceTitle: orderData.serviceDetails.title,\n          estimatedPrice: orderData.serviceDetails.estimatedPrice,\n          paymentMethod: orderData.paymentMethod,\n          orderStatus: 'pending',\n          createdAt: new Date().toISOString(),\n        });\n      }\n\n      console.log(`OTW Order created successfully: ${orderId}`);\n\n      return NextResponse.json({\n        success: true,\n        orderId,\n        message: 'Order created successfully',\n        order: {\n          orderId,\n          serviceTitle: orderData.serviceDetails.title,\n          estimatedPrice: orderData.serviceDetails.estimatedPrice,\n          paymentMethod: orderData.paymentMethod,\n          orderStatus: 'pending',\n        },\n      });\n    } catch (firestoreError) {\n      console.error('Firestore error:', firestoreError);\n      return NextResponse.json(\n        { error: 'Failed to save order' },\n        { status: 500 },\n      );\n    }\n  } catch (error) {\n    console.error('Order creation error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 },\n    );\n  }\n}\n\nexport async function GET() {\n  return NextResponse.json(\n    { error: 'Method not allowed' },\n    { status: 405 },\n  );\n}\n\nexport async function PUT() {\n  return NextResponse.json(\n    { error: 'Method not allowed' },\n    { status: 405 },\n  );\n}\n\nexport async function DELETE() {\n  return NextResponse.json(\n    { error: 'Method not allowed' },\n    { status: 405 },\n  );\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/api/otw/verify-payment/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'userId' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":37,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { adminAuth, adminDb } from '@/lib/firebaseAdmin';\nimport Stripe from 'stripe';\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n  apiVersion: '2024-06-20',\n});\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Verify Firebase Admin is initialized\n    if (!adminAuth || !adminDb) {\n      console.error('Firebase Admin not initialized');\n      return NextResponse.json(\n        { error: 'Server configuration error' },\n        { status: 500 },\n      );\n    }\n\n    // Verify Stripe is configured\n    if (!process.env.STRIPE_SECRET_KEY) {\n      console.error('Stripe secret key not configured');\n      return NextResponse.json(\n        { error: 'Payment processing not configured' },\n        { status: 500 },\n      );\n    }\n\n    // Get and verify the authorization token (optional for payment verification)\n    const authHeader = request.headers.get('authorization');\n    let userId = null;\n\n    if (authHeader && authHeader.startsWith('Bearer ')) {\n      try {\n        const token = authHeader.substring(7);\n        const decodedToken = await adminAuth.verifyIdToken(token);\n        userId = decodedToken.uid;\n      } catch (error) {\n        console.error('Token verification failed:', error);\n        // Continue without user ID for guest verification\n      }\n    }\n\n    // Parse request body\n    const { sessionId, orderId }: {\n      sessionId: string;\n      orderId: string;\n    } = await request.json();\n\n    // Validate required fields\n    if (!sessionId || !orderId) {\n      return NextResponse.json(\n        { error: 'Missing session ID or order ID' },\n        { status: 400 },\n      );\n    }\n\n    try {\n      // Retrieve the Stripe session\n      const session = await stripe.checkout.sessions.retrieve(sessionId);\n\n      if (!session) {\n        return NextResponse.json(\n          { error: 'Invalid session ID' },\n          { status: 400 },\n        );\n      }\n\n      // Check if payment was successful\n      if (session.payment_status !== 'paid') {\n        return NextResponse.json(\n          { error: 'Payment not completed' },\n          { status: 400 },\n        );\n      }\n\n      // Get the order from Firestore\n      const orderDoc = await adminDb.collection('otw_orders').doc(orderId).get();\n\n      if (!orderDoc.exists) {\n        return NextResponse.json(\n          { error: 'Order not found' },\n          { status: 404 },\n        );\n      }\n\n      const orderData = orderDoc.data();\n\n      // Verify the session ID matches\n      if (orderData?.stripeSessionId !== sessionId) {\n        return NextResponse.json(\n          { error: 'Session ID mismatch' },\n          { status: 400 },\n        );\n      }\n\n      // Update order status if payment is confirmed\n      if (orderData?.paymentStatus !== 'paid') {\n        const updateData = {\n          paymentStatus: 'paid',\n          orderStatus: 'confirmed',\n          updatedAt: new Date().toISOString(),\n          stripePaymentIntentId: session.payment_intent,\n          actualPrice: (session.amount_total || 0) / 100, // Convert from cents\n          paymentCompletedAt: new Date().toISOString(),\n        };\n\n        // Update main order document\n        await adminDb.collection('otw_orders').doc(orderId).update(updateData);\n\n        // Update user's order record if user is authenticated\n        if (orderData.userId) {\n          await adminDb\n            .collection('users')\n            .doc(orderData.userId)\n            .collection('otw_orders')\n            .doc(orderId)\n            .update({\n              paymentStatus: 'paid',\n              orderStatus: 'confirmed',\n              updatedAt: new Date().toISOString(),\n            });\n        }\n\n        console.log(`Payment verified and order updated: ${orderId}`);\n      }\n\n      // Return the updated order details\n      const updatedOrderDoc = await adminDb.collection('otw_orders').doc(orderId).get();\n      const updatedOrderData = updatedOrderDoc.data();\n\n      return NextResponse.json({\n        success: true,\n        paymentStatus: session.payment_status,\n        order: {\n          orderId: updatedOrderData?.orderId,\n          serviceDetails: updatedOrderData?.serviceDetails,\n          customerInfo: updatedOrderData?.customerInfo,\n          paymentStatus: updatedOrderData?.paymentStatus,\n          orderStatus: updatedOrderData?.orderStatus,\n          actualPrice: updatedOrderData?.actualPrice,\n          createdAt: updatedOrderData?.createdAt,\n          paymentCompletedAt: updatedOrderData?.paymentCompletedAt,\n        },\n      });\n    } catch (stripeError) {\n      console.error('Stripe verification error:', stripeError);\n      return NextResponse.json(\n        { error: 'Failed to verify payment with Stripe' },\n        { status: 500 },\n      );\n    }\n  } catch (error) {\n    console.error('Payment verification error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 },\n    );\n  }\n}\n\nexport async function GET() {\n  return NextResponse.json(\n    { error: 'Method not allowed' },\n    { status: 405 },\n  );\n}\n\nexport async function PUT() {\n  return NextResponse.json(\n    { error: 'Method not allowed' },\n    { status: 405 },\n  );\n}\n\nexport async function DELETE() {\n  return NextResponse.json(\n    { error: 'Method not allowed' },\n    { status: 405 },\n  );\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/api/packages/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":175,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":175,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5636,5639],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5636,5639],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { db } from '../../../lib/firebase';\nimport { collection, getDocs, addDoc, query, where, orderBy } from 'firebase/firestore';\n\nexport const dynamic = 'force-dynamic';\n\ninterface DeliveryService {\n  id: string;\n  name: string;\n  description: string;\n  basePrice: number;\n  pricePerMile: number;\n  maxWeight: number;\n  maxDimensions: string;\n  estimatedDelivery: string;\n  features: string[];\n  available: boolean;\n}\n\ninterface PackageType {\n  id: string;\n  name: string;\n  description: string;\n  maxWeight: number;\n  maxDimensions: string;\n  handling: string;\n  available: boolean;\n}\n\ninterface PackageRequest {\n  pickupAddress: string;\n  deliveryAddress: string;\n  packageType: string;\n  deliveryService: string;\n  weight: number;\n  dimensions: string;\n  specialInstructions?: string;\n  scheduledPickup?: string;\n}\n\n// GET - Retrieve delivery services and package types\nexport async function GET(req: NextRequest) {\n  try {\n    const { searchParams } = new URL(req.url);\n    const type = searchParams.get('type');\n\n    if (type === 'services') {\n      // Fetch delivery services from database\n      const servicesRef = collection(db, 'deliveryServices');\n      const servicesSnapshot = await getDocs(query(servicesRef, where('available', '==', true), orderBy('basePrice')));\n\n      const services: DeliveryService[] = [];\n      servicesSnapshot.forEach((doc) => {\n        services.push({ id: doc.id, ...doc.data() } as DeliveryService);\n      });\n\n      // If no services in database, return default data\n      if (services.length === 0) {\n        const defaultServices: DeliveryService[] = [\n          {\n            id: '1',\n            name: 'Standard Delivery',\n            description: 'Reliable delivery within 24-48 hours',\n            basePrice: 8.99,\n            pricePerMile: 0.75,\n            maxWeight: 50,\n            maxDimensions: '24\" x 18\" x 12\"',\n            estimatedDelivery: '1-2 business days',\n            features: ['Tracking included', 'Insurance up to $100'],\n            available: true,\n          },\n          {\n            id: '2',\n            name: 'Express Delivery',\n            description: 'Fast delivery within 4-6 hours',\n            basePrice: 15.99,\n            pricePerMile: 1.25,\n            maxWeight: 30,\n            maxDimensions: '20\" x 16\" x 10\"',\n            estimatedDelivery: '4-6 hours',\n            features: ['Real-time tracking', 'Priority handling', 'Insurance up to $200'],\n            available: true,\n          },\n          {\n            id: '3',\n            name: 'Same Day Delivery',\n            description: 'Ultra-fast delivery within 2-3 hours',\n            basePrice: 25.99,\n            pricePerMile: 2.00,\n            maxWeight: 20,\n            maxDimensions: '18\" x 14\" x 8\"',\n            estimatedDelivery: '2-3 hours',\n            features: ['Live tracking', 'Immediate pickup', 'Insurance up to $300'],\n            available: true,\n          },\n          {\n            id: '4',\n            name: 'Fragile Handling',\n            description: 'Specialized service for delicate items',\n            basePrice: 18.99,\n            pricePerMile: 1.50,\n            maxWeight: 25,\n            maxDimensions: '16\" x 12\" x 10\"',\n            estimatedDelivery: '6-8 hours',\n            features: ['Fragile handling', 'Extra padding', 'Insurance up to $500'],\n            available: true,\n          },\n        ];\n        return NextResponse.json({ success: true, data: defaultServices });\n      }\n\n      return NextResponse.json({ success: true, data: services });\n    }\n\n    if (type === 'package-types') {\n      // Fetch package types from database\n      const typesRef = collection(db, 'packageTypes');\n      const typesSnapshot = await getDocs(query(typesRef, where('available', '==', true)));\n\n      const packageTypes: PackageType[] = [];\n      typesSnapshot.forEach((doc) => {\n        packageTypes.push({ id: doc.id, ...doc.data() } as PackageType);\n      });\n\n      // If no package types in database, return default data\n      if (packageTypes.length === 0) {\n        const defaultPackageTypes: PackageType[] = [\n          {\n            id: '1',\n            name: 'Small Package',\n            description: 'Documents, small items',\n            maxWeight: 5,\n            maxDimensions: '12\" x 9\" x 3\"',\n            handling: 'Standard',\n            available: true,\n          },\n          {\n            id: '2',\n            name: 'Medium Package',\n            description: 'Books, clothing, small electronics',\n            maxWeight: 20,\n            maxDimensions: '18\" x 14\" x 8\"',\n            handling: 'Standard',\n            available: true,\n          },\n          {\n            id: '3',\n            name: 'Large Package',\n            description: 'Large items, multiple products',\n            maxWeight: 50,\n            maxDimensions: '24\" x 18\" x 12\"',\n            handling: 'Careful',\n            available: true,\n          },\n          {\n            id: '4',\n            name: 'Fragile Package',\n            description: 'Delicate items requiring special care',\n            maxWeight: 15,\n            maxDimensions: '16\" x 12\" x 8\"',\n            handling: 'Fragile',\n            available: true,\n          },\n        ];\n        return NextResponse.json({ success: true, data: defaultPackageTypes });\n      }\n\n      return NextResponse.json({ success: true, data: packageTypes });\n    }\n\n    // Default: return all package delivery data\n    const packagesRef = collection(db, 'packages');\n    const packagesSnapshot = await getDocs(query(packagesRef, orderBy('createdAt', 'desc')));\n\n    const packages: any[] = [];\n    packagesSnapshot.forEach((doc) => {\n      packages.push({ id: doc.id, ...doc.data() });\n    });\n\n    return NextResponse.json({ success: true, data: packages });\n\n  } catch (error) {\n    console.error('Error fetching package data:', error);\n    return NextResponse.json(\n      { success: false, error: 'Failed to fetch package data' },\n      { status: 500 },\n    );\n  }\n}\n\n// POST - Create a new package delivery request\nexport async function POST(req: NextRequest) {\n  try {\n    const body: PackageRequest = await req.json();\n\n    // Validate required fields\n    if (!body.pickupAddress || !body.deliveryAddress || !body.packageType || !body.deliveryService) {\n      return NextResponse.json(\n        { success: false, error: 'Missing required fields' },\n        { status: 400 },\n      );\n    }\n\n    // Create package delivery request\n    const packageData = {\n      ...body,\n      status: 'pending',\n      trackingNumber: `PKG${Date.now()}`,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n\n    const packagesRef = collection(db, 'packages');\n    const docRef = await addDoc(packagesRef, packageData);\n\n    return NextResponse.json({\n      success: true,\n      data: { id: docRef.id, ...packageData },\n    });\n\n  } catch (error) {\n    console.error('Error creating package request:', error);\n    return NextResponse.json(\n      { success: false, error: 'Failed to create package request' },\n      { status: 500 },\n    );\n  }\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/api/payments/screenshot/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'auth' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'verifyIdToken' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":40,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":290,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":290,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8441,8444],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8441,8444],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { auth, db, storage } from '../../../../lib/firebase';\nimport { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\nimport { collection, addDoc, doc, getDoc, getDocs, updateDoc, deleteDoc, query, where, orderBy, limit } from 'firebase/firestore';\nimport { verifyIdToken } from 'firebase-admin/auth';\n\nexport const dynamic = 'force-dynamic';\n\ninterface PaymentScreenshot {\n  id?: string;\n  userId: string;\n  orderId?: string;\n  amount: number;\n  currency: string;\n  paymentMethod: string;\n  transactionId?: string;\n  screenshotUrl: string;\n  status: 'pending' | 'verified' | 'rejected';\n  notes?: string;\n  verifiedBy?: string;\n  verifiedAt?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\n// Verify Firebase Auth token\nasync function verifyAuthToken(request: NextRequest) {\n  const authHeader = request.headers.get('authorization');\n\n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    throw new Error('No authorization token provided');\n  }\n\n  const token = authHeader.split('Bearer ')[1];\n\n  try {\n    const admin = await import('firebase-admin/auth');\n    const decodedToken = await admin.verifyIdToken(token);\n    return decodedToken;\n  } catch (error) {\n    throw new Error('Invalid authorization token');\n  }\n}\n\n// GET - Retrieve payment screenshots\nexport async function GET(req: NextRequest) {\n  try {\n    const decodedToken = await verifyAuthToken(req);\n    const { searchParams } = new URL(req.url);\n\n    const orderId = searchParams.get('orderId');\n    const status = searchParams.get('status');\n    const limit_param = searchParams.get('limit');\n    const userId = searchParams.get('userId');\n\n    // Build query constraints\n    const constraints = [];\n\n    // Regular users can only see their own screenshots\n    // Admin users can see all screenshots\n    const userDoc = await getDoc(doc(db, 'users', decodedToken.uid));\n    const userData = userDoc.data();\n    const isAdmin = userData?.role === 'admin';\n\n    if (!isAdmin) {\n      constraints.push(where('userId', '==', decodedToken.uid));\n    } else if (userId) {\n      constraints.push(where('userId', '==', userId));\n    }\n\n    if (orderId) {\n      constraints.push(where('orderId', '==', orderId));\n    }\n\n    if (status) {\n      constraints.push(where('status', '==', status));\n    }\n\n    constraints.push(orderBy('createdAt', 'desc'));\n    constraints.push(limit(parseInt(limit_param || '20')));\n\n    const q = query(collection(db, 'payment_screenshots'), ...constraints);\n    const querySnapshot = await getDocs(q);\n\n    const screenshots: PaymentScreenshot[] = [];\n    querySnapshot.forEach((doc) => {\n      screenshots.push({\n        id: doc.id,\n        ...doc.data(),\n      } as PaymentScreenshot);\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: screenshots,\n      total: screenshots.length,\n    });\n\n  } catch (error) {\n    console.error('Get payment screenshots error:', error);\n\n    if (error instanceof Error && error.message.includes('authorization')) {\n      return NextResponse.json(\n        { error: error.message },\n        { status: 401 },\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Failed to retrieve payment screenshots' },\n      { status: 500 },\n    );\n  }\n}\n\n// POST - Upload payment screenshot\nexport async function POST(req: NextRequest) {\n  try {\n    const decodedToken = await verifyAuthToken(req);\n    const formData = await req.formData();\n\n    // Extract form data\n    const screenshot = formData.get('screenshot') as File;\n    const orderId = formData.get('orderId') as string;\n    const amount = parseFloat(formData.get('amount') as string);\n    const currency = formData.get('currency') as string || 'USD';\n    const paymentMethod = formData.get('paymentMethod') as string;\n    const transactionId = formData.get('transactionId') as string;\n    const notes = formData.get('notes') as string;\n\n    // Validation\n    if (!screenshot) {\n      return NextResponse.json(\n        { error: 'Screenshot file is required' },\n        { status: 400 },\n      );\n    }\n\n    if (!amount || amount <= 0) {\n      return NextResponse.json(\n        { error: 'Valid amount is required' },\n        { status: 400 },\n      );\n    }\n\n    if (!paymentMethod) {\n      return NextResponse.json(\n        { error: 'Payment method is required' },\n        { status: 400 },\n      );\n    }\n\n    // Validate file type\n    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];\n    if (!allowedTypes.includes(screenshot.type)) {\n      return NextResponse.json(\n        { error: 'Invalid file type. Only JPEG, PNG, and WebP images are allowed' },\n        { status: 400 },\n      );\n    }\n\n    // Validate file size (max 5MB)\n    const maxSize = 5 * 1024 * 1024; // 5MB\n    if (screenshot.size > maxSize) {\n      return NextResponse.json(\n        { error: 'File size too large. Maximum size is 5MB' },\n        { status: 400 },\n      );\n    }\n\n    // Upload screenshot to Firebase Storage\n    const timestamp = Date.now();\n    const fileName = `payment-screenshots/${decodedToken.uid}/${timestamp}-${screenshot.name}`;\n    const storageRef = ref(storage, fileName);\n\n    const arrayBuffer = await screenshot.arrayBuffer();\n    const uploadResult = await uploadBytes(storageRef, arrayBuffer, {\n      contentType: screenshot.type,\n    });\n\n    const screenshotUrl = await getDownloadURL(uploadResult.ref);\n\n    // Create payment screenshot record\n    const paymentScreenshot: Omit<PaymentScreenshot, 'id'> = {\n      userId: decodedToken.uid,\n      orderId: orderId || undefined,\n      amount,\n      currency,\n      paymentMethod,\n      transactionId: transactionId || undefined,\n      screenshotUrl,\n      status: 'pending',\n      notes: notes || undefined,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n\n    const docRef = await addDoc(collection(db, 'payment_screenshots'), paymentScreenshot);\n\n    // If orderId is provided, update the order status\n    if (orderId) {\n      try {\n        const orderRef = doc(db, 'orders', orderId);\n        const orderDoc = await getDoc(orderRef);\n\n        if (orderDoc.exists()) {\n          await updateDoc(orderRef, {\n            paymentScreenshotId: docRef.id,\n            paymentStatus: 'verification_pending',\n            updatedAt: new Date().toISOString(),\n          });\n        }\n      } catch (orderError) {\n        console.error('Error updating order:', orderError);\n        // Don't fail the main operation if order update fails\n      }\n    }\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        id: docRef.id,\n        ...paymentScreenshot,\n      },\n      message: 'Payment screenshot uploaded successfully',\n    });\n\n  } catch (error) {\n    console.error('Upload payment screenshot error:', error);\n\n    if (error instanceof Error && error.message.includes('authorization')) {\n      return NextResponse.json(\n        { error: error.message },\n        { status: 401 },\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Failed to upload payment screenshot' },\n      { status: 500 },\n    );\n  }\n}\n\n// PUT - Update payment screenshot (admin verification)\nexport async function PUT(req: NextRequest) {\n  try {\n    const decodedToken = await verifyAuthToken(req);\n    const { searchParams } = new URL(req.url);\n    const screenshotId = searchParams.get('id');\n\n    if (!screenshotId) {\n      return NextResponse.json(\n        { error: 'Screenshot ID is required' },\n        { status: 400 },\n      );\n    }\n\n    // Check if user is admin\n    const userDoc = await getDoc(doc(db, 'users', decodedToken.uid));\n    const userData = userDoc.data();\n\n    if (userData?.role !== 'admin') {\n      return NextResponse.json(\n        { error: 'Admin access required' },\n        { status: 403 },\n      );\n    }\n\n    const { status, notes } = await req.json();\n\n    // Validate status\n    if (!['pending', 'verified', 'rejected'].includes(status)) {\n      return NextResponse.json(\n        { error: \"Invalid status. Must be 'pending', 'verified', or 'rejected'\" },\n        { status: 400 },\n      );\n    }\n\n    const screenshotRef = doc(db, 'payment_screenshots', screenshotId);\n    const screenshotDoc = await getDoc(screenshotRef);\n\n    if (!screenshotDoc.exists()) {\n      return NextResponse.json(\n        { error: 'Payment screenshot not found' },\n        { status: 404 },\n      );\n    }\n\n    const updateData: any = {\n      status,\n      updatedAt: new Date().toISOString(),\n    };\n\n    if (status === 'verified' || status === 'rejected') {\n      updateData.verifiedBy = decodedToken.uid;\n      updateData.verifiedAt = new Date().toISOString();\n    }\n\n    if (notes) {\n      updateData.notes = notes;\n    }\n\n    await updateDoc(screenshotRef, updateData);\n\n    // Update related order if exists\n    const screenshotData = screenshotDoc.data();\n    if (screenshotData?.orderId) {\n      try {\n        const orderRef = doc(db, 'orders', screenshotData.orderId);\n        const orderDoc = await getDoc(orderRef);\n\n        if (orderDoc.exists()) {\n          let paymentStatus = 'verification_pending';\n\n          if (status === 'verified') {\n            paymentStatus = 'paid';\n          } else if (status === 'rejected') {\n            paymentStatus = 'payment_failed';\n          }\n\n          await updateDoc(orderRef, {\n            paymentStatus,\n            updatedAt: new Date().toISOString(),\n          });\n        }\n      } catch (orderError) {\n        console.error('Error updating order:', orderError);\n      }\n    }\n\n    const updatedDoc = await getDoc(screenshotRef);\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        id: updatedDoc.id,\n        ...updatedDoc.data(),\n      },\n      message: 'Payment screenshot updated successfully',\n    });\n\n  } catch (error) {\n    console.error('Update payment screenshot error:', error);\n\n    if (error instanceof Error && error.message.includes('authorization')) {\n      return NextResponse.json(\n        { error: error.message },\n        { status: 401 },\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Failed to update payment screenshot' },\n      { status: 500 },\n    );\n  }\n}\n\n// DELETE - Delete payment screenshot\nexport async function DELETE(req: NextRequest) {\n  try {\n    const decodedToken = await verifyAuthToken(req);\n    const { searchParams } = new URL(req.url);\n    const screenshotId = searchParams.get('id');\n\n    if (!screenshotId) {\n      return NextResponse.json(\n        { error: 'Screenshot ID is required' },\n        { status: 400 },\n      );\n    }\n\n    const screenshotRef = doc(db, 'payment_screenshots', screenshotId);\n    const screenshotDoc = await getDoc(screenshotRef);\n\n    if (!screenshotDoc.exists()) {\n      return NextResponse.json(\n        { error: 'Payment screenshot not found' },\n        { status: 404 },\n      );\n    }\n\n    const screenshotData = screenshotDoc.data();\n\n    // Check permissions - users can only delete their own screenshots, admins can delete any\n    const userDoc = await getDoc(doc(db, 'users', decodedToken.uid));\n    const userData = userDoc.data();\n    const isAdmin = userData?.role === 'admin';\n\n    if (!isAdmin && screenshotData?.userId !== decodedToken.uid) {\n      return NextResponse.json(\n        { error: 'Permission denied' },\n        { status: 403 },\n      );\n    }\n\n    // Don't allow deletion of verified screenshots unless admin\n    if (screenshotData?.status === 'verified' && !isAdmin) {\n      return NextResponse.json(\n        { error: 'Cannot delete verified payment screenshots' },\n        { status: 403 },\n      );\n    }\n\n    await deleteDoc(screenshotRef);\n\n    return NextResponse.json({\n      success: true,\n      message: 'Payment screenshot deleted successfully',\n    });\n\n  } catch (error) {\n    console.error('Delete payment screenshot error:', error);\n\n    if (error instanceof Error && error.message.includes('authorization')) {\n      return NextResponse.json(\n        { error: error.message },\n        { status: 401 },\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Failed to delete payment screenshot' },\n      { status: 500 },\n    );\n  }\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/api/redeem-spin/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setDoc' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":40},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getAuth' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":70,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":19}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { db } from '../../../lib/firebase';\nimport { doc, getDoc, updateDoc, setDoc, collection, addDoc } from 'firebase/firestore';\nimport { getAuth } from 'firebase-admin/auth';\n\ninterface SpinReward {\n  type: 'points' | 'discount' | 'free_delivery' | 'free_item' | 'cashback' | 'nothing';\n  value: number;\n  label: string;\n  description?: string;\n  expiresAt?: string;\n}\n\nconst SPIN_REWARDS: SpinReward[] = [\n  { type: 'points', value: 100, label: '100 Points', description: 'Added to your account' },\n  { type: 'points', value: 250, label: '250 Points', description: 'Added to your account' },\n  { type: 'points', value: 500, label: '500 Points', description: 'Added to your account' },\n  { type: 'discount', value: 10, label: '10% Off', description: 'Next order discount' },\n  { type: 'discount', value: 15, label: '15% Off', description: 'Next order discount' },\n  { type: 'discount', value: 20, label: '20% Off', description: 'Next order discount' },\n  { type: 'free_delivery', value: 1, label: 'Free Delivery', description: 'Next order' },\n  { type: 'free_item', value: 1, label: 'Free Side', description: 'Any side item' },\n  { type: 'cashback', value: 5, label: '$5 Cashback', description: 'Added to wallet' },\n  { type: 'nothing', value: 0, label: 'Better Luck Next Time', description: 'Try again tomorrow' },\n];\n\n// Weighted probabilities for different rewards\nconst REWARD_WEIGHTS = {\n  points: 0.4,      // 40% chance\n  discount: 0.25,   // 25% chance\n  free_delivery: 0.15, // 15% chance\n  free_item: 0.1,   // 10% chance\n  cashback: 0.05,   // 5% chance\n  nothing: 0.05,     // 5% chance\n};\n\nfunction getWeightedRandomReward(): SpinReward {\n  const random = Math.random();\n  let cumulativeWeight = 0;\n\n  for (const [type, weight] of Object.entries(REWARD_WEIGHTS)) {\n    cumulativeWeight += weight;\n    if (random <= cumulativeWeight) {\n      const rewardsOfType = SPIN_REWARDS.filter(r => r.type === type);\n      return rewardsOfType[Math.floor(Math.random() * rewardsOfType.length)];\n    }\n  }\n\n  // Fallback\n  return SPIN_REWARDS[SPIN_REWARDS.length - 1]; // \"Better Luck Next Time\"\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const authHeader = request.headers.get('authorization');\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return NextResponse.json(\n        { error: 'Authentication required' },\n        { status: 401 },\n      );\n    }\n\n    const token = authHeader.split(' ')[1];\n\n    // Verify the Firebase token\n    let decodedToken;\n    try {\n      const { getAuth } = await import('firebase-admin/auth');\n      decodedToken = await getAuth().verifyIdToken(token);\n    } catch (error) {\n      return NextResponse.json(\n        { error: 'Invalid authentication token' },\n        { status: 401 },\n      );\n    }\n\n    const userId = decodedToken.uid;\n    const { spinType } = await request.json();\n\n    if (!spinType) {\n      return NextResponse.json(\n        { error: 'Missing spin type' },\n        { status: 400 },\n      );\n    }\n\n    // Check user's spin availability\n    const userRef = doc(db, 'users', userId);\n    const userDoc = await getDoc(userRef);\n\n    if (!userDoc.exists()) {\n      return NextResponse.json(\n        { error: 'User not found' },\n        { status: 404 },\n      );\n    }\n\n    const userData = userDoc.data();\n    const today = new Date().toDateString();\n    const lastSpinDate = userData.lastSpinDate;\n    const dailySpinsUsed = userData.dailySpinsUsed || 0;\n    const maxDailySpins = userData.membershipTier === 'gold' ? 3 : userData.membershipTier === 'silver' ? 2 : 1;\n\n    // Check if user can spin today\n    if (lastSpinDate === today && dailySpinsUsed >= maxDailySpins) {\n      return NextResponse.json(\n        { error: 'Daily spin limit reached. Try again tomorrow!' },\n        { status: 429 },\n      );\n    }\n\n    // Get random reward\n    const reward = getWeightedRandomReward();\n    const spinId = `spin_${userId}_${Date.now()}`;\n    const expiresAt = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(); // 30 days\n\n    // Update user's spin count\n    const newSpinsUsed = lastSpinDate === today ? dailySpinsUsed + 1 : 1;\n    await updateDoc(userRef, {\n      lastSpinDate: today,\n      dailySpinsUsed: newSpinsUsed,\n    });\n\n    // Apply reward based on type\n    if (reward.type === 'points') {\n      const currentPoints = userData.loyaltyPoints || 0;\n      await updateDoc(userRef, {\n        loyaltyPoints: currentPoints + reward.value,\n      });\n    } else if (reward.type === 'cashback') {\n      const currentWallet = userData.walletBalance || 0;\n      await updateDoc(userRef, {\n        walletBalance: currentWallet + reward.value,\n      });\n    }\n\n    // Record the spin and reward\n    const spinRecord = {\n      userId,\n      spinId,\n      spinType,\n      reward: {\n        ...reward,\n        expiresAt: reward.type !== 'points' && reward.type !== 'cashback' ? expiresAt : null,\n      },\n      timestamp: new Date().toISOString(),\n      redeemed: reward.type === 'points' || reward.type === 'cashback', // Auto-redeem points and cashback\n      redeemedAt: reward.type === 'points' || reward.type === 'cashback' ? new Date().toISOString() : null,\n    };\n\n    await addDoc(collection(db, 'spin_history'), spinRecord);\n\n    // If it's a coupon/discount, save it to user's rewards\n    if (reward.type === 'discount' || reward.type === 'free_delivery' || reward.type === 'free_item') {\n      await addDoc(collection(db, 'user_rewards'), {\n        userId,\n        rewardType: reward.type,\n        rewardValue: reward.value,\n        rewardLabel: reward.label,\n        rewardDescription: reward.description,\n        expiresAt,\n        isUsed: false,\n        createdAt: new Date().toISOString(),\n        source: 'daily_spin',\n      });\n    }\n\n    return NextResponse.json({\n      success: true,\n      reward: {\n        ...reward,\n        expiresAt: reward.type !== 'points' && reward.type !== 'cashback' ? expiresAt : null,\n      },\n      message: `You won: ${reward.label}!`,\n      spinsRemaining: maxDailySpins - newSpinsUsed,\n    });\n\n  } catch (error) {\n    console.error('Spin redemption error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 },\n    );\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/api/rides/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":131,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":131,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4097,4100],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4097,4100],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { db } from '../../../lib/firebase';\nimport { collection, getDocs, addDoc, query, where, orderBy } from 'firebase/firestore';\n\nexport const dynamic = 'force-dynamic';\n\ninterface VehicleType {\n  id: string;\n  name: string;\n  description: string;\n  basePrice: number;\n  pricePerMile: number;\n  capacity: number;\n  features: string[];\n  estimatedArrival: string;\n  available: boolean;\n}\n\ninterface RideRequest {\n  pickupLocation: string;\n  destination: string;\n  vehicleType: string;\n  scheduledTime?: string;\n  passengers: number;\n  specialRequests?: string;\n}\n\n// GET - Retrieve available vehicle types and ride options\nexport async function GET(req: NextRequest) {\n  try {\n    const { searchParams } = new URL(req.url);\n    const type = searchParams.get('type');\n\n    if (type === 'vehicles') {\n      // Fetch vehicle types from database\n      const vehiclesRef = collection(db, 'vehicleTypes');\n      const vehiclesSnapshot = await getDocs(query(vehiclesRef, where('available', '==', true), orderBy('basePrice')));\n\n      const vehicles: VehicleType[] = [];\n      vehiclesSnapshot.forEach((doc) => {\n        vehicles.push({ id: doc.id, ...doc.data() } as VehicleType);\n      });\n\n      // If no vehicles in database, return default data\n      if (vehicles.length === 0) {\n        const defaultVehicles: VehicleType[] = [\n          {\n            id: '1',\n            name: 'EcoRide',\n            description: 'Affordable and eco-friendly',\n            basePrice: 5.00,\n            pricePerMile: 1.20,\n            capacity: 4,\n            features: ['Eco-friendly', 'Standard comfort'],\n            estimatedArrival: '5-8 min',\n            available: true,\n          },\n          {\n            id: '2',\n            name: 'ComfortPlus',\n            description: 'Premium comfort with extra space',\n            basePrice: 8.00,\n            pricePerMile: 1.80,\n            capacity: 4,\n            features: ['Premium comfort', 'Extra legroom', 'Climate control'],\n            estimatedArrival: '3-6 min',\n            available: true,\n          },\n          {\n            id: '3',\n            name: 'LuxuryXL',\n            description: 'Luxury vehicle for special occasions',\n            basePrice: 15.00,\n            pricePerMile: 3.50,\n            capacity: 6,\n            features: ['Luxury interior', 'Professional driver', 'Complimentary water'],\n            estimatedArrival: '8-12 min',\n            available: true,\n          },\n          {\n            id: '4',\n            name: 'GroupRide',\n            description: 'Perfect for larger groups',\n            basePrice: 12.00,\n            pricePerMile: 2.20,\n            capacity: 8,\n            features: ['Large capacity', 'Group-friendly', 'Extra storage'],\n            estimatedArrival: '10-15 min',\n            available: true,\n          },\n        ];\n        return NextResponse.json({ success: true, data: defaultVehicles });\n      }\n\n      return NextResponse.json({ success: true, data: vehicles });\n    }\n\n    if (type === 'stats') {\n      // Fetch ride statistics\n      const ridesRef = collection(db, 'rides');\n      const ridesSnapshot = await getDocs(ridesRef);\n\n      let totalRides = 0;\n      let totalRating = 0;\n      let ratingCount = 0;\n\n      ridesSnapshot.forEach((doc) => {\n        const ride = doc.data();\n        totalRides++;\n        if (ride.rating) {\n          totalRating += ride.rating;\n          ratingCount++;\n        }\n      });\n\n      const averageRating = ratingCount > 0 ? totalRating / ratingCount : 4.9;\n\n      const stats = {\n        rating: Math.round(averageRating * 10) / 10, // Round to 1 decimal place\n        totalRides: totalRides || 10000, // Default to 10000 if no rides\n        averagePickupTime: 5, // This could be calculated from actual pickup times\n      };\n\n      return NextResponse.json({ success: true, data: stats });\n    }\n\n    // Default: return all ride-related data\n    const ridesRef = collection(db, 'rides');\n    const ridesSnapshot = await getDocs(query(ridesRef, orderBy('createdAt', 'desc')));\n\n    const rides: any[] = [];\n    ridesSnapshot.forEach((doc) => {\n      rides.push({ id: doc.id, ...doc.data() });\n    });\n\n    return NextResponse.json({ success: true, data: rides });\n\n  } catch (error) {\n    console.error('Error fetching rides data:', error);\n    return NextResponse.json(\n      { success: false, error: 'Failed to fetch rides data' },\n      { status: 500 },\n    );\n  }\n}\n\n// POST - Create a new ride request\nexport async function POST(req: NextRequest) {\n  try {\n    const body: RideRequest = await req.json();\n\n    // Validate required fields\n    if (!body.pickupLocation || !body.destination || !body.vehicleType) {\n      return NextResponse.json(\n        { success: false, error: 'Missing required fields' },\n        { status: 400 },\n      );\n    }\n\n    // Create ride request\n    const rideData = {\n      ...body,\n      status: 'pending',\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n\n    const ridesRef = collection(db, 'rides');\n    const docRef = await addDoc(ridesRef, rideData);\n\n    return NextResponse.json({\n      success: true,\n      data: { id: docRef.id, ...rideData },\n    });\n\n  } catch (error) {\n    console.error('Error creating ride request:', error);\n    return NextResponse.json(\n      { success: false, error: 'Failed to create ride request' },\n      { status: 500 },\n    );\n  }\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/api/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/api/user-profile/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/api/verify-id/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'auth' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getAuth' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":33,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":111,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":111,"endColumn":19}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { auth, db } from '../../../lib/firebase';\nimport { doc, setDoc, getDoc, updateDoc } from 'firebase/firestore';\nimport { getAuth } from 'firebase-admin/auth';\n\ninterface VerificationRequest {\n  idType: 'drivers_license' | 'passport' | 'state_id';\n  idNumber: string;\n  fullName: string;\n  dateOfBirth: string;\n  address: string;\n  frontImageUrl?: string;\n  backImageUrl?: string;\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const authHeader = request.headers.get('authorization');\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return NextResponse.json(\n        { error: 'Authentication required' },\n        { status: 401 },\n      );\n    }\n\n    const token = authHeader.split(' ')[1];\n\n    // Verify the Firebase token\n    let decodedToken;\n    try {\n      const { getAuth } = await import('firebase-admin/auth');\n      decodedToken = await getAuth().verifyIdToken(token);\n    } catch (error) {\n      return NextResponse.json(\n        { error: 'Invalid authentication token' },\n        { status: 401 },\n      );\n    }\n\n    const userId = decodedToken.uid;\n    const data: VerificationRequest = await request.json();\n\n    // Validate required fields\n    if (!data.idType || !data.idNumber || !data.fullName || !data.dateOfBirth || !data.address) {\n      return NextResponse.json(\n        { error: 'Missing required fields' },\n        { status: 400 },\n      );\n    }\n\n    // Create verification record\n    const verificationData = {\n      userId,\n      idType: data.idType,\n      idNumber: data.idNumber,\n      fullName: data.fullName,\n      dateOfBirth: data.dateOfBirth,\n      address: data.address,\n      frontImageUrl: data.frontImageUrl || null,\n      backImageUrl: data.backImageUrl || null,\n      status: 'pending',\n      submittedAt: new Date().toISOString(),\n      verifiedAt: null,\n      verifiedBy: null,\n      notes: null,\n    };\n\n    // Save to Firestore\n    const verificationRef = doc(db, 'id_verifications', userId);\n    await setDoc(verificationRef, verificationData);\n\n    // Update user profile to indicate verification is pending\n    const userRef = doc(db, 'users', userId);\n    await updateDoc(userRef, {\n      idVerificationStatus: 'pending',\n      idVerificationSubmittedAt: new Date().toISOString(),\n    });\n\n    return NextResponse.json({\n      message: 'ID verification submitted successfully',\n      status: 'pending',\n      submittedAt: verificationData.submittedAt,\n    });\n\n  } catch (error) {\n    console.error('ID verification error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 },\n    );\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const authHeader = request.headers.get('authorization');\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return NextResponse.json(\n        { error: 'Authentication required' },\n        { status: 401 },\n      );\n    }\n\n    const token = authHeader.split(' ')[1];\n\n    // Verify the Firebase token\n    let decodedToken;\n    try {\n      const { getAuth } = await import('firebase-admin/auth');\n      decodedToken = await getAuth().verifyIdToken(token);\n    } catch (error) {\n      return NextResponse.json(\n        { error: 'Invalid authentication token' },\n        { status: 401 },\n      );\n    }\n\n    const userId = decodedToken.uid;\n\n    // Get verification status from Firestore\n    const verificationRef = doc(db, 'id_verifications', userId);\n    const verificationDoc = await getDoc(verificationRef);\n\n    if (!verificationDoc.exists()) {\n      return NextResponse.json({\n        status: 'not_submitted',\n        message: 'No ID verification found',\n      });\n    }\n\n    const verificationData = verificationDoc.data();\n\n    // Return verification status (excluding sensitive data)\n    return NextResponse.json({\n      status: verificationData.status,\n      submittedAt: verificationData.submittedAt,\n      verifiedAt: verificationData.verifiedAt,\n      idType: verificationData.idType,\n      notes: verificationData.notes,\n    });\n\n  } catch (error) {\n    console.error('ID verification status error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 },\n    );\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/api/webhooks/stripe/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'req' is defined but never used. Allowed unused args must match /^_/u.","line":107,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":107,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":424,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":424,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12810,12813],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12810,12813],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'req' is defined but never used. Allowed unused args must match /^_/u.","line":476,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":476,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'req' is defined but never used. Allowed unused args must match /^_/u.","line":483,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":483,"endColumn":33}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { db } from '../../../../lib/firebase';\nimport { doc, getDoc, updateDoc, addDoc, collection, query, where, getDocs } from 'firebase/firestore';\nimport Stripe from 'stripe';\n\nexport const dynamic = 'force-dynamic';\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n  apiVersion: '2024-06-20',\n});\n\nconst endpointSecret = process.env.STRIPE_WEBHOOK_SECRET!;\n\n// POST - Handle Stripe webhook events\nexport async function POST(req: NextRequest) {\n  try {\n    const body = await req.text();\n    const signature = req.headers.get('stripe-signature');\n\n    if (!signature) {\n      console.error('No Stripe signature found');\n      return NextResponse.json(\n        { error: 'No signature found' },\n        { status: 400 },\n      );\n    }\n\n    if (!endpointSecret) {\n      console.error('Stripe webhook secret not configured');\n      return NextResponse.json(\n        { error: 'Webhook secret not configured' },\n        { status: 500 },\n      );\n    }\n\n    let event: Stripe.Event;\n\n    try {\n      event = stripe.webhooks.constructEvent(body, signature, endpointSecret);\n    } catch (err) {\n      console.error('Webhook signature verification failed:', err);\n      return NextResponse.json(\n        { error: 'Invalid signature' },\n        { status: 400 },\n      );\n    }\n\n    console.log('Received Stripe webhook event:', event.type);\n\n    // Handle the event\n    switch (event.type) {\n      case 'checkout.session.completed':\n        await handleCheckoutSessionCompleted(event.data.object as Stripe.Checkout.Session);\n        break;\n\n      case 'payment_intent.succeeded':\n        await handlePaymentIntentSucceeded(event.data.object as Stripe.PaymentIntent);\n        break;\n\n      case 'payment_intent.payment_failed':\n        await handlePaymentIntentFailed(event.data.object as Stripe.PaymentIntent);\n        break;\n\n      case 'invoice.payment_succeeded':\n        await handleInvoicePaymentSucceeded(event.data.object as Stripe.Invoice);\n        break;\n\n      case 'invoice.payment_failed':\n        await handleInvoicePaymentFailed(event.data.object as Stripe.Invoice);\n        break;\n\n      case 'customer.subscription.created':\n        await handleSubscriptionCreated(event.data.object as Stripe.Subscription);\n        break;\n\n      case 'customer.subscription.updated':\n        await handleSubscriptionUpdated(event.data.object as Stripe.Subscription);\n        break;\n\n      case 'customer.subscription.deleted':\n        await handleSubscriptionDeleted(event.data.object as Stripe.Subscription);\n        break;\n\n      case 'charge.dispute.created':\n        await handleChargeDisputeCreated(event.data.object as Stripe.Dispute);\n        break;\n\n      default:\n        console.log(`Unhandled event type: ${event.type}`);\n    }\n\n    // Log the webhook event\n    await logWebhookEvent(event);\n\n    return NextResponse.json({ received: true });\n\n  } catch (error) {\n    console.error('Webhook error:', error);\n    return NextResponse.json(\n      { error: 'Webhook handler failed' },\n      { status: 500 },\n    );\n  }\n}\n\n// GET - Webhook endpoint info (for verification)\nexport async function GET(req: NextRequest) {\n  return NextResponse.json({\n    message: 'Stripe webhook endpoint',\n    configured: !!endpointSecret,\n    timestamp: new Date().toISOString(),\n  });\n}\n\n// Helper function to handle checkout session completed\nasync function handleCheckoutSessionCompleted(session: Stripe.Checkout.Session) {\n  try {\n    console.log('Processing checkout session completed:', session.id);\n\n    // Find the order by session ID\n    const ordersQuery = query(\n      collection(db, 'orders'),\n      where('stripeSessionId', '==', session.id),\n    );\n\n    const ordersSnapshot = await getDocs(ordersQuery);\n\n    if (ordersSnapshot.empty) {\n      console.error('No order found for session:', session.id);\n      return;\n    }\n\n    const orderDoc = ordersSnapshot.docs[0];\n    const orderRef = doc(db, 'orders', orderDoc.id);\n\n    // Update order status\n    await updateDoc(orderRef, {\n      paymentStatus: 'paid',\n      stripePaymentIntentId: session.payment_intent,\n      stripeCustomerId: session.customer,\n      paidAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    });\n\n    console.log('Order updated successfully:', orderDoc.id);\n\n    // Update user's order history and loyalty points if applicable\n    const orderData = orderDoc.data();\n    if (orderData?.userId) {\n      await updateUserAfterPayment(orderData.userId, orderData.total || 0);\n    }\n\n  } catch (error) {\n    console.error('Error handling checkout session completed:', error);\n  }\n}\n\n// Helper function to handle payment intent succeeded\nasync function handlePaymentIntentSucceeded(paymentIntent: Stripe.PaymentIntent) {\n  try {\n    console.log('Processing payment intent succeeded:', paymentIntent.id);\n\n    // Find orders by payment intent ID\n    const ordersQuery = query(\n      collection(db, 'orders'),\n      where('stripePaymentIntentId', '==', paymentIntent.id),\n    );\n\n    const ordersSnapshot = await getDocs(ordersQuery);\n\n    for (const orderDoc of ordersSnapshot.docs) {\n      const orderRef = doc(db, 'orders', orderDoc.id);\n\n      await updateDoc(orderRef, {\n        paymentStatus: 'paid',\n        paidAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n      });\n\n      // Update user loyalty points\n      const orderData = orderDoc.data();\n      if (orderData?.userId) {\n        await updateUserAfterPayment(orderData.userId, orderData.total || 0);\n      }\n    }\n\n  } catch (error) {\n    console.error('Error handling payment intent succeeded:', error);\n  }\n}\n\n// Helper function to handle payment intent failed\nasync function handlePaymentIntentFailed(paymentIntent: Stripe.PaymentIntent) {\n  try {\n    console.log('Processing payment intent failed:', paymentIntent.id);\n\n    // Find orders by payment intent ID\n    const ordersQuery = query(\n      collection(db, 'orders'),\n      where('stripePaymentIntentId', '==', paymentIntent.id),\n    );\n\n    const ordersSnapshot = await getDocs(ordersQuery);\n\n    for (const orderDoc of ordersSnapshot.docs) {\n      const orderRef = doc(db, 'orders', orderDoc.id);\n\n      await updateDoc(orderRef, {\n        paymentStatus: 'payment_failed',\n        paymentFailureReason: paymentIntent.last_payment_error?.message || 'Payment failed',\n        updatedAt: new Date().toISOString(),\n      });\n    }\n\n  } catch (error) {\n    console.error('Error handling payment intent failed:', error);\n  }\n}\n\n// Helper function to handle invoice payment succeeded\nasync function handleInvoicePaymentSucceeded(invoice: Stripe.Invoice) {\n  try {\n    console.log('Processing invoice payment succeeded:', invoice.id);\n\n    // Handle subscription payments or other invoice-based payments\n    if (invoice.subscription) {\n      await handleSubscriptionPayment(invoice.subscription as string, 'paid');\n    }\n\n  } catch (error) {\n    console.error('Error handling invoice payment succeeded:', error);\n  }\n}\n\n// Helper function to handle invoice payment failed\nasync function handleInvoicePaymentFailed(invoice: Stripe.Invoice) {\n  try {\n    console.log('Processing invoice payment failed:', invoice.id);\n\n    // Handle subscription payment failures\n    if (invoice.subscription) {\n      await handleSubscriptionPayment(invoice.subscription as string, 'payment_failed');\n    }\n\n  } catch (error) {\n    console.error('Error handling invoice payment failed:', error);\n  }\n}\n\n// Helper function to handle subscription created\nasync function handleSubscriptionCreated(subscription: Stripe.Subscription) {\n  try {\n    console.log('Processing subscription created:', subscription.id);\n\n    // Find user by customer ID\n    const usersQuery = query(\n      collection(db, 'users'),\n      where('stripeCustomerId', '==', subscription.customer),\n    );\n\n    const usersSnapshot = await getDocs(usersQuery);\n\n    if (!usersSnapshot.empty) {\n      const userDoc = usersSnapshot.docs[0];\n      const userRef = doc(db, 'users', userDoc.id);\n\n      await updateDoc(userRef, {\n        subscriptionId: subscription.id,\n        subscriptionStatus: subscription.status,\n        membershipTier: getMembershipTierFromSubscription(subscription),\n        subscriptionStartDate: new Date(subscription.created * 1000).toISOString(),\n        updatedAt: new Date().toISOString(),\n      });\n    }\n\n  } catch (error) {\n    console.error('Error handling subscription created:', error);\n  }\n}\n\n// Helper function to handle subscription updated\nasync function handleSubscriptionUpdated(subscription: Stripe.Subscription) {\n  try {\n    console.log('Processing subscription updated:', subscription.id);\n\n    // Find user by subscription ID\n    const usersQuery = query(\n      collection(db, 'users'),\n      where('subscriptionId', '==', subscription.id),\n    );\n\n    const usersSnapshot = await getDocs(usersQuery);\n\n    if (!usersSnapshot.empty) {\n      const userDoc = usersSnapshot.docs[0];\n      const userRef = doc(db, 'users', userDoc.id);\n\n      await updateDoc(userRef, {\n        subscriptionStatus: subscription.status,\n        membershipTier: getMembershipTierFromSubscription(subscription),\n        updatedAt: new Date().toISOString(),\n      });\n    }\n\n  } catch (error) {\n    console.error('Error handling subscription updated:', error);\n  }\n}\n\n// Helper function to handle subscription deleted\nasync function handleSubscriptionDeleted(subscription: Stripe.Subscription) {\n  try {\n    console.log('Processing subscription deleted:', subscription.id);\n\n    // Find user by subscription ID\n    const usersQuery = query(\n      collection(db, 'users'),\n      where('subscriptionId', '==', subscription.id),\n    );\n\n    const usersSnapshot = await getDocs(usersQuery);\n\n    if (!usersSnapshot.empty) {\n      const userDoc = usersSnapshot.docs[0];\n      const userRef = doc(db, 'users', userDoc.id);\n\n      await updateDoc(userRef, {\n        subscriptionStatus: 'canceled',\n        membershipTier: 'basic',\n        subscriptionEndDate: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n      });\n    }\n\n  } catch (error) {\n    console.error('Error handling subscription deleted:', error);\n  }\n}\n\n// Helper function to handle charge dispute created\nasync function handleChargeDisputeCreated(dispute: Stripe.Dispute) {\n  try {\n    console.log('Processing charge dispute created:', dispute.id);\n\n    // Find order by charge ID\n    const ordersQuery = query(\n      collection(db, 'orders'),\n      where('stripeChargeId', '==', dispute.charge),\n    );\n\n    const ordersSnapshot = await getDocs(ordersQuery);\n\n    if (!ordersSnapshot.empty) {\n      const orderDoc = ordersSnapshot.docs[0];\n      const orderRef = doc(db, 'orders', orderDoc.id);\n\n      await updateDoc(orderRef, {\n        disputeId: dispute.id,\n        disputeStatus: dispute.status,\n        disputeReason: dispute.reason,\n        disputeAmount: dispute.amount,\n        disputeCreatedAt: new Date(dispute.created * 1000).toISOString(),\n        updatedAt: new Date().toISOString(),\n      });\n\n      // Notify admin about the dispute\n      await addDoc(collection(db, 'admin_notifications'), {\n        type: 'dispute_created',\n        orderId: orderDoc.id,\n        disputeId: dispute.id,\n        amount: dispute.amount,\n        reason: dispute.reason,\n        createdAt: new Date().toISOString(),\n        read: false,\n      });\n    }\n\n  } catch (error) {\n    console.error('Error handling charge dispute created:', error);\n  }\n}\n\n// Helper function to update user after successful payment\nasync function updateUserAfterPayment(userId: string, amount: number) {\n  try {\n    const userRef = doc(db, 'users', userId);\n    const userDoc = await getDoc(userRef);\n\n    if (userDoc.exists()) {\n      const userData = userDoc.data();\n      const currentPoints = userData.loyaltyPoints || 0;\n      const currentSpent = userData.totalSpent || 0;\n\n      // Calculate loyalty points (1 point per dollar spent)\n      const pointsEarned = Math.floor(amount);\n\n      await updateDoc(userRef, {\n        loyaltyPoints: currentPoints + pointsEarned,\n        totalSpent: currentSpent + amount,\n        lastOrderDate: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n      });\n    }\n\n  } catch (error) {\n    console.error('Error updating user after payment:', error);\n  }\n}\n\n// Helper function to handle subscription payments\nasync function handleSubscriptionPayment(subscriptionId: string, status: string) {\n  try {\n    const usersQuery = query(\n      collection(db, 'users'),\n      where('subscriptionId', '==', subscriptionId),\n    );\n\n    const usersSnapshot = await getDocs(usersQuery);\n\n    if (!usersSnapshot.empty) {\n      const userDoc = usersSnapshot.docs[0];\n      const userRef = doc(db, 'users', userDoc.id);\n\n      const updateData: any = {\n        subscriptionPaymentStatus: status,\n        updatedAt: new Date().toISOString(),\n      };\n\n      if (status === 'paid') {\n        updateData.lastPaymentDate = new Date().toISOString();\n      }\n\n      await updateDoc(userRef, updateData);\n    }\n\n  } catch (error) {\n    console.error('Error handling subscription payment:', error);\n  }\n}\n\n// Helper function to get membership tier from subscription\nfunction getMembershipTierFromSubscription(subscription: Stripe.Subscription): string {\n  // This would depend on your pricing structure\n  // You can check the price ID or product ID to determine the tier\n  const priceId = subscription.items.data[0]?.price.id;\n\n  // Example mapping - adjust based on your actual price IDs\n  if (priceId?.includes('premium')) {\n    return 'premium';\n  } else if (priceId?.includes('pro')) {\n    return 'pro';\n  } else {\n    return 'basic';\n  }\n}\n\n// Helper function to log webhook events\nasync function logWebhookEvent(event: Stripe.Event) {\n  try {\n    await addDoc(collection(db, 'webhook_logs'), {\n      eventId: event.id,\n      eventType: event.type,\n      processed: true,\n      createdAt: new Date().toISOString(),\n      data: {\n        object: event.data.object.object,\n        id: event.data.object.id,\n      },\n    });\n  } catch (error) {\n    console.error('Error logging webhook event:', error);\n  }\n}\n\n// PUT and DELETE methods not needed for webhooks\nexport async function PUT(req: NextRequest) {\n  return NextResponse.json(\n    { error: 'Method not allowed' },\n    { status: 405 },\n  );\n}\n\nexport async function DELETE(req: NextRequest) {\n  return NextResponse.json(\n    { error: 'Method not allowed' },\n    { status: 405 },\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/auth/error/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/auth/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/auth/logout/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/auth/verify-request/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/broskis/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardDescription' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Coffee' is defined but never used. Allowed unused vars must match /^_/u.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":9},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":328,"column":76,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[11769,11877],"text":"\n              Fresh ingredients, bold flavors, and generous portions - that&apos;s the Broski's way\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[11769,11877],"text":"\n              Fresh ingredients, bold flavors, and generous portions - that&lsquo;s the Broski's way\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[11769,11877],"text":"\n              Fresh ingredients, bold flavors, and generous portions - that&#39;s the Broski's way\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[11769,11877],"text":"\n              Fresh ingredients, bold flavors, and generous portions - that&rsquo;s the Broski's way\n            "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":328,"column":89,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[11769,11877],"text":"\n              Fresh ingredients, bold flavors, and generous portions - that's the Broski&apos;s way\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[11769,11877],"text":"\n              Fresh ingredients, bold flavors, and generous portions - that's the Broski&lsquo;s way\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[11769,11877],"text":"\n              Fresh ingredients, bold flavors, and generous portions - that's the Broski&#39;s way\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[11769,11877],"text":"\n              Fresh ingredients, bold flavors, and generous portions - that's the Broski&rsquo;s way\n            "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":439,"column":63,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[17069,17084],"text":"People&apos;s Choice"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[17069,17084],"text":"People&lsquo;s Choice"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[17069,17084],"text":"People&#39;s Choice"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[17069,17084],"text":"People&rsquo;s Choice"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Button } from '../../components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../components/ui/card';\nimport { Badge } from '../../components/ui/badge';\nimport {\n  Star,\n  Clock,\n  MapPin,\n  Phone,\n  Globe,\n  Heart,\n  Award,\n  Users,\n  Utensils,\n  ChefHat,\n  Coffee,\n  Truck,\n} from 'lucide-react';\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport { useCart } from '../../lib/context/CartContext';\nimport { toast } from '../../components/ui/use-toast';\n\ninterface MenuItem {\n  id: string;\n  name: string;\n  description: string;\n  price: number;\n  image: string;\n  category: string;\n  isPopular?: boolean;\n  isNew?: boolean;\n  dietary: string[];\n}\n\nconst BROSKIS_MENU: MenuItem[] = [\n  {\n    id: 'signature-burger',\n    name: 'Broski Signature Burger',\n    description: 'Our famous double patty with special sauce, lettuce, tomato, cheese, and crispy onions',\n    price: 14.99,\n    image: '/images/menu/signature-burger.jpg',\n    category: 'Burgers',\n    isPopular: true,\n    dietary: ['Gluten-Free Bun Available'],\n  },\n  {\n    id: 'loaded-fries',\n    name: 'Loaded Broski Fries',\n    description: 'Crispy fries topped with cheese sauce, bacon bits, green onions, and sour cream',\n    price: 9.99,\n    image: '/images/menu/loaded-fries.jpg',\n    category: 'Sides',\n    isPopular: true,\n    dietary: ['Vegetarian Option'],\n  },\n  {\n    id: 'chicken-sandwich',\n    name: 'Crispy Chicken Sandwich',\n    description: 'Hand-breaded chicken breast with pickles, mayo, and coleslaw on a brioche bun',\n    price: 12.99,\n    image: '/images/menu/chicken-sandwich.jpg',\n    category: 'Sandwiches',\n    dietary: [],\n  },\n  {\n    id: 'bbq-wings',\n    name: 'BBQ Wings',\n    description: 'Smoky BBQ wings served with celery sticks and blue cheese dip',\n    price: 11.99,\n    image: '/images/menu/bbq-wings.jpg',\n    category: 'Wings',\n    dietary: ['Gluten-Free'],\n  },\n  {\n    id: 'veggie-burger',\n    name: 'Garden Veggie Burger',\n    description: 'House-made veggie patty with avocado, sprouts, and herb aioli',\n    price: 11.99,\n    image: '/images/menu/veggie-burger.jpg',\n    category: 'Burgers',\n    isNew: true,\n    dietary: ['Vegetarian', 'Vegan Option'],\n  },\n  {\n    id: 'milkshake',\n    name: 'Broski Milkshake',\n    description: 'Thick and creamy milkshake available in vanilla, chocolate, or strawberry',\n    price: 5.99,\n    image: '/images/menu/milkshake.jpg',\n    category: 'Beverages',\n    dietary: ['Vegetarian'],\n  },\n];\n\nconst RESTAURANT_INFO = {\n  name: \"Broski's Kitchen\",\n  description: \"Fort Wayne's favorite burger joint serving up fresh, made-to-order burgers, crispy fries, and ice-cold shakes since 2018.\",\n  rating: 4.8,\n  reviewCount: 1247,\n  priceRange: '$$',\n  cuisine: 'American, Burgers',\n  hours: {\n    'Monday': '11:00 AM - 10:00 PM',\n    'Tuesday': '11:00 AM - 10:00 PM',\n    'Wednesday': '11:00 AM - 10:00 PM',\n    'Thursday': '11:00 AM - 10:00 PM',\n    'Friday': '11:00 AM - 11:00 PM',\n    'Saturday': '11:00 AM - 11:00 PM',\n    'Sunday': '12:00 PM - 9:00 PM',\n  },\n  contact: {\n    phone: '(260) 555-BROSKI',\n    address: '123 Main Street, Fort Wayne, IN 46802',\n    website: 'www.broskiskitchen.com',\n  },\n  features: [\n    'Dine-in',\n    'Takeout',\n    'Delivery',\n    'Drive-thru',\n    'Outdoor Seating',\n    'Family Friendly',\n    'Local Favorite',\n  ],\n};\n\nexport default function BroskisPage() {\n  const [selectedCategory, setSelectedCategory] = useState('All');\n  const [filteredMenu, setFilteredMenu] = useState(BROSKIS_MENU);\n  const { addItem } = useCart();\n\n  const categories = ['All', ...Array.from(new Set(BROSKIS_MENU.map(item => item.category)))];\n\n  useEffect(() => {\n    if (selectedCategory === 'All') {\n      setFilteredMenu(BROSKIS_MENU);\n    } else {\n      setFilteredMenu(BROSKIS_MENU.filter(item => item.category === selectedCategory));\n    }\n  }, [selectedCategory]);\n\n  const handleAddToCart = (item: MenuItem) => {\n    const cartItem = {\n      id: item.id,\n      name: item.name,\n      price: item.price,\n      quantity: 1,\n      image: item.image,\n      restaurant: \"Broski's Kitchen\",\n    };\n\n    addItem(cartItem);\n    toast({\n      title: 'Added to Cart',\n      description: `${item.name} has been added to your cart`,\n    });\n  };\n\n  const getDietaryBadgeColor = (dietary: string) => {\n    switch (dietary) {\n      case 'Vegan':\n      case 'Vegan Option':\n        return 'bg-green-500';\n      case 'Vegetarian':\n      case 'Vegetarian Option':\n        return 'bg-green-400';\n      case 'Gluten-Free':\n      case 'Gluten-Free Bun Available':\n        return 'bg-blue-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-otw-black via-otw-black-800 to-otw-black-900\">\n      {/* Hero Section */}\n      <div className=\"relative py-20 px-4\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-otw-gold/10 to-transparent\" />\n        <div className=\"container mx-auto relative z-10\">\n          <div className=\"flex flex-col lg:flex-row items-center gap-12\">\n            {/* Restaurant Info */}\n            <div className=\"flex-1 text-center lg:text-left\">\n              <div className=\"flex items-center justify-center lg:justify-start gap-4 mb-6\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-full flex items-center justify-center\">\n                  <ChefHat className=\"w-8 h-8 text-black\" />\n                </div>\n                <div>\n                  <h1 className=\"text-4xl md:text-5xl font-bold text-white\">\n                    {RESTAURANT_INFO.name}\n                  </h1>\n                  <div className=\"flex items-center gap-4 mt-2\">\n                    <div className=\"flex items-center gap-1\">\n                      <Star className=\"w-5 h-5 text-yellow-400 fill-current\" />\n                      <span className=\"text-white font-semibold\">{RESTAURANT_INFO.rating}</span>\n                      <span className=\"text-gray-400\">({RESTAURANT_INFO.reviewCount} reviews)</span>\n                    </div>\n                    <Badge className=\"bg-otw-gold text-black\">{RESTAURANT_INFO.priceRange}</Badge>\n                  </div>\n                </div>\n              </div>\n\n              <p className=\"text-xl text-gray-300 mb-6 max-w-2xl\">\n                {RESTAURANT_INFO.description}\n              </p>\n\n              <div className=\"flex flex-wrap gap-2 mb-8\">\n                {RESTAURANT_INFO.features.map((feature) => (\n                  <Badge key={feature} variant=\"outline\" className=\"border-otw-gold/30 text-otw-gold\">\n                    {feature}\n                  </Badge>\n                ))}\n              </div>\n\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Button className=\"bg-gradient-to-r from-otw-gold to-yellow-500 text-black font-semibold px-8 py-3 rounded-full hover:shadow-lg transition-all duration-300\">\n                  <Truck className=\"w-5 h-5 mr-2\" />\n                  Order for Delivery\n                </Button>\n                <Button variant=\"outline\" className=\"border-2 border-otw-gold text-otw-gold hover:bg-otw-gold hover:text-black px-8 py-3 rounded-full transition-all duration-300\">\n                  <Phone className=\"w-5 h-5 mr-2\" />\n                  Call to Order\n                </Button>\n              </div>\n            </div>\n\n            {/* Restaurant Image */}\n            <div className=\"flex-1 max-w-lg\">\n              <div className=\"relative h-80 rounded-2xl overflow-hidden\">\n                <Image\n                  src=\"/images/restaurants/broskis-interior.jpg\"\n                  alt=\"Broski's Kitchen Interior\"\n                  fill\n                  className=\"object-cover\"\n                />\n                <div className=\"absolute inset-0 bg-gradient-to-t from-black/30 to-transparent\" />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Restaurant Details */}\n      <div className=\"py-16 px-4\">\n        <div className=\"container mx-auto\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8 mb-16\">\n            {/* Hours */}\n            <Card className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Clock className=\"w-5 h-5 text-otw-gold\" />\n                  Hours\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  {Object.entries(RESTAURANT_INFO.hours).map(([day, hours]) => (\n                    <div key={day} className=\"flex justify-between text-gray-300\">\n                      <span className=\"font-medium\">{day}</span>\n                      <span>{hours}</span>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Contact */}\n            <Card className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <MapPin className=\"w-5 h-5 text-otw-gold\" />\n                  Contact\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex items-center gap-2 text-gray-300\">\n                  <Phone className=\"w-4 h-4 text-otw-gold\" />\n                  <span>{RESTAURANT_INFO.contact.phone}</span>\n                </div>\n                <div className=\"flex items-start gap-2 text-gray-300\">\n                  <MapPin className=\"w-4 h-4 text-otw-gold mt-1\" />\n                  <span>{RESTAURANT_INFO.contact.address}</span>\n                </div>\n                <div className=\"flex items-center gap-2 text-gray-300\">\n                  <Globe className=\"w-4 h-4 text-otw-gold\" />\n                  <span>{RESTAURANT_INFO.contact.website}</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Cuisine */}\n            <Card className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Utensils className=\"w-5 h-5 text-otw-gold\" />\n                  Cuisine\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-300 mb-4\">{RESTAURANT_INFO.cuisine}</p>\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"flex items-center gap-1\">\n                    <Users className=\"w-4 h-4 text-otw-gold\" />\n                    <span className=\"text-gray-300 text-sm\">Family Friendly</span>\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <Heart className=\"w-4 h-4 text-red-400\" />\n                    <span className=\"text-gray-300 text-sm\">Local Favorite</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* Menu Section */}\n      <div className=\"py-16 px-4\">\n        <div className=\"container mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-4xl font-bold text-white mb-4\">\n              Our <span className=\"text-otw-gold\">Menu</span>\n            </h2>\n            <p className=\"text-xl text-gray-300 max-w-2xl mx-auto\">\n              Fresh ingredients, bold flavors, and generous portions - that's the Broski's way\n            </p>\n          </div>\n\n          {/* Category Filter */}\n          <div className=\"flex flex-wrap gap-2 justify-center mb-8\">\n            {categories.map((category) => (\n              <Button\n                key={category}\n                variant={selectedCategory === category ? 'default' : 'outline'}\n                onClick={() => setSelectedCategory(category)}\n                className={`px-6 py-3 rounded-full transition-all duration-300 ${\n                  selectedCategory === category\n                    ? 'bg-gradient-to-r from-otw-gold to-yellow-500 text-black font-semibold'\n                    : 'bg-transparent border-2 border-otw-gold/30 text-otw-gold hover:bg-otw-gold/10 hover:border-otw-gold'\n                }`}\n              >\n                {category}\n              </Button>\n            ))}\n          </div>\n\n          {/* Menu Items */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {filteredMenu.map((item) => (\n              <Card key={item.id} className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20 hover:border-otw-gold/40 transition-all duration-300 hover:shadow-2xl hover:shadow-otw-gold/10 group\">\n                {/* Image */}\n                <div className=\"relative h-48 overflow-hidden rounded-t-lg\">\n                  <Image\n                    src={item.image || '/placeholder.svg'}\n                    alt={item.name}\n                    fill\n                    className=\"object-cover group-hover:scale-110 transition-transform duration-500\"\n                  />\n                  <div className=\"absolute inset-0 bg-gradient-to-t from-black/50 to-transparent\" />\n\n                  {/* Badges */}\n                  <div className=\"absolute top-4 left-4 flex gap-2\">\n                    {item.isPopular && (\n                      <Badge className=\"bg-red-500 text-white px-3 py-1 text-xs font-semibold\">\n                        🔥 Popular\n                      </Badge>\n                    )}\n                    {item.isNew && (\n                      <Badge className=\"bg-green-500 text-white px-3 py-1 text-xs font-semibold\">\n                        ✨ New\n                      </Badge>\n                    )}\n                  </div>\n\n                  {/* Price */}\n                  <div className=\"absolute bottom-4 right-4\">\n                    <div className=\"bg-otw-gold text-black px-3 py-1 rounded-full font-bold text-lg\">\n                      ${item.price}\n                    </div>\n                  </div>\n                </div>\n\n                {/* Content */}\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-xl font-bold text-white mb-2 group-hover:text-otw-gold transition-colors\">\n                    {item.name}\n                  </h3>\n                  <p className=\"text-gray-300 mb-4 line-clamp-2\">{item.description}</p>\n\n                  {/* Dietary Badges */}\n                  {item.dietary.length > 0 && (\n                    <div className=\"flex flex-wrap gap-2 mb-4\">\n                      {item.dietary.map((diet, index) => (\n                        <Badge\n                          key={index}\n                          className={`${getDietaryBadgeColor(diet)} text-white px-2 py-1 text-xs`}\n                        >\n                          {diet}\n                        </Badge>\n                      ))}\n                    </div>\n                  )}\n\n                  {/* Add to Cart Button */}\n                  <Button\n                    onClick={() => handleAddToCart(item)}\n                    className=\"w-full bg-gradient-to-r from-otw-gold to-yellow-500 text-black font-semibold py-3 rounded-xl hover:shadow-lg hover:shadow-otw-gold/20 transition-all duration-300 group-hover:scale-105\"\n                  >\n                    Add to Cart • ${item.price}\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Awards & Recognition */}\n      <div className=\"py-16 px-4 bg-gradient-to-r from-otw-gold/5 to-transparent\">\n        <div className=\"container mx-auto text-center\">\n          <h2 className=\"text-3xl font-bold text-white mb-8\">\n            Awards & <span className=\"text-otw-gold\">Recognition</span>\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <div className=\"flex flex-col items-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-full flex items-center justify-center mb-4\">\n                <Award className=\"w-8 h-8 text-black\" />\n              </div>\n              <h3 className=\"text-white font-bold mb-2\">Best Burger 2023</h3>\n              <p className=\"text-gray-400\">Fort Wayne Food Awards</p>\n            </div>\n            <div className=\"flex flex-col items-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-full flex items-center justify-center mb-4\">\n                <Users className=\"w-8 h-8 text-black\" />\n              </div>\n              <h3 className=\"text-white font-bold mb-2\">People's Choice</h3>\n              <p className=\"text-gray-400\">Local Restaurant Week</p>\n            </div>\n            <div className=\"flex flex-col items-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-full flex items-center justify-center mb-4\">\n                <Heart className=\"w-8 h-8 text-black\" />\n              </div>\n              <h3 className=\"text-white font-bold mb-2\">Community Favorite</h3>\n              <p className=\"text-gray-400\">3 Years Running</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* CTA Section */}\n      <div className=\"py-16 px-4\">\n        <div className=\"container mx-auto text-center\">\n          <h2 className=\"text-3xl font-bold text-white mb-4\">\n            Ready to Order?\n          </h2>\n          <p className=\"text-gray-300 mb-8 max-w-2xl mx-auto\">\n            Experience the best burgers in Fort Wayne. Order now for pickup or delivery!\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Link href=\"/menu\">\n              <Button className=\"bg-gradient-to-r from-otw-gold to-yellow-500 text-black font-semibold px-8 py-3 rounded-full hover:shadow-lg transition-all duration-300\">\n                View Full Menu\n              </Button>\n            </Link>\n            <Link href=\"/cart\">\n              <Button variant=\"outline\" className=\"border-2 border-otw-gold text-otw-gold hover:bg-otw-gold hover:text-black px-8 py-3 rounded-full transition-all duration-300\">\n                View Cart\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/cart/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/cart/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Metadata' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Card' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardContent' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardDescription' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardHeader' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":56},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardTitle' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":58,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":67},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Badge' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Separator' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Input' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":56,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1582,1585],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1582,1585],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":72,"column":35,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[2276,2360],"text":"\n              Looks like you haven&apos;t added any items to your cart yet.\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[2276,2360],"text":"\n              Looks like you haven&lsquo;t added any items to your cart yet.\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[2276,2360],"text":"\n              Looks like you haven&#39;t added any items to your cart yet.\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[2276,2360],"text":"\n              Looks like you haven&rsquo;t added any items to your cart yet.\n            "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nexport const dynamic = 'force-dynamic';\n\nimport type { Metadata } from 'next';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../components/ui/card';\nimport { Button } from '../../components/ui/button';\nimport { Badge } from '../../components/ui/badge';\nimport { Separator } from '../../components/ui/separator';\nimport { Input } from '../../components/ui/input';\nimport type React from 'react';\n\nimport { useState } from 'react';\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport { useCart } from '../../lib/context/CartContext';\nimport {\n  FaShoppingCart,\n  FaTrash,\n  FaPlus,\n  FaMinus,\n  FaArrowLeft,\n  FaCreditCard,\n  FaCog,\n} from 'react-icons/fa';\n\nexport default function CartPage() {\n  const { items, removeItem, updateQuantity, subtotal, tax, total, clearCart } =\n    useCart();\n  const [promoCode, setPromoCode] = useState('');\n  const [promoError, setPromoError] = useState<string | null>(null);\n\n  const handleQuantityChange = (\n    id: string,\n    currentQuantity: number,\n    change: number,\n  ) => {\n    const newQuantity = currentQuantity + change;\n    if (newQuantity > 0) {\n      updateQuantity(id, newQuantity);\n    }\n  };\n\n  const handlePromoCode = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (promoCode.trim() === '') {\n      setPromoError('Please enter a promo code');\n      return;\n    }\n\n    // In a real app, you would validate the promo code with an API\n    setPromoError('Invalid promo code');\n  };\n\n  // Check if an item has customizations\n  const hasCustomizations = (item: any) => {\n    return item.customizations && Object.keys(item.customizations).length > 0;\n  };\n\n  if (items.length === 0) {\n    return (\n      <div className=\"min-h-screen py-20\">\n        <div className=\"container mx-auto px-4 max-w-4xl\">\n          <h1 className=\"text-3xl font-bold mb-8\">Your Cart</h1>\n\n          <div className=\"bg-[#1A1A1A] rounded-lg p-12 text-center\">\n            <div className=\"w-20 h-20 bg-[#222222] rounded-full flex items-center justify-center mx-auto mb-6\">\n              <FaShoppingCart className=\"text-gray-500 text-3xl\" />\n            </div>\n            <h2 className=\"text-2xl font-bold mb-4\">Your cart is empty</h2>\n            <p className=\"text-gray-400 mb-8\">\n              Looks like you haven't added any items to your cart yet.\n            </p>\n            <Link\n              href=\"/menu\"\n              className=\"btn-primary inline-flex items-center gap-2\"\n            >\n              <FaArrowLeft size={14} /> Browse Menu\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen py-20\">\n      <div className=\"container mx-auto px-4 max-w-6xl\">\n        <h1 className=\"text-3xl font-bold mb-8\">Your Cart</h1>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Cart Items */}\n          <div className=\"lg:col-span-2\">\n            <div className=\"bg-[#1A1A1A] rounded-lg overflow-hidden border border-[#333333]\">\n              <div className=\"p-4 bg-[#111111] border-b border-[#333333] flex justify-between items-center\">\n                <h2 className=\"font-bold\">Items ({items.length})</h2>\n                <button\n                  onClick={clearCart}\n                  className=\"text-sm text-gray-400 hover:text-blood-red transition-colors\"\n                >\n                  Clear Cart\n                </button>\n              </div>\n\n              <ul className=\"divide-y divide-[#333333]\">\n                {items.map((item) => (\n                  <li key={item.id} className=\"p-4 flex flex-col\">\n                    <div className=\"flex items-center gap-4\">\n                      <div className=\"w-20 h-20 bg-[#222222] rounded-lg overflow-hidden relative flex-shrink-0\">\n                        {item.image ? (\n                          <Image\n                            src={item.image || '/placeholder.svg'}\n                            alt={item.name}\n                            fill\n                            className=\"object-cover\"\n                          />\n                        ) : (\n                          <div className=\"w-full h-full flex items-center justify-center\">\n                            <FaShoppingCart className=\"text-gray-500\" />\n                          </div>\n                        )}\n                      </div>\n\n                      <div className=\"flex-grow\">\n                        <div className=\"flex items-center gap-2\">\n                          <h3 className=\"font-bold\">\n                            {item.name.split(' (')[0]}\n                          </h3>\n                          {hasCustomizations(item) && (\n                            <span className=\"bg-gold-foil bg-opacity-20 text-gold-foil text-xs px-2 py-1 rounded-full flex items-center gap-1\">\n                              <FaCog size={10} /> Customized\n                            </span>\n                          )}\n                        </div>\n                        <div className=\"text-gold-foil font-bold mt-1\">\n                          ${item.price.toFixed(2)}\n                        </div>\n\n                        {/* Display customizations if any */}\n                        {hasCustomizations(item) && (\n                          <div className=\"mt-2 text-sm text-gray-400\">\n                            {item.customizations &&\n                              Object.values(item.customizations)\n                                .flat()\n                                .map((option, index) => (\n                                  <div\n                                    key={index}\n                                    className=\"flex justify-between\"\n                                  >\n                                    <span>{option.name}</span>\n                                    {option.price > 0 && (\n                                      <span>+${option.price.toFixed(2)}</span>\n                                    )}\n                                  </div>\n                                ))}\n                          </div>\n                        )}\n                      </div>\n\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"flex items-center border border-[#333333] rounded-md\">\n                          <button\n                            className=\"px-2 py-1 text-white hover:bg-[#333333] transition-colors\"\n                            onClick={() =>\n                              handleQuantityChange(item.id, item.quantity, -1)\n                            }\n                          >\n                            <FaMinus size={12} />\n                          </button>\n                          <span className=\"px-3 py-1 text-white\">\n                            {item.quantity}\n                          </span>\n                          <button\n                            className=\"px-2 py-1 text-white hover:bg-[#333333] transition-colors\"\n                            onClick={() =>\n                              handleQuantityChange(item.id, item.quantity, 1)\n                            }\n                          >\n                            <FaPlus size={12} />\n                          </button>\n                        </div>\n\n                        <button\n                          onClick={() => removeItem(item.id)}\n                          className=\"p-2 text-gray-400 hover:text-blood-red transition-colors\"\n                          aria-label=\"Remove item\"\n                        >\n                          <FaTrash />\n                        </button>\n                      </div>\n                    </div>\n                  </li>\n                ))}\n              </ul>\n            </div>\n\n            <div className=\"mt-6\">\n              <Link\n                href=\"/menu\"\n                className=\"text-gold-foil hover:underline inline-flex items-center gap-2\"\n              >\n                <FaArrowLeft size={14} /> Continue Shopping\n              </Link>\n            </div>\n          </div>\n\n          {/* Order Summary */}\n          <div className=\"lg:col-span-1\">\n            <div className=\"bg-[#1A1A1A] rounded-lg border border-[#333333] p-6\">\n              <h2 className=\"text-xl font-bold mb-6\">Order Summary</h2>\n\n              <div className=\"space-y-4 mb-6\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-400\">Subtotal</span>\n                  <span>${subtotal.toFixed(2)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-400\">Tax (8.25%)</span>\n                  <span>${tax.toFixed(2)}</span>\n                </div>\n\n                <form\n                  onSubmit={handlePromoCode}\n                  className=\"pt-4 border-t border-[#333333]\"\n                >\n                  <label className=\"block text-sm font-medium mb-2\">\n                    Promo Code\n                  </label>\n                  <div className=\"flex gap-2\">\n                    <input\n                      type=\"text\"\n                      className=\"input flex-grow\"\n                      value={promoCode}\n                      onChange={(e) => {\n                        setPromoCode(e.target.value);\n                        setPromoError(null);\n                      }}\n                      placeholder=\"Enter code\"\n                    />\n                    <button\n                      type=\"submit\"\n                      className=\"btn-outline whitespace-nowrap\"\n                    >\n                      Apply\n                    </button>\n                  </div>\n                  {promoError && (\n                    <p className=\"text-blood-red text-sm mt-1\">{promoError}</p>\n                  )}\n                </form>\n\n                <div className=\"flex justify-between pt-4 border-t border-[#333333] font-bold\">\n                  <span>Total</span>\n                  <span className=\"text-gold-foil\">${total.toFixed(2)}</span>\n                </div>\n              </div>\n\n              <Link\n                href=\"/checkout\"\n                className=\"btn-primary w-full flex items-center justify-center gap-2\"\n              >\n                <FaCreditCard /> Proceed to Checkout\n              </Link>\n\n              <p className=\"text-xs text-gray-500 mt-4 text-center\">\n                Taxes and shipping calculated at checkout\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/catering/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Utensils' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Mail' is defined but never used. Allowed unused vars must match /^_/u.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Calendar' is defined but never used. Allowed unused vars must match /^_/u.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MapPin' is defined but never used. Allowed unused vars must match /^_/u.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Heart' is defined but never used. Allowed unused vars must match /^_/u.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Zap' is defined but never used. Allowed unused vars must match /^_/u.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Coffee' is defined but never used. Allowed unused vars must match /^_/u.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Pizza' is defined but never used. Allowed unused vars must match /^_/u.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Cake' is defined but never used. Allowed unused vars must match /^_/u.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Salad' is defined but never used. Allowed unused vars must match /^_/u.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":277,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":277,"endColumn":19},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":602,"column":19,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[22341,22493],"text":"\n                  &quot;The catering for our corporate event was exceptional. Every dish was perfectly prepared and beautifully presented.\"\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[22341,22493],"text":"\n                  &ldquo;The catering for our corporate event was exceptional. Every dish was perfectly prepared and beautifully presented.\"\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[22341,22493],"text":"\n                  &#34;The catering for our corporate event was exceptional. Every dish was perfectly prepared and beautifully presented.\"\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[22341,22493],"text":"\n                  &rdquo;The catering for our corporate event was exceptional. Every dish was perfectly prepared and beautifully presented.\"\n                "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":602,"column":134,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[22341,22493],"text":"\n                  \"The catering for our corporate event was exceptional. Every dish was perfectly prepared and beautifully presented.&quot;\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[22341,22493],"text":"\n                  \"The catering for our corporate event was exceptional. Every dish was perfectly prepared and beautifully presented.&ldquo;\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[22341,22493],"text":"\n                  \"The catering for our corporate event was exceptional. Every dish was perfectly prepared and beautifully presented.&#34;\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[22341,22493],"text":"\n                  \"The catering for our corporate event was exceptional. Every dish was perfectly prepared and beautifully presented.&rdquo;\n                "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":624,"column":19,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[23514,23649],"text":"\n                  &quot;Outstanding service and delicious food! They accommodated all our dietary restrictions perfectly.\"\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[23514,23649],"text":"\n                  &ldquo;Outstanding service and delicious food! They accommodated all our dietary restrictions perfectly.\"\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[23514,23649],"text":"\n                  &#34;Outstanding service and delicious food! They accommodated all our dietary restrictions perfectly.\"\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[23514,23649],"text":"\n                  &rdquo;Outstanding service and delicious food! They accommodated all our dietary restrictions perfectly.\"\n                "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":624,"column":117,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[23514,23649],"text":"\n                  \"Outstanding service and delicious food! They accommodated all our dietary restrictions perfectly.&quot;\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[23514,23649],"text":"\n                  \"Outstanding service and delicious food! They accommodated all our dietary restrictions perfectly.&ldquo;\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[23514,23649],"text":"\n                  \"Outstanding service and delicious food! They accommodated all our dietary restrictions perfectly.&#34;\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[23514,23649],"text":"\n                  \"Outstanding service and delicious food! They accommodated all our dietary restrictions perfectly.&rdquo;\n                "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":646,"column":19,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[24662,24792],"text":"\n                  &quot;Professional, reliable, and the food was absolutely amazing. Will definitely use them again!\"\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[24662,24792],"text":"\n                  &ldquo;Professional, reliable, and the food was absolutely amazing. Will definitely use them again!\"\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[24662,24792],"text":"\n                  &#34;Professional, reliable, and the food was absolutely amazing. Will definitely use them again!\"\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[24662,24792],"text":"\n                  &rdquo;Professional, reliable, and the food was absolutely amazing. Will definitely use them again!\"\n                "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":646,"column":112,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[24662,24792],"text":"\n                  \"Professional, reliable, and the food was absolutely amazing. Will definitely use them again!&quot;\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[24662,24792],"text":"\n                  \"Professional, reliable, and the food was absolutely amazing. Will definitely use them again!&ldquo;\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[24662,24792],"text":"\n                  \"Professional, reliable, and the food was absolutely amazing. Will definitely use them again!&#34;\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[24662,24792],"text":"\n                  \"Professional, reliable, and the food was absolutely amazing. Will definitely use them again!&rdquo;\n                "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":679,"column":48,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[26183,26280],"text":"\n                Tell us about your event and we&apos;ll create a custom catering quote\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[26183,26280],"text":"\n                Tell us about your event and we&lsquo;ll create a custom catering quote\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[26183,26280],"text":"\n                Tell us about your event and we&#39;ll create a custom catering quote\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[26183,26280],"text":"\n                Tell us about your event and we&rsquo;ll create a custom catering quote\n              "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { Button } from '../../components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../components/ui/card';\nimport { Badge } from '../../components/ui/badge';\nimport { Input } from '../../components/ui/input';\nimport { Textarea } from '../../components/ui/textarea';\nimport {\n  Utensils,\n  Users,\n  Clock,\n  Phone,\n  Mail,\n  Star,\n  CheckCircle,\n  ChefHat,\n  Truck,\n  Calendar,\n  MapPin,\n  Heart,\n  Leaf,\n  Zap,\n  Award,\n  Coffee,\n  Pizza,\n  Cake,\n  Salad,\n} from 'lucide-react';\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport { toast } from '../../components/ui/use-toast';\nimport { useCart } from '../../lib/context/CartContext';\n\ninterface CateringPackage {\n  id: string;\n  name: string;\n  description: string;\n  pricePerPerson: number;\n  minGuests: number;\n  features: string[];\n  popular?: boolean;\n  premium?: boolean;\n  category: 'breakfast' | 'lunch' | 'dinner' | 'dessert' | 'beverages';\n}\n\ninterface MenuItem {\n  id: string;\n  name: string;\n  description: string;\n  price: number;\n  category: string;\n  dietary: string[];\n  image: string;\n  servingSize: string;\n  prepTime: string;\n}\n\nconst CATERING_PACKAGES: CateringPackage[] = [\n  {\n    id: 'breakfast-basic',\n    name: 'Continental Breakfast',\n    description: 'Perfect start to your morning event with fresh pastries and coffee',\n    pricePerPerson: 12,\n    minGuests: 10,\n    category: 'breakfast',\n    features: [\n      'Assorted pastries and muffins',\n      'Fresh fruit platter',\n      'Premium coffee and tea service',\n      'Orange juice and water',\n      'Disposable plates and utensils',\n      'Setup and cleanup included',\n    ],\n  },\n  {\n    id: 'lunch-deluxe',\n    name: 'Executive Lunch',\n    description: 'Professional lunch service perfect for corporate events',\n    pricePerPerson: 18,\n    minGuests: 15,\n    category: 'lunch',\n    features: [\n      'Choice of 3 gourmet sandwiches',\n      'Mixed green salad',\n      'Seasonal soup',\n      'Chips and pickles',\n      'Dessert selection',\n      'Beverages included',\n      'Professional service staff',\n    ],\n    popular: true,\n  },\n  {\n    id: 'dinner-premium',\n    name: 'Premium Dinner Service',\n    description: 'Elegant multi-course dinner for special occasions',\n    pricePerPerson: 45,\n    minGuests: 20,\n    category: 'dinner',\n    features: [\n      'Three-course plated dinner',\n      'Choice of premium entrees',\n      'Seasonal vegetables',\n      'Artisan bread service',\n      'Signature dessert',\n      'Wine pairing available',\n      'White-glove service',\n      'Linens and centerpieces',\n    ],\n    premium: true,\n  },\n  {\n    id: 'dessert-station',\n    name: 'Dessert Station',\n    description: 'Sweet endings for any celebration',\n    pricePerPerson: 8,\n    minGuests: 10,\n    category: 'dessert',\n    features: [\n      'Assorted mini desserts',\n      'Fresh fruit display',\n      'Chocolate fountain',\n      'Coffee and tea service',\n      'Decorative presentation',\n      'Serving utensils included',\n    ],\n  },\n  {\n    id: 'beverage-package',\n    name: 'Premium Beverage Service',\n    description: 'Complete beverage solutions for your event',\n    pricePerPerson: 15,\n    minGuests: 15,\n    category: 'beverages',\n    features: [\n      'Open bar service (4 hours)',\n      'Premium spirits and wines',\n      'Craft beer selection',\n      'Signature cocktails',\n      'Non-alcoholic options',\n      'Professional bartender',\n      'All glassware included',\n    ],\n  },\n];\n\nconst MENU_ITEMS: MenuItem[] = [\n  {\n    id: 'gourmet-sandwich-platter',\n    name: 'Gourmet Sandwich Platter',\n    description: 'Assorted premium sandwiches with artisan breads and fresh ingredients',\n    price: 89,\n    category: 'Lunch',\n    dietary: ['Vegetarian Options'],\n    image: '/images/catering/sandwich-platter.jpg',\n    servingSize: 'Serves 8-10',\n    prepTime: '2 hours notice',\n  },\n  {\n    id: 'mediterranean-mezze',\n    name: 'Mediterranean Mezze Board',\n    description: 'Hummus, olives, cheese, crackers, and fresh vegetables',\n    price: 65,\n    category: 'Appetizers',\n    dietary: ['Vegetarian', 'Gluten-Free Options'],\n    image: '/images/catering/mezze-board.jpg',\n    servingSize: 'Serves 6-8',\n    prepTime: '4 hours notice',\n  },\n  {\n    id: 'bbq-platter',\n    name: 'BBQ Feast Platter',\n    description: 'Pulled pork, brisket, ribs with sides and sauces',\n    price: 145,\n    category: 'Dinner',\n    dietary: ['Gluten-Free Sides'],\n    image: '/images/catering/bbq-platter.jpg',\n    servingSize: 'Serves 10-12',\n    prepTime: '24 hours notice',\n  },\n  {\n    id: 'breakfast-pastry-box',\n    name: 'Breakfast Pastry Box',\n    description: 'Fresh croissants, muffins, and danish pastries',\n    price: 45,\n    category: 'Breakfast',\n    dietary: ['Vegetarian'],\n    image: '/images/catering/pastry-box.jpg',\n    servingSize: 'Serves 6-8',\n    prepTime: '1 day notice',\n  },\n  {\n    id: 'salad-bar-setup',\n    name: 'Build-Your-Own Salad Bar',\n    description: 'Complete salad station with fresh greens, toppings, and dressings',\n    price: 12,\n    category: 'Lunch',\n    dietary: ['Vegetarian', 'Vegan', 'Gluten-Free'],\n    image: '/images/catering/salad-bar.jpg',\n    servingSize: 'Per person',\n    prepTime: '4 hours notice',\n  },\n  {\n    id: 'dessert-tower',\n    name: 'Dessert Tower',\n    description: 'Tiered display of assorted mini desserts and sweets',\n    price: 95,\n    category: 'Desserts',\n    dietary: ['Vegetarian', 'Some Gluten-Free'],\n    image: '/images/catering/dessert-tower.jpg',\n    servingSize: 'Serves 12-15',\n    prepTime: '48 hours notice',\n  },\n];\n\nexport default function CateringPage() {\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const [selectedPackage, setSelectedPackage] = useState<string>('');\n  const [showQuoteForm, setShowQuoteForm] = useState(false);\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    eventDate: '',\n    guestCount: '',\n    eventType: '',\n    budget: '',\n    dietaryRestrictions: '',\n    additionalRequests: '',\n  });\n\n  const { addItem } = useCart();\n\n  const categories = ['all', 'breakfast', 'lunch', 'dinner', 'dessert', 'beverages'];\n  const menuCategories = ['All', 'Breakfast', 'Lunch', 'Dinner', 'Appetizers', 'Desserts'];\n\n  const filteredPackages = selectedCategory === 'all'\n    ? CATERING_PACKAGES\n    : CATERING_PACKAGES.filter(pkg => pkg.category === selectedCategory);\n\n  const [selectedMenuCategory, setSelectedMenuCategory] = useState('All');\n  const filteredMenuItems = selectedMenuCategory === 'All'\n    ? MENU_ITEMS\n    : MENU_ITEMS.filter(item => item.category === selectedMenuCategory);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const handleSubmitQuote = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    try {\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      toast({\n        title: 'Catering Quote Requested!',\n        description: \"We'll contact you within 24 hours with a detailed quote.\",\n      });\n\n      setShowQuoteForm(false);\n      setFormData({\n        name: '',\n        email: '',\n        phone: '',\n        eventDate: '',\n        guestCount: '',\n        eventType: '',\n        budget: '',\n        dietaryRestrictions: '',\n        additionalRequests: '',\n      });\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to submit quote request. Please try again.',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const handleAddToCart = (item: MenuItem) => {\n    addItem({\n      id: item.id,\n      name: item.name,\n      price: item.price,\n      quantity: 1,\n      restaurant: 'OTW Catering',\n      image: item.image,\n      customizations: [],\n    });\n\n    toast({\n      title: 'Added to Cart!',\n      description: `${item.name} has been added to your cart.`,\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-otw-black via-otw-black-800 to-otw-black-900\">\n      {/* Hero Section */}\n      <div className=\"relative py-20 px-4\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-otw-gold/10 to-transparent\" />\n        <div className=\"container mx-auto relative z-10\">\n          <div className=\"flex flex-col lg:flex-row items-center gap-12\">\n            <div className=\"flex-1 text-center lg:text-left\">\n              <div className=\"w-20 h-20 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-full flex items-center justify-center mx-auto lg:mx-0 mb-6\">\n                <ChefHat className=\"w-10 h-10 text-black\" />\n              </div>\n              <h1 className=\"text-4xl md:text-6xl font-bold text-white mb-6\">\n                Premium <span className=\"text-otw-gold\">Catering</span>\n              </h1>\n              <p className=\"text-xl text-gray-300 mb-8 max-w-2xl\">\n                Exceptional culinary experiences delivered to your event. From intimate gatherings to large celebrations, we bring restaurant-quality food to you.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Button\n                  onClick={() => setShowQuoteForm(true)}\n                  className=\"bg-gradient-to-r from-otw-gold to-yellow-500 text-black font-semibold px-8 py-3 rounded-full hover:shadow-lg transition-all duration-300\"\n                >\n                  Get Catering Quote\n                </Button>\n                <Button variant=\"outline\" className=\"border-2 border-otw-gold text-otw-gold hover:bg-otw-gold hover:text-black px-8 py-3 rounded-full transition-all duration-300\">\n                  <Phone className=\"w-5 h-5 mr-2\" />\n                  Call (260) 555-FOOD\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"flex-1 max-w-lg\">\n              <div className=\"relative h-80 rounded-2xl overflow-hidden\">\n                <Image\n                  src=\"/images/catering/catering-hero.jpg\"\n                  alt=\"Premium Catering Setup\"\n                  fill\n                  className=\"object-cover\"\n                />\n                <div className=\"absolute inset-0 bg-gradient-to-t from-black/30 to-transparent\" />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Services Overview */}\n      <div className=\"py-16 px-4\">\n        <div className=\"container mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-4xl font-bold text-white mb-4\">\n              Our <span className=\"text-otw-gold\">Services</span>\n            </h2>\n            <p className=\"text-xl text-gray-300 max-w-2xl mx-auto\">\n              Comprehensive catering solutions for every occasion\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Truck className=\"w-8 h-8 text-black\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-white mb-2\">Delivery & Setup</h3>\n              <p className=\"text-gray-300 text-sm\">Full-service delivery with professional setup and presentation</p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Users className=\"w-8 h-8 text-black\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-white mb-2\">Event Staffing</h3>\n              <p className=\"text-gray-300 text-sm\">Professional servers and bartenders for your event</p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Leaf className=\"w-8 h-8 text-black\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-white mb-2\">Dietary Options</h3>\n              <p className=\"text-gray-300 text-sm\">Vegetarian, vegan, gluten-free, and allergy-friendly options</p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Award className=\"w-8 h-8 text-black\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-white mb-2\">Quality Guarantee</h3>\n              <p className=\"text-gray-300 text-sm\">Fresh ingredients and restaurant-quality preparation</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Catering Packages */}\n      <div className=\"py-16 px-4 bg-gradient-to-r from-otw-gold/5 to-transparent\">\n        <div className=\"container mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-4xl font-bold text-white mb-4\">\n              Catering <span className=\"text-otw-gold\">Packages</span>\n            </h2>\n            <p className=\"text-xl text-gray-300 max-w-2xl mx-auto\">\n              Pre-designed packages for easy ordering, or customize your own\n            </p>\n          </div>\n\n          {/* Category Filter */}\n          <div className=\"flex flex-wrap justify-center gap-4 mb-12\">\n            {categories.map((category) => (\n              <Button\n                key={category}\n                onClick={() => setSelectedCategory(category)}\n                variant={selectedCategory === category ? 'default' : 'outline'}\n                className={`px-6 py-2 rounded-full transition-all duration-300 ${\n                  selectedCategory === category\n                    ? 'bg-gradient-to-r from-otw-gold to-yellow-500 text-black'\n                    : 'border-otw-gold/30 text-otw-gold hover:bg-otw-gold/10'\n                }`}\n              >\n                {category.charAt(0).toUpperCase() + category.slice(1)}\n              </Button>\n            ))}\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {filteredPackages.map((pkg) => (\n              <Card\n                key={pkg.id}\n                className={`bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border transition-all duration-300 hover:shadow-2xl hover:shadow-otw-gold/10 relative ${\n                  selectedPackage === pkg.id\n                    ? 'border-otw-gold/60 shadow-lg shadow-otw-gold/20 scale-105'\n                    : 'border-otw-gold/20 hover:border-otw-gold/40'\n                }`}\n              >\n                {pkg.popular && (\n                  <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2\">\n                    <Badge className=\"bg-red-500 text-white px-4 py-2 text-sm font-semibold\">\n                      🔥 Most Popular\n                    </Badge>\n                  </div>\n                )}\n                {pkg.premium && (\n                  <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2\">\n                    <Badge className=\"bg-gradient-to-r from-purple-500 to-pink-500 text-white px-4 py-2 text-sm font-semibold\">\n                      ✨ Premium\n                    </Badge>\n                  </div>\n                )}\n\n                <CardHeader className=\"text-center\">\n                  <CardTitle className=\"text-xl text-white mb-2\">{pkg.name}</CardTitle>\n                  <CardDescription className=\"text-gray-300 mb-4\">\n                    {pkg.description}\n                  </CardDescription>\n                  <div className=\"text-3xl font-bold text-otw-gold mb-2\">\n                    ${pkg.pricePerPerson}\n                    <span className=\"text-sm text-gray-400\">/person</span>\n                  </div>\n                  <div className=\"text-sm text-gray-400\">\n                    Minimum {pkg.minGuests} guests\n                  </div>\n                </CardHeader>\n\n                <CardContent>\n                  <ul className=\"space-y-2 mb-6\">\n                    {pkg.features.map((feature, index) => (\n                      <li key={index} className=\"flex items-center gap-2 text-gray-300\">\n                        <CheckCircle className=\"w-4 h-4 text-green-400 flex-shrink-0\" />\n                        <span className=\"text-sm\">{feature}</span>\n                      </li>\n                    ))}\n                  </ul>\n\n                  <Button\n                    onClick={() => {\n                      setSelectedPackage(pkg.id);\n                      setFormData(prev => ({ ...prev, eventType: pkg.name }));\n                      setShowQuoteForm(true);\n                    }}\n                    className={`w-full py-3 rounded-xl transition-all duration-300 ${\n                      pkg.premium\n                        ? 'bg-gradient-to-r from-purple-500 to-pink-500 text-white hover:shadow-lg hover:shadow-purple-500/20'\n                        : 'bg-gradient-to-r from-otw-gold to-yellow-500 text-black font-semibold hover:shadow-lg hover:shadow-otw-gold/20'\n                    }`}\n                  >\n                    Select Package\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Menu Items */}\n      <div className=\"py-16 px-4\">\n        <div className=\"container mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-4xl font-bold text-white mb-4\">\n              À La Carte <span className=\"text-otw-gold\">Menu</span>\n            </h2>\n            <p className=\"text-xl text-gray-300 max-w-2xl mx-auto\">\n              Build your own catering order with individual menu items\n            </p>\n          </div>\n\n          {/* Menu Category Filter */}\n          <div className=\"flex flex-wrap justify-center gap-4 mb-12\">\n            {menuCategories.map((category) => (\n              <Button\n                key={category}\n                onClick={() => setSelectedMenuCategory(category)}\n                variant={selectedMenuCategory === category ? 'default' : 'outline'}\n                className={`px-6 py-2 rounded-full transition-all duration-300 ${\n                  selectedMenuCategory === category\n                    ? 'bg-gradient-to-r from-otw-gold to-yellow-500 text-black'\n                    : 'border-otw-gold/30 text-otw-gold hover:bg-otw-gold/10'\n                }`}\n              >\n                {category}\n              </Button>\n            ))}\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {filteredMenuItems.map((item) => (\n              <Card key={item.id} className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20 hover:border-otw-gold/40 transition-all duration-300 hover:shadow-lg hover:shadow-otw-gold/10\">\n                <div className=\"relative h-48 overflow-hidden rounded-t-lg\">\n                  <Image\n                    src={item.image}\n                    alt={item.name}\n                    fill\n                    className=\"object-cover transition-transform duration-300 hover:scale-105\"\n                  />\n                  <div className=\"absolute top-4 right-4\">\n                    <Badge className=\"bg-otw-gold text-black font-semibold\">\n                      {item.category}\n                    </Badge>\n                  </div>\n                </div>\n\n                <CardContent className=\"p-6\">\n                  <div className=\"flex justify-between items-start mb-2\">\n                    <h3 className=\"text-xl font-semibold text-white\">{item.name}</h3>\n                    <span className=\"text-2xl font-bold text-otw-gold\">${item.price}</span>\n                  </div>\n\n                  <p className=\"text-gray-300 text-sm mb-4\">{item.description}</p>\n\n                  <div className=\"flex flex-wrap gap-2 mb-4\">\n                    {item.dietary.map((diet, index) => (\n                      <Badge key={index} variant=\"outline\" className=\"border-green-400 text-green-400 text-xs\">\n                        {diet}\n                      </Badge>\n                    ))}\n                  </div>\n\n                  <div className=\"flex justify-between items-center text-sm text-gray-400 mb-4\">\n                    <span className=\"flex items-center gap-1\">\n                      <Users className=\"w-4 h-4\" />\n                      {item.servingSize}\n                    </span>\n                    <span className=\"flex items-center gap-1\">\n                      <Clock className=\"w-4 h-4\" />\n                      {item.prepTime}\n                    </span>\n                  </div>\n\n                  <Button\n                    onClick={() => handleAddToCart(item)}\n                    className=\"w-full bg-gradient-to-r from-otw-gold to-yellow-500 text-black font-semibold py-2 rounded-lg hover:shadow-lg transition-all duration-300\"\n                  >\n                    Add to Cart\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Testimonials */}\n      <div className=\"py-16 px-4 bg-gradient-to-r from-otw-gold/5 to-transparent\">\n        <div className=\"container mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-4xl font-bold text-white mb-4\">\n              Client <span className=\"text-otw-gold\">Reviews</span>\n            </h2>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <Card className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center gap-1 mb-4\">\n                  {[...Array(5)].map((_, i) => (\n                    <Star key={i} className=\"w-4 h-4 text-yellow-400 fill-current\" />\n                  ))}\n                </div>\n                <p className=\"text-gray-300 mb-4\">\n                  \"The catering for our corporate event was exceptional. Every dish was perfectly prepared and beautifully presented.\"\n                </p>\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-10 h-10 bg-otw-gold rounded-full flex items-center justify-center\">\n                    <span className=\"text-black font-semibold\">MJ</span>\n                  </div>\n                  <div>\n                    <p className=\"text-white font-semibold\">Maria Johnson</p>\n                    <p className=\"text-gray-400 text-sm\">Corporate Event Manager</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center gap-1 mb-4\">\n                  {[...Array(5)].map((_, i) => (\n                    <Star key={i} className=\"w-4 h-4 text-yellow-400 fill-current\" />\n                  ))}\n                </div>\n                <p className=\"text-gray-300 mb-4\">\n                  \"Outstanding service and delicious food! They accommodated all our dietary restrictions perfectly.\"\n                </p>\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-10 h-10 bg-otw-gold rounded-full flex items-center justify-center\">\n                    <span className=\"text-black font-semibold\">DL</span>\n                  </div>\n                  <div>\n                    <p className=\"text-white font-semibold\">David Lee</p>\n                    <p className=\"text-gray-400 text-sm\">Wedding Coordinator</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center gap-1 mb-4\">\n                  {[...Array(5)].map((_, i) => (\n                    <Star key={i} className=\"w-4 h-4 text-yellow-400 fill-current\" />\n                  ))}\n                </div>\n                <p className=\"text-gray-300 mb-4\">\n                  \"Professional, reliable, and the food was absolutely amazing. Will definitely use them again!\"\n                </p>\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-10 h-10 bg-otw-gold rounded-full flex items-center justify-center\">\n                    <span className=\"text-black font-semibold\">SK</span>\n                  </div>\n                  <div>\n                    <p className=\"text-white font-semibold\">Sarah Kim</p>\n                    <p className=\"text-gray-400 text-sm\">Birthday Party Host</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* Quote Form Modal */}\n      {showQuoteForm && (\n        <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4\">\n          <Card className=\"bg-gradient-to-br from-otw-black-800 to-otw-black-900 border border-otw-gold/20 max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center justify-between\">\n                <span>Get Catering Quote</span>\n                <Button\n                  variant=\"ghost\"\n                  onClick={() => setShowQuoteForm(false)}\n                  className=\"text-gray-400 hover:text-white\"\n                >\n                  ✕\n                </Button>\n              </CardTitle>\n              <CardDescription className=\"text-gray-300\">\n                Tell us about your event and we'll create a custom catering quote\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmitQuote} className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-white mb-2\">Full Name *</label>\n                    <Input\n                      name=\"name\"\n                      value={formData.name}\n                      onChange={handleInputChange}\n                      required\n                      className=\"bg-otw-black-800 border-otw-gold/30 text-white\"\n                      placeholder=\"Your full name\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-white mb-2\">Email *</label>\n                    <Input\n                      name=\"email\"\n                      type=\"email\"\n                      value={formData.email}\n                      onChange={handleInputChange}\n                      required\n                      className=\"bg-otw-black-800 border-otw-gold/30 text-white\"\n                      placeholder=\"your@email.com\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-white mb-2\">Phone Number *</label>\n                    <Input\n                      name=\"phone\"\n                      type=\"tel\"\n                      value={formData.phone}\n                      onChange={handleInputChange}\n                      required\n                      className=\"bg-otw-black-800 border-otw-gold/30 text-white\"\n                      placeholder=\"(260) 555-0123\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-white mb-2\">Event Date *</label>\n                    <Input\n                      name=\"eventDate\"\n                      type=\"date\"\n                      value={formData.eventDate}\n                      onChange={handleInputChange}\n                      required\n                      className=\"bg-otw-black-800 border-otw-gold/30 text-white\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-white mb-2\">Guest Count *</label>\n                    <Input\n                      name=\"guestCount\"\n                      type=\"number\"\n                      value={formData.guestCount}\n                      onChange={handleInputChange}\n                      required\n                      className=\"bg-otw-black-800 border-otw-gold/30 text-white\"\n                      placeholder=\"50\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-white mb-2\">Budget Range</label>\n                    <Input\n                      name=\"budget\"\n                      value={formData.budget}\n                      onChange={handleInputChange}\n                      className=\"bg-otw-black-800 border-otw-gold/30 text-white\"\n                      placeholder=\"$500 - $1000\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-white mb-2\">Dietary Restrictions</label>\n                  <Input\n                    name=\"dietaryRestrictions\"\n                    value={formData.dietaryRestrictions}\n                    onChange={handleInputChange}\n                    className=\"bg-otw-black-800 border-otw-gold/30 text-white\"\n                    placeholder=\"Vegetarian, gluten-free, allergies, etc.\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-white mb-2\">Additional Requests</label>\n                  <Textarea\n                    name=\"additionalRequests\"\n                    value={formData.additionalRequests}\n                    onChange={handleInputChange}\n                    className=\"bg-otw-black-800 border-otw-gold/30 text-white\"\n                    placeholder=\"Special menu requests, service preferences, setup requirements, etc.\"\n                    rows={4}\n                  />\n                </div>\n\n                <div className=\"flex gap-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setShowQuoteForm(false)}\n                    className=\"flex-1 border-otw-gold/30 text-otw-gold hover:bg-otw-gold/10\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    className=\"flex-1 bg-gradient-to-r from-otw-gold to-yellow-500 text-black font-semibold\"\n                  >\n                    Submit Quote Request\n                  </Button>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* CTA Section */}\n      <div className=\"py-16 px-4\">\n        <div className=\"container mx-auto text-center\">\n          <h2 className=\"text-3xl font-bold text-white mb-4\">\n            Ready to Cater Your <span className=\"text-otw-gold\">Event</span>?\n          </h2>\n          <p className=\"text-gray-300 mb-8 max-w-2xl mx-auto\">\n            Let our culinary team create an unforgettable dining experience for your guests.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button\n              onClick={() => setShowQuoteForm(true)}\n              className=\"bg-gradient-to-r from-otw-gold to-yellow-500 text-black font-semibold px-8 py-3 rounded-full hover:shadow-lg transition-all duration-300\"\n            >\n              Get Custom Quote\n            </Button>\n            <Link href=\"/private-events\">\n              <Button variant=\"outline\" className=\"border-2 border-otw-gold text-otw-gold hover:bg-otw-gold hover:text-black px-8 py-3 rounded-full transition-all duration-300\">\n                View Event Services\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/checkout/cash-success/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[475,478],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[475,478],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":119,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5081,5084],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5081,5084],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":126,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5609,5612],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5609,5612],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":170,"column":28,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[7640,7682],"text":"• You&apos;ll receive a receipt with your order"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[7640,7682],"text":"• You&lsquo;ll receive a receipt with your order"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[7640,7682],"text":"• You&#39;ll receive a receipt with your order"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[7640,7682],"text":"• You&rsquo;ll receive a receipt with your order"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useSearchParams, useRouter } from 'next/navigation';\nimport Link from 'next/link';\nimport { FaCheckCircle, FaMoneyBillWave } from 'react-icons/fa';\nimport { useCart } from '../../../lib/context/CartContext';\n\nexport default function CashOrderSuccess() {\n  const searchParams = useSearchParams();\n  const router = useRouter();\n  const { clearCart } = useCart();\n  const [orderData, setOrderData] = useState<any>(null);\n\n  useEffect(() => {\n    // Get order data from URL params or localStorage\n    const orderId = searchParams.get('orderId');\n\n    if (!orderId) {\n      // If no order ID, redirect to home\n      router.push('/');\n      return;\n    }\n\n    // Try to get order data from localStorage (set during checkout)\n    const storedOrderData = localStorage.getItem(`order_${orderId}`);\n    if (storedOrderData) {\n      setOrderData(JSON.parse(storedOrderData));\n      // Clear the stored data after retrieving it\n      localStorage.removeItem(`order_${orderId}`);\n    }\n\n    // Clear cart after successful order\n    clearCart();\n  }, [searchParams, router, clearCart]);\n\n  if (!orderData) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <p className=\"text-lg\">Loading order details...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen py-20\">\n      <div className=\"container mx-auto px-4 max-w-4xl\">\n        <div className=\"text-center mb-8\">\n          <FaCheckCircle className=\"text-6xl text-green-500 mx-auto mb-4\" />\n          <h1 className=\"text-4xl font-bold mb-2\">Order Confirmed!</h1>\n          <p className=\"text-xl text-gray-400 mb-4\">\n            Your cash on arrival order has been placed successfully.\n          </p>\n          <div className=\"flex items-center justify-center gap-2 text-gold-foil\">\n            <FaMoneyBillWave className=\"text-2xl\" />\n            <span className=\"text-lg font-semibold\">Payment on Arrival</span>\n          </div>\n        </div>\n\n        <div className=\"bg-[#1A1A1A] rounded-lg border border-[#333333] overflow-hidden\">\n          <div className=\"bg-[#111111] p-6 border-b border-[#333333]\">\n            <h2 className=\"text-2xl font-bold\">Order Details</h2>\n            <p className=\"text-gray-400 mt-1\">\n              Order ID: <span className=\"text-gold-foil\">{orderData.orderId}</span>\n            </p>\n          </div>\n\n          <div className=\"p-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n              {/* Order Information */}\n              <div>\n                <h3 className=\"text-lg font-bold mb-4\">Order Information</h3>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Order Type:</span>\n                    <span className=\"capitalize\">{orderData.orderType}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Email:</span>\n                    <span>{orderData.contactInfo.email}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Phone:</span>\n                    <span>{orderData.contactInfo.phone}</span>\n                  </div>\n                  {orderData.orderType === 'delivery' && orderData.deliveryInfo && (\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Delivery Address:</span>\n                      <span className=\"text-right\">\n                        {orderData.deliveryInfo.firstName} {orderData.deliveryInfo.lastName}<br />\n                        {orderData.deliveryInfo.streetAddress}<br />\n                        {orderData.deliveryInfo.apartment && `${orderData.deliveryInfo.apartment}, `}\n                        {orderData.deliveryInfo.city}, {orderData.deliveryInfo.state} {orderData.deliveryInfo.zipCode}\n                      </span>\n                    </div>\n                  )}\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Delivery Time:</span>\n                    <span className=\"capitalize\">\n                      {orderData.deliveryTime === 'asap'\n                        ? 'As Soon As Possible'\n                        : orderData.scheduledTime || 'ASAP'\n                      }\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Payment Method:</span>\n                    <span className=\"text-gold-foil font-semibold\">Cash on Arrival</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Order Items */}\n              <div>\n                <h3 className=\"text-lg font-bold mb-4\">Items Ordered</h3>\n                <div className=\"space-y-3\">\n                  {orderData.items.map((item: any, index: number) => (\n                    <div key={index} className=\"flex justify-between items-start\">\n                      <div className=\"flex-1\">\n                        <p className=\"font-medium\">{item.name}</p>\n                        <p className=\"text-sm text-gray-400\">Qty: {item.quantity}</p>\n                        {item.selectedOptions && item.selectedOptions.length > 0 && (\n                          <div className=\"text-xs text-gray-500 mt-1\">\n                            {item.selectedOptions.map((option: any, optIndex: number) => (\n                              <div key={optIndex}>\n                                {option.name}: {option.choice}\n                              </div>\n                            ))}\n                          </div>\n                        )}\n                      </div>\n                      <p className=\"font-medium\">\n                        ${(item.price * item.quantity).toFixed(2)}\n                      </p>\n                    </div>\n                  ))}\n\n                  <div className=\"border-t border-[#333333] pt-3 mt-4 space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span>Subtotal</span>\n                      <span>${orderData.subtotal.toFixed(2)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Tax</span>\n                      <span>${orderData.tax.toFixed(2)}</span>\n                    </div>\n                    <div className=\"flex justify-between font-bold text-lg\">\n                      <span>Total</span>\n                      <span className=\"text-gold-foil\">\n                        ${orderData.total.toFixed(2)}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"mt-8 pt-6 border-t border-[#333333]\">\n              <div className=\"bg-[#111111] p-4 rounded-lg\">\n                <h4 className=\"font-bold mb-2 flex items-center gap-2\">\n                  <FaMoneyBillWave className=\"text-gold-foil\" />\n                  Payment Instructions\n                </h4>\n                <ul className=\"text-sm text-gray-400 space-y-1\">\n                  <li>• Please have exact change ready: <strong className=\"text-gold-foil\">${orderData.total.toFixed(2)}</strong></li>\n                  <li>• Payment will be collected upon delivery/pickup</li>\n                  <li>• We accept cash only for this payment method</li>\n                  <li>• You'll receive a receipt with your order</li>\n                </ul>\n              </div>\n\n              <div className=\"bg-[#111111] p-4 rounded-lg mt-4\">\n                <h4 className=\"font-bold mb-2\">What&apos;s Next?</h4>\n                <ul className=\"text-sm text-gray-400 space-y-1\">\n                  <li>• We&apos;re preparing your order now</li>\n                  <li>• Estimated delivery/pickup time: 30-45 minutes</li>\n                  <li>• We&apos;ll call you when your order is ready</li>\n                  <li>• Keep your phone nearby for updates</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex flex-col sm:flex-row gap-4 mt-8 justify-center\">\n          <Link href=\"/\" className=\"btn-outline text-center\">\n            Return to Home\n          </Link>\n          <Link href=\"/menu\" className=\"btn-primary text-center\">\n            Order Again\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/checkout/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/checkout/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'clearCart' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":24,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setOrderComplete' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":29,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setOrderId' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":30,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":29}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nexport const dynamic = 'force-dynamic';\n\nimport type React from 'react';\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport { useCart } from '../../lib/context/CartContext';\nimport {\n  FaArrowLeft,\n  FaCreditCard,\n  FaLock,\n  FaShoppingBag,\n  FaCheck,\n  FaExclamationTriangle,\n} from 'react-icons/fa';\nimport { getAuth } from 'firebase/auth';\nimport PlaceAutocomplete, { PlaceSuggestion } from '../../components/PlaceAutocomplete';\n\nexport default function CheckoutPage() {\n  const router = useRouter();\n  const { items, subtotal, tax, total, clearCart } = useCart();\n  // Allow step = 1, 2, or 3\n  const [step, setStep] = useState<1 | 2 | 3>(1);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [orderComplete, setOrderComplete] = useState(false);\n  const [orderId, setOrderId] = useState<string | null>(null);\n  const [selected, setSelected] = useState<PlaceSuggestion | null>(null);\n\n  // Form state\n  const [formData, setFormData] = useState({\n    // Contact Information\n    email: '',\n    phone: '',\n\n    // Delivery Information\n    firstName: '',\n    lastName: '',\n    address: '',\n    apartment: '',\n    city: '',\n    state: '',\n    zipCode: '',\n    deliveryInstructions: '',\n\n    // Payment Information\n    paymentMethod: 'card' as 'card' | 'cash',\n    cardNumber: '',\n    cardName: '',\n    expiryDate: '',\n    cvv: '',\n\n    // Order Type\n    orderType: 'delivery' as 'delivery' | 'pickup',\n\n    // Pickup Location (if pickup selected)\n    pickupLocation: '',\n\n    // Delivery Options\n    deliveryTime: 'asap' as 'asap' | 'scheduled',\n    scheduledTime: '',\n\n    // Promo Code\n    promoCode: '',\n\n    // Terms\n    agreeToTerms: false,\n  });\n\n  // Type definitions for cart items\n  type CustomizationOption = {\n    name: string;\n    value: string;\n  };\n\n  type CartItem = {\n    id: string;\n    name: string;\n    price: number;\n    quantity: number;\n    customizations?: CustomizationOption[];\n    image?: string;\n  };\n\n  // Format customizations for display\n  const formatCustomizations = (item: CartItem) => {\n    if (!item.customizations?.length) {return '';}\n    return `Customizations: ${item.customizations\n      .map((c) => `${c.name}: ${c.value}`)\n      .join(', ')}`;\n  };\n\n  // Redirect to cart if cart is empty\n  useEffect(() => {\n    if (items.length === 0 && !orderComplete) {\n      router.push('/cart');\n    }\n  }, [items, router, orderComplete]);\n\n  // Handle form input changes\n  const handleChange = (\n    e: React.ChangeEvent<\n      HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement\n    >,\n  ) => {\n    const { name, value, type } = e.target;\n    const checked =\n      type === 'checkbox' ? (e.target as HTMLInputElement).checked : undefined;\n\n    setFormData({\n      ...formData,\n      [name]: type === 'checkbox' ? checked : value,\n    });\n  };\n\n  // Handle order type change\n  const handleOrderTypeChange = (type: 'delivery' | 'pickup') => {\n    setFormData({\n      ...formData,\n      orderType: type,\n    });\n  };\n\n  // Handle form submission\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    // Validate form based on current step\n    if (!validateForm()) {\n      return;\n    }\n\n    // If not yet on final step, move forward\n    if (step < 3) {\n      setStep((prev) => (prev + 1) as 1 | 2 | 3);\n      window.scrollTo(0, 0);\n      return;\n    }\n\n    // Now step === 3 → Process payment and complete order\n    setIsProcessing(true);\n    setError(null);\n\n    try {\n      // ====== CASH ON ARRIVAL =========\n      if (formData.paymentMethod === 'cash') {\n        const orderData = {\n          items: items.map((item) => ({\n            name: item.name,\n            price: item.price,\n            quantity: item.quantity,\n            customizations: item.customizations,\n          })),\n          orderType: formData.orderType,\n          contactInfo: {\n            email: formData.email,\n            phone: formData.phone,\n          },\n          deliveryInfo:\n            formData.orderType === 'delivery'\n              ? {\n                  firstName: formData.firstName,\n                  lastName: formData.lastName,\n                  address: formData.address,\n                  apartment: formData.apartment,\n                  city: formData.city,\n                  state: formData.state,\n                  zipCode: formData.zipCode,\n                  deliveryInstructions: formData.deliveryInstructions,\n                }\n              : {\n                  pickupLocation: formData.pickupLocation,\n                },\n          deliveryTime: formData.deliveryTime,\n          scheduledTime: formData.scheduledTime,\n          paymentMethod: 'cash',\n          subtotal,\n          tax,\n          total,\n        };\n\n        const response = await fetch('/api/orders/create', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(orderData),\n        });\n        if (!response.ok) {\n          throw new Error('Failed to create order');\n        }\n        const result = await response.json();\n        localStorage.setItem(\n          `order_${result.orderId}`,\n          JSON.stringify({\n            ...orderData,\n            orderId: result.orderId,\n          }),\n        );\n        router.push(`/checkout/cash-success?orderId=${result.orderId}`);\n        return;\n      }\n\n      // ====== STRIPE PAYMENT =========\n      // Make sure user is authenticated (replace with your auth logic)\n      const auth = getAuth();\n      const user = auth.currentUser;\n      if (!user) {\n        throw new Error('Authentication required');\n      }\n      const token = await user.getIdToken();\n\n      const checkoutData = {\n        items: items.map((item) => ({\n          name: item.name,\n          price: item.price,\n          quantity: item.quantity,\n          description: item.customizations?.length\n            ? `Customizations: ${item.customizations.map(\n                (c) => `${c.name}: ${c.value}`,\n              )}`\n            : undefined,\n        })),\n        metadata: {\n          orderType: formData.orderType,\n          email: formData.email,\n          phone: formData.phone,\n          deliveryAddress:\n            formData.orderType === 'delivery'\n              ? `${formData.address}${\n                  formData.apartment ? `, ${formData.apartment}` : ''\n                }, ${formData.city}, ${formData.state} ${formData.zipCode}`\n              : undefined,\n          pickupLocation:\n            formData.orderType === 'pickup' ? formData.pickupLocation : undefined,\n          deliveryTime: formData.deliveryTime,\n          scheduledTime: formData.scheduledTime,\n        },\n      };\n\n      const response = await fetch('/api/create-checkout-session', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(checkoutData),\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to create checkout session');\n      }\n      const { url } = await response.json();\n      window.location.href = url;\n    } catch (err) {\n      console.error('Order processing error:', err);\n      setError('There was an error processing your payment. Please try again.');\n      setIsProcessing(false);\n    }\n  };\n\n  // Validate form based on current step\n  const validateForm = () => {\n    const errors: Record<string, string> = {};\n    if (step === 1) {\n      if (!formData.email) {errors.email = 'Email is required';}\n      if (!formData.phone) {errors.phone = 'Phone number is required';}\n      if (formData.orderType === 'delivery') {\n        if (!formData.firstName) {errors.firstName = 'First name is required';}\n        if (!formData.lastName) {errors.lastName = 'Last name is required';}\n        if (!formData.address) {errors.address = 'Address is required';}\n        if (!formData.city) {errors.city = 'City is required';}\n        if (!formData.state) {errors.state = 'State is required';}\n        if (!formData.zipCode) {errors.zipCode = 'ZIP code is required';}\n      } else {\n        if (!formData.pickupLocation)\n          {errors.pickupLocation = 'Please select a pickup location';}\n      }\n    } else if (step === 2) {\n      if (!formData.cardNumber) {errors.cardNumber = 'Card number is required';}\n      else if (!/^\\d{16}$/.test(formData.cardNumber.replace(/\\s/g, '')))\n        {errors.cardNumber = 'Please enter a valid 16-digit card number';}\n      if (!formData.cardName) {errors.cardName = 'Name on card is required';}\n      if (!formData.expiryDate) {errors.expiryDate = 'Expiry date is required';}\n      else if (!/^\\d{2}\\/\\d{2}$/.test(formData.expiryDate))\n        {errors.expiryDate = 'Please use MM/YY format';}\n      if (!formData.cvv) {errors.cvv = 'CVV is required';}\n      else if (!/^\\d{3,4}$/.test(formData.cvv))\n        {errors.cvv = 'CVV must be 3 or 4 digits';}\n      if (!formData.agreeToTerms)\n        {errors.agreeToTerms = 'You must agree to the terms and conditions';}\n    }\n\n    if (Object.keys(errors).length > 0) {\n      setError('Please correct the errors in the form');\n      return false;\n    }\n    setError(null);\n    return true;\n  };\n\n  // Format card number with spaces\n  const formatCardNumber = (value: string) => {\n    const v = value.replace(/\\s+/g, '').replace(/[^0-9]/gi, '');\n    const matches = v.match(/\\d{4,16}/g);\n    const match = (matches && matches[0]) || '';\n    const parts: string[] = [];\n    for (let i = 0; i < match.length; i += 4) {\n      parts.push(match.substring(i, i + 4));\n    }\n    return parts.length ? parts.join(' ') : value;\n  };\n\n  // Handle card number input\n  const handleCardNumberChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const formattedValue = formatCardNumber(e.target.value);\n    setFormData({\n      ...formData,\n      cardNumber: formattedValue,\n    });\n  };\n\n  // Handle expiry date input\n  const handleExpiryDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    let { value } = e.target;\n    value = value.replace(/\\D/g, '');\n    if (value.length > 2) {\n      value = `${value.slice(0, 2)}/${value.slice(2, 4)}`;\n    }\n    setFormData({\n      ...formData,\n      expiryDate: value,\n    });\n  };\n\n  // === FINAL UNIFIED RETURN ===\n  return (\n    <>\n      {orderComplete ? (\n        /* ======= ORDER CONFIRMED VIEW ====== */\n        <div className=\"min-h-screen py-20\">\n          <div className=\"container mx-auto px-4 max-w-3xl\">\n            <div className=\"bg-[#1A1A1A] rounded-lg p-8 shadow-lg border border-[#333333]\">\n              <div className=\"text-center mb-8\">\n                <div className=\"w-20 h-20 bg-emerald-green bg-opacity-20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <FaCheck className=\"text-emerald-green text-3xl\" />\n                </div>\n                <h1 className=\"text-3xl font-bold mb-2\">Order Confirmed!</h1>\n                <p className=\"text-gray-300\">\n                  Thank you for your order. Your order has been received and is\n                  being prepared.\n                </p>\n              </div>\n\n              <div className=\"bg-[#111111] p-6 rounded-lg mb-6\">\n                <div className=\"flex justify-between items-center mb-4\">\n                  <h2 className=\"text-xl font-bold\">Order #{orderId}</h2>\n                  <span className=\"bg-emerald-green bg-opacity-20 text-emerald-green px-3 py-1 rounded-full text-sm\">\n                    Confirmed\n                  </span>\n                </div>\n                <div className=\"border-t border-[#333333] pt-4 mt-4\">\n                  <p className=\"text-gray-300 mb-2\">\n                    <strong>Order Type:</strong>{' '}\n                    {formData.orderType === 'delivery' ? 'Delivery' : 'Pickup'}\n                  </p>\n                  {formData.orderType === 'delivery' ? (\n                    <p className=\"text-gray-300 mb-2\">\n                      <strong>Delivery Address:</strong> {formData.address},{' '}\n                      {formData.city}, {formData.state} {formData.zipCode}\n                    </p>\n                  ) : (\n                    <p className=\"text-gray-300 mb-2\">\n                      <strong>Pickup Location:</strong> {formData.pickupLocation}\n                    </p>\n                  )}\n                  <p className=\"text-gray-300\">\n                    <strong>Estimated Time:</strong>{' '}\n                    {formData.deliveryTime === 'asap'\n                      ? '30-45 minutes'\n                      : formData.scheduledTime}\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"mb-6\">\n                <h3 className=\"font-bold mb-3\">Order Summary</h3>\n                <div className=\"space-y-3 mb-4\">\n                  {items.map((item: CartItem) => (\n                    <div key={item.id} className=\"flex justify-between\">\n                      <span>\n                        {item.quantity} × {item.name}\n                      </span>\n                      <span>${(item.price * item.quantity).toFixed(2)}</span>\n                    </div>\n                  ))}\n                </div>\n                <div className=\"border-t border-[#333333] pt-4\">\n                  <div className=\"flex justify-between mb-1\">\n                    <span className=\"text-gray-400\">Subtotal</span>\n                    <span>${subtotal.toFixed(2)}</span>\n                  </div>\n                  <div className=\"flex justify-between mb-1\">\n                    <span className=\"text-gray-400\">Tax</span>\n                    <span>${tax.toFixed(2)}</span>\n                  </div>\n                  <div className=\"flex justify-between font-bold\">\n                    <span>Total</span>\n                    <span className=\"text-gold-foil\">${total.toFixed(2)}</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Link href=\"/\" className=\"btn-outline flex-1 text-center\">\n                  Return to Home\n                </Link>\n                <Link href=\"/menu\" className=\"btn-primary flex-1 text-center\">\n                  Order Again\n                </Link>\n              </div>\n            </div>\n          </div>\n        </div>\n      ) : (\n        /* ======= REGULAR CHECKOUT VIEW ======= */\n        <div className=\"min-h-screen bg-black text-white\">\n          <div className=\"max-w-7xl mx-auto px-4 py-8\">\n            <div className=\"flex justify-between items-center mb-8\">\n              <h1 className=\"text-3xl font-bold\">Checkout</h1>\n              <Link\n                href=\"/cart\"\n                className=\"text-gold-foil hover:underline flex items-center\"\n              >\n                <FaArrowLeft className=\"mr-2\" /> Back to Cart\n              </Link>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n              {/* Checkout Form */}\n              <div className=\"lg:col-span-2 bg-[#1A1A1A] rounded-lg overflow-hidden border border-[#333333]\">\n                {/* Checkout Steps */}\n                <div className=\"bg-[#111111] p-4 border-b border-[#333333]\">\n                  <div className=\"flex items-center\">\n                    <div\n                      className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                        step >= 1 ? 'bg-gold-foil text-black' : 'bg-[#333333] text-white'\n                      }`}\n                    >\n                      1\n                    </div>\n                    <div\n                      className={`flex-1 h-1 mx-2 ${\n                        step >= 2 ? 'bg-gold-foil' : 'bg-[#333333]'\n                      }`}\n                    ></div>\n                    <div\n                      className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                        step >= 2 ? 'bg-gold-foil text-black' : 'bg-[#333333] text-white'\n                      }`}\n                    >\n                      2\n                    </div>\n                    <div\n                      className={`flex-1 h-1 mx-2 ${\n                        step >= 3 ? 'bg-gold-foil' : 'bg-[#333333]'\n                      }`}\n                    ></div>\n                    <div\n                      className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                        step >= 3 ? 'bg-gold-foil text-black' : 'bg-[#333333] text-white'\n                      }`}\n                    >\n                      3\n                    </div>\n                  </div>\n                  <div className=\"flex justify-between mt-2 text-xs\">\n                    <span>Delivery</span>\n                    <span>Payment</span>\n                    <span>Review</span>\n                  </div>\n                </div>\n\n                <form onSubmit={handleSubmit} className=\"p-6\">\n                  {error && (\n                    <div className=\"bg-blood-red bg-opacity-20 text-blood-red p-4 rounded-md mb-6 flex items-start\">\n                      <FaExclamationTriangle className=\"mr-2 mt-1 flex-shrink-0\" />\n                      <span>{error}</span>\n                    </div>\n                  )}\n\n                  {/* Step 1: Delivery Information */}\n                  {step === 1 && (\n                    <div className=\"space-y-6 animate-fade-in\">\n                      <div>\n                        <h2 className=\"text-xl font-bold mb-4\">Contact Information</h2>\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <div>\n                            <label htmlFor=\"email\" className=\"block text-sm font-medium mb-1\">\n                              Email Address *\n                            </label>\n                            <input\n                              type=\"email\"\n                              id=\"email\"\n                              name=\"email\"\n                              value={formData.email}\n                              onChange={handleChange}\n                              className=\"input w-full\"\n                              required\n                            />\n                          </div>\n                          <div>\n                            <label htmlFor=\"phone\" className=\"block text-sm font-medium mb-1\">\n                              Phone Number *\n                            </label>\n                            <input\n                              type=\"tel\"\n                              id=\"phone\"\n                              name=\"phone\"\n                              value={formData.phone}\n                              onChange={handleChange}\n                              className=\"input w-full\"\n                              required\n                            />\n                          </div>\n                        </div>\n                      </div>\n\n                      <div>\n                        <h2 className=\"text-xl font-bold mb-4\">Order Type</h2>\n                        <div className=\"grid grid-cols-2 gap-4 mb-6\">\n                          <button\n                            type=\"button\"\n                            className={`p-4 rounded-lg border ${\n                              formData.orderType === 'delivery'\n                                ? 'border-gold-foil bg-gold-foil bg-opacity-10'\n                                : 'border-[#333333] hover:border-[#555555]'\n                            } flex flex-col items-center`}\n                            onClick={() => handleOrderTypeChange('delivery')}\n                          >\n                            <span className=\"text-xl mb-2\">🚚</span>\n                            <span className=\"font-medium\">Delivery</span>\n                          </button>\n                          <button\n                            type=\"button\"\n                            className={`p-4 rounded-lg border ${\n                              formData.orderType === 'pickup'\n                                ? 'border-gold-foil bg-gold-foil bg-opacity-10'\n                                : 'border-[#333333] hover:border-[#555555]'\n                            } flex flex-col items-center`}\n                            onClick={() => handleOrderTypeChange('pickup')}\n                          >\n                            <span className=\"text-xl mb-2\">🏬</span>\n                            <span className=\"font-medium\">Pickup</span>\n                          </button>\n                        </div>\n                      </div>\n\n                      {formData.orderType === 'delivery' ? (\n                        <div>\n                          <h2 className=\"text-xl font-bold mb-4\">Delivery Address</h2>\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                            <div>\n                              <label htmlFor=\"firstName\" className=\"block text-sm font-medium mb-1\">\n                                First Name *\n                              </label>\n                              <input\n                                type=\"text\"\n                                id=\"firstName\"\n                                name=\"firstName\"\n                                value={formData.firstName}\n                                onChange={handleChange}\n                                className=\"input w-full\"\n                                required\n                              />\n                            </div>\n                            <div>\n                              <label htmlFor=\"lastName\" className=\"block text-sm font-medium mb-1\">\n                                Last Name *\n                              </label>\n                              <input\n                                type=\"text\"\n                                id=\"lastName\"\n                                name=\"lastName\"\n                                value={formData.lastName}\n                                onChange={handleChange}\n                                className=\"input w-full\"\n                                required\n                              />\n                            </div>\n                          </div>\n\n                          <div className=\"mt-4\">\n                            <label htmlFor=\"address\" className=\"block text-sm font-medium mb-1\">\n                              Street Address *\n                            </label>\n                            <PlaceAutocomplete\n                              onSelectAddress={(s) => {\n                                console.log('Selected address:', s);\n                                setSelected(s);\n                                // Update form data with selected address\n                                setFormData(prev => ({\n                                  ...prev,\n                                  address: s.formatted_address,\n                                  // Optionally parse city, state, zip from address components\n                                }));\n                                // Optionally send s.lat, s.lng, or s.place_id to your backend/Firebase.\n                              }}\n                              placeholder=\"123 Main St, Chicago, IL…\"\n                            />\n                            {selected && (\n                              <div className=\"mt-4 p-4 bg-gray-50 rounded-lg border\">\n                                <p><strong>Address:</strong> {selected.formatted_address}</p>\n                                <p><strong>Lat/Lng:</strong> {selected.lat.toFixed(6)}, {selected.lng.toFixed(6)}</p>\n                                <p><strong>Place ID:</strong> {selected.place_id}</p>\n                              </div>\n                            )}\n                          </div>\n\n                          <div className=\"mt-4\">\n                            <label htmlFor=\"apartment\" className=\"block text-sm font-medium mb-1\">\n                              Apartment, Suite, etc. (optional)\n                            </label>\n                            <input\n                              type=\"text\"\n                              id=\"apartment\"\n                              name=\"apartment\"\n                              value={formData.apartment}\n                              onChange={handleChange}\n                              className=\"input w-full\"\n                            />\n                          </div>\n\n                          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-4\">\n                            <div>\n                              <label htmlFor=\"city\" className=\"block text-sm font-medium mb-1\">\n                                City *\n                              </label>\n                              <input\n                                type=\"text\"\n                                id=\"city\"\n                                name=\"city\"\n                                value={formData.city}\n                                onChange={handleChange}\n                                className=\"input w-full\"\n                                required\n                              />\n                            </div>\n                            <div>\n                              <label htmlFor=\"state\" className=\"block text-sm font-medium mb-1\">\n                                State *\n                              </label>\n                              <input\n                                type=\"text\"\n                                id=\"state\"\n                                name=\"state\"\n                                value={formData.state}\n                                onChange={handleChange}\n                                className=\"input w-full\"\n                                required\n                              />\n                            </div>\n                            <div>\n                              <label htmlFor=\"zipCode\" className=\"block text-sm font-medium mb-1\">\n                                ZIP Code *\n                              </label>\n                              <input\n                                type=\"text\"\n                                id=\"zipCode\"\n                                name=\"zipCode\"\n                                value={formData.zipCode}\n                                onChange={handleChange}\n                                className=\"input w-full\"\n                                required\n                              />\n                            </div>\n                          </div>\n\n                          <div className=\"mt-4\">\n                            <label\n                              htmlFor=\"deliveryInstructions\"\n                              className=\"block text-sm font-medium mb-1\"\n                            >\n                              Delivery Instructions (optional)\n                            </label>\n                            <textarea\n                              id=\"deliveryInstructions\"\n                              name=\"deliveryInstructions\"\n                              value={formData.deliveryInstructions}\n                              onChange={handleChange}\n                              className=\"input w-full h-20\"\n                              placeholder=\"Apartment access code, delivery preferences, etc.\"\n                            />\n                          </div>\n                        </div>\n                      ) : (\n                        <div>\n                          <h2 className=\"text-xl font-bold mb-4\">Pickup Location</h2>\n                          <label htmlFor=\"pickupLocation\" className=\"block text-sm font-medium mb-1\">\n                            Select Location *\n                          </label>\n                          <select\n                            id=\"pickupLocation\"\n                            name=\"pickupLocation\"\n                            value={formData.pickupLocation}\n                            onChange={handleChange}\n                            className=\"input w-full\"\n                            required\n                          >\n                            <option value=\"\">Select a location</option>\n                            <option value=\"Downtown LA\">Downtown LA – 420 S Grand Ave</option>\n                            <option value=\"Hollywood\">Hollywood – 6801 Hollywood Blvd</option>\n                            <option value=\"SF Mission\">SF Mission District – 2534 Mission St</option>\n                            <option value=\"SF Marina\">SF Marina District – 2108 Chestnut St</option>\n                          </select>\n                        </div>\n                      )}\n\n                      {/* Delivery Time */}\n                      <div className=\"mt-6\">\n                        <h2 className=\"text-xl font-bold mb-4\">Delivery Time</h2>\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <label\n                            className={`p-4 rounded-lg border cursor-pointer ${\n                              formData.deliveryTime === 'asap'\n                                ? 'border-gold-foil bg-gold-foil bg-opacity-10'\n                                : 'border-[#333333]'\n                            }`}\n                          >\n                            <input\n                              type=\"radio\"\n                              name=\"deliveryTime\"\n                              value=\"asap\"\n                              checked={formData.deliveryTime === 'asap'}\n                              onChange={handleChange}\n                              className=\"hidden\"\n                            />\n                            <div className=\"text-center\">\n                              <span className=\"text-xl mb-2\">⚡</span>\n                              <span className=\"font-medium block\">ASAP Delivery</span>\n                              <span className=\"text-xs text-gray-400 mt-1\">\n                                Delivery in 30-45 mins\n                              </span>\n                            </div>\n                          </label>\n\n                          <label\n                            className={`p-4 rounded-lg border cursor-pointer ${\n                              formData.deliveryTime === 'scheduled'\n                                ? 'border-gold-foil bg-gold-foil bg-opacity-10'\n                                : 'border-[#333333]'\n                            }`}\n                          >\n                            <input\n                              type=\"radio\"\n                              name=\"deliveryTime\"\n                              value=\"scheduled\"\n                              checked={formData.deliveryTime === 'scheduled'}\n                              onChange={handleChange}\n                              className=\"hidden\"\n                            />\n                            <div className=\"text-center\">\n                              <span className=\"text-xl mb-2\">📅</span>\n                              <span className=\"font-medium block\">Schedule for Later</span>\n                              <span className=\"text-xs text-gray-400 mt-1\">\n                                Select a time\n                              </span>\n                            </div>\n                          </label>\n                        </div>\n\n                        {formData.deliveryTime === 'scheduled' && (\n                          <div className=\"mt-4\">\n                            <label htmlFor=\"scheduledTime\" className=\"block text-sm font-medium mb-1\">\n                              Select Time *\n                            </label>\n                            <select\n                              id=\"scheduledTime\"\n                              name=\"scheduledTime\"\n                              value={formData.scheduledTime}\n                              onChange={handleChange}\n                              className=\"input w-full\"\n                              required\n                            >\n                              <option value=\"\">Select a time</option>\n                              <option value=\"Today, 12:00 PM\">Today, 12:00 PM</option>\n                              <option value=\"Today, 1:00 PM\">Today, 1:00 PM</option>\n                              <option value=\"Today, 2:00 PM\">Today, 2:00 PM</option>\n                              <option value=\"Today, 3:00 PM\">Today, 3:00 PM</option>\n                              <option value=\"Today, 4:00 PM\">Today, 4:00 PM</option>\n                              <option value=\"Today, 5:00 PM\">Today, 5:00 PM</option>\n                              <option value=\"Today, 6:00 PM\">Today, 6:00 PM</option>\n                              <option value=\"Today, 7:00 PM\">Today, 7:00 PM</option>\n                              <option value=\"Today, 8:00 PM\">Today, 8:00 PM</option>\n                            </select>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Step 2: Payment Information */}\n                  {step === 2 && (\n                    <div className=\"space-y-6 animate-fade-in\">\n                      <div>\n                        <h2 className=\"text-xl font-bold mb-4\">Payment Information</h2>\n                        <div className=\"bg-[#111111] p-4 rounded-lg mb-6 flex items-center\">\n                          <FaLock className=\"text-gold-foil mr-2\" />\n                          <span className=\"text-sm\">\n                            Your payment information is encrypted and secure.\n                          </span>\n                        </div>\n\n                        <div className=\"mb-6\">\n                          <h3 className=\"text-lg font-medium mb-4\">Payment Method</h3>\n                          <div className=\"grid grid-cols-2 gap-4\">\n                            <button\n                              type=\"button\"\n                              className={`p-4 rounded-lg border ${\n                                formData.paymentMethod === 'card'\n                                  ? 'border-gold-foil bg-gold-foil bg-opacity-10'\n                                  : 'border-[#333333] hover:border-[#555555]'\n                              } flex flex-col items-center`}\n                              onClick={() =>\n                                setFormData((prev) => ({ ...prev, paymentMethod: 'card' }))\n                              }\n                            >\n                              <span className=\"text-xl mb-2\">💳</span>\n                              <span className=\"font-medium\">Credit/Debit Card</span>\n                              <span className=\"text-xs text-gray-400 mt-1\">\n                                Pay online with Stripe\n                              </span>\n                            </button>\n                            <button\n                              type=\"button\"\n                              className={`p-4 rounded-lg border ${\n                                formData.paymentMethod === 'cash'\n                                  ? 'border-gold-foil bg-gold-foil bg-opacity-10'\n                                  : 'border-[#333333] hover:border-[#555555]'\n                              } flex flex-col items-center`}\n                              onClick={() =>\n                                setFormData((prev) => ({ ...prev, paymentMethod: 'cash' }))\n                              }\n                            >\n                              <span className=\"text-xl mb-2\">💵</span>\n                              <span className=\"font-medium\">Cash on Arrival</span>\n                              <span className=\"text-xs text-gray-400 mt-1\">\n                                Pay when delivered/picked up\n                              </span>\n                            </button>\n                          </div>\n                        </div>\n\n                        {formData.paymentMethod === 'card' && (\n                          <div className=\"space-y-4\">\n                            <div className=\"mb-4\">\n                              <label htmlFor=\"cardNumber\" className=\"block text-sm font-medium mb-1\">\n                                Card Number *\n                              </label>\n                              <input\n                                type=\"text\"\n                                id=\"cardNumber\"\n                                name=\"cardNumber\"\n                                value={formData.cardNumber}\n                                onChange={handleCardNumberChange}\n                                className=\"input w-full\"\n                                placeholder=\"1234 5678 9012 3456\"\n                                maxLength={19}\n                                required\n                              />\n                            </div>\n\n                            <div className=\"mb-4\">\n                              <label htmlFor=\"cardName\" className=\"block text-sm font-medium mb-1\">\n                                Name on Card *\n                              </label>\n                              <input\n                                type=\"text\"\n                                id=\"cardName\"\n                                name=\"cardName\"\n                                value={formData.cardName}\n                                onChange={handleChange}\n                                className=\"input w-full\"\n                                required\n                              />\n                            </div>\n\n                            <div className=\"grid grid-cols-2 gap-4\">\n                              <div>\n                                <label htmlFor=\"expiryDate\" className=\"block text-sm font-medium mb-1\">\n                                  Expiry Date *\n                                </label>\n                                <input\n                                  type=\"text\"\n                                  id=\"expiryDate\"\n                                  name=\"expiryDate\"\n                                  value={formData.expiryDate}\n                                  onChange={handleExpiryDateChange}\n                                  className=\"input w-full\"\n                                  placeholder=\"MM/YY\"\n                                  maxLength={5}\n                                  required\n                                />\n                              </div>\n                              <div>\n                                <label htmlFor=\"cvv\" className=\"block text-sm font-medium mb-1\">\n                                  CVV *\n                                </label>\n                                <input\n                                  type=\"text\"\n                                  id=\"cvv\"\n                                  name=\"cvv\"\n                                  value={formData.cvv}\n                                  onChange={handleChange}\n                                  className=\"input w-full\"\n                                  placeholder=\"123\"\n                                  maxLength={4}\n                                  required\n                                />\n                              </div>\n                            </div>\n                          </div>\n                        )}\n\n                        <div>\n                          <h2 className=\"text-xl font-bold mb-4\">Billing Address</h2>\n                          <div className=\"mb-4\">\n                            <label className=\"flex items-center\">\n                              <input\n                                type=\"checkbox\"\n                                checked={true}\n                                className=\"rounded border-[#333333] text-gold-foil focus:ring-gold-foil mr-2\"\n                                readOnly\n                              />\n                              <span>Same as delivery address</span>\n                            </label>\n                          </div>\n                        </div>\n\n                        <div>\n                          <h2 className=\"text-xl font-bold mb-4\">Promo Code</h2>\n                          <div className=\"flex gap-2\">\n                            <input\n                              type=\"text\"\n                              id=\"promoCode\"\n                              name=\"promoCode\"\n                              value={formData.promoCode}\n                              onChange={handleChange}\n                              className=\"input flex-grow\"\n                              placeholder=\"Enter promo code\"\n                            />\n                            <button type=\"button\" className=\"btn-outline whitespace-nowrap\">\n                              Apply\n                            </button>\n                          </div>\n                        </div>\n\n                        <div className=\"mt-6\">\n                          <label className=\"flex items-start\">\n                            <input\n                              type=\"checkbox\"\n                              name=\"agreeToTerms\"\n                              checked={formData.agreeToTerms}\n                              onChange={handleChange}\n                              className=\"rounded border-[#333333] text-gold-foil focus:ring-gold-foil mt-1 mr-2\"\n                              required\n                            />\n                            <span className=\"text-sm\">\n                              I agree to the{' '}\n                              <Link href=\"/terms\" className=\"text-gold-foil hover:underline\">\n                                Terms of Service\n                              </Link>{' '}\n                              and{' '}\n                              <Link href=\"/privacy\" className=\"text-gold-foil hover:underline\">\n                                Privacy Policy\n                              </Link>\n                            </span>\n                          </label>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Step 3: Review Order */}\n                  {step === 3 && (\n                    <div className=\"space-y-6 animate-fade-in\">\n                      <div>\n                        <h2 className=\"text-xl font-bold mb-4\">Review Your Order</h2>\n\n                        <div className=\"bg-[#111111] p-4 rounded-lg mb-6\">\n                          <h3 className=\"font-bold mb-2\">Order Details</h3>\n                          <div className=\"space-y-2 text-sm\">\n                            <p>\n                              <span className=\"text-gray-400\">Order Type:</span>{' '}\n                              <span className=\"font-medium\">\n                                {formData.orderType === 'delivery' ? 'Delivery' : 'Pickup'}\n                              </span>\n                            </p>\n\n                            {formData.orderType === 'delivery' ? (\n                              <>\n                                <p>\n                                  <span className=\"text-gray-400\">Delivery Address:</span>{' '}\n                                  <span className=\"font-medium\">\n                                    {formData.address}\n                                    {formData.apartment ? `, ${formData.apartment}` : ''},{' '}\n                                    {formData.city}, {formData.state} {formData.zipCode}\n                                  </span>\n                                </p>\n                                <p>\n                                  <span className=\"text-gray-400\">Recipient:</span>{' '}\n                                  <span className=\"font-medium\">\n                                    {formData.firstName} {formData.lastName}\n                                  </span>\n                                </p>\n                              </>\n                            ) : (\n                              <p>\n                                <span className=\"text-gray-400\">Pickup Location:</span>{' '}\n                                <span className=\"font-medium\">{formData.pickupLocation}</span>\n                              </p>\n                            )}\n\n                            <p>\n                              <span className=\"text-gray-400\">Time:</span>{' '}\n                              <span className=\"font-medium\">\n                                {formData.deliveryTime === 'asap'\n                                  ? 'As soon as possible (30-45 min)'\n                                  : formData.scheduledTime}\n                              </span>\n                            </p>\n\n                            <p>\n                              <span className=\"text-gray-400\">Contact:</span>{' '}\n                              <span className=\"font-medium\">\n                                {formData.email} | {formData.phone}\n                              </span>\n                            </p>\n                          </div>\n                        </div>\n\n                        <div className=\"bg-[#111111] p-4 rounded-lg mb-6\">\n                          <h3 className=\"font-bold mb-2\">Payment Method</h3>\n                          <div className=\"flex items-center\">\n                            <div className=\"bg-[#222222] p-2 rounded mr-3\">\n                              <FaCreditCard className=\"text-gold-foil\" />\n                            </div>\n                            <div>\n                              <p className=\"font-medium\">Credit Card</p>\n                              <p className=\"text-sm text-gray-400\">\n                                **** **** **** {formData.cardNumber.slice(-4)}\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n\n                        <div className=\"bg-[#111111] p-4 rounded-lg mb-6\">\n                          <h3 className=\"font-bold mb-4\">Order Items</h3>\n                          <div className=\"space-y-4\">\n                            {items.map((item: CartItem) => (\n                              <div key={item.id} className=\"flex items-center\">\n                                <div className=\"w-12 h-12 bg-[#222222] rounded-lg overflow-hidden relative flex-shrink-0 mr-3\">\n                                  {item.image ? (\n                                    <Image\n                                      src={item.image}\n                                      alt={item.name}\n                                      fill\n                                      className=\"object-cover\"\n                                    />\n                                  ) : (\n                                    <div className=\"w-full h-full flex items-center justify-center\">\n                                      <FaShoppingBag className=\"text-gray-500\" />\n                                    </div>\n                                  )}\n                                </div>\n                                <div className=\"flex-grow\">\n                                  <div className=\"flex justify-between\">\n                                    <span className=\"font-medium\">\n                                      {item.quantity} × {item.name}\n                                    </span>\n                                    <span>${(item.price * item.quantity).toFixed(2)}</span>\n                                  </div>\n                                  {item.customizations && item.customizations.length > 0 && (\n                                    <div className=\"text-xs text-gray-400 mt-1\">\n                                      {formatCustomizations(item)}\n                                    </div>\n                                  )}\n                                </div>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Navigation Buttons */}\n                      <div className=\"flex justify-between mt-8\">\n                        {step > 1 ? (\n                          <button\n                            type=\"button\"\n                            onClick={() => setStep((prev) => (prev - 1) as 1 | 2 | 3)}\n                            className=\"btn-outline\"\n                          >\n                            Back\n                          </button>\n                        ) : (\n                          <Link href=\"/cart\" className=\"btn-outline\">\n                            Back to Cart\n                          </Link>\n                        )}\n\n                        <button\n                          type=\"submit\"\n                          className=\"btn-primary flex items-center gap-2\"\n                          disabled={isProcessing}\n                        >\n                          {isProcessing ? (\n                            <span>Processing…</span>\n                          ) : (\n                            <>\n                              <FaCreditCard /> Place Order\n                            </>\n                          )}\n                        </button>\n                      </div>\n                    </div>\n                  )}\n                </form>\n              </div>\n\n              {/* Order Summary */}\n              <div className=\"bg-[#1A1A1A] rounded-lg border border-[#333333] p-6 sticky top-32\">\n                <h2 className=\"text-xl font-bold mb-6\">Order Summary</h2>\n                <div className=\"space-y-4 mb-6\">\n                  {items.map((item: CartItem) => (\n                    <div key={item.id} className=\"flex justify-between\">\n                      <span>\n                        {item.quantity} × {item.name}\n                      </span>\n                      <span>${(item.price * item.quantity).toFixed(2)}</span>\n                    </div>\n                  ))}\n                </div>\n\n                <div className=\"border-t border-[#333333] pt-4 space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Subtotal</span>\n                    <span>${subtotal.toFixed(2)}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Tax (8.25%)</span>\n                    <span>${tax.toFixed(2)}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Delivery Fee</span>\n                    <span>$4.99</span>\n                  </div>\n                  <div className=\"flex justify-between pt-4 border-t border-[#333333] font-bold\">\n                    <span>Total</span>\n                    <span className=\"text-gold-foil\">\n                      ${(total + 4.99).toFixed(2)}\n                    </span>\n                  </div>\n                </div>\n\n                <div className=\"mt-6 p-4 bg-[#111111] rounded-lg\">\n                  <h3 className=\"font-bold mb-2 flex items-center\">\n                    <FaLock className=\"text-gold-foil mr-2\" /> Secure Checkout\n                  </h3>\n                  <p className=\"text-sm text-gray-400\">\n                    Your payment information is encrypted and secure. We never\n                    store your full credit card details.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/checkout/success/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'router' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":35,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":15},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":109,"column":41,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3049,3143],"text":"\n            Thank you for your order. We&apos;ll send you a confirmation email shortly.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3049,3143],"text":"\n            Thank you for your order. We&lsquo;ll send you a confirmation email shortly.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3049,3143],"text":"\n            Thank you for your order. We&#39;ll send you a confirmation email shortly.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3049,3143],"text":"\n            Thank you for your order. We&rsquo;ll send you a confirmation email shortly.\n          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":200,"column":54,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[7446,7458],"text":"What&apos;s Next?"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[7446,7458],"text":"What&lsquo;s Next?"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[7446,7458],"text":"What&#39;s Next?"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[7446,7458],"text":"What&rsquo;s Next?"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useSearchParams, useRouter } from 'next/navigation';\nimport Link from 'next/link';\nimport { FaCheckCircle, FaSpinner } from 'react-icons/fa';\nimport { useCart } from '../../../lib/context/CartContext';\n\ninterface OrderDetails {\n  id: string;\n  amount_total: number;\n  customer_details: {\n    email: string;\n    name?: string;\n  };\n  metadata: {\n    orderType?: string;\n    phone?: string;\n    deliveryAddress?: string;\n    pickupLocation?: string;\n    deliveryTime?: string;\n    scheduledTime?: string;\n  };\n  line_items: {\n    data: Array<{\n      description: string;\n      quantity: number;\n      amount_total: number;\n    }>;\n  };\n}\n\nexport default function CheckoutSuccess() {\n  const searchParams = useSearchParams();\n  const router = useRouter();\n  const { clearCart } = useCart();\n  const [orderDetails, setOrderDetails] = useState<OrderDetails | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    const sessionId = searchParams.get('session_id');\n\n    if (!sessionId) {\n      setError('No session ID found');\n      setLoading(false);\n      return;\n    }\n\n    // Fetch order details from Stripe session\n    const fetchOrderDetails = async () => {\n      try {\n        const response = await fetch(`/api/checkout/session?session_id=${sessionId}`);\n\n        if (!response.ok) {\n          throw new Error('Failed to fetch order details');\n        }\n\n        const data = await response.json();\n        setOrderDetails(data);\n\n        // Clear cart after successful payment\n        clearCart();\n      } catch (err) {\n        console.error('Error fetching order details:', err);\n        setError('Failed to load order details');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchOrderDetails();\n  }, [searchParams, clearCart]);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <FaSpinner className=\"animate-spin text-4xl text-gold-foil mx-auto mb-4\" />\n          <p className=\"text-lg\">Processing your order...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center max-w-md mx-auto px-4\">\n          <div className=\"bg-red-500/20 text-red-400 p-6 rounded-lg mb-6\">\n            <h1 className=\"text-2xl font-bold mb-2\">Error</h1>\n            <p>{error}</p>\n          </div>\n          <Link href=\"/cart\" className=\"btn-primary\">\n            Return to Cart\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen py-20\">\n      <div className=\"container mx-auto px-4 max-w-4xl\">\n        <div className=\"text-center mb-8\">\n          <FaCheckCircle className=\"text-6xl text-green-500 mx-auto mb-4\" />\n          <h1 className=\"text-4xl font-bold mb-2\">Order Confirmed!</h1>\n          <p className=\"text-xl text-gray-400\">\n            Thank you for your order. We'll send you a confirmation email shortly.\n          </p>\n        </div>\n\n        {orderDetails && (\n          <div className=\"bg-[#1A1A1A] rounded-lg border border-[#333333] overflow-hidden\">\n            <div className=\"bg-[#111111] p-6 border-b border-[#333333]\">\n              <h2 className=\"text-2xl font-bold\">Order Details</h2>\n              <p className=\"text-gray-400 mt-1\">\n                Order ID: <span className=\"text-gold-foil\">{orderDetails.id}</span>\n              </p>\n            </div>\n\n            <div className=\"p-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                {/* Order Information */}\n                <div>\n                  <h3 className=\"text-lg font-bold mb-4\">Order Information</h3>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Order Type:</span>\n                      <span className=\"capitalize\">\n                        {orderDetails.metadata.orderType || 'Delivery'}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Email:</span>\n                      <span>{orderDetails.customer_details.email}</span>\n                    </div>\n                    {orderDetails.metadata.phone && (\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-400\">Phone:</span>\n                        <span>{orderDetails.metadata.phone}</span>\n                      </div>\n                    )}\n                    {orderDetails.metadata.deliveryAddress && (\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-400\">Delivery Address:</span>\n                        <span className=\"text-right\">\n                          {orderDetails.metadata.deliveryAddress}\n                        </span>\n                      </div>\n                    )}\n                    {orderDetails.metadata.pickupLocation && (\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-400\">Pickup Location:</span>\n                        <span>{orderDetails.metadata.pickupLocation}</span>\n                      </div>\n                    )}\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Delivery Time:</span>\n                      <span className=\"capitalize\">\n                        {orderDetails.metadata.deliveryTime === 'asap'\n                          ? 'As Soon As Possible'\n                          : orderDetails.metadata.scheduledTime || 'ASAP'\n                        }\n                      </span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Order Items */}\n                <div>\n                  <h3 className=\"text-lg font-bold mb-4\">Items Ordered</h3>\n                  <div className=\"space-y-3\">\n                    {orderDetails.line_items.data.map((item, index) => (\n                      <div key={index} className=\"flex justify-between items-start\">\n                        <div className=\"flex-1\">\n                          <p className=\"font-medium\">{item.description}</p>\n                          <p className=\"text-sm text-gray-400\">Qty: {item.quantity}</p>\n                        </div>\n                        <p className=\"font-medium\">\n                          ${(item.amount_total / 100).toFixed(2)}\n                        </p>\n                      </div>\n                    ))}\n\n                    <div className=\"border-t border-[#333333] pt-3 mt-4\">\n                      <div className=\"flex justify-between font-bold text-lg\">\n                        <span>Total</span>\n                        <span className=\"text-gold-foil\">\n                          ${(orderDetails.amount_total / 100).toFixed(2)}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"mt-8 pt-6 border-t border-[#333333]\">\n                <div className=\"bg-[#111111] p-4 rounded-lg\">\n                  <h4 className=\"font-bold mb-2\">What's Next?</h4>\n                  <ul className=\"text-sm text-gray-400 space-y-1\">\n                    <li>• You&apos;ll receive an email confirmation shortly</li>\n                    <li>• We&apos;ll notify you when your order is being prepared</li>\n                    <li>• Estimated delivery/pickup time: 30-45 minutes</li>\n                    <li>• Track your order status in your account</li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        <div className=\"flex flex-col sm:flex-row gap-4 mt-8 justify-center\">\n          <Link href=\"/\" className=\"btn-outline text-center\">\n            Return to Home\n          </Link>\n          <Link href=\"/menu\" className=\"btn-primary text-center\">\n            Order Again\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/contact/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Metadata' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Card' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardContent' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardDescription' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardHeader' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":56},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardTitle' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":58,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":67},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":84,"column":15,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3571,3698],"text":"\n            We&apos;d love to hear from you. Reach out with questions, feedback, or\n            to book your next event.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3571,3698],"text":"\n            We&lsquo;d love to hear from you. Reach out with questions, feedback, or\n            to book your next event.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3571,3698],"text":"\n            We&#39;d love to hear from you. Reach out with questions, feedback, or\n            to book your next event.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3571,3698],"text":"\n            We&rsquo;d love to hear from you. Reach out with questions, feedback, or\n            to book your next event.\n          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":295,"column":39,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[12211,12264],"text":"\n            Ready to Experience Broski&apos;s?\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[12211,12264],"text":"\n            Ready to Experience Broski&lsquo;s?\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[12211,12264],"text":"\n            Ready to Experience Broski&#39;s?\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[12211,12264],"text":"\n            Ready to Experience Broski&rsquo;s?\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport type { Metadata } from 'next';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../components/ui/card';\nimport { useState } from 'react';\nimport Link from 'next/link';\nimport {\n  FaMapMarkerAlt,\n  FaPhone,\n  FaEnvelope,\n  FaClock,\n  FaFacebook,\n  FaTwitter,\n  FaInstagram,\n  FaYoutube,\n  FaChevronDown,\n  FaChevronUp,\n} from 'react-icons/fa';\nimport ContactForm from '../../components/contact/ContactForm';\nimport ContactMap from '../../components/contact/ContactMap';\n// TODO: Remove static data import - get location data from API\n\nexport default function ContactPage() {\n  const [expandedFaq, setExpandedFaq] = useState<number | null>(null);\n\n  const toggleFaq = (index: number) => {\n    setExpandedFaq(expandedFaq === index ? null : index);\n  };\n\n  const faqs = [\n    {\n      question: 'What are your hours of operation?',\n      answer:\n        'Our hours vary by location. Most locations are open from 11 AM to 10 PM Monday through Thursday, 11 AM to 12 AM Friday and Saturday, and 10 AM to 9 PM on Sunday. Please check our Locations page for specific hours.',\n    },\n    {\n      question: 'Do you offer catering services?',\n      answer:\n        'Yes, we offer catering for events of all sizes. Please fill out our contact form or call our catering line directly at (260) 555-CATER to discuss your needs.',\n    },\n    {\n      question: 'Do you take reservations?',\n      answer:\n        'We do not take reservations. We operate on a first-come, first-served basis at all our locations. For large groups or special events, please contact us about our catering and event services.',\n    },\n    {\n      question: 'How does your delivery service work?',\n      answer:\n        'We offer delivery through our website and mobile app. You can also find us on major delivery platforms. Our delivery radius is typically within 5 miles of each location, and delivery times average 30-45 minutes depending on distance and order volume.',\n    },\n    {\n      question: 'Can you host private events?',\n      answer:\n        'Yes, we offer private event services at select locations. We can accommodate various group sizes and customize menus for your specific event. Please contact our events team through the form on this page for more information.',\n    },\n    {\n      question: 'Do you accommodate dietary restrictions?',\n      answer:\n        'Yes, we offer vegetarian, vegan, gluten-free, and dairy-free options. Please inform your server about any allergies or dietary restrictions when ordering.',\n    },\n    {\n      question: \"How can I apply for a job at Broski's Kitchen?\",\n      answer:\n        'You can apply for job openings through the Careers section of our website or by visiting any of our locations and asking for an application form.',\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen pb-20\">\n      {/* Hero Section */}\n      <section className=\"relative h-[40vh] flex items-center justify-center overflow-hidden\">\n        <div className=\"absolute inset-0 z-0 bg-black\">\n          <div className=\"absolute inset-0 bg-gradient-to-r from-black to-transparent opacity-70 z-10\"></div>\n          <div\n            className=\"absolute inset-0 bg-cover bg-center\"\n            style={{ backgroundImage: \"url('/images/contact-hero.jpg')\" }}\n          ></div>\n        </div>\n        <div className=\"container mx-auto px-4 z-10 text-center\">\n          <h1 className=\"heading-xl mb-4 text-white gritty-shadow\">\n            Contact Us\n          </h1>\n          <p className=\"text-xl text-gray-200 max-w-2xl mx-auto\">\n            We'd love to hear from you. Reach out with questions, feedback, or\n            to book your next event.\n          </p>\n        </div>\n      </section>\n\n      {/* Contact Information & Form Section */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n            {/* Contact Form */}\n            <div>\n              <h2 className=\"text-2xl font-bold mb-6\">Send Us a Message</h2>\n              <ContactForm />\n            </div>\n\n            {/* Contact Information */}\n            <div>\n              <h2 className=\"text-2xl font-bold mb-6\">Get in Touch</h2>\n\n              <div className=\"bg-[#1A1A1A] rounded-lg p-6 border border-[#333333] mb-8\">\n                <div className=\"space-y-6\">\n                  {/* Headquarters */}\n                  <div className=\"flex items-start\">\n                    <div className=\"bg-gold-foil bg-opacity-20 p-3 rounded-full mr-4 flex-shrink-0\">\n                      <FaMapMarkerAlt className=\"text-gold-foil\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-bold mb-1\">Headquarters</h3>\n                      <address className=\"not-italic text-gray-300\">\n                        420 S Grand Ave\n                        <br />\n                        Los Angeles, CA 90071\n                      </address>\n                    </div>\n                  </div>\n\n                  {/* Phone */}\n                  <div className=\"flex items-start\">\n                    <div className=\"bg-gold-foil bg-opacity-20 p-3 rounded-full mr-4 flex-shrink-0\">\n                      <FaPhone className=\"text-gold-foil\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-bold mb-1\">Phone</h3>\n                      <p className=\"text-gray-300\">Main: (260) 555-OTWD</p>\n                      <p className=\"text-gray-300\">Catering: (260) 555-CATER</p>\n                       <p className=\"text-gray-300\">Delivery: (260) 555-DLVR</p>\n                    </div>\n                  </div>\n\n                  {/* Email */}\n                  <div className=\"flex items-start\">\n                    <div className=\"bg-gold-foil bg-opacity-20 p-3 rounded-full mr-4 flex-shrink-0\">\n                      <FaEnvelope className=\"text-gold-foil\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-bold mb-1\">Email</h3>\n                      <p className=\"text-gray-300\">info@broskiskitchen.com</p>\n                      <p className=\"text-gray-300\">\n                        catering@broskiskitchen.com\n                      </p>\n                      <p className=\"text-gray-300\">events@broskiskitchen.com</p>\n                    </div>\n                  </div>\n\n                  {/* Hours */}\n                  <div className=\"flex items-start\">\n                    <div className=\"bg-gold-foil bg-opacity-20 p-3 rounded-full mr-4 flex-shrink-0\">\n                      <FaClock className=\"text-gold-foil\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-bold mb-1\">Office Hours</h3>\n                      <p className=\"text-gray-300\">\n                        Monday - Friday: 9 AM - 5 PM\n                      </p>\n                      <p className=\"text-gray-300\">Saturday - Sunday: Closed</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Social Media */}\n              <h3 className=\"text-xl font-bold mb-4\">Connect With Us</h3>\n              <div className=\"flex space-x-4 mb-8\">\n                <a\n                  href=\"https://facebook.com\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"bg-[#1A1A1A] p-3 rounded-full hover:bg-gold-foil hover:text-black transition-colors\"\n                  aria-label=\"Facebook\"\n                >\n                  <FaFacebook size={24} />\n                </a>\n                <a\n                  href=\"https://twitter.com\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"bg-[#1A1A1A] p-3 rounded-full hover:bg-gold-foil hover:text-black transition-colors\"\n                  aria-label=\"Twitter\"\n                >\n                  <FaTwitter size={24} />\n                </a>\n                <a\n                  href=\"https://instagram.com\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"bg-[#1A1A1A] p-3 rounded-full hover:bg-gold-foil hover:text-black transition-colors\"\n                  aria-label=\"Instagram\"\n                >\n                  <FaInstagram size={24} />\n                </a>\n                <a\n                  href=\"https://youtube.com\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"bg-[#1A1A1A] p-3 rounded-full hover:bg-gold-foil hover:text-black transition-colors\"\n                  aria-label=\"YouTube\"\n                >\n                  <FaYoutube size={24} />\n                </a>\n              </div>\n\n              {/* Newsletter Signup */}\n              <div className=\"bg-[#1A1A1A] rounded-lg p-6 border border-[#333333]\">\n                <h3 className=\"text-xl font-bold mb-2\">Stay Updated</h3>\n                <p className=\"text-gray-300 mb-4\">\n                  Subscribe to our newsletter for the latest updates and offers.\n                </p>\n                <form className=\"flex flex-col sm:flex-row gap-2\">\n                  <input\n                    type=\"email\"\n                    placeholder=\"Your email address\"\n                    className=\"input flex-grow\"\n                    required\n                  />\n                  <button\n                    type=\"submit\"\n                    className=\"btn-primary whitespace-nowrap\"\n                  >\n                    Subscribe\n                  </button>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Map Section */}\n      <section className=\"py-12 bg-[#111111]\">\n        <div className=\"container mx-auto px-4\">\n          <h2 className=\"text-2xl font-bold mb-8 text-center\">Our Locations</h2>\n          <div className=\"h-[500px] rounded-lg overflow-hidden\">\n            {/* TODO: Replace with API call to get location data */}\n                <ContactMap locations={[]} />\n          </div>\n          <div className=\"mt-8 text-center\">\n            <Link\n              href=\"/locations\"\n              className=\"btn-outline inline-flex items-center gap-2\"\n            >\n              View All Locations\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* FAQ Section */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-4\">\n          <h2 className=\"text-2xl font-bold mb-8 text-center\">\n            Frequently Asked Questions\n          </h2>\n          <div className=\"max-w-3xl mx-auto\">\n            {faqs.map((faq, index) => (\n              <div\n                key={index}\n                className=\"mb-4 bg-[#1A1A1A] rounded-lg border border-[#333333] overflow-hidden\"\n              >\n                <button\n                  className=\"w-full p-4 text-left flex justify-between items-center focus:outline-none\"\n                  onClick={() => toggleFaq(index)}\n                  aria-expanded={expandedFaq === index}\n                >\n                  <span className=\"font-bold\">{faq.question}</span>\n                  {expandedFaq === index ? (\n                    <FaChevronUp className=\"text-gold-foil\" />\n                  ) : (\n                    <FaChevronDown className=\"text-gold-foil\" />\n                  )}\n                </button>\n                <div\n                  className={`px-4 pb-4 transition-all duration-300 ${\n                    expandedFaq === index\n                      ? 'max-h-96 opacity-100'\n                      : 'max-h-0 opacity-0 overflow-hidden'\n                  }`}\n                >\n                  <p className=\"text-gray-300\">{faq.answer}</p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 bg-black relative\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-[#D4AF37]/20 to-[#880808]/20 opacity-50\"></div>\n        <div className=\"container mx-auto px-4 relative z-10 text-center\">\n          <h2 className=\"heading-lg mb-4 gritty-shadow\">\n            Ready to Experience Broski's?\n          </h2>\n          <p className=\"text-gray-300 mb-8 max-w-2xl mx-auto\">\n            Visit one of our locations or order online to experience our luxury\n            street gourmet cuisine.\n          </p>\n          <div className=\"flex flex-col sm:flex-row justify-center gap-4\">\n            <Link href=\"/locations\" className=\"btn-outline\">\n              Find a Location\n            </Link>\n            <Link href=\"/order\" className=\"btn-primary\">\n              Order Delivery\n            </Link>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/counter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/dashboard/layout.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Metadata' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Card' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardContent' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardDescription' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardHeader' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":56},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardTitle' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":58,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":67}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport type { Metadata } from 'next';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../components/ui/card';\nimport { useState } from 'react';\nimport DashboardNavbar from '../../components/dashboard/dashboard-navbar';\nimport DashboardSidebar from '../../components/dashboard/dashboard-sidebar';\n\nexport default function DashboardLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  // State for sidebar toggle on mobile devices\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n\n  return (\n    <div className=\"min-h-screen bg-black\">\n      <DashboardNavbar onMenuToggle={() => setIsSidebarOpen(!isSidebarOpen)} />\n      <div className=\"flex\">\n        {/* Mobile sidebar */}\n        <div\n          className={`lg:hidden ${isSidebarOpen ? 'block' : 'hidden'} fixed inset-0 z-20 bg-black/50 backdrop-blur-sm transition-opacity`}\n          onClick={() => setIsSidebarOpen(false)}\n        />\n        <aside\n          className={`${isSidebarOpen ? 'translate-x-0' : '-translate-x-full'} lg:translate-x-0 flex w-64 flex-col fixed inset-y-0 pt-16 z-30 transition-transform duration-300 ease-in-out`}\n        >\n          <div className=\"flex-1 flex flex-col min-h-0 bg-[#1A1A1A] border-r border-white/10\">\n            <div className=\"flex-1 flex flex-col pt-5 pb-4 overflow-y-auto\">\n              <DashboardSidebar />\n            </div>\n          </div>\n        </aside>\n        <main className=\"lg:pl-64 flex-1\">\n          <div className=\"py-6\">\n            <div className=\"max-w-7xl mx-auto px-4 sm:px-6 md:px-8\">\n              {children}\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/dashboard/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/demo/address-search/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Metadata' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'selectedDestination' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":40,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":29}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nexport const dynamic = 'force-dynamic';\n\nimport type { Metadata } from 'next';\nimport React, { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../../components/ui/card';\nimport { Button } from '../../../components/ui/button';\nimport { Input } from '../../../components/ui/input';\nimport { Label } from '../../../components/ui/label';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../../../components/ui/tabs';\nimport { Badge } from '../../../components/ui/badge';\nimport { Separator } from '../../../components/ui/separator';\nimport { Alert, AlertDescription } from '../../../components/ui/alert';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../../../components/ui/select';\nimport {\n  MapPin,\n  Calculator,\n  Clock,\n  DollarSign,\n  Route,\n  AlertCircle,\n  CheckCircle,\n  Truck,\n  Zap,\n  Timer,\n} from 'lucide-react';\nimport AddressSearch from '../../../components/maps/AddressSearch';\nimport MapSearch from '../../../components/maps/MapSearch';\nimport { feeCalculator, formatCurrency, formatDistance, formatDuration, type DeliveryEstimate } from '../../../lib/services/fee-calculator';\n\nexport default function AddressSearchDemo() {\n  const [selectedOrigin, setSelectedOrigin] = useState<{\n    formatted_address: string;\n    lat: number;\n    lng: number;\n    place_id?: string;\n  } | null>(null);\n\n  const [selectedDestination, setSelectedDestination] = useState<{\n    formatted_address: string;\n    lat: number;\n    lng: number;\n    place_id?: string;\n  } | null>(null);\n\n  const [deliveryEstimate, setDeliveryEstimate] = useState<DeliveryEstimate | null>(null);\n  const [isCalculating, setIsCalculating] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [priority, setPriority] = useState<'standard' | 'express' | 'rush'>('standard');\n  const [orderTotal, setOrderTotal] = useState<number>(25.99);\n\n  // Manual address inputs\n  const [manualOrigin, setManualOrigin] = useState('');\n  const [manualDestination, setManualDestination] = useState('');\n\n  const handleAddressSelect = (address: {\n    formatted_address: string;\n    lat: number;\n    lng: number;\n    place_id?: string;\n  }) => {\n    setSelectedOrigin(address);\n  };\n\n  const handleDistanceCalculated = (data: {\n    distance: number;\n    duration: number;\n    fee: number;\n  }) => {\n    console.log('Distance calculated:', data);\n  };\n\n  const calculateManualRoute = async () => {\n    if (!manualOrigin || !manualDestination) {\n      setError('Please enter both origin and destination addresses');\n      return;\n    }\n\n    setIsCalculating(true);\n    setError(null);\n\n    try {\n      const estimate = await feeCalculator.calculateDeliveryFee(\n        manualOrigin,\n        manualDestination,\n        priority,\n        orderTotal,\n      );\n      setDeliveryEstimate(estimate);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to calculate delivery fee');\n    } finally {\n      setIsCalculating(false);\n    }\n  };\n\n  const clearCalculation = () => {\n    setDeliveryEstimate(null);\n    setError(null);\n    setManualOrigin('');\n    setManualDestination('');\n    setSelectedOrigin(null);\n    setSelectedDestination(null);\n  };\n\n  const getPriorityIcon = (priority: string) => {\n    switch (priority) {\n      case 'rush':\n        return <Zap className=\"h-4 w-4\" />;\n      case 'express':\n        return <Timer className=\"h-4 w-4\" />;\n      default:\n        return <Truck className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'rush':\n        return 'bg-red-100 text-red-800';\n      case 'express':\n        return 'bg-yellow-100 text-yellow-800';\n      default:\n        return 'bg-green-100 text-green-800';\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"text-center space-y-2\">\n        <h1 className=\"text-3xl font-bold\">Address Search & Fee Calculator Demo</h1>\n        <p className=\"text-gray-600\">\n          Test the enhanced address search functionality with autocomplete and distance-based fee calculation\n        </p>\n      </div>\n\n      <Tabs defaultValue=\"interactive\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"interactive\">Interactive Map</TabsTrigger>\n          <TabsTrigger value=\"manual\">Manual Entry</TabsTrigger>\n          <TabsTrigger value=\"simple\">Simple Map</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"interactive\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <MapPin className=\"h-5 w-5\" />\n                Interactive Address Search with Route Calculation\n              </CardTitle>\n              <CardDescription>\n                Use the map below to search for addresses and automatically calculate delivery fees\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <AddressSearch\n                onAddressSelect={handleAddressSelect}\n                onDistanceCalculated={handleDistanceCalculated}\n                height=\"600px\"\n                showFeeCalculator={true}\n                baseFee={5.99}\n                perMileRate={1.5}\n              />\n            </CardContent>\n          </Card>\n\n          {selectedOrigin && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                  Selected Address\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-start gap-2\">\n                    <MapPin className=\"h-4 w-4 mt-1 text-gray-500\" />\n                    <div>\n                      <p className=\"font-medium\">{selectedOrigin.formatted_address}</p>\n                      <p className=\"text-sm text-gray-500\">\n                        Coordinates: {selectedOrigin.lat.toFixed(6)}, {selectedOrigin.lng.toFixed(6)}\n                      </p>\n                      {selectedOrigin.place_id && (\n                        <p className=\"text-xs text-gray-400\">\n                          Place ID: {selectedOrigin.place_id}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"manual\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Calculator className=\"h-5 w-5\" />\n                Manual Address Entry & Fee Calculation\n              </CardTitle>\n              <CardDescription>\n                Enter addresses manually to calculate delivery fees and routes\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"origin\">Pickup Address</Label>\n                  <Input\n                    id=\"origin\"\n                    placeholder=\"Enter pickup address...\"\n                    value={manualOrigin}\n                    onChange={(e) => setManualOrigin(e.target.value)}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"destination\">Delivery Address</Label>\n                  <Input\n                    id=\"destination\"\n                    placeholder=\"Enter delivery address...\"\n                    value={manualDestination}\n                    onChange={(e) => setManualDestination(e.target.value)}\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"priority\">Delivery Priority</Label>\n                  <Select value={priority} onValueChange={(value: 'standard' | 'express' | 'rush') => setPriority(value)}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"standard\">\n                        <div className=\"flex items-center gap-2\">\n                          <Truck className=\"h-4 w-4\" />\n                          Standard (1x)\n                        </div>\n                      </SelectItem>\n                      <SelectItem value=\"express\">\n                        <div className=\"flex items-center gap-2\">\n                          <Timer className=\"h-4 w-4\" />\n                          Express (1.5x)\n                        </div>\n                      </SelectItem>\n                      <SelectItem value=\"rush\">\n                        <div className=\"flex items-center gap-2\">\n                          <Zap className=\"h-4 w-4\" />\n                          Rush (2x)\n                        </div>\n                      </SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"orderTotal\">Order Total ($)</Label>\n                  <Input\n                    id=\"orderTotal\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    min=\"0\"\n                    placeholder=\"25.99\"\n                    value={orderTotal}\n                    onChange={(e) => setOrderTotal(parseFloat(e.target.value) || 0)}\n                  />\n                </div>\n              </div>\n\n              <div className=\"flex gap-2\">\n                <Button\n                  onClick={calculateManualRoute}\n                  disabled={!manualOrigin || !manualDestination || isCalculating}\n                  className=\"flex-1\"\n                >\n                  {isCalculating ? (\n                    <>\n                      <Calculator className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Calculating...\n                    </>\n                  ) : (\n                    <>\n                      <Calculator className=\"mr-2 h-4 w-4\" />\n                      Calculate Delivery Fee\n                    </>\n                  )}\n                </Button>\n                <Button variant=\"outline\" onClick={clearCalculation}>\n                  Clear\n                </Button>\n              </div>\n\n              {error && (\n                <Alert variant=\"destructive\">\n                  <AlertCircle className=\"h-4 w-4\" />\n                  <AlertDescription>{error}</AlertDescription>\n                </Alert>\n              )}\n\n              {deliveryEstimate && (\n                <Card className=\"bg-gray-50\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2 text-lg\">\n                      <Route className=\"h-5 w-5\" />\n                      Delivery Estimate\n                      <Badge className={`ml-auto ${getPriorityColor(priority)}`}>\n                        {getPriorityIcon(priority)}\n                        {priority.charAt(0).toUpperCase() + priority.slice(1)}\n                      </Badge>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                      <div className=\"text-center p-3 bg-white rounded-lg\">\n                        <div className=\"text-2xl font-bold text-blue-600\">\n                          {formatDistance(deliveryEstimate.distance.value)}\n                        </div>\n                        <div className=\"text-sm text-gray-500\">Distance</div>\n                      </div>\n                      <div className=\"text-center p-3 bg-white rounded-lg\">\n                        <div className=\"text-2xl font-bold text-green-600\">\n                          {formatDuration(deliveryEstimate.duration.value)}\n                        </div>\n                        <div className=\"text-sm text-gray-500\">Travel Time</div>\n                      </div>\n                      <div className=\"text-center p-3 bg-white rounded-lg\">\n                        <div className=\"text-2xl font-bold text-purple-600\">\n                          {feeCalculator.getEstimatedDeliveryTime(deliveryEstimate.duration.value, priority)}\n                        </div>\n                        <div className=\"text-sm text-gray-500\">Est. Delivery</div>\n                      </div>\n                      <div className=\"text-center p-3 bg-white rounded-lg\">\n                        <div className={`text-2xl font-bold ${\n                          deliveryEstimate.isFreeDelivery ? 'text-green-600' : 'text-red-600'\n                        }`}>\n                          {deliveryEstimate.isFreeDelivery ? 'FREE' : formatCurrency(deliveryEstimate.totalFee)}\n                        </div>\n                        <div className=\"text-sm text-gray-500\">Delivery Fee</div>\n                      </div>\n                    </div>\n\n                    <Separator />\n\n                    <div className=\"space-y-2\">\n                      <h4 className=\"font-semibold text-sm\">Fee Breakdown</h4>\n                      <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                        <div className=\"flex justify-between\">\n                          <span>Base Fee:</span>\n                          <span>{formatCurrency(deliveryEstimate.baseFee)}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Distance Fee:</span>\n                          <span>{formatCurrency(deliveryEstimate.distanceFee)}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Time Fee:</span>\n                          <span>{formatCurrency(deliveryEstimate.timeFee)}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Priority Fee:</span>\n                          <span>{formatCurrency(deliveryEstimate.priorityFee)}</span>\n                        </div>\n                      </div>\n\n                      {deliveryEstimate.isFreeDelivery && (\n                        <Alert>\n                          <CheckCircle className=\"h-4 w-4\" />\n                          <AlertDescription>\n                            🎉 Free delivery! Your order total of {formatCurrency(orderTotal)} qualifies for free delivery.\n                          </AlertDescription>\n                        </Alert>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"simple\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <MapPin className=\"h-5 w-5\" />\n                Simple Map Search\n              </CardTitle>\n              <CardDescription>\n                Basic map functionality with address search\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <MapSearch\n                onLocationSelect={(location) => {\n                  console.log('Location selected:', location);\n                  setSelectedOrigin({\n                    formatted_address: location.address,\n                    lat: location.lat,\n                    lng: location.lng,\n                  });\n                }}\n                height=\"400px\"\n                showSearchBar={true}\n              />\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Features Demonstrated</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            <div className=\"flex items-start gap-3\">\n              <MapPin className=\"h-5 w-5 mt-1 text-blue-600\" />\n              <div>\n                <h4 className=\"font-semibold\">Address Autocomplete</h4>\n                <p className=\"text-sm text-gray-600\">\n                  Google Places API integration with real-time address suggestions\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <Calculator className=\"h-5 w-5 mt-1 text-green-600\" />\n              <div>\n                <h4 className=\"font-semibold\">Fee Calculation</h4>\n                <p className=\"text-sm text-gray-600\">\n                  Distance-based pricing with priority multipliers and free delivery thresholds\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <Route className=\"h-5 w-5 mt-1 text-purple-600\" />\n              <div>\n                <h4 className=\"font-semibold\">Route Visualization</h4>\n                <p className=\"text-sm text-gray-600\">\n                  Interactive maps with route display and turn-by-turn directions\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <Clock className=\"h-5 w-5 mt-1 text-orange-600\" />\n              <div>\n                <h4 className=\"font-semibold\">Time Estimation</h4>\n                <p className=\"text-sm text-gray-600\">\n                  Accurate delivery time estimates based on traffic and preparation time\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <DollarSign className=\"h-5 w-5 mt-1 text-red-600\" />\n              <div>\n                <h4 className=\"font-semibold\">Dynamic Pricing</h4>\n                <p className=\"text-sm text-gray-600\">\n                  Configurable pricing models with minimum/maximum fee constraints\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <CheckCircle className=\"h-5 w-5 mt-1 text-teal-600\" />\n              <div>\n                <h4 className=\"font-semibold\">Address Validation</h4>\n                <p className=\"text-sm text-gray-600\">\n                  Ensure accurate addresses with geocoding and validation\n                </p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/demo/external-apis/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Metadata' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1012,1015],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1012,1015],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1233,1236],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1233,1236],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":37,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1391,1394],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1391,1394],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1456,1459],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1456,1459],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1523,1526],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1523,1526],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2516,2519],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2516,2519],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":145,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4977,4980],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4977,4980],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":157,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5267,5270],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5267,5270],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":338,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":338,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12082,12085],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12082,12085],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":341,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":341,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12235,12238],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12235,12238],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":344,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":344,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12392,12395],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12392,12395],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":369,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":369,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13547,13550],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13547,13550],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":372,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":372,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13691,13694],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13691,13694],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":1,"message":"Unexpected empty arrow function.","line":395,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":395,"endColumn":38},{"ruleId":"@typescript-eslint/no-empty-function","severity":1,"message":"Unexpected empty arrow function.","line":398,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":398,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":412,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":412,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15375,15378],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15375,15378],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":442,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":442,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16594,16597],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16594,16597],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":458,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":458,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17193,17196],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17193,17196],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nexport const dynamic = 'force-dynamic';\n\nimport type { Metadata } from 'next';\nimport React, { useState } from 'react';\nimport { useExternalAPIs } from '../../../hooks/useExternalAPIs';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../../components/ui/card';\nimport { Button } from '../../../components/ui/button';\nimport { Input } from '../../../components/ui/input';\nimport { Label } from '../../../components/ui/label';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../../../components/ui/tabs';\nimport { Badge } from '../../../components/ui/badge';\nimport { Loader2, MapPin, Star, DollarSign, Package, Store } from 'lucide-react';\n\nexport default function ExternalAPIsDemo() {\n  const {\n    loading,\n    error,\n    searchRestaurants,\n    searchProducts,\n    searchYelpBusinesses,\n    searchKrogerProducts,\n    searchBestBuyProducts,\n  } = useExternalAPIs();\n\n  // Restaurant search state\n  const [restaurantResults, setRestaurantResults] = useState<any>(null);\n  const [restaurantQuery, setRestaurantQuery] = useState('pizza');\n  const [location, setLocation] = useState('New York, NY');\n\n  // Product search state\n  const [productResults, setProductResults] = useState<any>(null);\n  const [productQuery, setProductQuery] = useState('organic milk');\n\n  // Individual API results\n  const [yelpResults, setYelpResults] = useState<any>(null);\n  const [krogerResults, setKrogerResults] = useState<any>(null);\n  const [bestbuyResults, setBestbuyResults] = useState<any>(null);\n\n  const handleRestaurantSearch = async () => {\n    const results = await searchRestaurants({\n      location,\n      term: restaurantQuery,\n      limit: 10,\n    });\n    setRestaurantResults(results);\n  };\n\n  const handleProductSearch = async () => {\n    const results = await searchProducts({\n      query: productQuery,\n      limit: 10,\n    });\n    setProductResults(results);\n  };\n\n  const handleYelpSearch = async () => {\n    const results = await searchYelpBusinesses({\n      term: restaurantQuery,\n      location,\n      limit: 10,\n    });\n    setYelpResults(results);\n  };\n\n  const handleKrogerSearch = async () => {\n    const results = await searchKrogerProducts({\n      q: productQuery,\n      limit: 10,\n    });\n    setKrogerResults(results);\n  };\n\n  const handleBestBuySearch = async () => {\n    const results = await searchBestBuyProducts({\n      q: productQuery,\n      pageSize: 10,\n    });\n    setBestbuyResults(results);\n  };\n\n  const renderRestaurantCard = (restaurant: any, source: string) => {\n    const getName = () => {\n      if (source === 'yelp') {return restaurant.name;}\n      if (source === 'zomato') {return restaurant.name;}\n      if (source === 'documenu') {return restaurant.restaurant_name;}\n      return 'Unknown';\n    };\n\n    const getRating = () => {\n      if (source === 'yelp') {return restaurant.rating;}\n      if (source === 'zomato') {return restaurant.user_rating?.aggregate_rating;}\n      return null;\n    };\n\n    const getPrice = () => {\n      if (source === 'yelp') {return restaurant.price;}\n      if (source === 'zomato') {return '$'.repeat(restaurant.price_range || 1);}\n      if (source === 'documenu') {return restaurant.price_range;}\n      return null;\n    };\n\n    const getAddress = () => {\n      if (source === 'yelp') {return restaurant.location?.display_address?.join(', ');}\n      if (source === 'zomato') {return restaurant.location?.address;}\n      return null;\n    };\n\n    return (\n      <Card key={`${source}-${restaurant.id || restaurant.restaurant_id}`} className=\"mb-4\">\n        <CardHeader>\n          <div className=\"flex justify-between items-start\">\n            <div>\n              <CardTitle className=\"text-lg\">{getName()}</CardTitle>\n              <CardDescription className=\"flex items-center gap-2 mt-1\">\n                <Badge variant=\"outline\">{source}</Badge>\n                {getAddress() && (\n                  <span className=\"flex items-center gap-1 text-sm\">\n                    <MapPin className=\"w-3 h-3\" />\n                    {getAddress()}\n                  </span>\n                )}\n              </CardDescription>\n            </div>\n            <div className=\"flex flex-col items-end gap-1\">\n              {getRating() && (\n                <div className=\"flex items-center gap-1\">\n                  <Star className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n                  <span className=\"text-sm font-medium\">{getRating()}</span>\n                </div>\n              )}\n              {getPrice() && (\n                <div className=\"flex items-center gap-1\">\n                  <DollarSign className=\"w-4 h-4\" />\n                  <span className=\"text-sm\">{getPrice()}</span>\n                </div>\n              )}\n            </div>\n          </div>\n        </CardHeader>\n        {source === 'yelp' && restaurant.categories && (\n          <CardContent>\n            <div className=\"flex flex-wrap gap-1\">\n              {restaurant.categories.map((cat: any, idx: number) => (\n                <Badge key={idx} variant=\"secondary\" className=\"text-xs\">\n                  {cat.title}\n                </Badge>\n              ))}\n            </div>\n          </CardContent>\n        )}\n      </Card>\n    );\n  };\n\n  const renderProductCard = (product: any, source: string) => {\n    const getName = () => {\n      if (source === 'kroger') {return product.description;}\n      if (source === 'bestbuy') {return product.name;}\n      return 'Unknown';\n    };\n\n    const getPrice = () => {\n      if (source === 'kroger') {return product.items?.[0]?.price?.regular;}\n      if (source === 'bestbuy') {return product.salePrice || product.regularPrice;}\n      return null;\n    };\n\n    const getBrand = () => {\n      if (source === 'kroger') {return product.brand;}\n      if (source === 'bestbuy') {return product.manufacturer;}\n      return null;\n    };\n\n    return (\n      <Card key={`${source}-${product.productId || product.sku}`} className=\"mb-4\">\n        <CardHeader>\n          <div className=\"flex justify-between items-start\">\n            <div className=\"flex-1\">\n              <CardTitle className=\"text-lg\">{getName()}</CardTitle>\n              <CardDescription className=\"flex items-center gap-2 mt-1\">\n                <Badge variant=\"outline\">{source}</Badge>\n                {getBrand() && (\n                  <span className=\"text-sm text-muted-foreground\">{getBrand()}</span>\n                )}\n              </CardDescription>\n            </div>\n            <div className=\"flex flex-col items-end gap-1\">\n              {getPrice() && (\n                <div className=\"flex items-center gap-1\">\n                  <DollarSign className=\"w-4 h-4\" />\n                  <span className=\"text-lg font-bold\">${getPrice()}</span>\n                </div>\n              )}\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n            {source === 'kroger' && (\n              <div className=\"flex items-center gap-1\">\n                <Store className=\"w-4 h-4\" />\n                <span>Kroger</span>\n              </div>\n            )}\n            {source === 'bestbuy' && (\n              <div className=\"flex items-center gap-1\">\n                <Package className=\"w-4 h-4\" />\n                <span>Best Buy</span>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-6xl\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold mb-2\">External APIs Integration Demo</h1>\n        <p className=\"text-muted-foreground\">\n          Test the integration with Documenu, Zomato, Yelp, Kroger, and Best Buy APIs\n        </p>\n      </div>\n\n      {error && (\n        <Card className=\"mb-6 border-red-200 bg-red-50\">\n          <CardContent className=\"pt-6\">\n            <p className=\"text-red-600\">Error: {error}</p>\n          </CardContent>\n        </Card>\n      )}\n\n      <Tabs defaultValue=\"unified\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"unified\">Unified Search</TabsTrigger>\n          <TabsTrigger value=\"restaurants\">Restaurant APIs</TabsTrigger>\n          <TabsTrigger value=\"products\">Product APIs</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"unified\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Restaurant Search */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Restaurant Search</CardTitle>\n                <CardDescription>\n                  Search across Documenu, Zomato, and Yelp simultaneously\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"restaurant-query\">Search Term</Label>\n                  <Input\n                    id=\"restaurant-query\"\n                    value={restaurantQuery}\n                    onChange={(e) => setRestaurantQuery(e.target.value)}\n                    placeholder=\"e.g., pizza, sushi, burgers\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"location\">Location</Label>\n                  <Input\n                    id=\"location\"\n                    value={location}\n                    onChange={(e) => setLocation(e.target.value)}\n                    placeholder=\"e.g., New York, NY\"\n                  />\n                </div>\n                <Button\n                  onClick={handleRestaurantSearch}\n                  disabled={loading}\n                  className=\"w-full\"\n                >\n                  {loading ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Searching...\n                    </>\n                  ) : (\n                    'Search Restaurants'\n                  )}\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Product Search */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Product Search</CardTitle>\n                <CardDescription>\n                  Search across Kroger and Best Buy simultaneously\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"product-query\">Search Term</Label>\n                  <Input\n                    id=\"product-query\"\n                    value={productQuery}\n                    onChange={(e) => setProductQuery(e.target.value)}\n                    placeholder=\"e.g., organic milk, laptop, headphones\"\n                  />\n                </div>\n                <Button\n                  onClick={handleProductSearch}\n                  disabled={loading}\n                  className=\"w-full\"\n                >\n                  {loading ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Searching...\n                    </>\n                  ) : (\n                    'Search Products'\n                  )}\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Results */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {restaurantResults && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Restaurant Results</CardTitle>\n                  <CardDescription>\n                    Found {(restaurantResults.documenu?.length || 0) +\n                           (restaurantResults.zomato?.length || 0) +\n                           (restaurantResults.yelp?.length || 0)} restaurants\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"max-h-96 overflow-y-auto\">\n                  {restaurantResults.yelp?.map((restaurant: any) =>\n                    renderRestaurantCard(restaurant, 'yelp'),\n                  )}\n                  {restaurantResults.zomato?.map((restaurant: any) =>\n                    renderRestaurantCard(restaurant, 'zomato'),\n                  )}\n                  {restaurantResults.documenu?.map((restaurant: any) =>\n                    renderRestaurantCard(restaurant, 'documenu'),\n                  )}\n                  {restaurantResults.errors?.length > 0 && (\n                    <div className=\"mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded\">\n                      <p className=\"text-sm font-medium text-yellow-800\">Errors:</p>\n                      {restaurantResults.errors.map((error: string, idx: number) => (\n                        <p key={idx} className=\"text-sm text-yellow-700\">{error}</p>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            )}\n\n            {productResults && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Product Results</CardTitle>\n                  <CardDescription>\n                    Found {(productResults.kroger?.length || 0) +\n                           (productResults.bestbuy?.length || 0)} products\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"max-h-96 overflow-y-auto\">\n                  {productResults.kroger?.map((product: any) =>\n                    renderProductCard(product, 'kroger'),\n                  )}\n                  {productResults.bestbuy?.map((product: any) =>\n                    renderProductCard(product, 'bestbuy'),\n                  )}\n                  {productResults.errors?.length > 0 && (\n                    <div className=\"mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded\">\n                      <p className=\"text-sm font-medium text-yellow-800\">Errors:</p>\n                      {productResults.errors.map((error: string, idx: number) => (\n                        <p key={idx} className=\"text-sm text-yellow-700\">{error}</p>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"restaurants\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Button onClick={handleYelpSearch} disabled={loading}>\n              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : null}\n              Search Yelp\n            </Button>\n            <Button onClick={() => {}} disabled={true}>\n              Search Zomato (Configure API)\n            </Button>\n            <Button onClick={() => {}} disabled={true}>\n              Search Documenu (Configure API)\n            </Button>\n          </div>\n\n          {yelpResults && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Yelp Results</CardTitle>\n                <CardDescription>\n                  Found {yelpResults.businesses?.length || 0} businesses\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"max-h-96 overflow-y-auto\">\n                {yelpResults.businesses?.map((business: any) =>\n                  renderRestaurantCard(business, 'yelp'),\n                )}\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"products\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <Button onClick={handleKrogerSearch} disabled={loading}>\n              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : null}\n              Search Kroger\n            </Button>\n            <Button onClick={handleBestBuySearch} disabled={loading}>\n              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : null}\n              Search Best Buy\n            </Button>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {krogerResults && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Kroger Results</CardTitle>\n                  <CardDescription>\n                    Found {krogerResults.data?.length || 0} products\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"max-h-96 overflow-y-auto\">\n                  {krogerResults.data?.map((product: any) =>\n                    renderProductCard(product, 'kroger'),\n                  )}\n                </CardContent>\n              </Card>\n            )}\n\n            {bestbuyResults && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Best Buy Results</CardTitle>\n                  <CardDescription>\n                    Found {bestbuyResults.products?.length || 0} products\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"max-h-96 overflow-y-auto\">\n                  {bestbuyResults.products?.map((product: any) =>\n                    renderProductCard(product, 'bestbuy'),\n                  )}\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/docs/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Settings' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Shield' is defined but never used. Allowed unused vars must match /^_/u.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Star' is defined but never used. Allowed unused vars must match /^_/u.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Image' is defined but never used. Allowed unused vars must match /^_/u.","line":30,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":13},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[692,695],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[692,695],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":400,"column":77,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[13226,13276],"text":"Browse by category to find what you&apos;re looking for"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[13226,13276],"text":"Browse by category to find what you&lsquo;re looking for"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[13226,13276],"text":"Browse by category to find what you&#39;re looking for"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[13226,13276],"text":"Browse by category to find what you&rsquo;re looking for"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":628,"column":16,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[26634,26755],"text":"\n            Can&apos;t find what you're looking for? Our support team is here to help you get the most out of OTW.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[26634,26755],"text":"\n            Can&lsquo;t find what you're looking for? Our support team is here to help you get the most out of OTW.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[26634,26755],"text":"\n            Can&#39;t find what you're looking for? Our support team is here to help you get the most out of OTW.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[26634,26755],"text":"\n            Can&rsquo;t find what you're looking for? Our support team is here to help you get the most out of OTW.\n          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":628,"column":32,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[26634,26755],"text":"\n            Can't find what you&apos;re looking for? Our support team is here to help you get the most out of OTW.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[26634,26755],"text":"\n            Can't find what you&lsquo;re looking for? Our support team is here to help you get the most out of OTW.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[26634,26755],"text":"\n            Can't find what you&#39;re looking for? Our support team is here to help you get the most out of OTW.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[26634,26755],"text":"\n            Can't find what you&rsquo;re looking for? Our support team is here to help you get the most out of OTW.\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { Button } from '../../components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../components/ui/card';\nimport { Badge } from '../../components/ui/badge';\nimport { Input } from '../../components/ui/input';\nimport {\n  Search,\n  Book,\n  Code,\n  Smartphone,\n  CreditCard,\n  Truck,\n  Users,\n  Settings,\n  HelpCircle,\n  ExternalLink,\n  ChevronRight,\n  FileText,\n  Video,\n  Download,\n  Globe,\n  Shield,\n  Zap,\n  Heart,\n  Star,\n} from 'lucide-react';\nimport Link from 'next/link';\nimport Image from 'next/image';\n\ninterface DocSection {\n  id: string;\n  title: string;\n  description: string;\n  icon: any;\n  articles: DocArticle[];\n}\n\ninterface DocArticle {\n  id: string;\n  title: string;\n  description: string;\n  readTime: string;\n  difficulty: 'Beginner' | 'Intermediate' | 'Advanced';\n  tags: string[];\n  lastUpdated: string;\n}\n\nconst DOC_SECTIONS: DocSection[] = [\n  {\n    id: 'getting-started',\n    title: 'Getting Started',\n    description: 'Everything you need to know to start using OTW',\n    icon: Book,\n    articles: [\n      {\n        id: 'welcome',\n        title: 'Welcome to OTW',\n        description: 'Learn about our platform and how to get started',\n        readTime: '5 min',\n        difficulty: 'Beginner',\n        tags: ['overview', 'introduction'],\n        lastUpdated: '2024-01-15',\n      },\n      {\n        id: 'account-setup',\n        title: 'Setting Up Your Account',\n        description: 'Create and configure your OTW account',\n        readTime: '8 min',\n        difficulty: 'Beginner',\n        tags: ['account', 'setup', 'profile'],\n        lastUpdated: '2024-01-12',\n      },\n      {\n        id: 'first-order',\n        title: 'Placing Your First Order',\n        description: 'Step-by-step guide to ordering food',\n        readTime: '10 min',\n        difficulty: 'Beginner',\n        tags: ['ordering', 'tutorial', 'food'],\n        lastUpdated: '2024-01-10',\n      },\n    ],\n  },\n  {\n    id: 'mobile-app',\n    title: 'Mobile App',\n    description: 'Using the OTW mobile application',\n    icon: Smartphone,\n    articles: [\n      {\n        id: 'app-download',\n        title: 'Downloading the App',\n        description: 'Get the OTW app on iOS and Android',\n        readTime: '3 min',\n        difficulty: 'Beginner',\n        tags: ['mobile', 'download', 'ios', 'android'],\n        lastUpdated: '2024-01-14',\n      },\n      {\n        id: 'app-features',\n        title: 'App Features Overview',\n        description: 'Explore all the features available in our mobile app',\n        readTime: '12 min',\n        difficulty: 'Intermediate',\n        tags: ['features', 'mobile', 'navigation'],\n        lastUpdated: '2024-01-08',\n      },\n      {\n        id: 'notifications',\n        title: 'Push Notifications',\n        description: 'Managing and customizing your notification preferences',\n        readTime: '6 min',\n        difficulty: 'Beginner',\n        tags: ['notifications', 'settings', 'mobile'],\n        lastUpdated: '2024-01-05',\n      },\n    ],\n  },\n  {\n    id: 'ordering',\n    title: 'Ordering & Delivery',\n    description: 'How to order food and track deliveries',\n    icon: Truck,\n    articles: [\n      {\n        id: 'menu-browsing',\n        title: 'Browsing Menus',\n        description: 'Find and explore restaurant menus',\n        readTime: '7 min',\n        difficulty: 'Beginner',\n        tags: ['menu', 'restaurants', 'browsing'],\n        lastUpdated: '2024-01-13',\n      },\n      {\n        id: 'customizations',\n        title: 'Customizing Your Order',\n        description: 'Add special instructions and modifications',\n        readTime: '9 min',\n        difficulty: 'Intermediate',\n        tags: ['customization', 'modifications', 'special-requests'],\n        lastUpdated: '2024-01-11',\n      },\n      {\n        id: 'tracking',\n        title: 'Order Tracking',\n        description: 'Track your order from kitchen to doorstep',\n        readTime: '5 min',\n        difficulty: 'Beginner',\n        tags: ['tracking', 'delivery', 'status'],\n        lastUpdated: '2024-01-09',\n      },\n    ],\n  },\n  {\n    id: 'payments',\n    title: 'Payments & Billing',\n    description: 'Payment methods, billing, and refunds',\n    icon: CreditCard,\n    articles: [\n      {\n        id: 'payment-methods',\n        title: 'Payment Methods',\n        description: 'Accepted payment options and how to add them',\n        readTime: '6 min',\n        difficulty: 'Beginner',\n        tags: ['payment', 'credit-card', 'billing'],\n        lastUpdated: '2024-01-07',\n      },\n      {\n        id: 'refunds',\n        title: 'Refunds & Cancellations',\n        description: 'How to request refunds and cancel orders',\n        readTime: '8 min',\n        difficulty: 'Intermediate',\n        tags: ['refunds', 'cancellation', 'support'],\n        lastUpdated: '2024-01-06',\n      },\n      {\n        id: 'billing-history',\n        title: 'Viewing Billing History',\n        description: 'Access and download your order history and receipts',\n        readTime: '4 min',\n        difficulty: 'Beginner',\n        tags: ['billing', 'history', 'receipts'],\n        lastUpdated: '2024-01-04',\n      },\n    ],\n  },\n  {\n    id: 'account',\n    title: 'Account Management',\n    description: 'Managing your profile and preferences',\n    icon: Users,\n    articles: [\n      {\n        id: 'profile-settings',\n        title: 'Profile Settings',\n        description: 'Update your personal information and preferences',\n        readTime: '7 min',\n        difficulty: 'Beginner',\n        tags: ['profile', 'settings', 'personal-info'],\n        lastUpdated: '2024-01-03',\n      },\n      {\n        id: 'addresses',\n        title: 'Managing Delivery Addresses',\n        description: 'Add, edit, and organize your delivery locations',\n        readTime: '5 min',\n        difficulty: 'Beginner',\n        tags: ['addresses', 'delivery', 'locations'],\n        lastUpdated: '2024-01-02',\n      },\n      {\n        id: 'privacy',\n        title: 'Privacy & Security',\n        description: 'Protect your account and manage privacy settings',\n        readTime: '10 min',\n        difficulty: 'Intermediate',\n        tags: ['privacy', 'security', 'password'],\n        lastUpdated: '2024-01-01',\n      },\n    ],\n  },\n  {\n    id: 'api',\n    title: 'Developer API',\n    description: 'Integration guides for developers',\n    icon: Code,\n    articles: [\n      {\n        id: 'api-overview',\n        title: 'API Overview',\n        description: 'Introduction to the OTW API and authentication',\n        readTime: '15 min',\n        difficulty: 'Advanced',\n        tags: ['api', 'authentication', 'overview'],\n        lastUpdated: '2023-12-28',\n      },\n      {\n        id: 'webhooks',\n        title: 'Webhooks',\n        description: 'Setting up and handling webhook notifications',\n        readTime: '20 min',\n        difficulty: 'Advanced',\n        tags: ['webhooks', 'notifications', 'integration'],\n        lastUpdated: '2023-12-25',\n      },\n      {\n        id: 'rate-limits',\n        title: 'Rate Limits',\n        description: 'Understanding API rate limits and best practices',\n        readTime: '8 min',\n        difficulty: 'Intermediate',\n        tags: ['rate-limits', 'best-practices', 'performance'],\n        lastUpdated: '2023-12-22',\n      },\n    ],\n  },\n];\n\nconst POPULAR_ARTICLES = [\n  {\n    id: 'welcome',\n    title: 'Welcome to OTW',\n    views: '12.5k',\n    category: 'Getting Started',\n  },\n  {\n    id: 'first-order',\n    title: 'Placing Your First Order',\n    views: '8.2k',\n    category: 'Getting Started',\n  },\n  {\n    id: 'tracking',\n    title: 'Order Tracking',\n    views: '6.8k',\n    category: 'Ordering & Delivery',\n  },\n  {\n    id: 'payment-methods',\n    title: 'Payment Methods',\n    views: '5.4k',\n    category: 'Payments & Billing',\n  },\n];\n\nexport default function DocsPage() {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedSection, setSelectedSection] = useState<string | null>(null);\n\n  const filteredSections = DOC_SECTIONS.filter(section => {\n    if (!searchQuery) {return true;}\n\n    const sectionMatch = section.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                        section.description.toLowerCase().includes(searchQuery.toLowerCase());\n\n    const articleMatch = section.articles.some(article =>\n      article.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      article.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      article.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase())),\n    );\n\n    return sectionMatch || articleMatch;\n  });\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'Beginner': return 'bg-green-500';\n      case 'Intermediate': return 'bg-yellow-500';\n      case 'Advanced': return 'bg-red-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-otw-black via-otw-black-800 to-otw-black-900\">\n      {/* Hero Section */}\n      <div className=\"relative py-20 px-4\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-otw-gold/10 to-transparent\" />\n        <div className=\"container mx-auto relative z-10\">\n          <div className=\"text-center max-w-4xl mx-auto\">\n            <div className=\"w-20 h-20 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-full flex items-center justify-center mx-auto mb-6\">\n              <Book className=\"w-10 h-10 text-black\" />\n            </div>\n            <h1 className=\"text-4xl md:text-6xl font-bold text-white mb-6\">\n              OTW <span className=\"text-otw-gold\">Documentation</span>\n            </h1>\n            <p className=\"text-xl text-gray-300 mb-8 max-w-2xl mx-auto\">\n              Everything you need to know about using OTW. From getting started to advanced features, find answers to all your questions.\n            </p>\n\n            {/* Search Bar */}\n            <div className=\"relative max-w-2xl mx-auto mb-8\">\n              <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n              <Input\n                type=\"text\"\n                placeholder=\"Search documentation...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-12 pr-4 py-4 text-lg bg-otw-black-800/80 border-otw-gold/30 text-white rounded-full focus:border-otw-gold/60 transition-all duration-300\"\n              />\n            </div>\n\n            <div className=\"flex flex-wrap justify-center gap-4\">\n              <Button className=\"bg-gradient-to-r from-otw-gold to-yellow-500 text-black font-semibold px-6 py-3 rounded-full hover:shadow-lg transition-all duration-300\">\n                <Video className=\"w-5 h-5 mr-2\" />\n                Video Tutorials\n              </Button>\n              <Button variant=\"outline\" className=\"border-2 border-otw-gold text-otw-gold hover:bg-otw-gold hover:text-black px-6 py-3 rounded-full transition-all duration-300\">\n                <Download className=\"w-5 h-5 mr-2\" />\n                Download PDF Guide\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Quick Links */}\n      <div className=\"py-16 px-4\">\n        <div className=\"container mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-white mb-4\">\n              Popular <span className=\"text-otw-gold\">Articles</span>\n            </h2>\n            <p className=\"text-gray-300\">Most viewed documentation articles</p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {POPULAR_ARTICLES.map((article) => (\n              <Card key={article.id} className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20 hover:border-otw-gold/40 transition-all duration-300 hover:shadow-lg hover:shadow-otw-gold/10 cursor-pointer\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <Badge className=\"bg-otw-gold/20 text-otw-gold border-otw-gold/30\">\n                      {article.category}\n                    </Badge>\n                    <span className=\"text-sm text-gray-400\">{article.views} views</span>\n                  </div>\n                  <h3 className=\"text-white font-semibold mb-2\">{article.title}</h3>\n                  <div className=\"flex items-center text-otw-gold\">\n                    <span className=\"text-sm\">Read article</span>\n                    <ChevronRight className=\"w-4 h-4 ml-1\" />\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Documentation Sections */}\n      <div className=\"py-16 px-4 bg-gradient-to-r from-otw-gold/5 to-transparent\">\n        <div className=\"container mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-white mb-4\">\n              Documentation <span className=\"text-otw-gold\">Sections</span>\n            </h2>\n            <p className=\"text-gray-300\">Browse by category to find what you're looking for</p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-8\">\n            {filteredSections.map((section) => {\n              const IconComponent = section.icon;\n              return (\n                <Card\n                  key={section.id}\n                  className={`bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border transition-all duration-300 hover:shadow-2xl hover:shadow-otw-gold/10 cursor-pointer ${\n                    selectedSection === section.id\n                      ? 'border-otw-gold/60 shadow-lg shadow-otw-gold/20'\n                      : 'border-otw-gold/20 hover:border-otw-gold/40'\n                  }`}\n                  onClick={() => setSelectedSection(selectedSection === section.id ? null : section.id)}\n                >\n                  <CardHeader>\n                    <div className=\"flex items-center gap-4\">\n                      <div className=\"w-12 h-12 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-lg flex items-center justify-center\">\n                        <IconComponent className=\"w-6 h-6 text-black\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-white text-xl\">{section.title}</CardTitle>\n                        <CardDescription className=\"text-gray-300\">\n                          {section.description}\n                        </CardDescription>\n                      </div>\n                      <ChevronRight className={`w-5 h-5 text-otw-gold transition-transform duration-300 ${\n                        selectedSection === section.id ? 'rotate-90' : ''\n                      }`} />\n                    </div>\n                  </CardHeader>\n\n                  {selectedSection === section.id && (\n                    <CardContent className=\"pt-0\">\n                      <div className=\"space-y-4\">\n                        {section.articles.map((article) => (\n                          <div key={article.id} className=\"p-4 bg-otw-black-900/50 rounded-lg border border-otw-gold/10 hover:border-otw-gold/30 transition-all duration-300 cursor-pointer\">\n                            <div className=\"flex items-start justify-between mb-2\">\n                              <h4 className=\"text-white font-medium\">{article.title}</h4>\n                              <Badge className={`${getDifficultyColor(article.difficulty)} text-white text-xs`}>\n                                {article.difficulty}\n                              </Badge>\n                            </div>\n                            <p className=\"text-gray-300 text-sm mb-3\">{article.description}</p>\n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"flex flex-wrap gap-2\">\n                                {article.tags.slice(0, 2).map((tag) => (\n                                  <Badge key={tag} variant=\"outline\" className=\"border-otw-gold/30 text-otw-gold text-xs\">\n                                    {tag}\n                                  </Badge>\n                                ))}\n                              </div>\n                              <div className=\"flex items-center gap-4 text-xs text-gray-400\">\n                                <span>{article.readTime}</span>\n                                <span>Updated {new Date(article.lastUpdated).toLocaleDateString()}</span>\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  )}\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n\n      {/* Additional Resources */}\n      <div className=\"py-16 px-4\">\n        <div className=\"container mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-white mb-4\">\n              Additional <span className=\"text-otw-gold\">Resources</span>\n            </h2>\n            <p className=\"text-gray-300\">More ways to get help and stay updated</p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            <Card className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20 hover:border-otw-gold/40 transition-all duration-300 hover:shadow-lg hover:shadow-otw-gold/10\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <HelpCircle className=\"w-6 h-6 text-black\" />\n                </div>\n                <h3 className=\"text-white font-semibold mb-2\">Support Center</h3>\n                <p className=\"text-gray-300 text-sm mb-4\">Get help from our support team</p>\n                <Link href=\"/help\">\n                  <Button variant=\"outline\" className=\"border-otw-gold/30 text-otw-gold hover:bg-otw-gold/10\">\n                    Visit Support\n                    <ExternalLink className=\"w-4 h-4 ml-2\" />\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20 hover:border-otw-gold/40 transition-all duration-300 hover:shadow-lg hover:shadow-otw-gold/10\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <Globe className=\"w-6 h-6 text-black\" />\n                </div>\n                <h3 className=\"text-white font-semibold mb-2\">Community Forum</h3>\n                <p className=\"text-gray-300 text-sm mb-4\">Connect with other users</p>\n                <Button variant=\"outline\" className=\"border-otw-gold/30 text-otw-gold hover:bg-otw-gold/10\">\n                  Join Forum\n                  <ExternalLink className=\"w-4 h-4 ml-2\" />\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20 hover:border-otw-gold/40 transition-all duration-300 hover:shadow-lg hover:shadow-otw-gold/10\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <Video className=\"w-6 h-6 text-black\" />\n                </div>\n                <h3 className=\"text-white font-semibold mb-2\">Video Tutorials</h3>\n                <p className=\"text-gray-300 text-sm mb-4\">Learn with step-by-step videos</p>\n                <Button variant=\"outline\" className=\"border-otw-gold/30 text-otw-gold hover:bg-otw-gold/10\">\n                  Watch Videos\n                  <ExternalLink className=\"w-4 h-4 ml-2\" />\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20 hover:border-otw-gold/40 transition-all duration-300 hover:shadow-lg hover:shadow-otw-gold/10\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <FileText className=\"w-6 h-6 text-black\" />\n                </div>\n                <h3 className=\"text-white font-semibold mb-2\">Release Notes</h3>\n                <p className=\"text-gray-300 text-sm mb-4\">Stay updated with new features</p>\n                <Button variant=\"outline\" className=\"border-otw-gold/30 text-otw-gold hover:bg-otw-gold/10\">\n                  View Updates\n                  <ExternalLink className=\"w-4 h-4 ml-2\" />\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* Developer Resources */}\n      <div className=\"py-16 px-4 bg-gradient-to-r from-otw-gold/5 to-transparent\">\n        <div className=\"container mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-white mb-4\">\n              Developer <span className=\"text-otw-gold\">Resources</span>\n            </h2>\n            <p className=\"text-gray-300\">Tools and guides for developers integrating with OTW</p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <Card className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20 hover:border-otw-gold/40 transition-all duration-300 hover:shadow-lg hover:shadow-otw-gold/10\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center gap-3 mb-4\">\n                  <div className=\"w-10 h-10 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-lg flex items-center justify-center\">\n                    <Code className=\"w-5 h-5 text-black\" />\n                  </div>\n                  <h3 className=\"text-white font-semibold\">API Reference</h3>\n                </div>\n                <p className=\"text-gray-300 text-sm mb-4\">\n                  Complete API documentation with examples and code snippets\n                </p>\n                <div className=\"flex flex-wrap gap-2 mb-4\">\n                  <Badge className=\"bg-blue-500/20 text-blue-400 border-blue-500/30\">REST API</Badge>\n                  <Badge className=\"bg-green-500/20 text-green-400 border-green-500/30\">GraphQL</Badge>\n                  <Badge className=\"bg-purple-500/20 text-purple-400 border-purple-500/30\">Webhooks</Badge>\n                </div>\n                <Button className=\"w-full bg-gradient-to-r from-otw-gold to-yellow-500 text-black font-semibold\">\n                  View API Docs\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20 hover:border-otw-gold/40 transition-all duration-300 hover:shadow-lg hover:shadow-otw-gold/10\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center gap-3 mb-4\">\n                  <div className=\"w-10 h-10 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-lg flex items-center justify-center\">\n                    <Download className=\"w-5 h-5 text-black\" />\n                  </div>\n                  <h3 className=\"text-white font-semibold\">SDKs & Libraries</h3>\n                </div>\n                <p className=\"text-gray-300 text-sm mb-4\">\n                  Official SDKs and community libraries for popular programming languages\n                </p>\n                <div className=\"flex flex-wrap gap-2 mb-4\">\n                  <Badge className=\"bg-yellow-500/20 text-yellow-400 border-yellow-500/30\">JavaScript</Badge>\n                  <Badge className=\"bg-blue-500/20 text-blue-400 border-blue-500/30\">Python</Badge>\n                  <Badge className=\"bg-red-500/20 text-red-400 border-red-500/30\">Ruby</Badge>\n                </div>\n                <Button className=\"w-full bg-gradient-to-r from-otw-gold to-yellow-500 text-black font-semibold\">\n                  Download SDKs\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20 hover:border-otw-gold/40 transition-all duration-300 hover:shadow-lg hover:shadow-otw-gold/10\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center gap-3 mb-4\">\n                  <div className=\"w-10 h-10 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-lg flex items-center justify-center\">\n                    <Zap className=\"w-5 h-5 text-black\" />\n                  </div>\n                  <h3 className=\"text-white font-semibold\">Quick Start</h3>\n                </div>\n                <p className=\"text-gray-300 text-sm mb-4\">\n                  Get up and running with our API in minutes with our quick start guide\n                </p>\n                <div className=\"flex flex-wrap gap-2 mb-4\">\n                  <Badge className=\"bg-green-500/20 text-green-400 border-green-500/30\">5 min setup</Badge>\n                  <Badge className=\"bg-purple-500/20 text-purple-400 border-purple-500/30\">Examples</Badge>\n                </div>\n                <Button className=\"w-full bg-gradient-to-r from-otw-gold to-yellow-500 text-black font-semibold\">\n                  Get Started\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* CTA Section */}\n      <div className=\"py-16 px-4\">\n        <div className=\"container mx-auto text-center\">\n          <h2 className=\"text-3xl font-bold text-white mb-4\">\n            Still Need <span className=\"text-otw-gold\">Help</span>?\n          </h2>\n          <p className=\"text-gray-300 mb-8 max-w-2xl mx-auto\">\n            Can't find what you're looking for? Our support team is here to help you get the most out of OTW.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Link href=\"/help\">\n              <Button className=\"bg-gradient-to-r from-otw-gold to-yellow-500 text-black font-semibold px-8 py-3 rounded-full hover:shadow-lg transition-all duration-300\">\n                Contact Support\n              </Button>\n            </Link>\n            <Button variant=\"outline\" className=\"border-2 border-otw-gold text-otw-gold hover:bg-otw-gold hover:text-black px-8 py-3 rounded-full transition-all duration-300\">\n              <Heart className=\"w-5 h-5 mr-2\" />\n              Give Feedback\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/emergency/customer-safety/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/emergency/driver-safety/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/emergency/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Metadata' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":18}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nexport const dynamic = 'force-dynamic';\n\nimport type { Metadata } from 'next';\nimport { Card, CardContent } from '../../components/ui/card';\nimport { Button } from '../../components/ui/button';\nimport { Alert, AlertDescription } from '../../components/ui/alert';\nimport { useState } from 'react';\nimport Link from 'next/link';\nimport {\n  Heart,\n  Phone,\n  AlertTriangle,\n  Shield,\n  Car,\n  MapPin,\n  Clock,\n} from 'lucide-react';\n\nconst emergencyContacts = [\n  {\n    name: 'Emergency Services',\n    number: '911',\n    description: 'For life-threatening emergencies',\n    icon: <Heart className=\"w-6 h-6 text-red-500\" />,\n  },\n  {\n    name: 'OTW Emergency Line',\n    number: '1-800-OTW-HELP',\n    description: '24/7 support for OTW-related emergencies',\n    icon: <Phone className=\"w-6 h-6 text-red-500\" />,\n  },\n  {\n    name: 'Roadside Assistance',\n    number: '1-800-ROAD-HELP',\n    description: 'For vehicle breakdowns and accidents',\n    icon: <Car className=\"w-6 h-6 text-red-500\" />,\n  },\n];\n\nconst safetyResources = [\n  {\n    title: 'Driver Safety',\n    description: 'Essential safety guidelines for drivers',\n    icon: <Shield className=\"w-6 h-6 text-blue-500\" />,\n    link: '/emergency/driver-safety',\n  },\n  {\n    title: 'Customer Safety',\n    description: 'Safety tips for customers',\n    icon: <Shield className=\"w-6 h-6 text-blue-500\" />,\n    link: '/emergency/customer-safety',\n  },\n  {\n    title: 'Emergency Procedures',\n    description: 'Step-by-step emergency response procedures',\n    icon: <AlertTriangle className=\"w-6 h-6 text-yellow-500\" />,\n    link: '/emergency/procedures',\n  },\n];\n\nconst nearbyHospitals = [\n  {\n    name: 'Fort Wayne Police Department',\n    phone: '(260) 427-1222',\n    address: '1 E Main St, Fort Wayne, IN 46802',\n    type: 'police',\n  },\n  {\n    name: 'Fort Wayne Fire Department',\n    phone: '(260) 427-1234',\n    address: '226 E Berry St, Fort Wayne, IN 46802',\n    type: 'fire',\n  },\n  {\n    name: 'Parkview Regional Medical Center',\n    phone: '(260) 266-1000',\n    address: '11109 Parkview Plaza Dr, Fort Wayne, IN 46845',\n    type: 'medical',\n  },\n];\n\nexport default function EmergencyPage() {\n  return (\n    <div className=\"bg-background text-foreground py-8\">\n      <div className=\"container mx-auto px-4 max-w-6xl\">\n        {/* Emergency Alert Banner */}\n        <Alert className=\"mb-4 border-red-500 bg-red-50 text-red-800\">\n          <AlertTriangle className=\"h-4 w-4\" />\n          <AlertDescription className=\"text-lg font-semibold\">\n            If this is a life-threatening emergency, call 911 immediately\n          </AlertDescription>\n        </Alert>\n\n        {/* Hero Section */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"mb-4 text-4xl sm:text-5xl md:text-6xl font-bold\">\n            Emergency Resources\n          </h1>\n          <p className=\"text-xl text-gray-600 mb-4 max-w-3xl mx-auto\"\n          >\n            Quick access to emergency contacts and safety information\n          </p>\n        </div>\n\n        {/* Emergency Contacts Section */}\n        <div className=\"mb-8\">\n          <h2 className=\"mb-4 text-3xl sm:text-4xl md:text-5xl font-bold\">\n            Emergency Contacts\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {emergencyContacts.map((contact) => (\n              <Card key={contact.name} className=\"h-full border-2 border-red-500\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center mb-4\">\n                    {contact.icon}\n                    <h3 className=\"ml-3 text-xl font-semibold\">\n                      {contact.name}\n                    </h3>\n                  </div>\n                  <div className=\"text-2xl font-bold text-red-600 mb-2\">\n                    {contact.number}\n                  </div>\n                  <p className=\"text-gray-600\">\n                    {contact.description}\n                  </p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n\n        {/* Safety Resources Section */}\n        <div className=\"mb-8\">\n          <h2 className=\"mb-4 text-3xl sm:text-4xl md:text-5xl font-bold\">\n            Safety Resources\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {safetyResources.map((resource) => (\n              <Card key={resource.title} className=\"h-full\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center mb-4\">\n                    {resource.icon}\n                    <h3 className=\"ml-3 text-xl font-semibold\">\n                      {resource.title}\n                    </h3>\n                  </div>\n                  <p className=\"text-gray-600 mb-4\">\n                    {resource.description}\n                  </p>\n                  <Button asChild variant=\"outline\">\n                    <Link href={resource.link}>\n                      Learn More\n                    </Link>\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n\n        {/* Nearby Hospitals Section */}\n        <div>\n          <h2 className=\"mb-4 text-3xl sm:text-4xl md:text-5xl font-bold\">\n            Nearby Hospitals\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {nearbyHospitals.map((hospital) => (\n              <Card key={hospital.name} className=\"h-full\">\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-xl font-semibold mb-4\">\n                    {hospital.name}\n                  </h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-start gap-3\">\n                      <MapPin className=\"w-5 h-5 text-gray-500 mt-0.5\" />\n                      <div>\n                        <p className=\"font-medium\">{hospital.address}</p>\n                        <p className=\"text-sm text-gray-500\">{hospital.distance} away</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-3\">\n                      <Phone className=\"w-5 h-5 text-gray-500\" />\n                      <p>{hospital.phone}</p>\n                    </div>\n                    <div className=\"flex items-center gap-3\">\n                      <Clock className=\"w-5 h-5 text-gray-500\" />\n                      <p>24/7 Emergency Care</p>\n                    </div>\n                  </div>\n                  <Button asChild variant=\"outline\" className=\"mt-4 w-full\">\n                    <Link\n                      href={`https://maps.google.com/?q=${encodeURIComponent(hospital.address)}`}\n                      target=\"_blank\"\n                    >\n                      Get Directions\n                    </Link>\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n\n        {/* Additional Information */}\n        <div className=\"mt-8 text-center\">\n          <p className=\"text-lg text-gray-600\">\n            For non-emergency assistance, please visit our{' '}\n            <Link href=\"/help\" className=\"text-blue-600 hover:underline\">\n              Help Center\n            </Link>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/events/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Metadata' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Card' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardContent' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardDescription' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardHeader' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":56},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardTitle' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":58,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":67}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport type { Metadata } from 'next';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../components/ui/card';\nimport { useState, useEffect } from 'react';\nimport {\n  FaSearch,\n  FaCalendarAlt,\n  FaFilter,\n  FaMapMarkerAlt,\n  FaClock,\n  FaTicketAlt,\n} from 'react-icons/fa';\nimport EventCard from '../../components/events/EventCard';\nimport EventFilter from '../../components/events/EventFilter';\nimport EventDetailModal from '../../components/events/EventDetailModal';\nimport RegistrationModal from '../../components/events/RegistrationModal';\n// TODO: Remove static data import - fetch event categories and locations from API instead\nimport type { Event } from '../../types/event';\n\nexport default function EventsPage() {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [selectedLocation, setSelectedLocation] = useState('all');\n  const [timeFrame, setTimeFrame] = useState('upcoming');\n  const [filteredEvents, setFilteredEvents] = useState<Event[]>([]);\n  const [selectedEvent, setSelectedEvent] = useState<Event | null>(null);\n  const [showDetailModal, setShowDetailModal] = useState(false);\n  const [showRegistrationModal, setShowRegistrationModal] = useState(false);\n  const [showFilters, setShowFilters] = useState(false);\n  const [events, setEvents] = useState<Event[]>([]);\n  const [categories, setCategories] = useState<string[]>([]);\n  const [locations, setLocations] = useState<string[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Fetch events data from API\n  useEffect(() => {\n    const fetchEvents = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch('/api/events');\n        if (!response.ok) {\n          throw new Error('Failed to fetch events');\n        }\n        const data = await response.json();\n        const eventsData = data.data || [];\n        setEvents(eventsData);\n\n        // Extract unique categories and locations from events\n        const uniqueCategories = [...new Set(eventsData.map((event: Event) => event.category).filter(Boolean))];\n        const uniqueLocations = [...new Set(eventsData.map((event: Event) => event.location.name).filter(Boolean))];\n\n        setCategories(uniqueCategories as string[]);\n        setLocations(uniqueLocations as string[]);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'An error occurred');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchEvents();\n  }, []);\n\n  // Filter events based on search query, category, location, and time frame\n  useEffect(() => {\n    let filtered = [...events];\n\n    // Filter by search query\n    if (searchQuery) {\n      const query = searchQuery.toLowerCase();\n      filtered = filtered.filter(\n        (event) =>\n          event.title.toLowerCase().includes(query) ||\n          event.description.toLowerCase().includes(query) ||\n          event.location.name.toLowerCase().includes(query),\n      );\n    }\n\n    // Filter by category\n    if (selectedCategory !== 'all') {\n      filtered = filtered.filter(\n        (event) => event.category === selectedCategory,\n      );\n    }\n\n    // Filter by location\n    if (selectedLocation !== 'all') {\n      filtered = filtered.filter(\n        (event) => event.location.id === selectedLocation,\n      );\n    }\n\n    // Filter by time frame\n    const now = new Date();\n    if (timeFrame === 'upcoming') {\n      filtered = filtered.filter((event) => new Date(event.date) >= now);\n    } else if (timeFrame === 'past') {\n      filtered = filtered.filter((event) => new Date(event.date) < now);\n    }\n\n    // Sort by date\n    filtered.sort((a, b) => {\n      const dateA = new Date(a.date);\n      const dateB = new Date(b.date);\n      return timeFrame === 'upcoming'\n        ? dateA.getTime() - dateB.getTime()\n        : dateB.getTime() - dateA.getTime();\n    });\n\n    setFilteredEvents(filtered);\n  }, [events, searchQuery, selectedCategory, selectedLocation, timeFrame]);\n\n  // Handle event selection\n  const handleEventSelect = (event: Event) => {\n    setSelectedEvent(event);\n    setShowDetailModal(true);\n  };\n\n  // Handle registration\n  const handleRegister = (event: Event) => {\n    setSelectedEvent(event);\n    setShowDetailModal(false);\n    setShowRegistrationModal(true);\n  };\n\n  return (\n    <div className=\"min-h-screen pb-20\">\n      {/* Hero Section */}\n      <section className=\"relative h-[40vh] flex items-center justify-center overflow-hidden\">\n        <div className=\"absolute inset-0 z-0 bg-otw-black\">\n          <div className=\"absolute inset-0 bg-gradient-to-r from-otw-black to-transparent opacity-70 z-10\"></div>\n          <div\n            className=\"absolute inset-0 bg-cover bg-center\"\n            style={{ backgroundImage: \"url('/images/events-hero.jpg')\" }}\n          ></div>\n        </div>\n        <div className=\"container mx-auto px-4 z-10 text-center\">\n          <h1 className=\"heading-xl mb-4 text-white gritty-shadow\">\n            Events & Experiences\n          </h1>\n          <p className=\"text-xl text-white/80 max-w-2xl mx-auto\">\n            Join us for exclusive tastings, chef workshops, and special dining\n            experiences.\n          </p>\n        </div>\n      </section>\n\n      {/* Search and Filter Section */}\n      <section className=\"bg-otw-black-900 py-8 sticky top-20 z-30 border-b border-otw-black-800\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center gap-4\">\n            {/* Search Bar */}\n            <div className=\"relative w-full md:w-1/3\">\n              <input\n                type=\"text\"\n                placeholder=\"Search events...\"\n                className=\"input w-full pl-10\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                aria-label=\"Search events\"\n              />\n              <FaSearch className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-otw-gold\" />\n            </div>\n\n            {/* Time Frame Toggle */}\n            <div className=\"flex rounded-full bg-otw-black-800 p-1\">\n              <button\n                className={`px-4 py-2 rounded-full text-sm font-medium transition-colors ${\n                  timeFrame === 'upcoming'\n                    ? 'bg-otw-gold text-otw-black'\n                    : 'text-white hover:bg-otw-black-700'\n                }`}\n                onClick={() => setTimeFrame('upcoming')}\n              >\n                Upcoming\n              </button>\n              <button\n                className={`px-4 py-2 rounded-full text-sm font-medium transition-colors ${\n                  timeFrame === 'past'\n                    ? 'bg-otw-gold text-otw-black'\n                    : 'text-white hover:bg-otw-black-700'\n                }`}\n                onClick={() => setTimeFrame('past')}\n              >\n                Past Events\n              </button>\n            </div>\n\n            {/* Advanced Filters Toggle */}\n            <button\n              className=\"btn-outline flex items-center gap-2\"\n              onClick={() => setShowFilters(!showFilters)}\n              aria-expanded={showFilters}\n              aria-controls=\"advanced-filters\"\n            >\n              <FaFilter /> {showFilters ? 'Hide Filters' : 'Show Filters'}\n            </button>\n          </div>\n\n          {/* Advanced Filters */}\n          {showFilters && (\n            <div\n              id=\"advanced-filters\"\n              className=\"mt-6 p-4 bg-otw-black-800 rounded-lg border border-otw-black-700 animate-fade-in\"\n            >\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {/* Category Filter */}\n                <div>\n                  <h3 className=\"text-sm font-medium mb-3\">Event Type</h3>\n                  <EventFilter\n                    items={categories}\n                    selectedItem={selectedCategory}\n                    setSelectedItem={setSelectedCategory}\n                  />\n                </div>\n\n                {/* Location Filter */}\n                <div>\n                  <h3 className=\"text-sm font-medium mb-3\">Location</h3>\n                  <EventFilter\n                    items={locations}\n                    selectedItem={selectedLocation}\n                    setSelectedItem={setSelectedLocation}\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Featured Event Section (only show for upcoming events) */}\n      {timeFrame === 'upcoming' &&\n        events.filter(\n          (event) => event.featured && new Date(event.date) >= new Date(),\n        ).length > 0 && (\n          <section className=\"py-12 bg-otw-black\">\n            <div className=\"container mx-auto px-4\">\n              <h2 className=\"text-2xl font-bold mb-8 text-center text-otw-gold\">\n                Featured Event\n              </h2>\n\n              {events\n                .filter(\n                  (event) =>\n                    event.featured && new Date(event.date) >= new Date(),\n                )\n                .slice(0, 1)\n                .map((event) => (\n                  <div\n                    key={event.id}\n                    className=\"bg-gradient-to-r from-otw-black-800 to-otw-black-900 rounded-lg overflow-hidden shadow-lg border border-otw-gold\"\n                  >\n                    <div className=\"grid grid-cols-1 md:grid-cols-2\">\n                      <div\n                        className=\"h-64 md:h-auto bg-cover bg-center\"\n                        style={{ backgroundImage: `url(${event.image})` }}\n                      ></div>\n                      <div className=\"p-6 md:p-8 flex flex-col justify-between\">\n                        <div>\n                          <div className=\"flex flex-wrap gap-2 mb-3\">\n                            <span className=\"bg-otw-gold text-otw-black text-xs font-bold px-3 py-1 rounded-full\">\n                              FEATURED\n                            </span>\n                            <span className=\"bg-otw-black-700 text-white text-xs px-3 py-1 rounded-full\">\n                              {event.category || 'Event'}\n                            </span>\n                          </div>\n                          <h3 className=\"text-2xl font-bold mb-2\">\n                            {event.title}\n                          </h3>\n                          <div className=\"flex items-center text-white/70 mb-2\">\n                            <FaCalendarAlt className=\"mr-2 text-otw-gold\" />\n                            <span>\n                              {new Date(event.date).toLocaleDateString(\n                                'en-US',\n                                {\n                                  weekday: 'long',\n                                  month: 'long',\n                                  day: 'numeric',\n                                  year: 'numeric',\n                                },\n                              )}\n                            </span>\n                          </div>\n                          <div className=\"flex items-center text-white/70 mb-2\">\n                            <FaClock className=\"mr-2 text-otw-gold\" />\n                            <span>{event.time}</span>\n                          </div>\n                          <div className=\"flex items-center text-white/70 mb-4\">\n                            <FaMapMarkerAlt className=\"mr-2 text-otw-gold\" />\n                            <span>{event.location.name}</span>\n                          </div>\n                          <p className=\"text-white/80 mb-6\">\n                            {event.description.substring(0, 150)}...\n                          </p>\n                        </div>\n                        <div className=\"flex flex-col sm:flex-row gap-3\">\n                          <button\n                            className=\"btn-primary flex items-center justify-center gap-2\"\n                            onClick={() => handleRegister(event)}\n                          >\n                            <FaTicketAlt /> Register Now\n                          </button>\n                          <button\n                            className=\"btn-outline flex items-center justify-center gap-2\"\n                            onClick={() => handleEventSelect(event)}\n                          >\n                            Learn More\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n            </div>\n          </section>\n        )}\n\n      {/* Events Grid Section */}\n      <section className=\"py-12\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex justify-between items-center mb-8\">\n            <h2 className=\"text-2xl font-bold\">\n              {timeFrame === 'upcoming' ? 'Upcoming Events' : 'Past Events'}\n            </h2>\n            <div className=\"text-sm text-white/70\">\n              {filteredEvents.length}{' '}\n              {filteredEvents.length === 1 ? 'Event' : 'Events'} Found\n            </div>\n          </div>\n\n          {loading ? (\n            <div className=\"flex justify-center items-center py-12\">\n              <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-otw-gold\"></div>\n            </div>\n          ) : error ? (\n            <div className=\"text-center py-12\">\n              <p className=\"text-otw-red mb-4\">{error}</p>\n              <button\n                onClick={() => window.location.reload()}\n                className=\"btn-primary\"\n              >\n                Try Again\n              </button>\n            </div>\n          ) : filteredEvents.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredEvents.map((event) => (\n                <EventCard\n                  key={event.id}\n                  event={event}\n                  onSelect={handleEventSelect}\n                  onRegister={handleRegister}\n                  categoryName={event.category || ''}\n                  isPast={timeFrame === 'past'}\n                />\n              ))}\n            </div>\n          ) : (\n            <div className=\"bg-otw-black-800 rounded-lg p-8 text-center\">\n              <FaCalendarAlt className=\"text-4xl text-otw-gold mx-auto mb-4\" />\n              <h3 className=\"text-xl font-bold mb-2 text-otw-gold\">No Events Found</h3>\n              <p className=\"text-white/70 mb-4\">\n                We couldn&apos;t find any events matching your search criteria.\n              </p>\n              <button\n                className=\"btn-primary\"\n                onClick={() => {\n                  setSearchQuery('');\n                  setSelectedCategory('all');\n                  setSelectedLocation('all');\n                }}\n              >\n                Reset Filters\n              </button>\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Host Your Own Event Section */}\n      <section className=\"py-16 bg-otw-black relative\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-otw-gold/20 to-otw-red/20 opacity-50\"></div>\n        <div className=\"container mx-auto px-4 relative z-10\">\n          <div className=\"max-w-3xl mx-auto text-center\">\n            <h2 className=\"heading-lg mb-4 gritty-shadow text-otw-gold\">\n              Host Your Own Event\n            </h2>\n            <p className=\"text-white/80 mb-8\">\n              Looking for a unique venue for your next private event?\n              Broski&apos;s Kitchen offers custom catering and private dining\n              experiences for corporate events, birthdays, anniversaries, and\n              more.\n            </p>\n            <div className=\"flex flex-col sm:flex-row justify-center gap-4\">\n              <a href=\"/private-events\" className=\"btn-primary\">\n                Private Events\n              </a>\n              <a href=\"/catering\" className=\"btn-outline\">\n                Catering Services\n              </a>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Event Newsletter Section */}\n      <section className=\"py-12 bg-otw-black-900\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-2xl mx-auto text-center\">\n            <h2 className=\"text-2xl font-bold mb-4 text-otw-gold\">Stay Updated</h2>\n            <p className=\"text-white/80 mb-6\">\n              Subscribe to our newsletter to get notified about upcoming events\n              and exclusive offers.\n            </p>\n            <form className=\"flex flex-col sm:flex-row gap-3\">\n              <input\n                type=\"email\"\n                placeholder=\"Your email address\"\n                className=\"input flex-grow\"\n                aria-label=\"Email address\"\n              />\n              <button type=\"submit\" className=\"btn-primary whitespace-nowrap\">\n                Subscribe\n              </button>\n            </form>\n          </div>\n        </div>\n      </section>\n\n      {/* Event Detail Modal */}\n      {selectedEvent && showDetailModal && (\n        <EventDetailModal\n          event={selectedEvent}\n          categoryName={selectedEvent.category || ''}\n          onClose={() => setShowDetailModal(false)}\n          onRegister={() => {\n            setShowDetailModal(false);\n            setShowRegistrationModal(true);\n          }}\n        />\n      )}\n\n      {/* Registration Modal */}\n      {selectedEvent && showRegistrationModal && (\n        <RegistrationModal\n          event={selectedEvent}\n          onClose={() => setShowRegistrationModal(false)}\n        />\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/forgot-password/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1122,1125],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1122,1125],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":53,"column":44,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1710,1807],"text":"\n            Enter your email address and we&apos;ll send you a link to reset your password\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1710,1807],"text":"\n            Enter your email address and we&lsquo;ll send you a link to reset your password\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1710,1807],"text":"\n            Enter your email address and we&#39;ll send you a link to reset your password\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1710,1807],"text":"\n            Enter your email address and we&rsquo;ll send you a link to reset your password\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nexport const dynamic = 'force-dynamic';\n\nimport { useState } from 'react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport Link from 'next/link';\nimport { Button } from '../../components/ui/button';\nimport { Input } from '../../components/ui/input';\nimport { Label } from '../../components/ui/label';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '../../components/ui/card';\nimport { Alert, AlertDescription } from '../../components/ui/alert';\nimport { Loader2, ArrowLeft } from 'lucide-react';\n\nexport default function ForgotPasswordPage() {\n  const [email, setEmail] = useState('');\n  const [message, setMessage] = useState('');\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const { resetPassword } = useAuth();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n    setMessage('');\n    setIsLoading(true);\n\n    try {\n      await resetPassword(email);\n      setMessage('Check your email for password reset instructions.');\n    } catch (err: any) {\n      setError(err.message || 'Failed to send reset email');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-otw-black via-gray-900 to-otw-black flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md bg-white/10 backdrop-blur-md border-otw-gold/20\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl font-bold text-center text-white\">\n            Reset Password\n          </CardTitle>\n          <CardDescription className=\"text-center text-gray-300\">\n            Enter your email address and we'll send you a link to reset your password\n          </CardDescription>\n        </CardHeader>\n        <form onSubmit={handleSubmit}>\n          <CardContent className=\"space-y-4\">\n            {error && (\n              <Alert variant=\"destructive\" className=\"bg-red-500/10 border-red-500/20\">\n                <AlertDescription className=\"text-red-300\">{error}</AlertDescription>\n              </Alert>\n            )}\n            {message && (\n              <Alert className=\"bg-green-500/10 border-green-500/20\">\n                <AlertDescription className=\"text-green-300\">{message}</AlertDescription>\n              </Alert>\n            )}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\" className=\"text-white\">\n                Email\n              </Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n                className=\"bg-white/10 border-otw-gold/20 text-white placeholder:text-gray-400 focus:border-otw-gold\"\n              />\n            </div>\n          </CardContent>\n          <CardFooter className=\"flex flex-col space-y-4\">\n            <Button\n              type=\"submit\"\n              className=\"w-full bg-otw-gold hover:bg-otw-gold/90 text-black font-semibold\"\n              disabled={isLoading}\n            >\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Sending...\n                </>\n              ) : (\n                'Send Reset Email'\n              )}\n            </Button>\n            <Link\n              href=\"/signin\"\n              className=\"flex items-center justify-center text-sm text-otw-gold hover:underline\"\n            >\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Back to Sign In\n            </Link>\n          </CardFooter>\n        </form>\n      </Card>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/hall-of-hustle/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Metadata' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Badge' is defined but never used. Allowed unused vars must match /^_/u.","line":14,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Dialog' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogContent' is defined but never used. Allowed unused vars must match /^_/u.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogDescription' is defined but never used. Allowed unused vars must match /^_/u.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogHeader' is defined but never used. Allowed unused vars must match /^_/u.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogTitle' is defined but never used. Allowed unused vars must match /^_/u.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogTrigger' is defined but never used. Allowed unused vars must match /^_/u.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Progress' is defined but never used. Allowed unused vars must match /^_/u.","line":25,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleCategoryChange' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":111,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":111,"endColumn":29},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":190,"column":21,"nodeType":"JSXOpeningElement","endLine":194,"endColumn":23}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nexport const dynamic = 'force-dynamic';\n\nimport type { Metadata } from 'next';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from '../../components/ui/card';\nimport { Button } from '../../components/ui/button';\nimport { Badge } from '../../components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../../components/ui/tabs';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '../../components/ui/dialog';\nimport { Avatar, AvatarFallback, AvatarImage } from '../../components/ui/avatar';\nimport { Progress } from '../../components/ui/progress';\nimport { useState } from 'react';\nimport type React from 'react';\n\nimport Link from 'next/link';\nimport { Trophy, Star, Truck, Utensils, Store } from 'lucide-react';\n\nconst topPerformers = [\n  {\n    name: 'Alex Johnson',\n    role: 'Delivery Driver',\n    image: '/assets/driver1.jpg',\n    achievements: [\n      '1000+ deliveries completed',\n      '98% customer satisfaction',\n      'Top rated driver 3 months in a row',\n    ],\n    stats: {\n      deliveries: '1,234',\n      rating: '4.9',\n      hours: '2,500+',\n    },\n  },\n  {\n    name: 'Maria Garcia',\n    role: 'Restaurant Partner',\n    image: '/assets/restaurant1.jpg',\n    achievements: [\n      'Highest rated restaurant in downtown',\n      '500+ orders per week',\n      'Featured in local food magazine',\n    ],\n    stats: {\n      deliveries: '8,567',\n      rating: '4.8',\n      hours: '1,800+',\n    },\n  },\n  {\n    name: 'David Chen',\n    role: 'Store Manager',\n    image: '/assets/store1.jpg',\n    achievements: [\n      'Best customer service award',\n      'Increased store revenue by 40%',\n      'Mentored 15+ new employees',\n    ],\n    stats: {\n      deliveries: '3,421',\n      rating: '4.9',\n      hours: '3,200+',\n    },\n  },\n];\n\nconst successStories = [\n  {\n    title: 'From Student to Top Earner',\n    description: 'How Sarah turned her part-time delivery job into a full-time career',\n    image: '/assets/success1.jpg',\n    category: 'driver',\n  },\n  {\n    title: 'Restaurant Revival',\n    description: \"How Tony's Pizza doubled their revenue with our platform\",\n    image: '/assets/success2.jpg',\n    category: 'restaurant',\n  },\n  {\n    title: 'Community Impact',\n    description: 'Local store creates 20 new jobs through delivery expansion',\n    image: '/assets/success3.jpg',\n    category: 'retail',\n  },\n];\n\nconst categories = [\n  { label: 'All', icon: <Trophy /> },\n  { label: 'Drivers', icon: <Truck /> },\n  { label: 'Restaurants', icon: <Utensils /> },\n  { label: 'Retail', icon: <Store /> },\n];\n\nexport default function HallOfHustlePage() {\n  const [selectedCategory, setSelectedCategory] = useState(0);\n\n  const handleCategoryChange = (\n    event: React.SyntheticEvent,\n    newValue: number,\n  ) => {\n    setSelectedCategory(newValue);\n  };\n\n  return (\n    <div className=\"container mx-auto py-8 px-4\">\n      <div className=\"text-center mb-8\">\n        <h1 className=\"mb-4 text-4xl sm:text-5xl md:text-6xl font-extrabold bg-gradient-to-r from-orange-500 to-yellow-500 bg-clip-text text-transparent\">\n          Hall of Hustle\n        </h1>\n        <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n          Celebrating our top performers and success stories\n        </p>\n      </div>\n\n      {/* Top Performers Section */}\n      <div className=\"mb-12\">\n        <h2 className=\"mb-6 text-center text-2xl sm:text-3xl md:text-4xl font-bold\">\n          Top Performers\n        </h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          {topPerformers.map((performer) => (\n            <Card key={performer.name} className=\"h-full\">\n              <CardHeader className=\"text-center\">\n                <Avatar className=\"w-20 h-20 mx-auto mb-4\">\n                  <AvatarImage src={performer.image} alt={performer.name} />\n                  <AvatarFallback>{performer.name.split(' ').map(n => n[0]).join('')}</AvatarFallback>\n                </Avatar>\n                <CardTitle>{performer.name}</CardTitle>\n                <CardDescription>{performer.role}</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"mb-4\">\n                  <h4 className=\"font-semibold mb-2\">Achievements:</h4>\n                  <ul className=\"text-sm text-gray-600 space-y-1\">\n                    {performer.achievements.map((achievement) => (\n                      <li key={achievement} className=\"flex items-center\">\n                        <Star className=\"w-4 h-4 text-yellow-500 mr-2\" />\n                        {achievement}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n                <div className=\"grid grid-cols-3 gap-2 text-center\">\n                  {Object.entries(performer.stats).map(([key, value]) => (\n                    <div key={key} className=\"p-2 bg-gray-50 rounded\">\n                      <div className=\"font-bold text-lg\">{value}</div>\n                      <div className=\"text-xs text-gray-600 capitalize\">{key}</div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n\n      {/* Success Stories Section */}\n      <div className=\"mb-12\">\n        <h2 className=\"mb-6 text-center text-2xl sm:text-3xl md:text-4xl font-bold\">\n          Success Stories\n        </h2>\n        <div className=\"mb-6\">\n          <Tabs value={selectedCategory.toString()} onValueChange={(value) => setSelectedCategory(parseInt(value))} className=\"mb-4\">\n            <TabsList className=\"grid w-full grid-cols-4\">\n              {categories.map((category, index) => (\n                <TabsTrigger key={category.label} value={index.toString()} className=\"flex items-center gap-2\">\n                  {category.icon}\n                  {category.label}\n                </TabsTrigger>\n              ))}\n            </TabsList>\n            <TabsContent value={selectedCategory.toString()}>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                {successStories.map((story) => (\n                  <Card key={story.title} className=\"h-full flex flex-col\">\n                    <img\n                      src={story.image}\n                      alt={story.title}\n                      className=\"w-full h-48 object-cover\"\n                    />\n                    <CardContent className=\"flex-grow\">\n                      <h3 className=\"mb-2 text-xl font-semibold\">\n                        {story.title}\n                      </h3>\n                      <p className=\"text-gray-600 mb-4\">\n                        {story.description}\n                      </p>\n                      <Button asChild>\n                        <Link href={`/hall-of-hustle/stories/${story.title.toLowerCase().replace(/\\s+/g, '-')}`}>\n                          Read More\n                        </Link>\n                      </Button>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n\n      {/* CTA Section */}\n      <div className=\"text-center p-8 bg-orange-500 text-white rounded-lg\">\n        <h3 className=\"mb-4 text-3xl font-bold\">\n          Be Part of the Success\n        </h3>\n        <p className=\"mb-6 text-lg opacity-90\">\n          Join our community and create your own success story\n        </p>\n        <Button asChild size=\"lg\">\n          <Link href=\"/signup\">\n            Get Started\n          </Link>\n        </Button>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/help/page.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":64,"column":57,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1970,2268],"text":"\n                      To place an order, simply browse our restaurants or\n                      services, select the items you want, add them to your\n                      cart, and proceed to checkout. You&apos;ll need to be logged in\n                      to complete your order.\n                    "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1970,2268],"text":"\n                      To place an order, simply browse our restaurants or\n                      services, select the items you want, add them to your\n                      cart, and proceed to checkout. You&lsquo;ll need to be logged in\n                      to complete your order.\n                    "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1970,2268],"text":"\n                      To place an order, simply browse our restaurants or\n                      services, select the items you want, add them to your\n                      cart, and proceed to checkout. You&#39;ll need to be logged in\n                      to complete your order.\n                    "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1970,2268],"text":"\n                      To place an order, simply browse our restaurants or\n                      services, select the items you want, add them to your\n                      cart, and proceed to checkout. You&rsquo;ll need to be logged in\n                      to complete your order.\n                    "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":87,"column":45,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[3142,3456],"text":"\n                      Once your order is confirmed, you can track it in\n                      real-time through the &quot;Track\" page. You'll receive updates\n                      via email, SMS, or push notifications (depending on your\n                      preferences) as your order progresses.\n                    "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[3142,3456],"text":"\n                      Once your order is confirmed, you can track it in\n                      real-time through the &ldquo;Track\" page. You'll receive updates\n                      via email, SMS, or push notifications (depending on your\n                      preferences) as your order progresses.\n                    "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[3142,3456],"text":"\n                      Once your order is confirmed, you can track it in\n                      real-time through the &#34;Track\" page. You'll receive updates\n                      via email, SMS, or push notifications (depending on your\n                      preferences) as your order progresses.\n                    "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[3142,3456],"text":"\n                      Once your order is confirmed, you can track it in\n                      real-time through the &rdquo;Track\" page. You'll receive updates\n                      via email, SMS, or push notifications (depending on your\n                      preferences) as your order progresses.\n                    "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":87,"column":51,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[3142,3456],"text":"\n                      Once your order is confirmed, you can track it in\n                      real-time through the \"Track&quot; page. You'll receive updates\n                      via email, SMS, or push notifications (depending on your\n                      preferences) as your order progresses.\n                    "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[3142,3456],"text":"\n                      Once your order is confirmed, you can track it in\n                      real-time through the \"Track&ldquo; page. You'll receive updates\n                      via email, SMS, or push notifications (depending on your\n                      preferences) as your order progresses.\n                    "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[3142,3456],"text":"\n                      Once your order is confirmed, you can track it in\n                      real-time through the \"Track&#34; page. You'll receive updates\n                      via email, SMS, or push notifications (depending on your\n                      preferences) as your order progresses.\n                    "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[3142,3456],"text":"\n                      Once your order is confirmed, you can track it in\n                      real-time through the \"Track&rdquo; page. You'll receive updates\n                      via email, SMS, or push notifications (depending on your\n                      preferences) as your order progresses.\n                    "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":87,"column":62,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3142,3456],"text":"\n                      Once your order is confirmed, you can track it in\n                      real-time through the \"Track\" page. You&apos;ll receive updates\n                      via email, SMS, or push notifications (depending on your\n                      preferences) as your order progresses.\n                    "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3142,3456],"text":"\n                      Once your order is confirmed, you can track it in\n                      real-time through the \"Track\" page. You&lsquo;ll receive updates\n                      via email, SMS, or push notifications (depending on your\n                      preferences) as your order progresses.\n                    "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3142,3456],"text":"\n                      Once your order is confirmed, you can track it in\n                      real-time through the \"Track\" page. You&#39;ll receive updates\n                      via email, SMS, or push notifications (depending on your\n                      preferences) as your order progresses.\n                    "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3142,3456],"text":"\n                      Once your order is confirmed, you can track it in\n                      real-time through the \"Track\" page. You&rsquo;ll receive updates\n                      via email, SMS, or push notifications (depending on your\n                      preferences) as your order progresses.\n                    "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":111,"column":68,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[4327,4625],"text":"\n                      You can cancel your order within 5 minutes of placing it\n                      by going to your order history and selecting &quot;Cancel\n                      Order.\" After this window, please contact our customer\n                      support for assistance.\n                    "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[4327,4625],"text":"\n                      You can cancel your order within 5 minutes of placing it\n                      by going to your order history and selecting &ldquo;Cancel\n                      Order.\" After this window, please contact our customer\n                      support for assistance.\n                    "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[4327,4625],"text":"\n                      You can cancel your order within 5 minutes of placing it\n                      by going to your order history and selecting &#34;Cancel\n                      Order.\" After this window, please contact our customer\n                      support for assistance.\n                    "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[4327,4625],"text":"\n                      You can cancel your order within 5 minutes of placing it\n                      by going to your order history and selecting &rdquo;Cancel\n                      Order.\" After this window, please contact our customer\n                      support for assistance.\n                    "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":112,"column":29,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[4327,4625],"text":"\n                      You can cancel your order within 5 minutes of placing it\n                      by going to your order history and selecting \"Cancel\n                      Order.&quot; After this window, please contact our customer\n                      support for assistance.\n                    "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[4327,4625],"text":"\n                      You can cancel your order within 5 minutes of placing it\n                      by going to your order history and selecting \"Cancel\n                      Order.&ldquo; After this window, please contact our customer\n                      support for assistance.\n                    "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[4327,4625],"text":"\n                      You can cancel your order within 5 minutes of placing it\n                      by going to your order history and selecting \"Cancel\n                      Order.&#34; After this window, please contact our customer\n                      support for assistance.\n                    "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[4327,4625],"text":"\n                      You can cancel your order within 5 minutes of placing it\n                      by going to your order history and selecting \"Cancel\n                      Order.&rdquo; After this window, please contact our customer\n                      support for assistance.\n                    "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":135,"column":62,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[5547,5932],"text":"\n                      To become a delivery driver, visit our &quot;Become a Driver\"\n                      page and fill out the application form. You'll need to\n                      provide some personal information, vehicle details, and\n                      undergo a background check. Once approved, you can start\n                      accepting delivery requests.\n                    "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[5547,5932],"text":"\n                      To become a delivery driver, visit our &ldquo;Become a Driver\"\n                      page and fill out the application form. You'll need to\n                      provide some personal information, vehicle details, and\n                      undergo a background check. Once approved, you can start\n                      accepting delivery requests.\n                    "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[5547,5932],"text":"\n                      To become a delivery driver, visit our &#34;Become a Driver\"\n                      page and fill out the application form. You'll need to\n                      provide some personal information, vehicle details, and\n                      undergo a background check. Once approved, you can start\n                      accepting delivery requests.\n                    "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[5547,5932],"text":"\n                      To become a delivery driver, visit our &rdquo;Become a Driver\"\n                      page and fill out the application form. You'll need to\n                      provide some personal information, vehicle details, and\n                      undergo a background check. Once approved, you can start\n                      accepting delivery requests.\n                    "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":135,"column":78,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[5547,5932],"text":"\n                      To become a delivery driver, visit our \"Become a Driver&quot;\n                      page and fill out the application form. You'll need to\n                      provide some personal information, vehicle details, and\n                      undergo a background check. Once approved, you can start\n                      accepting delivery requests.\n                    "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[5547,5932],"text":"\n                      To become a delivery driver, visit our \"Become a Driver&ldquo;\n                      page and fill out the application form. You'll need to\n                      provide some personal information, vehicle details, and\n                      undergo a background check. Once approved, you can start\n                      accepting delivery requests.\n                    "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[5547,5932],"text":"\n                      To become a delivery driver, visit our \"Become a Driver&#34;\n                      page and fill out the application form. You'll need to\n                      provide some personal information, vehicle details, and\n                      undergo a background check. Once approved, you can start\n                      accepting delivery requests.\n                    "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[5547,5932],"text":"\n                      To become a delivery driver, visit our \"Become a Driver&rdquo;\n                      page and fill out the application form. You'll need to\n                      provide some personal information, vehicle details, and\n                      undergo a background check. Once approved, you can start\n                      accepting delivery requests.\n                    "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":136,"column":66,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[5547,5932],"text":"\n                      To become a delivery driver, visit our \"Become a Driver\"\n                      page and fill out the application form. You&apos;ll need to\n                      provide some personal information, vehicle details, and\n                      undergo a background check. Once approved, you can start\n                      accepting delivery requests.\n                    "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[5547,5932],"text":"\n                      To become a delivery driver, visit our \"Become a Driver\"\n                      page and fill out the application form. You&lsquo;ll need to\n                      provide some personal information, vehicle details, and\n                      undergo a background check. Once approved, you can start\n                      accepting delivery requests.\n                    "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[5547,5932],"text":"\n                      To become a delivery driver, visit our \"Become a Driver\"\n                      page and fill out the application form. You&#39;ll need to\n                      provide some personal information, vehicle details, and\n                      undergo a background check. Once approved, you can start\n                      accepting delivery requests.\n                    "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[5547,5932],"text":"\n                      To become a delivery driver, visit our \"Become a Driver\"\n                      page and fill out the application form. You&rsquo;ll need to\n                      provide some personal information, vehicle details, and\n                      undergo a background check. Once approved, you can start\n                      accepting delivery requests.\n                    "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":145,"column":36,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[6075,6158],"text":"\n                      What if there&apos;s an issue with my order?\n                    "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[6075,6158],"text":"\n                      What if there&lsquo;s an issue with my order?\n                    "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[6075,6158],"text":"\n                      What if there&#39;s an issue with my order?\n                    "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[6075,6158],"text":"\n                      What if there&rsquo;s an issue with my order?\n                    "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":148,"column":31,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[6216,6606],"text":"\n                      If there&apos;s an issue with your order, you can report it\n                      through the app or website by going to your order history\n                      and selecting \"Report Issue.\" Our customer support team\n                      will assist you promptly. You can also contact us directly\n                      through the \"Contact Us\" page.\n                    "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[6216,6606],"text":"\n                      If there&lsquo;s an issue with your order, you can report it\n                      through the app or website by going to your order history\n                      and selecting \"Report Issue.\" Our customer support team\n                      will assist you promptly. You can also contact us directly\n                      through the \"Contact Us\" page.\n                    "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[6216,6606],"text":"\n                      If there&#39;s an issue with your order, you can report it\n                      through the app or website by going to your order history\n                      and selecting \"Report Issue.\" Our customer support team\n                      will assist you promptly. You can also contact us directly\n                      through the \"Contact Us\" page.\n                    "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[6216,6606],"text":"\n                      If there&rsquo;s an issue with your order, you can report it\n                      through the app or website by going to your order history\n                      and selecting \"Report Issue.\" Our customer support team\n                      will assist you promptly. You can also contact us directly\n                      through the \"Contact Us\" page.\n                    "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":150,"column":37,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6216,6606],"text":"\n                      If there's an issue with your order, you can report it\n                      through the app or website by going to your order history\n                      and selecting &quot;Report Issue.\" Our customer support team\n                      will assist you promptly. You can also contact us directly\n                      through the \"Contact Us\" page.\n                    "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6216,6606],"text":"\n                      If there's an issue with your order, you can report it\n                      through the app or website by going to your order history\n                      and selecting &ldquo;Report Issue.\" Our customer support team\n                      will assist you promptly. You can also contact us directly\n                      through the \"Contact Us\" page.\n                    "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6216,6606],"text":"\n                      If there's an issue with your order, you can report it\n                      through the app or website by going to your order history\n                      and selecting &#34;Report Issue.\" Our customer support team\n                      will assist you promptly. You can also contact us directly\n                      through the \"Contact Us\" page.\n                    "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6216,6606],"text":"\n                      If there's an issue with your order, you can report it\n                      through the app or website by going to your order history\n                      and selecting &rdquo;Report Issue.\" Our customer support team\n                      will assist you promptly. You can also contact us directly\n                      through the \"Contact Us\" page.\n                    "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":150,"column":51,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6216,6606],"text":"\n                      If there's an issue with your order, you can report it\n                      through the app or website by going to your order history\n                      and selecting \"Report Issue.&quot; Our customer support team\n                      will assist you promptly. You can also contact us directly\n                      through the \"Contact Us\" page.\n                    "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6216,6606],"text":"\n                      If there's an issue with your order, you can report it\n                      through the app or website by going to your order history\n                      and selecting \"Report Issue.&ldquo; Our customer support team\n                      will assist you promptly. You can also contact us directly\n                      through the \"Contact Us\" page.\n                    "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6216,6606],"text":"\n                      If there's an issue with your order, you can report it\n                      through the app or website by going to your order history\n                      and selecting \"Report Issue.&#34; Our customer support team\n                      will assist you promptly. You can also contact us directly\n                      through the \"Contact Us\" page.\n                    "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6216,6606],"text":"\n                      If there's an issue with your order, you can report it\n                      through the app or website by going to your order history\n                      and selecting \"Report Issue.&rdquo; Our customer support team\n                      will assist you promptly. You can also contact us directly\n                      through the \"Contact Us\" page.\n                    "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":152,"column":35,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6216,6606],"text":"\n                      If there's an issue with your order, you can report it\n                      through the app or website by going to your order history\n                      and selecting \"Report Issue.\" Our customer support team\n                      will assist you promptly. You can also contact us directly\n                      through the &quot;Contact Us\" page.\n                    "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6216,6606],"text":"\n                      If there's an issue with your order, you can report it\n                      through the app or website by going to your order history\n                      and selecting \"Report Issue.\" Our customer support team\n                      will assist you promptly. You can also contact us directly\n                      through the &ldquo;Contact Us\" page.\n                    "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6216,6606],"text":"\n                      If there's an issue with your order, you can report it\n                      through the app or website by going to your order history\n                      and selecting \"Report Issue.\" Our customer support team\n                      will assist you promptly. You can also contact us directly\n                      through the &#34;Contact Us\" page.\n                    "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6216,6606],"text":"\n                      If there's an issue with your order, you can report it\n                      through the app or website by going to your order history\n                      and selecting \"Report Issue.\" Our customer support team\n                      will assist you promptly. You can also contact us directly\n                      through the &rdquo;Contact Us\" page.\n                    "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":152,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6216,6606],"text":"\n                      If there's an issue with your order, you can report it\n                      through the app or website by going to your order history\n                      and selecting \"Report Issue.\" Our customer support team\n                      will assist you promptly. You can also contact us directly\n                      through the \"Contact Us&quot; page.\n                    "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6216,6606],"text":"\n                      If there's an issue with your order, you can report it\n                      through the app or website by going to your order history\n                      and selecting \"Report Issue.\" Our customer support team\n                      will assist you promptly. You can also contact us directly\n                      through the \"Contact Us&ldquo; page.\n                    "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6216,6606],"text":"\n                      If there's an issue with your order, you can report it\n                      through the app or website by going to your order history\n                      and selecting \"Report Issue.\" Our customer support team\n                      will assist you promptly. You can also contact us directly\n                      through the \"Contact Us&#34; page.\n                    "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6216,6606],"text":"\n                      If there's an issue with your order, you can report it\n                      through the app or website by going to your order history\n                      and selecting \"Report Issue.\" Our customer support team\n                      will assist you promptly. You can also contact us directly\n                      through the \"Contact Us&rdquo; page.\n                    "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":165,"column":49,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[6970,7094],"text":"\n                  Fill out the form below and we&apos;ll get back to you as soon as\n                  possible.\n                "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[6970,7094],"text":"\n                  Fill out the form below and we&lsquo;ll get back to you as soon as\n                  possible.\n                "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[6970,7094],"text":"\n                  Fill out the form below and we&#39;ll get back to you as soon as\n                  possible.\n                "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[6970,7094],"text":"\n                  Fill out the form below and we&rsquo;ll get back to you as soon as\n                  possible.\n                "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from '../../components/ui/accordion';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from '../../components/ui/card';\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from '../../components/ui/tabs';\nimport { Button } from '../../components/ui/button';\nimport { Input } from '../../components/ui/input';\nimport { Textarea } from '../../components/ui/textarea';\nimport { Label } from '../../components/ui/label';\n\nexport const dynamic = 'force-dynamic';\n\nexport default function HelpPage() {\n  return (\n    <div className=\"container mx-auto py-10\">\n      <div className=\"flex flex-col space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Help & Support</h1>\n          <p className=\"text-muted-foreground\">\n            Find answers to common questions or contact our support team.\n          </p>\n        </div>\n\n        <Tabs defaultValue=\"faq\" className=\"w-full\">\n          <TabsList className=\"grid w-full md:w-auto grid-cols-3\">\n            <TabsTrigger value=\"faq\">FAQ</TabsTrigger>\n            <TabsTrigger value=\"contact\">Contact Us</TabsTrigger>\n            <TabsTrigger value=\"guides\">Guides</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"faq\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Frequently Asked Questions</CardTitle>\n                <CardDescription>\n                  Find answers to the most common questions about our services.\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Accordion type=\"single\" collapsible className=\"w-full\">\n                  <AccordionItem value=\"item-1\">\n                    <AccordionTrigger>\n                      How do I place an order?\n                    </AccordionTrigger>\n                    <AccordionContent>\n                      To place an order, simply browse our restaurants or\n                      services, select the items you want, add them to your\n                      cart, and proceed to checkout. You'll need to be logged in\n                      to complete your order.\n                    </AccordionContent>\n                  </AccordionItem>\n\n                  <AccordionItem value=\"item-2\">\n                    <AccordionTrigger>\n                      What are the delivery hours?\n                    </AccordionTrigger>\n                    <AccordionContent>\n                      Our delivery hours vary by location and service type.\n                      Generally, we offer delivery from 8 AM to 10 PM, but some\n                      areas may have extended hours. You can check the specific\n                      hours for your location during the checkout process.\n                    </AccordionContent>\n                  </AccordionItem>\n\n                  <AccordionItem value=\"item-3\">\n                    <AccordionTrigger>\n                      How do I track my order?\n                    </AccordionTrigger>\n                    <AccordionContent>\n                      Once your order is confirmed, you can track it in\n                      real-time through the \"Track\" page. You'll receive updates\n                      via email, SMS, or push notifications (depending on your\n                      preferences) as your order progresses.\n                    </AccordionContent>\n                  </AccordionItem>\n\n                  <AccordionItem value=\"item-4\">\n                    <AccordionTrigger>\n                      What payment methods do you accept?\n                    </AccordionTrigger>\n                    <AccordionContent>\n                      We accept all major credit and debit cards, including\n                      Visa, Mastercard, American Express, and Discover. We also\n                      support digital wallets like Apple Pay and Google Pay, as\n                      well as cash on delivery in select areas.\n                    </AccordionContent>\n                  </AccordionItem>\n\n                  <AccordionItem value=\"item-5\">\n                    <AccordionTrigger>\n                      How do I cancel my order?\n                    </AccordionTrigger>\n                    <AccordionContent>\n                      You can cancel your order within 5 minutes of placing it\n                      by going to your order history and selecting \"Cancel\n                      Order.\" After this window, please contact our customer\n                      support for assistance.\n                    </AccordionContent>\n                  </AccordionItem>\n\n                  <AccordionItem value=\"item-6\">\n                    <AccordionTrigger>\n                      What is the OTW Loyalty Program?\n                    </AccordionTrigger>\n                    <AccordionContent>\n                      The OTW Loyalty Program rewards you for using our\n                      services. You earn points on every order, which can be\n                      redeemed for discounts, free delivery, exclusive offers,\n                      and more. Visit the Loyalty page to learn more about tiers\n                      and benefits.\n                    </AccordionContent>\n                  </AccordionItem>\n\n                  <AccordionItem value=\"item-7\">\n                    <AccordionTrigger>\n                      How do I become a delivery driver?\n                    </AccordionTrigger>\n                    <AccordionContent>\n                      To become a delivery driver, visit our \"Become a Driver\"\n                      page and fill out the application form. You'll need to\n                      provide some personal information, vehicle details, and\n                      undergo a background check. Once approved, you can start\n                      accepting delivery requests.\n                    </AccordionContent>\n                  </AccordionItem>\n\n                  <AccordionItem value=\"item-8\">\n                    <AccordionTrigger>\n                      What if there's an issue with my order?\n                    </AccordionTrigger>\n                    <AccordionContent>\n                      If there's an issue with your order, you can report it\n                      through the app or website by going to your order history\n                      and selecting \"Report Issue.\" Our customer support team\n                      will assist you promptly. You can also contact us directly\n                      through the \"Contact Us\" page.\n                    </AccordionContent>\n                  </AccordionItem>\n                </Accordion>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"contact\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Contact Our Support Team</CardTitle>\n                <CardDescription>\n                  Fill out the form below and we'll get back to you as soon as\n                  possible.\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <form className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"contact-name\">Name</Label>\n                      <Input id=\"contact-name\" placeholder=\"Your name\" />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"contact-email\">Email</Label>\n                      <Input\n                        id=\"contact-email\"\n                        placeholder=\"Your email\"\n                        type=\"email\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"contact-subject\">Subject</Label>\n                    <Input\n                      id=\"contact-subject\"\n                      placeholder=\"What is this regarding?\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"contact-message\">Message</Label>\n                    <Textarea\n                      id=\"contact-message\"\n                      placeholder=\"Please describe your issue or question in detail\"\n                      rows={5}\n                    />\n                  </div>\n\n                  <Button type=\"submit\">Submit</Button>\n                </form>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Other Ways to Reach Us</CardTitle>\n                <CardDescription>\n                  Choose the method that works best for you.\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"p-4 border rounded-lg text-center\">\n                    <div className=\"mb-2 flex justify-center\">\n                      <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        width=\"24\"\n                        height=\"24\"\n                        viewBox=\"0 0 24 24\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        strokeWidth=\"2\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        className=\"h-6 w-6\"\n                      >\n                        <path d=\"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z\"></path>\n                      </svg>\n                    </div>\n                    <h3 className=\"font-medium\">Phone</h3>\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      1-800-OTW-HELP\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Available 24/7\n                    </p>\n                  </div>\n\n                  <div className=\"p-4 border rounded-lg text-center\">\n                    <div className=\"mb-2 flex justify-center\">\n                      <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        width=\"24\"\n                        height=\"24\"\n                        viewBox=\"0 0 24 24\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        strokeWidth=\"2\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        className=\"h-6 w-6\"\n                      >\n                        <rect width=\"20\" height=\"16\" x=\"2\" y=\"4\" rx=\"2\"></rect>\n                        <path d=\"m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7\"></path>\n                      </svg>\n                    </div>\n                    <h3 className=\"font-medium\">Email</h3>\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      support@otw.com\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Response within 24 hours\n                    </p>\n                  </div>\n\n                  <div className=\"p-4 border rounded-lg text-center\">\n                    <div className=\"mb-2 flex justify-center\">\n                      <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        width=\"24\"\n                        height=\"24\"\n                        viewBox=\"0 0 24 24\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        strokeWidth=\"2\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        className=\"h-6 w-6\"\n                      >\n                        <path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\"></path>\n                      </svg>\n                    </div>\n                    <h3 className=\"font-medium\">Live Chat</h3>\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      Available in the app\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      9 AM - 9 PM daily\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"guides\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>User Guides</CardTitle>\n                <CardDescription>\n                  Step-by-step guides to help you get the most out of our\n                  services.\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"p-4 border rounded-lg\">\n                    <h3 className=\"font-medium text-lg mb-2\">\n                      Getting Started\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground mb-4\">\n                      Learn how to create an account and place your first order.\n                    </p>\n                    <Button variant=\"outline\" className=\"w-full\">\n                      View Guide\n                    </Button>\n                  </div>\n\n                  <div className=\"p-4 border rounded-lg\">\n                    <h3 className=\"font-medium text-lg mb-2\">\n                      Tracking Orders\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground mb-4\">\n                      Learn how to track your orders in real-time.\n                    </p>\n                    <Button variant=\"outline\" className=\"w-full\">\n                      View Guide\n                    </Button>\n                  </div>\n\n                  <div className=\"p-4 border rounded-lg\">\n                    <h3 className=\"font-medium text-lg mb-2\">\n                      Loyalty Program\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground mb-4\">\n                      Learn how to earn and redeem loyalty points.\n                    </p>\n                    <Button variant=\"outline\" className=\"w-full\">\n                      View Guide\n                    </Button>\n                  </div>\n\n                  <div className=\"p-4 border rounded-lg\">\n                    <h3 className=\"font-medium text-lg mb-2\">\n                      Payment Methods\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground mb-4\">\n                      Learn how to add and manage payment methods.\n                    </p>\n                    <Button variant=\"outline\" className=\"w-full\">\n                      View Guide\n                    </Button>\n                  </div>\n\n                  <div className=\"p-4 border rounded-lg\">\n                    <h3 className=\"font-medium text-lg mb-2\">\n                      Scheduling Deliveries\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground mb-4\">\n                      Learn how to schedule deliveries in advance.\n                    </p>\n                    <Button variant=\"outline\" className=\"w-full\">\n                      View Guide\n                    </Button>\n                  </div>\n\n                  <div className=\"p-4 border rounded-lg\">\n                    <h3 className=\"font-medium text-lg mb-2\">\n                      Driver Instructions\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground mb-4\">\n                      Learn how to provide special instructions for drivers.\n                    </p>\n                    <Button variant=\"outline\" className=\"w-full\">\n                      View Guide\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Video Tutorials</CardTitle>\n                <CardDescription>\n                  Watch our video tutorials for visual guidance.\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"border rounded-lg overflow-hidden\">\n                    <div className=\"aspect-video bg-muted flex items-center justify-center\">\n                      <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        width=\"24\"\n                        height=\"24\"\n                        viewBox=\"0 0 24 24\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        strokeWidth=\"2\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        className=\"h-10 w-10\"\n                      >\n                        <polygon points=\"5 3 19 12 5 21 5 3\"></polygon>\n                      </svg>\n                    </div>\n                    <div className=\"p-3\">\n                      <h3 className=\"font-medium\">How to Place an Order</h3>\n                      <p className=\"text-sm text-muted-foreground\">2:45</p>\n                    </div>\n                  </div>\n\n                  <div className=\"border rounded-lg overflow-hidden\">\n                    <div className=\"aspect-video bg-muted flex items-center justify-center\">\n                      <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        width=\"24\"\n                        height=\"24\"\n                        viewBox=\"0 0 24 24\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        strokeWidth=\"2\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        className=\"h-10 w-10\"\n                      >\n                        <polygon points=\"5 3 19 12 5 21 5 3\"></polygon>\n                      </svg>\n                    </div>\n                    <div className=\"p-3\">\n                      <h3 className=\"font-medium\">Using the Loyalty Program</h3>\n                      <p className=\"text-sm text-muted-foreground\">3:12</p>\n                    </div>\n                  </div>\n\n                  <div className=\"border rounded-lg overflow-hidden\">\n                    <div className=\"aspect-video bg-muted flex items-center justify-center\">\n                      <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        width=\"24\"\n                        height=\"24\"\n                        viewBox=\"0 0 24 24\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        strokeWidth=\"2\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        className=\"h-10 w-10\"\n                      >\n                        <polygon points=\"5 3 19 12 5 21 5 3\"></polygon>\n                      </svg>\n                    </div>\n                    <div className=\"p-3\">\n                      <h3 className=\"font-medium\">Tracking Your Delivery</h3>\n                      <p className=\"text-sm text-muted-foreground\">1:58</p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/loading-demo/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Metadata' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":23}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nexport const dynamic = 'force-dynamic';\n\nimport type { Metadata } from 'next';\nimport { useState } from 'react';\nimport { LoadingAnimation } from '../../components/ui/loading-animation';\nimport { LoadingOverlay } from '../../components/ui/loading-overlay';\nimport { Button } from '../../components/ui/button';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '../../components/ui/card';\n\nexport default function LoadingDemoPage() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isFullScreenLoading, setIsFullScreenLoading] = useState(false);\n\n  const simulateLoading = (fullScreen = false) => {\n    if (fullScreen) {\n      setIsFullScreenLoading(true);\n      setTimeout(() => setIsFullScreenLoading(false), 3000);\n    } else {\n      setIsLoading(true);\n      setTimeout(() => setIsLoading(false), 3000);\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto py-20 px-4\">\n      <h1 className=\"text-4xl font-bold mb-8 text-center\">\n        OTW Loading Animations\n      </h1>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Small</CardTitle>\n            <CardDescription>Compact loading animation</CardDescription>\n          </CardHeader>\n          <CardContent className=\"flex justify-center\">\n            <LoadingAnimation size=\"small\" showText={false} />\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Medium</CardTitle>\n            <CardDescription>Standard loading animation</CardDescription>\n          </CardHeader>\n          <CardContent className=\"flex justify-center\">\n            <LoadingAnimation size=\"medium\" />\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Large</CardTitle>\n            <CardDescription>Prominent loading animation</CardDescription>\n          </CardHeader>\n          <CardContent className=\"flex justify-center\">\n            <LoadingAnimation size=\"large\" />\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 mb-12\">\n        <Card className=\"relative min-h-[300px]\">\n          <CardHeader>\n            <CardTitle>Component Loading</CardTitle>\n            <CardDescription>\n              Loading overlay for a specific component\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"flex flex-col items-center justify-center gap-4\">\n            <p className=\"text-center text-muted-foreground\">\n              This content is hidden when loading\n            </p>\n            {isLoading && <LoadingOverlay isLoading={isLoading} />}\n          </CardContent>\n          <CardFooter className=\"flex justify-center\">\n            <Button onClick={() => simulateLoading(false)}>\n              Show Component Loading\n            </Button>\n          </CardFooter>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Full Screen Loading</CardTitle>\n            <CardDescription>\n              Loading overlay for the entire screen\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"flex flex-col items-center justify-center gap-4\">\n            <p className=\"text-center text-muted-foreground\">\n              Demonstrates a full-screen loading overlay\n            </p>\n          </CardContent>\n          <CardFooter className=\"flex justify-center\">\n            <Button onClick={() => simulateLoading(true)}>\n              Show Full Screen Loading\n            </Button>\n          </CardFooter>\n        </Card>\n      </div>\n\n      {isFullScreenLoading && (\n        <LoadingOverlay\n          isLoading={isFullScreenLoading}\n          fullScreen\n          message=\"Loading your content...\"\n        />\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/locations/LocationsClientPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/locations/LocationsServerPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/locations/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[417,420],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[417,420],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Metadata } from 'next';\nimport LocationsServerPage from './LocationsServerPage';\n\nexport const dynamic = 'force-dynamic';\n\nexport const metadata: Metadata = {\n  title: \"Locations | Broski's Chicken\",\n  description: \"Find Broski's Chicken locations near you. View store hours, contact information, and directions to our restaurants.\",\n};\n\nexport default async function LocationsPage() {\n  let locations: any[] = [];\n\n  try {\n    const response = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/locations`, {\n      cache: 'no-store',\n    });\n    if (response.ok) {\n      locations = await response.json();\n    } else {\n      console.error('Failed to fetch locations');\n    }\n  } catch (error) {\n    console.error('Error fetching locations:', error);\n  }\n\n  return <LocationsServerPage locations={locations} />;\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/loyalty/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/loyalty/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaArrowRight' is defined but never used. Allowed unused vars must match /^_/u.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaApple' is defined but never used. Allowed unused vars must match /^_/u.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaGooglePlay' is defined but never used. Allowed unused vars must match /^_/u.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1378,1381],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1378,1381],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1449,1452],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1449,1452],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'earnedPoints' is defined but never used. Allowed unused args must match /^_/u.","line":110,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":110,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":578,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":578,"endColumn":50},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":757,"column":64,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[39922,40078],"text":"\n                        Earn points on every purchase at Broski&apos;s Kitchen.\n                        Point earning rates vary by tier:\n                      "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[39922,40078],"text":"\n                        Earn points on every purchase at Broski&lsquo;s Kitchen.\n                        Point earning rates vary by tier:\n                      "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[39922,40078],"text":"\n                        Earn points on every purchase at Broski&#39;s Kitchen.\n                        Point earning rates vary by tier:\n                      "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[39922,40078],"text":"\n                        Earn points on every purchase at Broski&rsquo;s Kitchen.\n                        Point earning rates vary by tier:\n                      "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":797,"column":48,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[42670,42833],"text":"\n                        Earn bonus points by attending special events, tastings,\n                        and workshops at Broski&apos;s Kitchen.\n                      "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[42670,42833],"text":"\n                        Earn bonus points by attending special events, tastings,\n                        and workshops at Broski&lsquo;s Kitchen.\n                      "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[42670,42833],"text":"\n                        Earn bonus points by attending special events, tastings,\n                        and workshops at Broski&#39;s Kitchen.\n                      "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[42670,42833],"text":"\n                        Earn bonus points by attending special events, tastings,\n                        and workshops at Broski&rsquo;s Kitchen.\n                      "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":916,"column":72,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[49395,49599],"text":"\n                  Beyond points and rewards, our loyalty program offers\n                  exclusive perks and benefits that enhance your Broski&apos;s\n                  Kitchen experience! 🎁\n                "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[49395,49599],"text":"\n                  Beyond points and rewards, our loyalty program offers\n                  exclusive perks and benefits that enhance your Broski&lsquo;s\n                  Kitchen experience! 🎁\n                "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[49395,49599],"text":"\n                  Beyond points and rewards, our loyalty program offers\n                  exclusive perks and benefits that enhance your Broski&#39;s\n                  Kitchen experience! 🎁\n                "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[49395,49599],"text":"\n                  Beyond points and rewards, our loyalty program offers\n                  exclusive perks and benefits that enhance your Broski&rsquo;s\n                  Kitchen experience! 🎁\n                "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nexport const dynamic = 'force-dynamic';\n\nimport { useState, useEffect } from 'react';\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport { useRewards } from '../../lib/context/RewardsContext';\nimport { useAuth } from '../../contexts/AuthContext';\nimport {\n  FaCrown,\n  FaGift,\n  FaUtensils,\n  FaPercent,\n  FaStar,\n  FaTruck,\n  FaCalendarAlt,\n  FaUserFriends,\n  FaQrcode,\n  FaArrowRight,\n  FaCheck,\n  FaDownload,\n  FaApple,\n  FaGooglePlay,\n  FaGamepad,\n  FaTimes,\n  FaTrophy,\n} from 'react-icons/fa';\nimport MembershipCard from '../../components/loyalty/MembershipCard';\nimport TierBenefitsTable from '../../components/loyalty/TierBenefitsTable';\nimport TestimonialCard from '../../components/loyalty/TestimonialCard';\nimport SpinGame from '../../components/rewards/SpinGame';\nimport RedeemModal from '../../components/rewards/RedeemModal';\nimport RewardCard from '../../components/rewards/RewardCard';\nimport type { Reward } from '../../types/reward';\n// Dynamic testimonials loaded from API\n\nexport default function LoyaltyPage() {\n  const { user } = useAuth();\n  const { points } = useRewards();\n  const [activeTab, setActiveTab] = useState<'overview' | 'tiers' | 'earn' | 'perks' | 'rewards'>('overview');\n  const [showMembershipCard, setShowMembershipCard] = useState(false);\n  const [membershipTiersData, setMembershipTiersData] = useState<any[]>([]);\n  const [testimonialsData, setTestimonialsData] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [showSpinGame, setShowSpinGame] = useState(false);\n  const [selectedReward, setSelectedReward] = useState<Reward | null>(null);\n  const [showRedeemModal, setShowRedeemModal] = useState(false);\n  const [rewards, setRewards] = useState<Reward[]>([]);\n  const [rewardsLoading, setRewardsLoading] = useState(false);\n\n  // Fetch membership tiers and testimonials from API\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const [tiersResponse, testimonialsResponse] = await Promise.all([\n          fetch('/api/loyalty?type=tiers'),\n          fetch('/api/loyalty?type=testimonials'),\n        ]);\n\n        const tiersData = await tiersResponse.json();\n        const testimonialsData = await testimonialsResponse.json();\n\n        if (tiersData.success) {\n          setMembershipTiersData(tiersData.data);\n        }\n        if (testimonialsData.success) {\n          setTestimonialsData(testimonialsData.data);\n        }\n      } catch (error) {\n        console.error('Error fetching loyalty data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  // Fetch rewards data from API\n  const fetchRewards = async () => {\n    try {\n      setRewardsLoading(true);\n      const response = await fetch('/api/rewards');\n      if (!response.ok) {\n        throw new Error('Failed to fetch rewards');\n      }\n      const data = await response.json();\n      setRewards(data.data || []);\n    } catch (err) {\n      console.error('Error fetching rewards:', err);\n    } finally {\n      setRewardsLoading(false);\n    }\n  };\n\n  // Handle selecting a reward\n  const handleSelectReward = (reward: Reward) => {\n    setSelectedReward(reward);\n    setShowRedeemModal(true);\n  };\n\n  // Handle closing the redeem modal\n  const handleCloseRedeemModal = () => {\n    setShowRedeemModal(false);\n    setSelectedReward(null);\n  };\n\n  // Handle spin game completion\n  const handleSpinComplete = (earnedPoints: number) => {\n    setShowSpinGame(false);\n    // Points are automatically added by the SpinGame component via useRewards context\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-otw-gold mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading loyalty program...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Use dynamic membership tiers data\n  const membershipTiers = membershipTiersData.length > 0 ? membershipTiersData : [];\n\n  // Determine user tier based on points\n  const getUserTier = () => {\n    if (membershipTiers.length === 0) {return null;}\n\n    // Sort tiers by points required (ascending)\n    const sortedTiers = [...membershipTiers].sort((a, b) => a.pointsRequired - b.pointsRequired);\n\n    // Find the highest tier the user qualifies for\n    let currentTier = sortedTiers[0];\n    let nextTier = null;\n\n    for (let i = 0; i < sortedTiers.length; i++) {\n      if (points >= sortedTiers[i].pointsRequired) {\n        currentTier = sortedTiers[i];\n        nextTier = i < sortedTiers.length - 1 ? sortedTiers[i + 1] : null;\n      } else {\n        break;\n      }\n    }\n\n    return {\n      ...currentTier,\n      next: nextTier ? { name: nextTier.name, points: nextTier.pointsRequired } : null,\n    };\n  };\n\n  const userTier = getUserTier();\n\n  // Calculate progress percentage to next tier\n  const getProgressPercentage = () => {\n    if (!userTier || !userTier.next) {return 100;}\n    const currentPoints = userTier.pointsRequired;\n    const nextPoints = userTier.next.points;\n    const progress = ((points - currentPoints) / (nextPoints - currentPoints)) * 100;\n    return Math.min(Math.max(progress, 0), 100);\n  };\n\n  const progressPercentage = getProgressPercentage();\n\n  return (\n    <div className=\"min-h-screen pb-20\">\n      {/* Hero Section */}\n      <section className=\"relative py-16 md:py-24 bg-gradient-to-br from-gray-900 via-black to-gray-800 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-otw-gold/10 via-transparent to-otw-red/5\"></div>\n        <div className=\"container mx-auto px-6 relative z-10\">\n          <div className=\"text-center max-w-5xl mx-auto\">\n            <div className=\"mb-8\">\n              <div className=\"w-20 h-20 bg-gradient-to-r from-otw-gold to-otw-red rounded-full flex items-center justify-center mx-auto mb-6 shadow-lg\">\n                <FaCrown className=\"text-3xl text-white\" />\n              </div>\n            </div>\n            <h1 className=\"text-4xl md:text-5xl lg:text-6xl font-bold mb-6 leading-tight text-white\">\n              ON THE WAY {' '}\n              <span className=\"bg-gradient-to-r from-otw-gold via-otw-red to-otw-gold bg-clip-text text-transparent\">\n                Loyalty Program\n              </span>\n            </h1>\n            <p className=\"text-lg md:text-xl text-gray-300 mb-8 max-w-4xl mx-auto leading-relaxed\">\n              Earn points with every purchase, unlock exclusive rewards, and\n              enjoy premium benefits as a valued member of our culinary community.\n            </p>\n            {!user && (\n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n                <Link href=\"/signup\" className=\"bg-gradient-to-r from-otw-gold to-otw-red text-white font-bold text-lg px-8 py-3 rounded-full hover:shadow-lg hover:shadow-otw-gold/30 transition-all duration-300 transform hover:scale-105\">\n                  Join Now - It&apos;s Free!\n                </Link>\n                <Link href=\"#overview\" className=\"border-2 border-otw-gold text-otw-gold font-semibold text-lg px-8 py-3 rounded-full hover:bg-otw-gold hover:text-white transition-all duration-300\">\n                  Learn More\n                </Link>\n              </div>\n            )}\n          </div>\n        </div>\n      </section>\n\n      {/* Membership Status Section (for logged in users) */}\n      {user && userTier && (\n        <section className=\"py-12 md:py-16 bg-gradient-to-br from-gray-900 via-black to-gray-900\">\n          <div className=\"container mx-auto px-6\">\n            <div className=\"max-w-6xl mx-auto\">\n              <div className=\"bg-gradient-to-br from-gray-800/90 via-gray-900/95 to-black/90 backdrop-blur-sm rounded-2xl p-6 md:p-8 border border-otw-gold/30 shadow-xl\">\n                <div className=\"flex flex-col lg:flex-row items-center justify-between gap-8\">\n                  <div className=\"text-center lg:text-left flex-1\">\n                    <div className=\"mb-6\">\n                      <h2 className=\"text-2xl md:text-3xl lg:text-4xl font-bold mb-4 text-white\">\n                        Welcome back, {user.displayName || user.email}!\n                      </h2>\n                      <div className=\"flex items-center gap-3 mb-4 justify-center lg:justify-start flex-wrap\">\n                        <div\n                          className={`w-5 h-5 rounded-full ${\n                            userTier?.name === 'Gold'\n                              ? 'bg-gradient-to-r from-otw-gold to-otw-gold-600'\n                              : userTier?.name === 'Silver'\n                              ? 'bg-gradient-to-r from-otw-red-400 to-otw-red-500'\n                              : 'bg-gradient-to-r from-otw-gold-400 to-otw-gold-500'\n                          }`}\n                        ></div>\n                        <span className=\"text-xl font-bold text-white\">\n                          {userTier?.name} Member\n                        </span>\n                        <div className={`px-2 py-1 rounded-full text-xs font-semibold ${\n                          userTier?.name === 'Gold'\n                            ? 'bg-otw-gold/20 text-otw-gold border border-otw-gold/30'\n                            : userTier?.name === 'Silver'\n                            ? 'bg-otw-red-400/20 text-otw-red-400 border border-otw-red-400/30'\n                            : 'bg-otw-gold-400/20 text-otw-gold-400 border border-otw-gold-400/30'\n                        }`}>\n                          Elite Status\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"bg-gradient-to-r from-otw-gold/10 to-transparent rounded-xl p-4 mb-6\">\n                      <p className=\"text-gray-300 mb-2 text-base\">\n                        Available Points\n                      </p>\n                      <div className=\"flex items-baseline gap-2\">\n                        <span className=\"text-3xl md:text-4xl font-bold bg-gradient-to-r from-otw-gold to-otw-gold-600 bg-clip-text text-transparent\">\n                          {points}\n                        </span>\n                        <span className=\"text-lg text-gray-400\">pts</span>\n                      </div>\n                    </div>\n\n                    {/* Progress to Next Tier */}\n                    {userTier?.next && (\n                      <div className=\"mb-6\">\n                        <div className=\"flex justify-between items-center mb-3\">\n                          <span className=\"text-base font-semibold text-white\">\n                            Progress to {userTier.next.name}\n                          </span>\n                          <span className=\"text-base text-otw-gold font-bold\">\n                            {points} / {userTier.next.points}\n                          </span>\n                        </div>\n                        <div className=\"w-full bg-gray-700/50 rounded-full h-3 overflow-hidden\">\n                          <div\n                            className=\"bg-gradient-to-r from-otw-gold via-otw-red-400 to-otw-gold-600 h-3 rounded-full transition-all duration-1000 ease-out\"\n                            style={{\n                              width: `${progressPercentage}%`,\n                            }}\n                          ></div>\n                        </div>\n                        <p className=\"text-sm text-gray-400 mt-2\">\n                          Only {userTier.next.points - points} points away from {userTier.next.name} status!\n                        </p>\n                      </div>\n                    )}\n\n                    <div className=\"flex flex-wrap gap-3\">\n                      <button\n                        className=\"bg-gradient-to-r from-otw-gold to-otw-gold-600 text-white font-bold px-6 py-2.5 rounded-full hover:shadow-lg hover:shadow-otw-gold/30 transition-all duration-300 transform hover:scale-105 flex items-center gap-2 text-sm\"\n                        onClick={() => setShowMembershipCard(true)}\n                      >\n                        <FaQrcode /> View Card\n                      </button>\n                      <button\n                        className=\"bg-gradient-to-r from-otw-red to-otw-red-600 text-white font-bold px-6 py-2.5 rounded-full hover:shadow-lg hover:shadow-otw-red/30 transition-all duration-300 transform hover:scale-105 flex items-center gap-2 text-sm\"\n                        onClick={() => setShowSpinGame(true)}\n                      >\n                        <FaGamepad /> Daily Spin\n                      </button>\n                      <Link\n                        href=\"/rewards\"\n                        className=\"border-2 border-otw-gold text-otw-gold font-semibold px-6 py-2.5 rounded-full hover:bg-otw-gold hover:text-white transition-all duration-300 flex items-center gap-2 text-sm\"\n                      >\n                        <FaGift /> Rewards\n                      </Link>\n                    </div>\n                  </div>\n\n                  {/* Membership Card */}\n                  <div className=\"relative flex-shrink-0\">\n                    <button\n                      onClick={() => setShowMembershipCard(true)}\n                      className=\"group relative overflow-hidden rounded-xl transition-all duration-300 hover:scale-105 hover:shadow-lg\"\n                    >\n                      <div\n                        className={`w-80 h-48 rounded-xl p-6 text-white relative overflow-hidden ${\n                          userTier?.name === 'Gold'\n                            ? 'bg-gradient-to-br from-otw-gold via-otw-gold-500 to-otw-gold-600'\n                            : userTier?.name === 'Silver'\n                            ? 'bg-gradient-to-br from-otw-red-400 via-otw-red-500 to-otw-red-600'\n                            : 'bg-gradient-to-br from-otw-gold-400 via-otw-gold-500 to-otw-gold-600'\n                        }`}\n                      >\n                        <div className=\"absolute inset-0 bg-gradient-to-br from-white/10 via-transparent to-black/20 rounded-xl\"></div>\n                        <div className=\"absolute top-3 right-3 w-12 h-12 bg-white/10 rounded-full\"></div>\n                        <div className=\"absolute bottom-3 left-3 w-8 h-8 bg-white/5 rounded-full\"></div>\n                        <div className=\"relative z-10 h-full flex flex-col justify-between\">\n                          <div className=\"flex justify-between items-start\">\n                            <div>\n                              <h3 className=\"text-lg font-bold text-black\">\n                                ON THE WAY\n                              </h3>\n                              <p className=\"text-sm text-black/80 font-semibold\">\n                                {userTier?.name} Member\n                              </p>\n                            </div>\n                            <FaCrown className=\"text-2xl text-black drop-shadow-lg\" />\n                          </div>\n                          <div className=\"space-y-2\">\n                            <div>\n                              <p className=\"text-xs text-black/70 font-semibold uppercase tracking-wider\">Member Name</p>\n                              <p className=\"font-bold text-base text-black truncate\">{user.displayName || user.email}</p>\n                            </div>\n                            <div className=\"flex justify-between items-end\">\n                              <div>\n                                <p className=\"text-xs text-black/70 font-semibold uppercase tracking-wider\">Points</p>\n                                <p className=\"font-bold text-base text-black\">{points}</p>\n                              </div>\n                              <div className=\"text-right\">\n                                <p className=\"text-xs text-black/70 font-semibold uppercase tracking-wider\">Since</p>\n                                <p className=\"font-bold text-sm text-black\">2024</p>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </button>\n                    <p className=\"text-center text-xs text-gray-400 mt-3\">\n                      Click to view full membership card\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n      )}\n\n      {/* Tabs Section */}\n      <section className=\"py-8 bg-gradient-to-r from-black via-gray-900 to-black sticky top-20 z-30 border-b border-otw-gold/20 backdrop-blur-sm\" id=\"overview\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-5xl mx-auto\">\n            <div className=\"bg-gradient-to-r from-gray-900/90 via-black/95 to-gray-900/90 backdrop-blur-sm rounded-xl p-2 border border-otw-gold/30 shadow-lg\">\n              <div className=\"flex flex-wrap justify-center gap-2\">\n                <button\n                  className={`px-4 py-3 font-semibold text-base whitespace-nowrap rounded-lg transition-all duration-300 flex items-center gap-2 ${\n                    activeTab === 'overview'\n                      ? 'bg-gradient-to-r from-otw-gold to-otw-gold-600 text-white shadow-lg shadow-otw-gold/30 transform scale-105'\n                      : 'text-gray-400 hover:text-white hover:bg-gray-800/60 hover:shadow-md'\n                  }`}\n                  onClick={() => setActiveTab('overview')}\n                >\n                  <span className=\"text-lg\">🏆</span>\n                  <span className=\"hidden sm:inline\">Program Overview</span>\n                  <span className=\"sm:hidden\">Overview</span>\n                </button>\n                <button\n                  className={`px-4 py-3 font-semibold text-base whitespace-nowrap rounded-lg transition-all duration-300 flex items-center gap-2 ${\n                    activeTab === 'tiers'\n                      ? 'bg-gradient-to-r from-otw-red-400 to-otw-red-500 text-white shadow-lg shadow-otw-red-400/30 transform scale-105'\n                      : 'text-gray-400 hover:text-white hover:bg-gray-800/60 hover:shadow-md'\n                  }`}\n                  onClick={() => setActiveTab('tiers')}\n                >\n                  <span className=\"text-lg\">👑</span>\n                  <span className=\"hidden sm:inline\">Membership Tiers</span>\n                  <span className=\"sm:hidden\">Tiers</span>\n                </button>\n                <button\n                  className={`px-4 py-3 font-semibold text-base whitespace-nowrap rounded-lg transition-all duration-300 flex items-center gap-2 ${\n                    activeTab === 'earn'\n                      ? 'bg-gradient-to-r from-otw-gold-400 to-otw-gold-500 text-white shadow-lg shadow-otw-gold-400/30 transform scale-105'\n                      : 'text-gray-400 hover:text-white hover:bg-gray-800/60 hover:shadow-md'\n                  }`}\n                  onClick={() => setActiveTab('earn')}\n                >\n                  <span className=\"text-lg\">💎</span>\n                  <span className=\"hidden sm:inline\">Ways to Earn</span>\n                  <span className=\"sm:hidden\">Earn</span>\n                </button>\n                <button\n                  className={`px-4 py-3 font-semibold text-base whitespace-nowrap rounded-lg transition-all duration-300 flex items-center gap-2 ${\n                    activeTab === 'perks'\n                      ? 'bg-gradient-to-r from-otw-gold-400 to-otw-gold-500 text-white shadow-lg shadow-otw-gold-400/30 transform scale-105'\n                      : 'text-gray-400 hover:text-white hover:bg-gray-800/60 hover:shadow-md'\n                  }`}\n                  onClick={() => setActiveTab('perks')}\n                >\n                  <span className=\"text-lg\">🎁</span>\n                  <span className=\"hidden sm:inline\">Exclusive Perks</span>\n                  <span className=\"sm:hidden\">Perks</span>\n                </button>\n                <button\n                  className={`px-4 py-3 font-semibold text-base whitespace-nowrap rounded-lg transition-all duration-300 flex items-center gap-2 ${\n                    activeTab === 'rewards'\n                      ? 'bg-gradient-to-r from-otw-red to-otw-red-600 text-white shadow-lg shadow-otw-red/30 transform scale-105'\n                      : 'text-gray-400 hover:text-white hover:bg-gray-800/60 hover:shadow-md'\n                  }`}\n                  onClick={() => {\n                    setActiveTab('rewards');\n                    if (rewards.length === 0) {\n                      fetchRewards();\n                    }\n                  }}\n                >\n                  <FaTrophy className=\"text-lg\" />\n                  <span className=\"hidden sm:inline\">Rewards</span>\n                  <span className=\"sm:hidden\">Rewards</span>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Content Section */}\n      <section className=\"py-12 md:py-16 bg-gradient-to-b from-black via-gray-900 to-black\">\n        <div className=\"container mx-auto px-6\">\n          {/* Program Overview Tab */}\n          {activeTab === 'overview' && (\n            <div className=\"animate-fade-in\">\n              <div className=\"max-w-5xl mx-auto text-center mb-12\">\n                <h2 className=\"text-3xl md:text-4xl lg:text-5xl font-bold mb-6 text-white\">\n                  About Our Loyalty Program\n                </h2>\n                <p className=\"text-lg md:text-xl text-gray-300 leading-relaxed\">\n                  ON THE WAY&apos;s Loyalty Program rewards our most valued\n                  customers with exclusive perks, discounts, and experiences.\n                  Earn points with every purchase and unlock premium benefits as\n                  you progress through our membership tiers.\n                </p>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 md:gap-8 mb-16\">\n                <div className=\"group bg-gradient-to-br from-gray-800/90 via-gray-900/95 to-black/90 backdrop-blur-sm rounded-xl p-6 border border-otw-gold/30 text-center hover:border-otw-gold/50 transition-all duration-300 hover:shadow-lg hover:shadow-otw-gold/20\">\n                  <div className=\"w-16 h-16 bg-gradient-to-r from-otw-gold/20 to-otw-gold-500/20 rounded-full flex items-center justify-center mx-auto mb-4 group-hover:from-otw-gold/30 group-hover:to-otw-gold-500/30 transition-all duration-300\">\n                    <FaGift className=\"text-otw-gold text-2xl group-hover:scale-110 transition-transform duration-300\" />\n                  </div>\n                  <h3 className=\"text-xl font-bold mb-3 text-white group-hover:text-otw-gold transition-colors duration-300\">Earn Points</h3>\n                  <p className=\"text-gray-400 text-base leading-relaxed group-hover:text-gray-300 transition-colors duration-300\">\n                    Earn points with every purchase at ON THE WAY,\n                    through referrals, and by participating in special\n                    promotions.\n                  </p>\n                </div>\n\n                <div className=\"group bg-gradient-to-br from-gray-800/90 via-gray-900/95 to-black/90 backdrop-blur-sm rounded-xl p-6 border border-otw-red-400/30 text-center hover:border-otw-red-400/50 transition-all duration-300 hover:shadow-lg hover:shadow-otw-red-400/20\">\n                  <div className=\"w-16 h-16 bg-gradient-to-r from-otw-red-400/20 to-otw-red-500/20 rounded-full flex items-center justify-center mx-auto mb-4 group-hover:from-otw-red-400/30 group-hover:to-otw-red-500/30 transition-all duration-300\">\n                    <FaCrown className=\"text-otw-red-400 text-2xl group-hover:scale-110 transition-transform duration-300\" />\n                  </div>\n                  <h3 className=\"text-xl font-bold mb-3 text-white group-hover:text-otw-red-400 transition-colors duration-300\">Unlock Tiers</h3>\n                  <p className=\"text-gray-400 text-base leading-relaxed group-hover:text-gray-300 transition-colors duration-300\">\n                    Progress through Bronze, Silver, and Gold tiers to unlock\n                    increasingly valuable benefits and higher earning rates.\n                  </p>\n                </div>\n\n                <div className=\"group bg-gradient-to-br from-gray-800/90 via-gray-900/95 to-black/90 backdrop-blur-sm rounded-xl p-6 border border-otw-gold-400/30 text-center hover:border-otw-gold-400/50 transition-all duration-300 hover:shadow-lg hover:shadow-otw-gold-400/20\">\n                  <div className=\"w-16 h-16 bg-gradient-to-r from-otw-gold-400/20 to-otw-gold-500/20 rounded-full flex items-center justify-center mx-auto mb-4 group-hover:from-otw-gold-400/30 group-hover:to-otw-gold-500/30 transition-all duration-300\">\n                    <FaStar className=\"text-otw-gold-400 text-2xl group-hover:scale-110 transition-transform duration-300\" />\n                  </div>\n                  <h3 className=\"text-xl font-bold mb-3 text-white group-hover:text-otw-gold-400 transition-colors duration-300\">Enjoy Rewards</h3>\n                  <p className=\"text-gray-400 text-base leading-relaxed group-hover:text-gray-300 transition-colors duration-300\">\n                    Redeem your points for free menu items, exclusive\n                    experiences, merchandise, and more.\n                  </p>\n                </div>\n              </div>\n\n              {/* OTW App Download Section - Commented Out */}\n              {/* <div className=\"bg-gradient-to-br from-[#1A1A1A] to-[#2A2A2A] rounded-xl overflow-hidden shadow-2xl border border-gold-foil/30 mb-16 hover:shadow-gold-foil/20 transition-all duration-300\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2\">\n                  <div className=\"p-8 flex flex-col justify-center\">\n                    <h3 className=\"text-3xl font-bold mb-4 bg-gradient-to-r from-gold-foil to-yellow-400 bg-clip-text text-transparent\">\n                      Download Our App\n                    </h3>\n                    <p className=\"text-gray-300 mb-6 text-lg leading-relaxed\">\n                      Get the most out of your loyalty membership with our\n                      mobile app. Track your points, view available rewards, and\n                      access your digital membership card all in one place.\n                    </p>\n                    <div className=\"flex flex-wrap gap-4\">\n                      <a\n                        href=\"#\"\n                        className=\"bg-gradient-to-r from-black to-gray-900 text-white px-6 py-3 rounded-xl flex items-center gap-3 hover:from-gray-900 hover:to-black transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-105\"\n                      >\n                        <FaApple size={28} />\n                        <div>\n                          <div className=\"text-xs text-gray-400\">Download on the</div>\n                          <div className=\"font-bold text-lg\">App Store</div>\n                        </div>\n                      </a>\n                      <a\n                        href=\"#\"\n                        className=\"bg-gradient-to-r from-black to-gray-900 text-white px-6 py-3 rounded-xl flex items-center gap-3 hover:from-gray-900 hover:to-black transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-105\"\n                      >\n                        <FaGooglePlay size={28} />\n                        <div>\n                          <div className=\"text-xs text-gray-400\">Get it on</div>\n                          <div className=\"font-bold text-lg\">Google Play</div>\n                        </div>\n                      </a>\n                    </div>\n                  </div>\n                  <div className=\"relative h-64 md:h-auto\">\n                    <Image\n                      src=\"/assets/logo/otw-logo-new.jpeg\"\n                      alt=\"Broski's Kitchen Mobile App\"\n                      fill\n                      className=\"object-cover\"\n                    />\n                  </div>\n                </div>\n              </div> */}\n\n              <div className=\"mb-16\">\n                <h3 className=\"text-2xl font-bold mb-8 text-center\">\n                  What Our Members Say\n                </h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  {testimonialsData.map((testimonial, index) => (\n                    <TestimonialCard key={testimonial.id || index} testimonial={testimonial} />\n                  ))}\n                </div>\n              </div>\n\n              {!user && (\n                <div className=\"bg-gradient-to-r from-otw-gold to-otw-red-500 p-1 rounded-lg\">\n                  <div className=\"bg-[#1A1A1A] rounded-lg p-8 text-center\">\n                    <h3 className=\"text-2xl font-bold mb-4\">Ready to Join?</h3>\n                    <p className=\"text-gray-300 mb-6 max-w-2xl mx-auto\">\n                      Sign up today and start earning points with your very\n                      first purchase. Membership is completely free!\n                    </p>\n                    <Link href=\"/signup\" className=\"btn-primary\">\n                      Join Now\n                    </Link>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Membership Tiers Tab */}\n          {activeTab === 'tiers' && (\n            <div className=\"animate-fade-in\">\n              <div className=\"max-w-4xl mx-auto text-center mb-10\">\n                <h2 className=\"text-2xl md:text-3xl font-bold mb-4 text-white\">Membership Tiers</h2>\n                <p className=\"text-gray-300 text-base md:text-lg leading-relaxed\">\n                  Our loyalty program features three membership tiers: Bronze,\n                  Silver, and Gold. Each tier offers increasingly valuable\n                  benefits and higher point earning rates.\n                </p>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-12\">\n                {membershipTiers.map((tier, index) => (\n                  <div\n                    key={tier.name}\n                    className={`bg-[#1A1A1A] rounded-lg overflow-hidden shadow-lg border ${\n                      userTier?.name === tier.name\n                        ? tier.borderColor\n                        : 'border-[#333333]'\n                    } ${userTier?.name === tier.name ? 'ring-2 ring-opacity-50 ' + tier.borderColor.replace('border-', 'ring-') : ''}`}\n                  >\n                    <div className={`${tier.bgColor} bg-opacity-20 p-6 text-center relative`}>\n                      {userTier?.name === tier.name && (\n                        <div className=\"absolute top-2 right-2 bg-otw-gold text-white text-xs px-2 py-1 rounded-full\">\n                          Current\n                        </div>\n                      )}\n                      <div className={`w-16 h-16 ${tier.bgColor} bg-opacity-30 rounded-full flex items-center justify-center mx-auto mb-4`}>\n                        <FaCrown className={`${tier.color} text-2xl`} />\n                      </div>\n                      <h3 className={`text-2xl font-bold ${tier.color} mb-1`}>\n                        {tier.name}\n                      </h3>\n                      <p className=\"text-gray-300 mb-2\">{tier.pointsRequired}+ Points</p>\n                      <div className={`text-xl font-bold ${tier.color}`}>\n                        {tier.price}\n                      </div>\n                      {tier.monthlyPrice && (\n                        <p className=\"text-sm text-gray-400 mt-1\">\n                          Save 20% with annual billing\n                        </p>\n                      )}\n                    </div>\n                    <div className=\"p-6\">\n                      <div className=\"mb-4\">\n                        <div className={`text-sm font-semibold ${tier.color} mb-2`}>\n                          Key Benefits:\n                        </div>\n                        <ul className=\"space-y-2 mb-6\">\n                          {tier.benefits.slice(0, 4).map((benefit, benefitIndex) => (\n                            <li key={benefitIndex} className=\"flex items-start text-sm\">\n                              <FaCheck className={`${tier.color} mt-1 mr-2 flex-shrink-0`} size={12} />\n                              <span>{benefit}</span>\n                            </li>\n                          ))}\n                          {tier.benefits.length > 4 && (\n                            <li className=\"text-xs text-gray-400\">\n                              +{tier.benefits.length - 4} more benefits\n                            </li>\n                          )}\n                        </ul>\n                      </div>\n\n                      {!user ? (\n                        <Link href=\"/signup\" className=\"btn-primary w-full text-sm\">\n                          Join Now\n                        </Link>\n                      ) : userTier?.name === tier.name ? (\n                        <div className={`${tier.bgColor} bg-opacity-20 ${tier.color} text-center py-3 rounded-md font-semibold`}>\n                          Your Current Tier\n                        </div>\n                      ) : points >= tier.pointsRequired ? (\n                        <div className=\"bg-otw-gold bg-opacity-20 text-otw-gold text-center py-3 rounded-md font-semibold\">\n                          Tier Available\n                        </div>\n                      ) : (\n                        <div className=\"space-y-2\">\n                          <div className=\"text-center py-2 text-sm text-gray-400\">\n                            {tier.pointsRequired - points} more points to unlock\n                          </div>\n                          {tier.monthlyPrice && (\n                            <button className={`w-full py-2 px-4 rounded-md border ${tier.borderColor} ${tier.color} hover:${tier.bgColor} hover:bg-opacity-10 transition-colors text-sm`}>\n                              Upgrade Now\n                            </button>\n                          )}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"mb-12\">\n                <h3 className=\"text-xl md:text-2xl font-bold mb-4 text-white\">\n                  Detailed Benefits Comparison\n                </h3>\n                <TierBenefitsTable membershipTiers={membershipTiers} />\n              </div>\n\n              <div className=\"bg-gray-900/80 rounded-xl p-6 border border-otw-gold/30 mb-8\">\n                <h3 className=\"text-lg md:text-xl font-bold mb-4 text-white\">Tier Qualification</h3>\n                <p className=\"text-gray-300 mb-4 text-sm md:text-base leading-relaxed\">\n                  Your membership tier is determined by the total number of\n                  points you&apos;ve earned:\n                </p>\n                <ul className=\"space-y-3 mb-4\">\n                  <li className=\"flex items-center text-sm md:text-base\">\n                    <span className=\"w-4 h-4 bg-otw-gold-400 rounded-full mr-3 flex-shrink-0\"></span>\n                    <span className=\"text-gray-300\">\n                      <strong className=\"text-white\">Bronze:</strong> 0-499 points\n                    </span>\n                  </li>\n                  <li className=\"flex items-center text-sm md:text-base\">\n                    <span className=\"w-4 h-4 bg-otw-red-400 rounded-full mr-3 flex-shrink-0\"></span>\n                    <span className=\"text-gray-300\">\n                      <strong className=\"text-white\">Silver:</strong> 500-999 points\n                    </span>\n                  </li>\n                  <li className=\"flex items-center text-sm md:text-base\">\n                    <span className=\"w-4 h-4 bg-otw-gold rounded-full mr-3 flex-shrink-0\"></span>\n                    <span className=\"text-gray-300\">\n                      <strong className=\"text-white\">Gold:</strong> 1,000+ points\n                    </span>\n                  </li>\n                </ul>\n                <p className=\"text-gray-300 text-sm md:text-base leading-relaxed\">\n                  Once you reach a tier, you&apos;ll maintain that status for\n                  the remainder of the current calendar year and the following\n                  year. To maintain your tier status after that, you&apos;ll\n                  need to earn the required points again.\n                </p>\n              </div>\n\n              <div className=\"bg-[#1A1A1A] rounded-lg p-6 border border-[#333333]\">\n                <h3 className=\"text-xl font-bold mb-4\">Tier FAQs</h3>\n                <div className=\"space-y-4\">\n                  <div>\n                    <h4 className=\"font-bold mb-1\">\n                      How do I check my current tier status?\n                    </h4>\n                    <p className=\"text-gray-300\">\n                      Your current tier status is displayed on your profile page\n                      and in the mobile app. You can also see it on your digital\n                      membership card.\n                    </p>\n                  </div>\n                  <div>\n                    <h4 className=\"font-bold mb-1\">When do tiers reset?</h4>\n                    <p className=\"text-gray-300\">\n                      Tier qualifications are evaluated at the end of each\n                      calendar year. You maintain your tier status for the\n                      remainder of the current year and the following year.\n                    </p>\n                  </div>\n                  <div>\n                    <h4 className=\"font-bold mb-1\">\n                      Can I be downgraded to a lower tier?\n                    </h4>\n                    <p className=\"text-gray-300\">\n                      Yes, if you don&apos;t meet the point requirements to\n                      maintain your current tier during the annual evaluation,\n                      you&apos;ll be moved to the appropriate tier based on your\n                      points.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Ways to Earn Tab */}\n          {activeTab === 'earn' && (\n            <div className=\"animate-fade-in\">\n              <div className=\"max-w-3xl mx-auto text-center mb-12 bg-gradient-to-r from-purple-900/20 to-blue-900/20 p-8 rounded-2xl border border-purple-500/30 shadow-2xl\">\n                <h2 className=\"text-4xl font-bold mb-6 bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent\">💰 Ways to Earn Points</h2>\n                <p className=\"text-gray-300 text-lg leading-relaxed\">\n                  Discover multiple exciting ways to earn points in our loyalty program.\n                  Here are the primary methods to boost your point balance and\n                  reach higher tiers faster! 🚀\n                </p>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-10 mb-20\">\n                <div className=\"bg-gradient-to-br from-[#1A1A1A] to-[#2A2A2A] rounded-xl p-10 border border-otw-gold/30 shadow-2xl hover:shadow-otw-gold/20 transition-all duration-300 hover:scale-105 hover:border-otw-gold/50\">\n                  <div className=\"flex items-start\">\n                    <div className=\"bg-gradient-to-br from-otw-gold/30 to-otw-gold-500/30 p-5 rounded-full mr-8 flex-shrink-0 shadow-lg\">\n                      <FaUtensils className=\"text-otw-gold text-3xl\" />\n                    </div>\n                    <div>\n                      <h3 className=\"text-3xl font-bold mb-4 text-otw-gold\">🍽️ Purchases</h3>\n                      <p className=\"text-gray-200 mb-5 leading-relaxed text-lg\">\n                        Earn points on every purchase at Broski's Kitchen.\n                        Point earning rates vary by tier:\n                      </p>\n                      <ul className=\"space-y-3 text-gray-200\">\n                        <li className=\"flex items-center text-base\"><span className=\"w-3 h-3 bg-otw-gold-400 rounded-full mr-4\"></span>Bronze: 1 point per $1 spent</li>\n                        <li className=\"flex items-center text-base\"><span className=\"w-3 h-3 bg-otw-red-400 rounded-full mr-4\"></span>Silver: 1.5 points per $1 spent</li>\n                        <li className=\"flex items-center text-base\"><span className=\"w-3 h-3 bg-otw-gold rounded-full mr-4\"></span>Gold: 2 points per $1 spent</li>\n                      </ul>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"bg-gradient-to-br from-[#1A1A1A] to-[#2A2A2A] rounded-xl p-10 border border-blue-500/30 shadow-2xl hover:shadow-blue-500/20 transition-all duration-300 hover:scale-105 hover:border-blue-400/50\">\n                  <div className=\"flex items-start\">\n                    <div className=\"bg-gradient-to-br from-blue-500/30 to-cyan-500/30 p-5 rounded-full mr-8 flex-shrink-0 shadow-lg\">\n                      <FaUserFriends className=\"text-blue-400 text-3xl\" />\n                    </div>\n                    <div>\n                      <h3 className=\"text-3xl font-bold mb-4 text-blue-400\">👥 Referrals</h3>\n                      <p className=\"text-gray-200 mb-5 leading-relaxed text-lg\">\n                        Earn 200 points for each friend you refer who signs up\n                        and makes their first purchase.\n                      </p>\n                      <p className=\"text-gray-300 leading-relaxed text-base\">\n                        Share your unique referral code with friends and family\n                        to earn bonus points! 🎁\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"bg-gradient-to-br from-[#1A1A1A] to-[#2A2A2A] rounded-xl p-10 border border-green-500/30 shadow-2xl hover:shadow-green-500/20 transition-all duration-300 hover:scale-105 hover:border-green-400/50\">\n                  <div className=\"flex items-start\">\n                    <div className=\"bg-gradient-to-br from-green-500/30 to-otw-gold/30 p-5 rounded-full mr-8 flex-shrink-0 shadow-lg\">\n                      <FaCalendarAlt className=\"text-green-400 text-3xl\" />\n                    </div>\n                    <div>\n                      <h3 className=\"text-3xl font-bold mb-4 text-green-400\">🎉 Special Events</h3>\n                      <p className=\"text-gray-200 mb-5 leading-relaxed text-lg\">\n                        Earn bonus points by attending special events, tastings,\n                        and workshops at Broski's Kitchen.\n                      </p>\n                      <p className=\"text-gray-300 leading-relaxed text-base\">\n                        Events often feature double or triple point promotions\n                        for purchases made during the event! ✨\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"bg-gradient-to-br from-[#1A1A1A] to-[#2A2A2A] rounded-xl p-10 border border-orange-500/30 shadow-2xl hover:shadow-orange-500/20 transition-all duration-300 hover:scale-105 hover:border-orange-400/50\">\n                  <div className=\"flex items-start\">\n                    <div className=\"bg-gradient-to-br from-orange-500/30 to-red-500/30 p-5 rounded-full mr-8 flex-shrink-0 shadow-lg\">\n                      <FaGamepad className=\"text-orange-400 text-3xl\" />\n                    </div>\n                    <div>\n                      <h3 className=\"text-3xl font-bold mb-4 text-orange-400\">🎮 Games & Challenges</h3>\n                      {/* <p className=\"text-gray-200 mb-5 leading-relaxed text-lg\">\n                        Complete challenges and play games in our mobile app to\n                        earn bonus points.\n                      </p> */}\n                      <p className=\"text-gray-200 leading-relaxed text-lg\">\n                        Daily spin-to-win games, ordering challenges, and social\n                        media tasks can all earn you extra points! 🏆\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-[#1A1A1A] rounded-lg overflow-hidden shadow-lg border border-[#444444] mb-20\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2\">\n                  <div className=\"relative h-64 md:h-auto\">\n                    <Image\n                      src=\"/assets/images/menu-3.jpg\"\n                      alt=\"Broski's Kitchen Bonus Points\"\n                      fill\n                      className=\"object-cover\"\n                    />\n                  </div>\n                  <div className=\"p-10 flex flex-col justify-center\">\n                    <h3 className=\"text-3xl font-bold mb-6 text-otw-gold\">\n                      Bonus Point Opportunities\n                    </h3>\n                    <p className=\"text-gray-200 mb-6 text-lg leading-relaxed\">\n                      Throughout the year, we offer special promotions and\n                      opportunities to earn bonus points:\n                    </p>\n                    <ul className=\"space-y-4\">\n                      <li className=\"flex items-start\">\n                        <FaCheck className=\"text-otw-gold mt-1.5 mr-4 flex-shrink-0 text-lg\" />\n                        <span className=\"text-gray-200 text-base\">Double point days on select menu items</span>\n                      </li>\n                      <li className=\"flex items-start\">\n                        <FaCheck className=\"text-otw-gold mt-1.5 mr-4 flex-shrink-0 text-lg\" />\n                        <span className=\"text-gray-200 text-base\">\n                          Birthday month bonus (earn 2x points during your\n                          birthday month)\n                        </span>\n                      </li>\n                      <li className=\"flex items-start\">\n                        <FaCheck className=\"text-otw-gold mt-1.5 mr-4 flex-shrink-0 text-lg\" />\n                        <span className=\"text-gray-200 text-base\">Seasonal challenges with point multipliers</span>\n                      </li>\n                      <li className=\"flex items-start\">\n                        <FaCheck className=\"text-otw-gold mt-1.5 mr-4 flex-shrink-0 text-lg\" />\n                        <span className=\"text-gray-200 text-base\">Social media check-in bonuses</span>\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-[#1A1A1A] rounded-lg p-10 border border-[#444444]\">\n                <h3 className=\"text-3xl font-bold mb-8 text-center text-otw-gold\">Points FAQs</h3>\n                <div className=\"space-y-8\">\n                  <div className=\"bg-[#2A2A2A] rounded-lg p-6 border border-[#333333]\">\n                    <h4 className=\"text-xl font-bold mb-3 text-otw-gold-400\">Do points expire?</h4>\n                    <p className=\"text-gray-200 text-base leading-relaxed\">\n                      Points expire 12 months after they are earned if there is\n                      no account activity. Keep your account active by making\n                      purchases or redeeming rewards at least once every 12\n                      months.\n                    </p>\n                  </div>\n                  <div className=\"bg-[#2A2A2A] rounded-lg p-6 border border-[#333333]\">\n                    <h4 className=\"text-xl font-bold mb-3 text-otw-gold-400\">\n                      How long does it take for points to appear in my account?\n                    </h4>\n                    <p className=\"text-gray-200 text-base leading-relaxed\">\n                      Points from purchases typically appear in your account\n                      within 24 hours. Points from referrals and special\n                      promotions may take up to 7 days to be credited.\n                    </p>\n                  </div>\n                  <div className=\"bg-[#2A2A2A] rounded-lg p-6 border border-[#333333]\">\n                    <h4 className=\"text-xl font-bold mb-3 text-otw-gold-400\">\n                      Can I transfer points to another member?\n                    </h4>\n                    <p className=\"text-gray-200 text-base leading-relaxed\">\n                      Currently, points cannot be transferred between members.\n                      Each account&apos;s points can only be used by the account\n                      holder.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Exclusive Perks Tab */}\n          {activeTab === 'perks' && (\n            <div className=\"animate-fade-in\">\n              <div className=\"max-w-3xl mx-auto text-center mb-12 bg-gradient-to-r from-otw-gold/20 to-otw-red/20 p-8 rounded-2xl border border-otw-gold/30 shadow-2xl\">\n                <h2 className=\"text-4xl font-bold mb-6 bg-gradient-to-r from-otw-gold to-otw-red bg-clip-text text-transparent\">\n                  ✨ Exclusive Member Perks\n                </h2>\n                <p className=\"text-gray-300 text-lg leading-relaxed\">\n                  Beyond points and rewards, our loyalty program offers\n                  exclusive perks and benefits that enhance your Broski's\n                  Kitchen experience! 🎁\n                </p>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-10 mb-20\">\n                <div className=\"bg-gradient-to-br from-[#1A1A1A] to-[#2A2A2A] rounded-xl p-10 border border-purple-500/30 shadow-2xl hover:shadow-purple-500/20 transition-all duration-300 hover:scale-105 hover:border-purple-400/50\">\n                  <div className=\"bg-gradient-to-br from-purple-500/30 to-pink-500/30 w-24 h-24 rounded-full flex items-center justify-center mx-auto mb-8 shadow-lg\">\n                    <FaPercent className=\"text-purple-400 text-4xl\" />\n                  </div>\n                  <h3 className=\"text-3xl font-bold mb-4 text-center text-purple-400\">\n                    💰 Member-Only Discounts\n                  </h3>\n                  <p className=\"text-gray-200 text-center mb-8 leading-relaxed text-lg\">\n                    Exclusive discounts and offers available only to loyalty\n                    program members.\n                  </p>\n                  <div className=\"mt-6 pt-6 border-t border-purple-500/30\">\n                    <ul className=\"space-y-4\">\n                      <li className=\"flex items-start\">\n                        <FaCheck className=\"text-otw-gold mt-1.5 mr-4 flex-shrink-0 text-lg\" />\n                        <span className=\"text-gray-200 text-base\">Weekly member specials</span>\n                      </li>\n                      <li className=\"flex items-start\">\n                        <FaCheck className=\"text-otw-gold mt-1.5 mr-4 flex-shrink-0 text-lg\" />\n                        <span className=\"text-gray-200 text-base\">Early access to promotions</span>\n                      </li>\n                      <li className=\"flex items-start\">\n                        <FaCheck className=\"text-otw-gold mt-1.5 mr-4 flex-shrink-0 text-lg\" />\n                        <span className=\"text-gray-200 text-base\">Birthday discount (15% off)</span>\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n\n                <div className=\"bg-gradient-to-br from-[#1A1A1A] to-[#2A2A2A] rounded-xl p-10 border border-blue-500/30 shadow-2xl hover:shadow-blue-500/20 transition-all duration-300 hover:scale-105 hover:border-blue-400/50\">\n                  <div className=\"bg-gradient-to-br from-blue-500/30 to-cyan-500/30 w-24 h-24 rounded-full flex items-center justify-center mx-auto mb-8 shadow-lg\">\n                    <FaTruck className=\"text-blue-400 text-4xl\" />\n                  </div>\n                  <h3 className=\"text-3xl font-bold mb-4 text-center text-blue-400\">\n                    🚀 Priority Service\n                  </h3>\n                  <p className=\"text-gray-200 text-center mb-8 leading-relaxed text-lg\">\n                    Skip the wait with priority service for loyalty program\n                    members.\n                  </p>\n                  <div className=\"mt-6 pt-6 border-t border-blue-500/30\">\n                    <ul className=\"space-y-4\">\n                      <li className=\"flex items-start\">\n                        <FaCheck className=\"text-otw-red mt-1.5 mr-4 flex-shrink-0 text-lg\" />\n                        <span className=\"text-gray-200 text-base\">Priority pickup (Silver+)</span>\n                      </li>\n                      <li className=\"flex items-start\">\n                        <FaCheck className=\"text-otw-red mt-1.5 mr-4 flex-shrink-0 text-lg\" />\n                        <span className=\"text-gray-200 text-base\">Free delivery (Gold)</span>\n                      </li>\n                      <li className=\"flex items-start\">\n                        <FaCheck className=\"text-otw-red mt-1.5 mr-4 flex-shrink-0 text-lg\" />\n                        <span className=\"text-gray-200 text-base\">Dedicated member support</span>\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n\n                <div className=\"bg-gradient-to-br from-[#1A1A1A] to-[#2A2A2A] rounded-xl p-10 border border-otw-red/30 shadow-2xl hover:shadow-otw-red/20 transition-all duration-300 hover:scale-105 hover:border-otw-red/50\">\n                  <div className=\"bg-gradient-to-br from-otw-red/30 to-otw-red-500/30 w-24 h-24 rounded-full flex items-center justify-center mx-auto mb-8 shadow-lg\">\n                    <FaStar className=\"text-otw-red text-4xl\" />\n                  </div>\n                  <h3 className=\"text-3xl font-bold mb-4 text-center text-otw-red\">\n                    🌟 Exclusive Experiences\n                  </h3>\n                  <p className=\"text-gray-200 text-center mb-8 leading-relaxed text-lg\">\n                    Access to special events and experiences reserved for\n                    members.\n                  </p>\n                  <div className=\"mt-6 pt-6 border-t border-otw-red/30\">\n                    <ul className=\"space-y-4\">\n                      <li className=\"flex items-start\">\n                        <FaCheck className=\"text-otw-red mt-1.5 mr-4 flex-shrink-0 text-lg\" />\n                        <span className=\"text-gray-200 text-base\">VIP event invitations (Gold)</span>\n                      </li>\n                      <li className=\"flex items-start\">\n                        <FaCheck className=\"text-otw-red mt-1.5 mr-4 flex-shrink-0 text-lg\" />\n                        <span className=\"text-gray-200 text-base\">Chef&apos;s table access (Gold)</span>\n                      </li>\n                      <li className=\"flex items-start\">\n                        <FaCheck className=\"text-otw-red mt-1.5 mr-4 flex-shrink-0 text-lg\" />\n                        <span className=\"text-gray-200 text-base\">Cooking class priority (Silver+)</span>\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-[#1A1A1A] rounded-lg overflow-hidden shadow-lg border border-[#333333] mb-20\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2\">\n                  <div className=\"p-10 flex flex-col justify-center\">\n                    <h3 className=\"text-3xl font-bold mb-6 text-otw-gold\">\n                      Exclusive Menu Access\n                    </h3>\n                    <p className=\"text-gray-200 mb-8 leading-relaxed text-lg\">\n                      Silver and Gold members get exclusive access to special\n                      menu items not available to the general public. These\n                      items are created by our executive chef and feature\n                      premium ingredients and innovative techniques.\n                    </p>\n                    <ul className=\"space-y-4\">\n                      <li className=\"flex items-start\">\n                        <FaCheck className=\"text-otw-gold mt-1.5 mr-4 flex-shrink-0 text-lg\" />\n                        <span className=\"text-gray-200 text-base\">Secret menu items</span>\n                      </li>\n                      <li className=\"flex items-start\">\n                        <FaCheck className=\"text-otw-gold mt-1.5 mr-4 flex-shrink-0 text-lg\" />\n                        <span className=\"text-gray-200 text-base\">Early access to seasonal offerings</span>\n                      </li>\n                      <li className=\"flex items-start\">\n                        <FaCheck className=\"text-otw-gold mt-1.5 mr-4 flex-shrink-0 text-lg\" />\n                        <span className=\"text-gray-200 text-base\">Chef&apos;s special tasting opportunities</span>\n                      </li>\n                    </ul>\n                  </div>\n                  <div className=\"relative h-64 md:h-auto\">\n                    <Image\n                      src=\"/assets/images/menu-1.jpg\"\n                      alt=\"Broski's Kitchen Exclusive Menu\"\n                      fill\n                      className=\"object-cover\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-[#1A1A1A] rounded-lg p-8 border border-[#333333]\">\n                <h3 className=\"text-2xl font-bold mb-6 text-otw-gold\">Partner Benefits</h3>\n                <p className=\"text-gray-200 mb-8 leading-relaxed text-lg\">\n                  We&apos;ve partnered with select businesses to offer\n                  additional perks to our loyalty members:\n                </p>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                  <div className=\"bg-[#111111] p-6 rounded-lg border border-[#333333] hover:border-otw-gold/30 transition-colors\">\n                    <h4 className=\"font-bold mb-3 text-lg text-otw-gold\">Urban Winery</h4>\n                    <p className=\"text-gray-200 mb-3 leading-relaxed\">\n                      Show your Broski&apos;s Kitchen membership card to receive\n                      10% off wine purchases and complimentary tastings.\n                    </p>\n                    <p className=\"text-sm text-gray-400 font-medium\">\n                      Available to all membership tiers\n                    </p>\n                  </div>\n                  <div className=\"bg-[#111111] p-6 rounded-lg border border-[#333333] hover:border-otw-red/30 transition-colors\">\n                    <h4 className=\"font-bold mb-3 text-lg text-otw-red\">Luxury Ride Share</h4>\n                    <p className=\"text-gray-200 mb-3 leading-relaxed\">\n                      Gold members receive a 15% discount code for Luxury Ride\n                      Share services to and from Broski&apos;s Kitchen\n                      locations.\n                    </p>\n                    <p className=\"text-sm text-gray-400 font-medium\">Gold tier exclusive</p>\n                  </div>\n                  <div className=\"bg-[#111111] p-6 rounded-lg border border-[#333333] hover:border-otw-gold/30 transition-colors\">\n                    <h4 className=\"font-bold mb-3 text-lg text-otw-gold\">Craft Brewery Tours</h4>\n                    <p className=\"text-gray-200 mb-3 leading-relaxed\">\n                      Silver and Gold members receive discounted tickets to\n                      local craft brewery tours.\n                    </p>\n                    <p className=\"text-sm text-gray-400 font-medium\">\n                      Silver and Gold tiers\n                    </p>\n                  </div>\n                  <div className=\"bg-[#111111] p-6 rounded-lg border border-[#333333] hover:border-otw-red/30 transition-colors\">\n                    <h4 className=\"font-bold mb-3 text-lg text-otw-red\">Gourmet Food Festival</h4>\n                    <p className=\"text-gray-200 mb-3 leading-relaxed\">\n                      All members receive early access to ticket sales for the\n                      annual Gourmet Food Festival.\n                    </p>\n                    <p className=\"text-sm text-gray-400 font-medium\">\n                      Available to all membership tiers\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Rewards Tab */}\n          {activeTab === 'rewards' && (\n            <div className=\"space-y-8\">\n              <div className=\"text-center mb-12\">\n                <h2 className=\"text-4xl font-bold mb-4 text-gray-100\">\n                  Redeem Your <span className=\"text-otw-gold\">Rewards</span>\n                </h2>\n                <p className=\"text-xl text-gray-300 max-w-3xl mx-auto leading-relaxed\">\n                  Use your loyalty points to unlock exclusive rewards and experiences.\n                </p>\n              </div>\n\n              {rewardsLoading ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                  {[...Array(6)].map((_, index) => (\n                    <div key={index} className=\"bg-[#1A1A1A] rounded-lg p-6 border border-[#333333] animate-pulse\">\n                      <div className=\"h-48 bg-gray-700 rounded-lg mb-4\"></div>\n                      <div className=\"h-6 bg-gray-700 rounded mb-2\"></div>\n                      <div className=\"h-4 bg-gray-700 rounded mb-4\"></div>\n                      <div className=\"h-10 bg-gray-700 rounded\"></div>\n                    </div>\n                  ))}\n                </div>\n              ) : rewards.length > 0 ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                  {rewards.map((reward) => (\n                    <RewardCard\n                      key={reward.id}\n                      reward={reward}\n                      userPoints={points}\n                      onSelect={handleSelectReward}\n                    />\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-16\">\n                  <div className=\"text-6xl mb-4\">🎁</div>\n                  <h3 className=\"text-2xl font-bold mb-4 text-gray-100\">No Rewards Available</h3>\n                  <p className=\"text-gray-400 text-lg\">\n                    Check back later for exciting rewards to redeem with your points!\n                  </p>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Terms & Conditions Section */}\n      <section className=\"py-16 bg-[#111111]\">\n        <div className=\"container mx-auto px-4\">\n          <h2 className=\"text-3xl font-bold mb-8 text-center text-gray-100\">\n            Program Terms & Conditions\n          </h2>\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"bg-[#1A1A1A] rounded-lg p-8 border border-[#333333] shadow-lg\">\n              <p className=\"text-gray-200 mb-6 leading-relaxed text-lg\">\n                Broski&apos;s Kitchen reserves the right to modify or terminate\n                the loyalty program at any time. Membership benefits, point\n                values, and redemption levels are subject to change without\n                notice.\n              </p>\n              <p className=\"text-gray-200 mb-6 leading-relaxed text-lg\">\n                Points have no cash value and cannot be sold, transferred, or\n                combined with other accounts. Points expire 12 months after they\n                are earned if there is no account activity.\n              </p>\n              <p className=\"text-gray-200 leading-relaxed text-lg\">\n                For complete program terms and conditions, please visit our{' '}\n                <Link href=\"/terms\" className=\"text-otw-gold hover:underline font-medium\">\n                  Terms of Service\n                </Link>{' '}\n                page.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Membership Card Modal */}\n      {showMembershipCard && user && (\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4 bg-black bg-opacity-80\">\n          <div className=\"bg-[#1A1A1A] rounded-lg shadow-xl w-full max-w-lg overflow-hidden animate-fade-in border border-[#333333]\">\n            <div className=\"p-8 border-b border-[#333333] flex justify-between items-center\">\n              <h2 className=\"text-2xl font-bold text-gray-100\">Your Membership Card</h2>\n              <button\n                onClick={() => setShowMembershipCard(false)}\n                className=\"text-gray-400 hover:text-white transition-colors p-2 rounded-lg hover:bg-[#333333]\"\n                aria-label=\"Close\"\n              >\n                <FaTimes className=\"text-xl\" />\n              </button>\n            </div>\n            <div className=\"p-8\">\n              <MembershipCard\n                user={{\n                  id: user.uid,\n                  name: user.displayName || user.email || 'Member',\n                  email: user.email || '',\n                  role: 'user',\n                }}\n                points={points}\n                tier={userTier?.name || 'Bronze'}\n              />\n              <div className=\"mt-8 flex justify-center\">\n                <button className=\"btn-outline flex items-center gap-3 px-6 py-3 text-lg\">\n                  <FaDownload className=\"text-lg\" /> Save to Device\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Spin Game Modal */}\n      {showSpinGame && (\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4 bg-black bg-opacity-80\">\n          <div className=\"bg-[#1A1A1A] rounded-lg shadow-xl w-full max-w-2xl overflow-hidden animate-fade-in border border-[#333333]\">\n            <SpinGame\n              onClose={() => setShowSpinGame(false)}\n              onSpinComplete={handleSpinComplete}\n            />\n          </div>\n        </div>\n      )}\n\n      {/* Redeem Modal */}\n      {showRedeemModal && selectedReward && (\n        <RedeemModal\n          reward={selectedReward}\n          onClose={handleCloseRedeemModal}\n        />\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/not-found.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":14,"column":23,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[499,579],"text":"\n          The page you&apos;re looking for doesn't exist or has been moved.\n        "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[499,579],"text":"\n          The page you&lsquo;re looking for doesn't exist or has been moved.\n        "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[499,579],"text":"\n          The page you&#39;re looking for doesn't exist or has been moved.\n        "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[499,579],"text":"\n          The page you&rsquo;re looking for doesn't exist or has been moved.\n        "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":14,"column":44,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[499,579],"text":"\n          The page you're looking for doesn&apos;t exist or has been moved.\n        "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[499,579],"text":"\n          The page you're looking for doesn&lsquo;t exist or has been moved.\n        "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[499,579],"text":"\n          The page you're looking for doesn&#39;t exist or has been moved.\n        "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[499,579],"text":"\n          The page you're looking for doesn&rsquo;t exist or has been moved.\n        "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nexport const dynamic = 'force-dynamic';\n\nimport Link from 'next/link';\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-gray-900 to-black\">\n      <div className=\"text-center px-4\">\n        <h1 className=\"text-6xl font-bold text-gold-foil mb-4\">404</h1>\n        <h2 className=\"text-2xl font-semibold text-white mb-6\">Page Not Found</h2>\n        <p className=\"text-gray-300 mb-8 max-w-md mx-auto\">\n          The page you're looking for doesn't exist or has been moved.\n        </p>\n        <Link\n          href=\"/\"\n          className=\"inline-block bg-gold-foil text-black px-8 py-3 rounded-lg font-semibold hover:bg-yellow-400 transition-colors\"\n        >\n          Go Home\n        </Link>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/order-screenshot/page.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":20,"column":64,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[789,965],"text":"\n            Order your favorite food from any restaurant and we&apos;ll pick it up for you!\n            Simply take a screenshot of your order and we'll handle the rest.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[789,965],"text":"\n            Order your favorite food from any restaurant and we&lsquo;ll pick it up for you!\n            Simply take a screenshot of your order and we'll handle the rest.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[789,965],"text":"\n            Order your favorite food from any restaurant and we&#39;ll pick it up for you!\n            Simply take a screenshot of your order and we'll handle the rest.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[789,965],"text":"\n            Order your favorite food from any restaurant and we&rsquo;ll pick it up for you!\n            Simply take a screenshot of your order and we'll handle the rest.\n          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":21,"column":58,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[789,965],"text":"\n            Order your favorite food from any restaurant and we'll pick it up for you!\n            Simply take a screenshot of your order and we&apos;ll handle the rest.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[789,965],"text":"\n            Order your favorite food from any restaurant and we'll pick it up for you!\n            Simply take a screenshot of your order and we&lsquo;ll handle the rest.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[789,965],"text":"\n            Order your favorite food from any restaurant and we'll pick it up for you!\n            Simply take a screenshot of your order and we&#39;ll handle the rest.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[789,965],"text":"\n            Order your favorite food from any restaurant and we'll pick it up for you!\n            Simply take a screenshot of your order and we&rsquo;ll handle the rest.\n          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":44,"column":53,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1883,1970],"text":"\n                  Place your order on the restaurant&apos;s website or app\n                "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1883,1970],"text":"\n                  Place your order on the restaurant&lsquo;s website or app\n                "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1883,1970],"text":"\n                  Place your order on the restaurant&#39;s website or app\n                "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1883,1970],"text":"\n                  Place your order on the restaurant&rsquo;s website or app\n                "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nexport const dynamic = 'force-dynamic';\n\nimport { Suspense } from 'react';\nimport ScreenshotOrderForm from '../../components/orders/ScreenshotOrderForm';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../components/ui/card';\nimport { Camera, Clock, MapPin, Phone } from 'lucide-react';\n\nexport default function ScreenshotOrderPage() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-red-50 py-8\">\n      <div className=\"container mx-auto px-4 max-w-4xl\">\n        {/* Header Section */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">\n            Screenshot Order Service\n          </h1>\n          <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n            Order your favorite food from any restaurant and we'll pick it up for you!\n            Simply take a screenshot of your order and we'll handle the rest.\n          </p>\n        </div>\n\n        {/* How It Works Section */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Camera className=\"h-6 w-6 text-orange-500\" />\n              How It Works\n            </CardTitle>\n            <CardDescription>\n              Our simple 4-step process to get your food delivered\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              <div className=\"text-center\">\n                <div className=\"bg-orange-100 rounded-full w-12 h-12 flex items-center justify-center mx-auto mb-3\">\n                  <span className=\"text-orange-600 font-bold text-lg\">1</span>\n                </div>\n                <h3 className=\"font-semibold mb-2\">Order Online</h3>\n                <p className=\"text-sm text-gray-600\">\n                  Place your order on the restaurant's website or app\n                </p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"bg-orange-100 rounded-full w-12 h-12 flex items-center justify-center mx-auto mb-3\">\n                  <span className=\"text-orange-600 font-bold text-lg\">2</span>\n                </div>\n                <h3 className=\"font-semibold mb-2\">Take Screenshot</h3>\n                <p className=\"text-sm text-gray-600\">\n                  Screenshot your order confirmation and upload it here\n                </p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"bg-orange-100 rounded-full w-12 h-12 flex items-center justify-center mx-auto mb-3\">\n                  <span className=\"text-orange-600 font-bold text-lg\">3</span>\n                </div>\n                <h3 className=\"font-semibold mb-2\">We Pick Up</h3>\n                <p className=\"text-sm text-gray-600\">\n                  Our team will pick up your order from the restaurant\n                </p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"bg-orange-100 rounded-full w-12 h-12 flex items-center justify-center mx-auto mb-3\">\n                  <span className=\"text-orange-600 font-bold text-lg\">4</span>\n                </div>\n                <h3 className=\"font-semibold mb-2\">Enjoy!</h3>\n                <p className=\"text-sm text-gray-600\">\n                  Pick up your food or have it delivered to you\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Service Info Cards */}\n        <div className=\"grid md:grid-cols-3 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center gap-3 mb-3\">\n                <Clock className=\"h-5 w-5 text-orange-500\" />\n                <h3 className=\"font-semibold\">Quick Service</h3>\n              </div>\n              <p className=\"text-sm text-gray-600\">\n                Most orders are picked up within 30-45 minutes during peak hours\n              </p>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center gap-3 mb-3\">\n                <MapPin className=\"h-5 w-5 text-orange-500\" />\n                <h3 className=\"font-semibold\">Wide Coverage</h3>\n              </div>\n              <p className=\"text-sm text-gray-600\">\n                We pick up from restaurants across the city and surrounding areas\n              </p>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center gap-3 mb-3\">\n                <Phone className=\"h-5 w-5 text-orange-500\" />\n                <h3 className=\"font-semibold\">Real-time Updates</h3>\n              </div>\n              <p className=\"text-sm text-gray-600\">\n                Get SMS/call updates on your order status from pickup to delivery\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Order Form */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Submit Your Order</CardTitle>\n            <CardDescription>\n              Fill out the form below and upload your order screenshot\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Suspense fallback={\n              <div className=\"flex items-center justify-center py-8\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n              </div>\n            }>\n              <ScreenshotOrderForm />\n            </Suspense>\n          </CardContent>\n        </Card>\n\n        {/* Important Notes */}\n        <Card className=\"mt-8\">\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Important Notes</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ul className=\"space-y-2 text-sm text-gray-600\">\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-orange-500 mt-1\">•</span>\n                <span>\n                  Please ensure your screenshot clearly shows the order details, total amount, and pickup location\n                </span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-orange-500 mt-1\">•</span>\n                <span>\n                  We will call you to confirm the order details before pickup\n                </span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-orange-500 mt-1\">•</span>\n                <span>\n                  Service fees and delivery charges will be calculated and communicated during confirmation\n                </span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-orange-500 mt-1\">•</span>\n                <span>\n                  Payment will be collected upon pickup or delivery (cash, card, or digital payment accepted)\n                </span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-orange-500 mt-1\">•</span>\n                <span>\n                  Orders are processed during business hours: Monday-Sunday, 10 AM - 10 PM\n                </span>\n              </li>\n            </ul>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/order/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Metadata' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Card' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardContent' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardDescription' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardHeader' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":56},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardTitle' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":58,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":67},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Badge' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Separator' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'selectedCategory' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":69,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":69,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSelectedCategory' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":69,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":69,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'searchTerm' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":70,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSearchTerm' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":70,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'selectedLocation' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":71,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSelectedLocation' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":71,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'selectedTime' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":72,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSelectedTime' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":72,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'paymentMethod' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":73,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":73,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setPaymentMethod' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":73,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":73,"endColumn":41},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":107,"column":37,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3342,3449],"text":"\n            Get your favorite Broski&apos;s Kitchen dishes delivered right to your\n            door.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3342,3449],"text":"\n            Get your favorite Broski&lsquo;s Kitchen dishes delivered right to your\n            door.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3342,3449],"text":"\n            Get your favorite Broski&#39;s Kitchen dishes delivered right to your\n            door.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3342,3449],"text":"\n            Get your favorite Broski&rsquo;s Kitchen dishes delivered right to your\n            door.\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nexport const dynamic = 'force-dynamic';\n\nimport type { Metadata } from 'next';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../components/ui/card';\nimport { Button } from '../../components/ui/button';\nimport { Badge } from '../../components/ui/badge';\nimport { Separator } from '../../components/ui/separator';\nimport type React from 'react';\n\nimport { useState } from 'react';\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport { useCart } from '../../lib/context/CartContext';\nimport { toast } from '../../components/ui/use-toast';\nimport { Input } from '../../components/ui/input';\nimport { Label } from '../../components/ui/label';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '../../components/ui/select';\nimport { MapPin, Clock, CreditCard } from 'lucide-react';\n\n// Define menu items\nconst menuItems = [\n  {\n    id: 'luxury-burger',\n    name: 'Luxury Burger',\n    price: 18.99,\n    description: 'Wagyu beef, truffle aioli, gold leaf, brioche bun',\n    image: '/assets/images/vegan-burger.jpg',\n    category: 'burgers',\n    popular: true,\n  },\n  {\n    id: 'lobster-tacos',\n    name: 'Lobster Tacos',\n    price: 22.99,\n    description: 'Maine lobster, avocado crema, mango salsa',\n    image: '/assets/images/lobster-tacos.jpg',\n    category: 'tacos',\n    popular: true,\n  },\n  {\n    id: 'truffle-pasta',\n    name: 'Truffle Pasta',\n    price: 24.99,\n    description: 'Fresh pasta with black truffle and parmesan',\n    image: '/assets/images/truffle-pasta.jpg',\n    category: 'pasta',\n    popular: false,\n  },\n  {\n    id: 'wagyu-steak',\n    name: 'Wagyu Steak',\n    price: 45.99,\n    description: 'Premium wagyu beef with seasonal vegetables',\n    image: '/assets/images/wagyu-steak.jpg',\n    category: 'steaks',\n    popular: true,\n  },\n];\n\nexport default function OrderPage() {\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedLocation, setSelectedLocation] = useState('');\n  const [selectedTime, setSelectedTime] = useState('');\n  const [paymentMethod, setPaymentMethod] = useState('');\n  const { addItem } = useCart();\n\n  const handleAddToCart = (item: typeof menuItems[0]) => {\n    const cartItem = {\n      id: item.id,\n      name: item.name,\n      price: item.price,\n      quantity: 1,\n      image: item.image,\n      description: item.description,\n    };\n\n    addItem(cartItem);\n    toast({\n      title: 'Added to Cart!',\n      description: `${item.name} has been added to your cart.`,\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen pb-20 pt-24\">\n      {/* Hero Section */}\n      <section className=\"relative h-[40vh] flex items-center justify-center overflow-hidden\">\n        <div className=\"absolute inset-0 z-0 bg-black\">\n          <div className=\"absolute inset-0 bg-gradient-to-r from-black to-transparent opacity-70 z-10\"></div>\n          <div\n            className=\"absolute inset-0 bg-cover bg-center\"\n            style={{ backgroundImage: \"url('/images/order-hero.jpg')\" }}\n          ></div>\n        </div>\n        <div className=\"container mx-auto px-4 z-10 text-center\">\n          <h1 className=\"text-5xl font-bold mb-4 text-white\">Order Online</h1>\n          <p className=\"text-xl text-gray-200 max-w-2xl mx-auto\">\n            Get your favorite Broski's Kitchen dishes delivered right to your\n            door.\n          </p>\n        </div>\n      </section>\n\n      {/* Order Form Section */}\n      <section className=\"py-16 -mt-20 relative z-20\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto bg-gray-900 rounded-lg overflow-hidden shadow-lg border border-gray-800 p-8\">\n            <h2 className=\"text-2xl font-bold mb-6\">Start Your Order</h2>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n              <div>\n                <Label htmlFor=\"address\">Delivery Address</Label>\n                <div className=\"relative mt-1\">\n                  <MapPin className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                  <Input\n                    id=\"address\"\n                    placeholder=\"Enter your delivery address\"\n                    className=\"pl-10\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label>Delivery Time</Label>\n                <div className=\"relative mt-1\">\n                  <Clock className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                  <Select>\n                    <SelectTrigger className=\"pl-10\">\n                      <SelectValue placeholder=\"Select time\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"asap\">As soon as possible</SelectItem>\n                      <SelectItem value=\"30min\">In 30 minutes</SelectItem>\n                      <SelectItem value=\"60min\">In 1 hour</SelectItem>\n                      <SelectItem value=\"90min\">In 1.5 hours</SelectItem>\n                      <SelectItem value=\"120min\">In 2 hours</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <Link href=\"/menu\" className=\"flex-1\">\n                <Button className=\"w-full\">Browse Menu</Button>\n              </Link>\n              <Link href=\"/cart\" className=\"flex-1\">\n                <Button variant=\"outline\" className=\"w-full\">\n                  View Cart\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Popular Items Section */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-4\">\n          <h2 className=\"text-3xl font-bold mb-12 text-center\">\n            Popular Items\n          </h2>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {menuItems.map((item) => (\n              <div key={item.id} className=\"bg-gray-900 rounded-lg overflow-hidden shadow-lg border border-gray-800 hover:border-otw-gold transition-all duration-300\">\n                <div className=\"relative h-48\">\n                  <Image\n                    src={item.image}\n                    alt={item.name}\n                    fill\n                    className=\"object-cover\"\n                  />\n                  {item.popular && (\n                    <div className=\"absolute top-2 right-2 bg-otw-gold text-black text-xs px-2 py-1 rounded-full\">\n                      POPULAR\n                    </div>\n                  )}\n                </div>\n                <div className=\"p-4\">\n                  <div className=\"flex justify-between items-center mb-2\">\n                    <h3 className=\"text-lg font-bold\">{item.name}</h3>\n                    <span className=\"text-otw-gold font-bold\">${item.price}</span>\n                  </div>\n                  <p className=\"text-gray-400 text-sm mb-4\">\n                    {item.description}\n                  </p>\n                  <Button\n                    className=\"w-full\"\n                    onClick={() => handleAddToCart(item)}\n                  >\n                    Add to Cart\n                  </Button>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          <div className=\"text-center mt-12\">\n            <Link href=\"/menu\">\n              <Button size=\"lg\">View Full Menu</Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Order Info Section */}\n      <section className=\"py-16 bg-gray-900\">\n        <div className=\"container mx-auto px-4\">\n          <h2 className=\"text-3xl font-bold mb-12 text-center\">\n            Order Information\n          </h2>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <div className=\"bg-gray-800 p-6 rounded-lg\">\n              <div className=\"w-12 h-12 bg-otw-red/10 rounded-full flex items-center justify-center mb-6\">\n                <Clock className=\"w-6 h-6 text-otw-red\" />\n              </div>\n              <h3 className=\"text-xl font-bold mb-3\">Delivery Times</h3>\n              <p className=\"text-gray-400 mb-4\">\n                We deliver within a 5-mile radius of our locations. Average\n                delivery time is 30-45 minutes depending on distance and order\n                volume.\n              </p>\n              <p className=\"text-gray-400\">\n                <strong>Hours:</strong> 11am - 10pm Daily\n              </p>\n            </div>\n\n            <div className=\"bg-gray-800 p-6 rounded-lg\">\n              <div className=\"w-12 h-12 bg-otw-red/10 rounded-full flex items-center justify-center mb-6\">\n                <CreditCard className=\"w-6 h-6 text-otw-red\" />\n              </div>\n              <h3 className=\"text-xl font-bold mb-3\">Payment Options</h3>\n              <p className=\"text-gray-400 mb-4\">\n                We accept all major credit cards, digital wallets, and cash on\n                delivery. All payments are secure and encrypted.\n              </p>\n              <p className=\"text-gray-400\">\n                <strong>Minimum Order:</strong> $15 for delivery\n              </p>\n            </div>\n\n            <div className=\"bg-gray-800 p-6 rounded-lg\">\n              <div className=\"w-12 h-12 bg-otw-red/10 rounded-full flex items-center justify-center mb-6\">\n                <MapPin className=\"w-6 h-6 text-otw-red\" />\n              </div>\n              <h3 className=\"text-xl font-bold mb-3\">Delivery Area</h3>\n              <p className=\"text-gray-400 mb-4\">\n                We currently deliver to all of Fort Wayne and select surrounding\n                areas. Enter your address to confirm delivery availability.\n              </p>\n              <p className=\"text-gray-400\">\n                <strong>Delivery Fee:</strong> $3.99 (Free for orders over $50)\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Quick Checkout Section */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"bg-gray-900 rounded-lg p-8 text-center border border-gray-800\">\n            <h2 className=\"text-3xl font-bold text-white mb-4\">Ready to Order?</h2>\n            <p className=\"text-gray-400 mb-6 max-w-2xl mx-auto\">\n              Add items to your cart and proceed to checkout, or browse our full menu for more options.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link href=\"/cart\">\n                <Button size=\"lg\" className=\"bg-otw-gold text-black hover:bg-yellow-600\">\n                  View Cart & Checkout\n                </Button>\n              </Link>\n              <Link href=\"/menu\">\n                <Button size=\"lg\" variant=\"outline\">\n                  Browse Full Menu\n                </Button>\n              </Link>\n            </div>\n          </div>\n\n          {/* Tier Membership Section */}\n          <div className=\"bg-gradient-to-r from-otw-gold to-yellow-600 rounded-lg p-8 text-center mt-8\">\n            <h2 className=\"text-3xl font-bold text-black mb-4\">Join Our Tier Membership</h2>\n            <p className=\"text-black/80 mb-6 max-w-2xl mx-auto\">\n              Unlock exclusive benefits, priority reservations, and special discounts with our premium membership program.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link href=\"/tier\">\n                <Button size=\"lg\">Learn About Tier Membership</Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/orders/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/orders/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":47,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1372,1375],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1372,1375],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":125,"column":24,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[4708,4770],"text":"\n              You haven&apos;t placed any orders yet.\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[4708,4770],"text":"\n              You haven&lsquo;t placed any orders yet.\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[4708,4770],"text":"\n              You haven&#39;t placed any orders yet.\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[4708,4770],"text":"\n              You haven&rsquo;t placed any orders yet.\n            "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useRouter } from 'next/navigation';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { FaHistory, FaShoppingBag, FaArrowLeft } from 'react-icons/fa';\nimport Link from 'next/link';\nimport { useEffect } from 'react';\n\nexport const dynamic = 'force-dynamic';\n\nexport default function OrderHistoryPage() {\n  const router = useRouter();\n  const { user, isLoading } = useAuth();\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !user) {\n      router.push('/signin');\n    }\n  }, [isLoading, user, router]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-gold-foil mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading your orders...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <p className=\"text-gray-600 mb-4\">Please log in to view your orders.</p>\n          <Link href=\"/signin\" className=\"text-gold-foil hover:underline\">\n            Go to Login\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  // This would normally be fetched from an API\n  const orders: any[] = [];\n\n  return (\n    <div className=\"min-h-screen py-20\">\n      <div className=\"container mx-auto px-4 max-w-4xl\">\n        <div className=\"flex justify-between items-center mb-8\">\n          <h1 className=\"text-3xl font-bold\">Order History</h1>\n          <Link\n            href=\"/profile\"\n            className=\"text-gold-foil hover:underline flex items-center\"\n          >\n            <FaArrowLeft className=\"mr-2\" /> Back to Profile\n          </Link>\n        </div>\n\n        {orders.length > 0 ? (\n          <div className=\"space-y-6\">\n            {orders.map((order) => (\n              <div\n                key={order.id}\n                className=\"bg-[#1A1A1A] rounded-lg border border-[#333333] overflow-hidden\"\n              >\n                <div className=\"p-4 bg-[#111111] border-b border-[#333333] flex justify-between items-center\">\n                  <div>\n                    <span className=\"text-sm text-gray-400\">\n                      Order #{order.id}\n                    </span>\n                    <p className=\"text-sm text-gray-400\">\n                      {new Date(order.date).toLocaleDateString()}\n                    </p>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <span className=\"text-gold-foil font-bold\">\n                      ${order.total.toFixed(2)}\n                    </span>\n                    <span\n                      className={`ml-4 px-3 py-1 rounded-full text-xs ${\n                        order.status === 'Delivered'\n                          ? 'bg-emerald-green bg-opacity-20 text-emerald-green'\n                          : order.status === 'Processing'\n                            ? 'bg-citrus-orange bg-opacity-20 text-citrus-orange'\n                            : 'bg-[#333333] text-white'\n                      }`}\n                    >\n                      {order.status}\n                    </span>\n                  </div>\n                </div>\n                <div className=\"p-4\">\n                  <div className=\"space-y-3\">\n                    {order.items.map((item: OrderItem) => (\n                      <div key={item.id} className=\"flex justify-between\">\n                        <span>\n                          {item.quantity} × {item.name}\n                        </span>\n                        <span>${(item.price * item.quantity).toFixed(2)}</span>\n                      </div>\n                    ))}\n                  </div>\n                  <div className=\"mt-4 pt-4 border-t border-[#333333] flex justify-between\">\n                    <button className=\"text-gold-foil hover:underline\">\n                      View Details\n                    </button>\n                    <button className=\"text-gold-foil hover:underline\">\n                      Reorder\n                    </button>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"bg-[#1A1A1A] rounded-lg border border-[#333333] p-8 text-center\">\n            <div className=\"w-16 h-16 bg-[#222222] rounded-full flex items-center justify-center mx-auto mb-4\">\n              <FaHistory className=\"text-gray-500 text-2xl\" />\n            </div>\n            <h2 className=\"text-xl font-bold mb-2\">No Orders Yet</h2>\n            <p className=\"text-gray-400 mb-6\">\n              You haven't placed any orders yet.\n            </p>\n            <Link\n              href=\"/menu\"\n              className=\"btn-primary inline-flex items-center gap-2\"\n            >\n              <FaShoppingBag /> Browse Menu\n            </Link>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\ntype OrderItem = {\n  id: string;\n  quantity: number;\n  name: string;\n  price: number;\n};\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/otw/checkout/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Badge' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Clock' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MapPin' is defined but never used. Allowed unused vars must match /^_/u.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Phone' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Mail' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DollarSign' is defined but never used. Allowed unused vars must match /^_/u.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":13},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[977,980],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[977,980],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setOrderComplete' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":61,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setOrderId' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":62,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'orderData' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":166,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":166,"endColumn":22},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":423,"column":35,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[15406,15492],"text":"\n                    Choose how you&apos;d like to pay for your service.\n                  "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[15406,15492],"text":"\n                    Choose how you&lsquo;d like to pay for your service.\n                  "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[15406,15492],"text":"\n                    Choose how you&#39;d like to pay for your service.\n                  "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[15406,15492],"text":"\n                    Choose how you&rsquo;d like to pay for your service.\n                  "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport {\n  CreditCard,\n  Clock,\n  MapPin,\n  User,\n  Phone,\n  Mail,\n  Package,\n  Car,\n  ShoppingCart,\n  CheckCircle,\n  AlertCircle,\n  ArrowLeft,\n  Shield,\n  DollarSign,\n} from 'lucide-react';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { useAuth } from '../../../contexts/AuthContext';\nimport { toast } from '@/components/ui/use-toast';\n\ninterface ServiceDetails {\n  type: 'grocery' | 'rides' | 'package';\n  title: string;\n  description: string;\n  estimatedPrice: number;\n  serviceDetails: any;\n}\n\ninterface CustomerInfo {\n  name: string;\n  phone: string;\n  email: string;\n  address: string;\n  specialInstructions: string;\n}\n\ninterface PaymentMethod {\n  type: 'card';\n  label: string;\n  description: string;\n  icon: React.ReactNode;\n}\n\nexport default function OTWCheckoutPage() {\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const { user } = useAuth();\n\n  const [step, setStep] = useState(1);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [orderComplete, setOrderComplete] = useState(false);\n  const [orderId, setOrderId] = useState('');\n\n  const [serviceDetails, setServiceDetails] = useState<ServiceDetails | null>(null);\n  const [customerInfo, setCustomerInfo] = useState<CustomerInfo>({\n    name: '',\n    phone: '',\n    email: '',\n    address: '',\n    specialInstructions: '',\n  });\n  const [selectedPayment, setSelectedPayment] = useState<'card' | null>('card');\n  const [cardDetails, setCardDetails] = useState({\n    number: '',\n    expiry: '',\n    cvv: '',\n    name: '',\n  });\n\n  const paymentMethods: PaymentMethod[] = [\n    {\n      type: 'card',\n      label: 'Pay with Card',\n      description: 'Secure instant payment with your credit or debit card. Payment processed immediately upon order confirmation.',\n      icon: <CreditCard className=\"w-6 h-6\" />,\n    },\n  ];\n\n  // Load service details from URL params or localStorage\n  useEffect(() => {\n    const serviceType = searchParams.get('service');\n    const storedDetails = localStorage.getItem('otwServiceDetails');\n\n    if (storedDetails) {\n      setServiceDetails(JSON.parse(storedDetails));\n    } else if (serviceType) {\n      // Default service details based on type\n      const defaultServices = {\n        grocery: {\n          type: 'grocery' as const,\n          title: 'Grocery Shop & Drop',\n          description: 'Personal grocery shopping and delivery service',\n          estimatedPrice: 15.99,\n          serviceDetails: {},\n        },\n        rides: {\n          type: 'rides' as const,\n          title: 'Local Rides',\n          description: 'Door-to-door transportation service',\n          estimatedPrice: 12.50,\n          serviceDetails: {},\n        },\n        package: {\n          type: 'package' as const,\n          title: 'Package Delivery',\n          description: 'Fast and secure package delivery',\n          estimatedPrice: 8.99,\n          serviceDetails: {},\n        },\n      };\n\n      if (serviceType in defaultServices) {\n        setServiceDetails(defaultServices[serviceType as keyof typeof defaultServices]);\n      }\n    }\n\n    // Pre-fill user info if authenticated\n    if (user) {\n      setCustomerInfo(prev => ({\n        ...prev,\n        email: user.email || '',\n        name: user.displayName || '',\n      }));\n    }\n  }, [searchParams, user]);\n\n  const validateStep = (stepNumber: number): boolean => {\n    switch (stepNumber) {\n      case 1:\n        return !!(customerInfo.name && customerInfo.phone && customerInfo.email && customerInfo.address);\n      case 2:\n        return !!selectedPayment;\n      case 3:\n        return !!(cardDetails.number && cardDetails.expiry && cardDetails.cvv && cardDetails.name);\n      default:\n        return false;\n    }\n  };\n\n  const handleNextStep = () => {\n    if (validateStep(step)) {\n      setStep(step + 1);\n    } else {\n      toast({\n        title: 'Please complete all required fields',\n        description: 'Fill in all the required information before proceeding.',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const handleSubmitOrder = async () => {\n    setIsProcessing(true);\n\n    try {\n      const orderData = {\n        serviceDetails,\n        customerInfo,\n        paymentMethod: selectedPayment,\n        cardDetails: selectedPayment === 'card' ? cardDetails : null,\n        timestamp: new Date().toISOString(),\n        userId: user?.uid || null,\n      };\n\n      // Process card payment\n      const response = await fetch('/api/otw/create-checkout-session', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': user ? `Bearer ${await user.getIdToken()}` : '',\n        },\n        body: JSON.stringify({\n          serviceDetails,\n          customerInfo,\n          amount: Math.round(serviceDetails?.estimatedPrice * 100) || 0,\n        }),\n      });\n\n      if (response.ok) {\n        const { url } = await response.json();\n        window.location.href = url;\n        return;\n      } else {\n        throw new Error('Payment processing failed');\n      }\n    } catch (error) {\n      console.error('Order submission error:', error);\n      toast({\n        title: 'Order Submission Failed',\n        description: 'There was an error processing your order. Please try again.',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  if (!serviceDetails) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-otw-black via-gray-900 to-black flex items-center justify-center\">\n        <Card className=\"w-full max-w-md mx-4 bg-gray-900 border-otw-red/30\">\n          <CardHeader className=\"text-center\">\n            <AlertCircle className=\"w-12 h-12 text-otw-gold mx-auto mb-4\" />\n            <CardTitle className=\"text-white\">No Service Selected</CardTitle>\n            <CardDescription className=\"text-gray-400\">\n              Please select a service before proceeding to checkout.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Button\n              onClick={() => router.push('/otw')}\n              className=\"w-full bg-otw-red hover:bg-otw-red/80\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Services\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (orderComplete) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-otw-black via-gray-900 to-black flex items-center justify-center\">\n        <Card className=\"w-full max-w-2xl mx-4 bg-gray-900 border-otw-gold/30\">\n          <CardHeader className=\"text-center\">\n            <div className=\"w-16 h-16 bg-otw-gold/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <CheckCircle className=\"w-8 h-8 text-otw-gold\" />\n            </div>\n            <CardTitle className=\"text-2xl text-white mb-2\">Order Confirmed!</CardTitle>\n            <CardDescription className=\"text-gray-400\">\n              Your service request has been successfully submitted.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"bg-otw-black/50 p-6 rounded-lg border border-otw-gold/20\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-gray-400\">Order ID</Label>\n                  <p className=\"text-white font-mono\">{orderId}</p>\n                </div>\n                <div>\n                  <Label className=\"text-gray-400\">Service</Label>\n                  <p className=\"text-white\">{serviceDetails.title}</p>\n                </div>\n                <div>\n                  <Label className=\"text-gray-400\">Payment Method</Label>\n                  <p className=\"text-white\">Card Payment</p>\n                </div>\n                <div>\n                  <Label className=\"text-gray-400\">Estimated Total</Label>\n                  <p className=\"text-white font-semibold\">${serviceDetails.estimatedPrice}</p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-otw-red/10 p-4 rounded-lg border border-otw-red/30\">\n              <div className=\"flex items-start gap-3\">\n                <AlertCircle className=\"w-5 h-5 text-otw-red mt-0.5\" />\n                <div>\n                  <h4 className=\"text-white font-semibold mb-1\">What&apos;s Next?</h4>\n                  <p className=\"text-gray-400 text-sm\">\n                    Your payment has been processed. A community helper will contact you shortly to arrange service delivery.\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <Button\n                onClick={() => router.push('/otw')}\n                variant=\"outline\"\n                className=\"flex-1 border-otw-gold/50 text-otw-gold hover:bg-otw-gold/10\"\n              >\n                Order Another Service\n              </Button>\n              <Button\n                onClick={() => router.push('/orders')}\n                className=\"flex-1 bg-otw-red hover:bg-otw-red/80\"\n              >\n                View My Orders\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-otw-black via-gray-900 to-black py-8\">\n      <div className=\"container mx-auto px-4 max-w-4xl\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl md:text-4xl font-bold text-white mb-2\">\n            Complete Your Order\n          </h1>\n          <p className=\"text-gray-400\">\n            Secure checkout for your OTW service request\n          </p>\n        </div>\n\n        {/* Progress Steps */}\n        <div className=\"flex items-center justify-center mb-8\">\n          <div className=\"flex items-center space-x-4\">\n            {[1, 2, 3].map((stepNumber) => (\n              <div key={stepNumber} className=\"flex items-center\">\n                <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-semibold ${\n                  step >= stepNumber\n                    ? 'bg-otw-gold text-black'\n                    : 'bg-gray-700 text-gray-400'\n                }`}>\n                  {stepNumber}\n                </div>\n                {stepNumber < 3 && (\n                  <div className={`w-12 h-0.5 mx-2 ${\n                    step > stepNumber ? 'bg-otw-gold' : 'bg-gray-700'\n                  }`} />\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Main Content */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Step 1: Customer Information */}\n            {step === 1 && (\n              <Card className=\"bg-gray-900 border-otw-red/30\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2 text-white\">\n                    <User className=\"w-5 h-5 text-otw-gold\" />\n                    Customer Information\n                  </CardTitle>\n                  <CardDescription className=\"text-gray-400\">\n                    Please provide your contact details for service coordination.\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"name\" className=\"text-gray-300\">Full Name *</Label>\n                      <Input\n                        id=\"name\"\n                        value={customerInfo.name}\n                        onChange={(e) => setCustomerInfo(prev => ({ ...prev, name: e.target.value }))}\n                        className=\"bg-otw-black/50 border-otw-gold/30 text-white focus:border-otw-gold\"\n                        placeholder=\"Enter your full name\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"phone\" className=\"text-gray-300\">Phone Number *</Label>\n                      <Input\n                        id=\"phone\"\n                        type=\"tel\"\n                        value={customerInfo.phone}\n                        onChange={(e) => setCustomerInfo(prev => ({ ...prev, phone: e.target.value }))}\n                        className=\"bg-otw-black/50 border-otw-gold/30 text-white focus:border-otw-gold\"\n                        placeholder=\"(555) 123-4567\"\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"email\" className=\"text-gray-300\">Email Address *</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={customerInfo.email}\n                      onChange={(e) => setCustomerInfo(prev => ({ ...prev, email: e.target.value }))}\n                      className=\"bg-otw-black/50 border-otw-gold/30 text-white focus:border-otw-gold\"\n                      placeholder=\"your.email@example.com\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"address\" className=\"text-gray-300\">Service Address *</Label>\n                    <Input\n                      id=\"address\"\n                      value={customerInfo.address}\n                      onChange={(e) => setCustomerInfo(prev => ({ ...prev, address: e.target.value }))}\n                      className=\"bg-otw-black/50 border-otw-gold/30 text-white focus:border-otw-gold\"\n                      placeholder=\"123 Main St, City, State 12345\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"instructions\" className=\"text-gray-300\">Special Instructions</Label>\n                    <Textarea\n                      id=\"instructions\"\n                      value={customerInfo.specialInstructions}\n                      onChange={(e) => setCustomerInfo(prev => ({ ...prev, specialInstructions: e.target.value }))}\n                      className=\"bg-otw-black/50 border-otw-gold/30 text-white focus:border-otw-gold\"\n                      placeholder=\"Any special instructions for the service provider...\"\n                      rows={3}\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Step 2: Payment Method */}\n            {step === 2 && (\n              <Card className=\"bg-gray-900 border-otw-red/30\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2 text-white\">\n                    <CreditCard className=\"w-5 h-5 text-otw-gold\" />\n                    Payment Method\n                  </CardTitle>\n                  <CardDescription className=\"text-gray-400\">\n                    Choose how you'd like to pay for your service.\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {paymentMethods.map((method) => (\n                    <div\n                      key={method.type}\n                      className={`p-4 rounded-lg border-2 cursor-pointer transition-all ${\n                        selectedPayment === method.type\n                          ? 'border-otw-gold bg-otw-gold/10'\n                          : 'border-gray-700 bg-otw-black/30 hover:border-otw-gold/50'\n                      }`}\n                      onClick={() => setSelectedPayment(method.type)}\n                    >\n                      <div className=\"flex items-start gap-4\">\n                        <div className={`p-2 rounded-lg ${\n                          selectedPayment === method.type\n                            ? 'bg-otw-gold text-black'\n                            : 'bg-gray-700 text-gray-400'\n                        }`}>\n                          {method.icon}\n                        </div>\n                        <div className=\"flex-1\">\n                          <h3 className=\"text-white font-semibold mb-1\">{method.label}</h3>\n                          <p className=\"text-gray-400 text-sm\">{method.description}</p>\n                          <div className=\"mt-2 flex items-center gap-2\">\n                            <Shield className=\"w-4 h-4 text-otw-gold\" />\n                            <span className=\"text-xs text-otw-gold\">256-bit SSL encryption • Instant confirmation</span>\n                          </div>\n                        </div>\n                        <div className={`w-5 h-5 rounded-full border-2 flex items-center justify-center ${\n                          selectedPayment === method.type\n                            ? 'border-otw-gold bg-otw-gold'\n                            : 'border-gray-600'\n                        }`}>\n                          {selectedPayment === method.type && (\n                            <div className=\"w-2 h-2 bg-black rounded-full\" />\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Step 3: Payment Details */}\n            {step === 3 && (\n              <Card className=\"bg-gray-900 border-otw-red/30\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2 text-white\">\n                    <CreditCard className=\"w-5 h-5 text-otw-gold\" />\n                    Card Details\n                  </CardTitle>\n                  <CardDescription className=\"text-gray-400\">\n                    Enter your payment information securely.\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"cardName\" className=\"text-gray-300\">Cardholder Name *</Label>\n                    <Input\n                      id=\"cardName\"\n                      value={cardDetails.name}\n                      onChange={(e) => setCardDetails(prev => ({ ...prev, name: e.target.value }))}\n                      className=\"bg-otw-black/50 border-otw-gold/30 text-white focus:border-otw-gold\"\n                      placeholder=\"John Doe\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"cardNumber\" className=\"text-gray-300\">Card Number *</Label>\n                    <Input\n                      id=\"cardNumber\"\n                      value={cardDetails.number}\n                      onChange={(e) => setCardDetails(prev => ({ ...prev, number: e.target.value }))}\n                      className=\"bg-otw-black/50 border-otw-gold/30 text-white focus:border-otw-gold\"\n                      placeholder=\"1234 5678 9012 3456\"\n                      maxLength={19}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"expiry\" className=\"text-gray-300\">Expiry Date *</Label>\n                      <Input\n                        id=\"expiry\"\n                        value={cardDetails.expiry}\n                        onChange={(e) => setCardDetails(prev => ({ ...prev, expiry: e.target.value }))}\n                        className=\"bg-otw-black/50 border-otw-gold/30 text-white focus:border-otw-gold\"\n                        placeholder=\"MM/YY\"\n                        maxLength={5}\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"cvv\" className=\"text-gray-300\">CVV *</Label>\n                      <Input\n                        id=\"cvv\"\n                        value={cardDetails.cvv}\n                        onChange={(e) => setCardDetails(prev => ({ ...prev, cvv: e.target.value }))}\n                        className=\"bg-otw-black/50 border-otw-gold/30 text-white focus:border-otw-gold\"\n                        placeholder=\"123\"\n                        maxLength={4}\n                      />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n\n\n            {/* Navigation Buttons */}\n            <div className=\"flex justify-between\">\n              <Button\n                variant=\"outline\"\n                onClick={() => step > 1 ? setStep(step - 1) : router.push('/otw')}\n                className=\"border-otw-gold/50 text-otw-gold hover:bg-otw-gold/10\"\n              >\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                {step > 1 ? 'Previous' : 'Back to Services'}\n              </Button>\n\n              {step < 3 ? (\n                <Button\n                  onClick={handleNextStep}\n                  className=\"bg-otw-red hover:bg-otw-red/80\"\n                  disabled={!validateStep(step)}\n                >\n                  Continue\n                  <ArrowLeft className=\"w-4 h-4 ml-2 rotate-180\" />\n                </Button>\n              ) : (\n                <Button\n                  onClick={handleSubmitOrder}\n                  className=\"bg-otw-gold text-black hover:bg-otw-gold/80\"\n                  disabled={isProcessing || !validateStep(step)}\n                >\n                  {isProcessing ? (\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-4 h-4 border-2 border-black border-t-transparent rounded-full animate-spin\" />\n                      Processing...\n                    </div>\n                  ) : (\n                    <div className=\"flex items-center gap-2\">\n                      <CheckCircle className=\"w-4 h-4\" />\n                      Pay Now\n                    </div>\n                  )}\n                </Button>\n              )}\n            </div>\n          </div>\n\n          {/* Order Summary Sidebar */}\n          <div className=\"lg:col-span-1\">\n            <Card className=\"bg-gray-900 border-otw-gold/30 sticky top-8\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-white\">\n                  <Package className=\"w-5 h-5 text-otw-gold\" />\n                  Order Summary\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-3\">\n                    {serviceDetails.type === 'grocery' && <ShoppingCart className=\"w-5 h-5 text-otw-red\" />}\n                    {serviceDetails.type === 'rides' && <Car className=\"w-5 h-5 text-otw-gold\" />}\n                    {serviceDetails.type === 'package' && <Package className=\"w-5 h-5 text-otw-red\" />}\n                    <div>\n                      <h3 className=\"text-white font-semibold\">{serviceDetails.title}</h3>\n                      <p className=\"text-gray-400 text-sm\">{serviceDetails.description}</p>\n                    </div>\n                  </div>\n                </div>\n\n                <Separator className=\"bg-otw-gold/20\" />\n\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Service Fee</span>\n                    <span className=\"text-white\">${serviceDetails.estimatedPrice}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Platform Fee</span>\n                    <span className=\"text-white\">$0.00</span>\n                  </div>\n                  <Separator className=\"bg-gray-700\" />\n                  <div className=\"flex justify-between items-center text-lg font-semibold\">\n                    <span className=\"text-white\">Total</span>\n                    <span className=\"text-otw-gold\">${serviceDetails.estimatedPrice}</span>\n                  </div>\n                </div>\n\n                <Separator className=\"bg-otw-gold/20\" />\n                <div className=\"bg-otw-black/50 p-3 rounded-lg\">\n                  <div className=\"flex items-center gap-2 mb-1\">\n                    <CreditCard className=\"w-4 h-4 text-otw-gold\" />\n                    <span className=\"text-white text-sm font-semibold\">\n                      Card Payment\n                    </span>\n                  </div>\n                  <p className=\"text-gray-400 text-xs\">\n                    Secure payment processed immediately\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/otw/checkout/success/page.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":157,"column":24,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[5193,5257],"text":"\n              We couldn&apos;t find your order details.\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[5193,5257],"text":"\n              We couldn&lsquo;t find your order details.\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[5193,5257],"text":"\n              We couldn&#39;t find your order details.\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[5193,5257],"text":"\n              We couldn&rsquo;t find your order details.\n            "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport {\n  CheckCircle,\n  AlertCircle,\n  ArrowLeft,\n  Clock,\n  User,\n  Phone,\n  Mail,\n  MapPin,\n  CreditCard,\n  Package,\n  Car,\n  ShoppingCart,\n} from 'lucide-react';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { useAuth } from '../../../../contexts/AuthContext';\nimport { toast } from '@/components/ui/use-toast';\n\ninterface OrderDetails {\n  orderId: string;\n  serviceDetails: {\n    type: 'grocery' | 'rides' | 'package';\n    title: string;\n    description: string;\n  };\n  customerInfo: {\n    name: string;\n    phone: string;\n    email: string;\n    address: string;\n    specialInstructions: string;\n  };\n  paymentStatus: string;\n  orderStatus: string;\n  actualPrice: number;\n  createdAt: string;\n}\n\nexport default function CheckoutSuccessPage() {\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const { user } = useAuth();\n\n  const [loading, setLoading] = useState(true);\n  const [orderDetails, setOrderDetails] = useState<OrderDetails | null>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  const sessionId = searchParams.get('session_id');\n  const orderId = searchParams.get('order_id');\n\n  useEffect(() => {\n    const verifyPaymentAndFetchOrder = async () => {\n      if (!sessionId || !orderId) {\n        setError('Missing payment session information');\n        setLoading(false);\n        return;\n      }\n\n      try {\n        // Verify payment with Stripe and get order details\n        const response = await fetch('/api/otw/verify-payment', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': user ? `Bearer ${await user.getIdToken()}` : '',\n          },\n          body: JSON.stringify({\n            sessionId,\n            orderId,\n          }),\n        });\n\n        if (response.ok) {\n          const data = await response.json();\n          setOrderDetails(data.order);\n\n          toast({\n            title: 'Payment Successful!',\n            description: 'Your order has been confirmed and will be processed shortly.',\n          });\n        } else {\n          const errorData = await response.json();\n          setError(errorData.error || 'Failed to verify payment');\n        }\n      } catch (error) {\n        console.error('Payment verification error:', error);\n        setError('Failed to verify payment status');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    verifyPaymentAndFetchOrder();\n  }, [sessionId, orderId, user]);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-otw-black via-gray-900 to-black flex items-center justify-center\">\n        <Card className=\"w-full max-w-md mx-4 bg-gray-900 border-otw-gold/30\">\n          <CardContent className=\"flex flex-col items-center justify-center py-12\">\n            <div className=\"w-12 h-12 border-4 border-otw-gold border-t-transparent rounded-full animate-spin mb-4\" />\n            <h3 className=\"text-white text-lg font-semibold mb-2\">Verifying Payment</h3>\n            <p className=\"text-gray-400 text-center\">Please wait while we confirm your payment...</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-otw-black via-gray-900 to-black flex items-center justify-center\">\n        <Card className=\"w-full max-w-md mx-4 bg-gray-900 border-otw-red/30\">\n          <CardHeader className=\"text-center\">\n            <AlertCircle className=\"w-12 h-12 text-otw-red mx-auto mb-4\" />\n            <CardTitle className=\"text-white\">Payment Verification Failed</CardTitle>\n            <CardDescription className=\"text-gray-400\">\n              {error}\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <Button\n              onClick={() => router.push('/otw')}\n              className=\"w-full bg-otw-red hover:bg-otw-red/80\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Services\n            </Button>\n            <Button\n              onClick={() => window.location.reload()}\n              variant=\"outline\"\n              className=\"w-full border-otw-gold/50 text-otw-gold hover:bg-otw-gold/10\"\n            >\n              Try Again\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (!orderDetails) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-otw-black via-gray-900 to-black flex items-center justify-center\">\n        <Card className=\"w-full max-w-md mx-4 bg-gray-900 border-otw-red/30\">\n          <CardHeader className=\"text-center\">\n            <AlertCircle className=\"w-12 h-12 text-otw-red mx-auto mb-4\" />\n            <CardTitle className=\"text-white\">Order Not Found</CardTitle>\n            <CardDescription className=\"text-gray-400\">\n              We couldn't find your order details.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Button\n              onClick={() => router.push('/otw')}\n              className=\"w-full bg-otw-red hover:bg-otw-red/80\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Services\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const getServiceIcon = (type: string) => {\n    switch (type) {\n      case 'grocery':\n        return <ShoppingCart className=\"w-6 h-6 text-otw-red\" />;\n      case 'rides':\n        return <Car className=\"w-6 h-6 text-otw-gold\" />;\n      case 'package':\n        return <Package className=\"w-6 h-6 text-otw-red\" />;\n      default:\n        return <Package className=\"w-6 h-6 text-otw-red\" />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-otw-black via-gray-900 to-black py-8\">\n      <div className=\"container mx-auto px-4 max-w-4xl\">\n        {/* Success Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"w-20 h-20 bg-otw-gold/20 rounded-full flex items-center justify-center mx-auto mb-6\">\n            <CheckCircle className=\"w-10 h-10 text-otw-gold\" />\n          </div>\n          <h1 className=\"text-3xl md:text-4xl font-bold text-white mb-2\">\n            Payment Successful!\n          </h1>\n          <p className=\"text-gray-400 text-lg\">\n            Your order has been confirmed and will be processed shortly.\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Order Details */}\n          <Card className=\"bg-gray-900 border-otw-gold/30\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-white\">\n                {getServiceIcon(orderDetails.serviceDetails.type)}\n                Order Details\n              </CardTitle>\n              <CardDescription className=\"text-gray-400\">\n                Order #{orderDetails.orderId}\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Service Information */}\n              <div className=\"space-y-3\">\n                <div>\n                  <h3 className=\"text-white font-semibold text-lg\">\n                    {orderDetails.serviceDetails.title}\n                  </h3>\n                  <p className=\"text-gray-400\">\n                    {orderDetails.serviceDetails.description}\n                  </p>\n                </div>\n\n                <div className=\"flex items-center gap-4\">\n                  <Badge\n                    variant=\"outline\"\n                    className=\"border-otw-gold/50 text-otw-gold\"\n                  >\n                    <CreditCard className=\"w-3 h-3 mr-1\" />\n                    Paid\n                  </Badge>\n                  <Badge\n                    variant=\"outline\"\n                    className=\"border-otw-red/50 text-otw-red\"\n                  >\n                    <Clock className=\"w-3 h-3 mr-1\" />\n                    {orderDetails.orderStatus === 'confirmed' ? 'Confirmed' : 'Processing'}\n                  </Badge>\n                </div>\n              </div>\n\n              <Separator className=\"bg-otw-gold/20\" />\n\n              {/* Payment Information */}\n              <div className=\"space-y-2\">\n                <h4 className=\"text-white font-semibold\">Payment Summary</h4>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-gray-400\">Service Fee</span>\n                  <span className=\"text-white\">${orderDetails.actualPrice.toFixed(2)}</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-gray-400\">Platform Fee</span>\n                  <span className=\"text-white\">$0.00</span>\n                </div>\n                <Separator className=\"bg-gray-700\" />\n                <div className=\"flex justify-between items-center text-lg font-semibold\">\n                  <span className=\"text-white\">Total Paid</span>\n                  <span className=\"text-otw-gold\">${orderDetails.actualPrice.toFixed(2)}</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Customer Information */}\n          <Card className=\"bg-gray-900 border-otw-red/30\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-white\">\n                <User className=\"w-5 h-5 text-otw-gold\" />\n                Service Details\n              </CardTitle>\n              <CardDescription className=\"text-gray-400\">\n                Information for service delivery\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Customer Contact */}\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-3\">\n                  <User className=\"w-4 h-4 text-otw-gold\" />\n                  <div>\n                    <p className=\"text-white font-medium\">{orderDetails.customerInfo.name}</p>\n                    <p className=\"text-gray-400 text-sm\">Customer</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center gap-3\">\n                  <Phone className=\"w-4 h-4 text-otw-gold\" />\n                  <div>\n                    <p className=\"text-white font-medium\">{orderDetails.customerInfo.phone}</p>\n                    <p className=\"text-gray-400 text-sm\">Phone Number</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center gap-3\">\n                  <Mail className=\"w-4 h-4 text-otw-gold\" />\n                  <div>\n                    <p className=\"text-white font-medium\">{orderDetails.customerInfo.email}</p>\n                    <p className=\"text-gray-400 text-sm\">Email Address</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start gap-3\">\n                  <MapPin className=\"w-4 h-4 text-otw-gold mt-1\" />\n                  <div>\n                    <p className=\"text-white font-medium\">{orderDetails.customerInfo.address}</p>\n                    <p className=\"text-gray-400 text-sm\">Service Address</p>\n                  </div>\n                </div>\n\n                {orderDetails.customerInfo.specialInstructions && (\n                  <div className=\"bg-otw-black/50 p-3 rounded-lg border border-otw-gold/20\">\n                    <h5 className=\"text-white font-semibold text-sm mb-1\">Special Instructions</h5>\n                    <p className=\"text-gray-400 text-sm\">{orderDetails.customerInfo.specialInstructions}</p>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Next Steps */}\n        <Card className=\"mt-8 bg-otw-red/10 border-otw-red/30\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-start gap-4\">\n              <div className=\"w-8 h-8 bg-otw-red/20 rounded-full flex items-center justify-center flex-shrink-0\">\n                <Clock className=\"w-4 h-4 text-otw-red\" />\n              </div>\n              <div className=\"flex-1\">\n                <h3 className=\"text-white font-semibold mb-2\">What Happens Next?</h3>\n                <div className=\"space-y-2 text-gray-400 text-sm\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-1.5 h-1.5 bg-otw-gold rounded-full\" />\n                    <span>Your payment has been processed successfully</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-1.5 h-1.5 bg-otw-gold rounded-full\" />\n                    <span>A community helper will be assigned to your request</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-1.5 h-1.5 bg-otw-gold rounded-full\" />\n                    <span>You&apos;ll receive a call/text to confirm details and timing</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-1.5 h-1.5 bg-otw-gold rounded-full\" />\n                    <span>Service will be completed as requested</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Action Buttons */}\n        <div className=\"flex flex-col sm:flex-row gap-4 mt-8 justify-center\">\n          <Button\n            onClick={() => router.push('/otw')}\n            variant=\"outline\"\n            className=\"border-otw-gold/50 text-otw-gold hover:bg-otw-gold/10\"\n          >\n            Order Another Service\n          </Button>\n          <Button\n            onClick={() => router.push('/orders')}\n            className=\"bg-otw-red hover:bg-otw-red/80\"\n          >\n            View My Orders\n          </Button>\n          <Button\n            onClick={() => router.push('/')}\n            variant=\"outline\"\n            className=\"border-gray-600 text-gray-400 hover:bg-gray-800\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Home\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/otw/grocery-delivery/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isSubmitting' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":48,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'stores' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":51,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleSubmitOrder' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":81,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":81,"endColumn":26},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":110,"column":18,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3772,3848],"text":"\n              You&apos;ll receive updates via SMS and email. Expected delivery: "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3772,3848],"text":"\n              You&lsquo;ll receive updates via SMS and email. Expected delivery: "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3772,3848],"text":"\n              You&#39;ll receive updates via SMS and email. Expected delivery: "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3772,3848],"text":"\n              You&rsquo;ll receive updates via SMS and email. Expected delivery: "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":193,"column":23,"nodeType":"JSXOpeningElement","endLine":197,"endColumn":25},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":402,"column":26,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[17663,17867],"text":"\n                      Final pricing will be calculated based on actual items purchased and store prices.\n                      You&apos;ll be charged only for items successfully obtained.\n                    "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[17663,17867],"text":"\n                      Final pricing will be calculated based on actual items purchased and store prices.\n                      You&lsquo;ll be charged only for items successfully obtained.\n                    "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[17663,17867],"text":"\n                      Final pricing will be calculated based on actual items purchased and store prices.\n                      You&#39;ll be charged only for items successfully obtained.\n                    "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[17663,17867],"text":"\n                      Final pricing will be calculated based on actual items purchased and store prices.\n                      You&rsquo;ll be charged only for items successfully obtained.\n                    "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport PlaceAutocomplete from '../../../components/maps/PlaceAutocomplete';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport {\n  ShoppingCart,\n  Camera,\n  Upload,\n  Clock,\n  DollarSign,\n  Plus,\n  X,\n  CheckCircle,\n  User,\n  CreditCard,\n  Package,\n} from 'lucide-react';\n\ninterface CustomerInfo {\n  name: string;\n  phone: string;\n  email: string;\n  address: string;\n  deliveryInstructions: string;\n}\n\nexport default function GroceryDeliveryPage() {\n  const [receipt, setReceipt] = useState<File | null>(null);\n  const [receiptPreview, setReceiptPreview] = useState<string>('');\n  const [groceryList, setGroceryList] = useState<string>('');\n  const [customerInfo, setCustomerInfo] = useState<CustomerInfo>({\n    name: '',\n    phone: '',\n    email: '',\n    address: '',\n    deliveryInstructions: '',\n  });\n  const [selectedStore, setSelectedStore] = useState('');\n  const [deliveryTime, setDeliveryTime] = useState('');\n  const [specificTime, setSpecificTime] = useState('');\n  const [specialInstructions, setSpecialInstructions] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [orderSubmitted, setOrderSubmitted] = useState(false);\n\n  const stores = [\n    { value: 'fresh-market', label: 'Fresh Market', deliveryFee: '$4.99' },\n    { value: 'supermart', label: 'SuperMart', deliveryFee: '$3.99' },\n    { value: 'organic-foods', label: 'Organic Foods Co.', deliveryFee: '$5.99' },\n    { value: 'quick-stop', label: 'Quick Stop Grocery', deliveryFee: '$2.99' },\n    { value: 'whole-foods', label: 'Whole Foods Market', deliveryFee: '$6.99' },\n  ];\n\n  const timeSlots = [\n    'ASAP',\n    '1 Hour',\n    'Specific Time',\n  ];\n\n\n\n  const handleReceiptUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      setReceipt(file);\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setReceiptPreview(e.target?.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n\n\n  const handleSubmitOrder = async () => {\n    setIsSubmitting(true);\n\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 2000));\n\n    setOrderSubmitted(true);\n    setIsSubmitting(false);\n  };\n\n  if (orderSubmitted) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-otw-gold/10 via-white to-otw-red/10 flex items-center justify-center\">\n        <Card className=\"w-full max-w-md mx-4\">\n          <CardHeader className=\"text-center\">\n            <div className=\"mx-auto w-16 h-16 bg-otw-gold/20 rounded-full flex items-center justify-center mb-4\">\n              <CheckCircle className=\"w-8 h-8 text-otw-gold\" />\n            </div>\n            <CardTitle className=\"text-2xl text-otw-red\">Order Submitted!</CardTitle>\n            <CardDescription className=\"text-gray-300\">\n              Your grocery delivery order has been received and will be processed shortly.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"text-center space-y-4\">\n            <div className=\"bg-otw-black/50 p-4 rounded-lg border border-otw-gold/20\">\n              <p className=\"text-sm text-gray-400\">Order ID</p>\n              <p className=\"font-mono text-lg font-semibold text-otw-gold\">#GD{Date.now().toString().slice(-6)}</p>\n            </div>\n            <p className=\"text-sm text-gray-400\">\n              You'll receive updates via SMS and email. Expected delivery: {deliveryTime}\n            </p>\n            <Button className=\"w-full bg-otw-red hover:bg-otw-red/80 text-white\" onClick={() => window.location.href = '/dashboard'}>\n              Track Your Order\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-otw-black via-gray-900 to-black\">\n      {/* Header */}\n      <div className=\"bg-gray-900 shadow-sm border-b border-otw-red/30\">\n        <div className=\"container mx-auto px-4 py-6\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-12 h-12 bg-gradient-to-r from-otw-red to-otw-gold rounded-xl flex items-center justify-center\">\n              <ShoppingCart className=\"w-6 h-6 text-white\" />\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-bold text-white\">Grocery Delivery</h1>\n              <p className=\"text-gray-300\">Order groceries from your favorite stores</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Main Order Form */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Store Input */}\n            <Card className=\"bg-gray-900 border-otw-red/30\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-white\">\n                  <Package className=\"w-5 h-5 text-otw-red\" />\n                  Store Name\n                </CardTitle>\n                <CardDescription className=\"text-gray-400\">\n                  Enter the name of the store you want to order from\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Input\n                  placeholder=\"e.g., Walmart, Target, Kroger, etc.\"\n                  value={selectedStore}\n                  onChange={(e) => setSelectedStore(e.target.value)}\n                  className=\"bg-otw-black/50 border-otw-gold/30 text-white placeholder:text-gray-500 focus:border-otw-gold\"\n                />\n              </CardContent>\n            </Card>\n\n            {/* Receipt Upload */}\n            <Card className=\"bg-gray-900 border-otw-red/30\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-white\">\n                  <Camera className=\"w-5 h-5 text-otw-gold\" />\n                  Upload Receipt\n                </CardTitle>\n                <CardDescription className=\"text-gray-400\">\n                  Upload a photo of your receipt showing the items you want to purchase\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"border-2 border-dashed border-otw-gold/30 rounded-lg p-6 text-center hover:border-otw-gold/50 transition-colors bg-otw-black/30\">\n                    <input\n                      type=\"file\"\n                      accept=\"image/*\"\n                      onChange={handleReceiptUpload}\n                      className=\"hidden\"\n                      id=\"receipt-upload\"\n                    />\n                    <label htmlFor=\"receipt-upload\" className=\"cursor-pointer\">\n                      <Upload className=\"w-8 h-8 text-otw-gold mx-auto mb-2\" />\n                      <p className=\"text-sm text-white\">Click to upload receipt</p>\n                      <p className=\"text-xs text-gray-400 mt-1\">PNG, JPG up to 10MB</p>\n                    </label>\n                  </div>\n\n                  {receiptPreview && (\n                    <div className=\"relative\">\n                      <img\n                        src={receiptPreview}\n                        alt=\"Receipt\"\n                        className=\"w-full h-48 object-cover rounded-lg border border-otw-gold/30\"\n                      />\n                      <Button\n                        variant=\"destructive\"\n                        size=\"sm\"\n                        className=\"absolute top-2 right-2 bg-otw-red hover:bg-otw-red/80\"\n                        onClick={() => {\n                          setReceipt(null);\n                          setReceiptPreview('');\n                        }}\n                      >\n                        <X className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Grocery List */}\n            <Card className=\"bg-gray-900 border-otw-red/30\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-white\">\n                  <Plus className=\"w-5 h-5 text-otw-gold\" />\n                  Grocery List\n                </CardTitle>\n                <CardDescription className=\"text-gray-400\">\n                  Provide a list of items you want us to purchase for you\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Textarea\n                  placeholder=\"Enter your grocery list here...&#10;&#10;Example:&#10;- 2 lbs bananas&#10;- 1 gallon milk (2%)&#10;- Bread (whole wheat)&#10;- 6 eggs&#10;- Chicken breast (2 lbs)&#10;- Spinach (1 bag)&#10;- Tomatoes (4 large)\"\n                  value={groceryList}\n                  onChange={(e) => setGroceryList(e.target.value)}\n                  rows={8}\n                  className=\"resize-none bg-otw-black/50 border-otw-gold/30 text-white placeholder:text-gray-500 focus:border-otw-gold\"\n                />\n              </CardContent>\n            </Card>\n\n            {/* Special Instructions */}\n            <Card className=\"bg-gray-900 border-otw-red/30\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Special Instructions</CardTitle>\n                <CardDescription className=\"text-gray-400\">\n                  Any specific requests for your shopper\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Textarea\n                  placeholder=\"e.g., Please check expiration dates, prefer organic when available, substitute with similar items if unavailable...\"\n                  value={specialInstructions}\n                  onChange={(e) => setSpecialInstructions(e.target.value)}\n                  rows={4}\n                  className=\"bg-otw-black/50 border-otw-gold/30 text-white placeholder:text-gray-500 focus:border-otw-gold\"\n                />\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Order Summary Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Customer Information */}\n            <Card className=\"bg-gray-900 border-otw-red/30\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-white\">\n                  <User className=\"w-5 h-5 text-otw-red\" />\n                  Your Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"customer-name\" className=\"text-gray-300\">Full Name</Label>\n                  <Input\n                    id=\"customer-name\"\n                    placeholder=\"John Doe\"\n                    value={customerInfo.name}\n                    onChange={(e) => setCustomerInfo({ ...customerInfo, name: e.target.value })}\n                    className=\"bg-otw-black/50 border-otw-gold/30 text-white placeholder:text-gray-500 focus:border-otw-gold\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"customer-phone\" className=\"text-gray-300\">Phone Number</Label>\n                  <Input\n                    id=\"customer-phone\"\n                    placeholder=\"(555) 123-4567\"\n                    value={customerInfo.phone}\n                    onChange={(e) => setCustomerInfo({ ...customerInfo, phone: e.target.value })}\n                    className=\"bg-otw-black/50 border-otw-gold/30 text-white placeholder:text-gray-500 focus:border-otw-gold\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"customer-email\" className=\"text-gray-300\">Email</Label>\n                  <Input\n                    id=\"customer-email\"\n                    type=\"email\"\n                    placeholder=\"john@example.com\"\n                    value={customerInfo.email}\n                    onChange={(e) => setCustomerInfo({ ...customerInfo, email: e.target.value })}\n                    className=\"bg-otw-black/50 border-otw-gold/30 text-white placeholder:text-gray-500 focus:border-otw-gold\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"delivery-address\" className=\"text-gray-300\">Delivery Address</Label>\n                  <PlaceAutocomplete\n                    onPlaceSelect={(place) => {\n                      setCustomerInfo({ ...customerInfo, address: place.formatted_address || '' });\n                      console.log('Selected delivery address:', place);\n                    }}\n                    placeholder=\"Enter delivery address in Fort Wayne, IN...\"\n                    className=\"bg-otw-black/50 border-otw-gold/30 text-white placeholder:text-gray-500 focus:border-otw-gold\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"delivery-instructions\" className=\"text-gray-300\">Delivery Instructions</Label>\n                  <Textarea\n                    id=\"delivery-instructions\"\n                    placeholder=\"Leave at front door, ring doorbell, etc.\"\n                    value={customerInfo.deliveryInstructions}\n                    onChange={(e) => setCustomerInfo({ ...customerInfo, deliveryInstructions: e.target.value })}\n                    rows={2}\n                    className=\"bg-otw-black/50 border-otw-gold/30 text-white placeholder:text-gray-500 focus:border-otw-gold\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Delivery Time */}\n            <Card className=\"bg-gray-900 border-otw-red/30\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-white\">\n                  <Clock className=\"w-5 h-5 text-otw-gold\" />\n                  Delivery Time\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <Select value={deliveryTime} onValueChange={setDeliveryTime}>\n                  <SelectTrigger className=\"bg-otw-black/50 border-otw-gold/30 text-white focus:border-otw-gold\">\n                    <SelectValue placeholder=\"Select delivery time\" className=\"text-gray-500\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {timeSlots.map(slot => (\n                      <SelectItem key={slot} value={slot}>\n                        {slot}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n\n                {deliveryTime === 'Specific Time' && (\n                  <div>\n                    <Label htmlFor=\"specific-time\" className=\"text-gray-300\">Specific Time</Label>\n                    <Input\n                      id=\"specific-time\"\n                      type=\"datetime-local\"\n                      value={specificTime}\n                      onChange={(e) => setSpecificTime(e.target.value)}\n                      min={new Date().toISOString().slice(0, 16)}\n                      className=\"bg-otw-black/50 border-otw-gold/30 text-white focus:border-otw-gold\"\n                    />\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Order Summary */}\n            <Card className=\"bg-gray-900 border-otw-red/30\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-white\">\n                  <DollarSign className=\"w-5 h-5 text-otw-gold\" />\n                  Order Summary\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"bg-otw-black/50 p-4 rounded-lg space-y-3 border border-otw-gold/20\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"font-medium text-gray-300\">Store:</span>\n                    <span className=\"text-white\">{selectedStore || 'Not selected'}</span>\n                  </div>\n\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"font-medium text-gray-300\">Items:</span>\n                    <span className=\"text-white\">\n                      {receiptPreview ? 'Receipt uploaded' :\n                       groceryList ? 'Grocery list provided' : 'No items specified'}\n                    </span>\n                  </div>\n\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"font-medium text-gray-300\">Delivery Time:</span>\n                    <span className=\"text-white\">\n                      {deliveryTime === 'Specific Time' && specificTime\n                        ? new Date(specificTime).toLocaleString()\n                        : deliveryTime || 'Not selected'}\n                    </span>\n                  </div>\n\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"font-medium text-gray-300\">Customer:</span>\n                    <span className=\"text-white\">{customerInfo.name || 'Not provided'}</span>\n                  </div>\n\n                  <div className=\"border-t border-otw-gold/20 pt-3\">\n                    <p className=\"text-sm text-gray-400\">\n                      Final pricing will be calculated based on actual items purchased and store prices.\n                      You'll be charged only for items successfully obtained.\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Submit Button */}\n            <Button\n              className=\"w-full h-12 text-lg bg-otw-red hover:bg-otw-red/80 text-white disabled:bg-gray-600 disabled:text-gray-400\"\n              onClick={() => {\n                // Store service details in localStorage for checkout\n                const serviceDetails = {\n                  type: 'grocery' as const,\n                  title: 'Grocery Shop & Drop',\n                  description: 'Personal grocery shopping and delivery service',\n                  estimatedPrice: 15.99,\n                  serviceDetails: {\n                    selectedStore,\n                    deliveryTime,\n                    receipt: receipt ? 'uploaded' : null,\n                    groceryList: groceryList || null,\n                  },\n                };\n\n                const customerDetails = {\n                  name: customerInfo.name,\n                  phone: customerInfo.phone,\n                  email: customerInfo.email,\n                  address: customerInfo.address,\n                  specialInstructions: `Store: ${selectedStore}, Delivery: ${deliveryTime}. ${receipt ? 'Receipt uploaded.' : ''} ${groceryList ? 'Grocery list provided.' : ''}`,\n                };\n\n                localStorage.setItem('otwServiceDetails', JSON.stringify(serviceDetails));\n                localStorage.setItem('otwCustomerInfo', JSON.stringify(customerDetails));\n\n                // Navigate to checkout\n                window.location.href = '/otw/checkout?service=grocery';\n              }}\n              disabled={!selectedStore || !customerInfo.name || !customerInfo.phone || !customerInfo.address || (!receiptPreview && !groceryList) || !deliveryTime}\n            >\n              <div className=\"flex items-center gap-2\">\n                <CreditCard className=\"w-5 h-5\" />\n                Proceed to Checkout\n              </div>\n            </Button>\n\n            <div className=\"text-xs text-gray-400 text-center\">\n              By placing this order, you agree to our terms of service and privacy policy.\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/otw/package/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Metadata' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Card' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardContent' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardDescription' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardHeader' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":56},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardTitle' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":58,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":67},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Separator' is defined but never used. Allowed unused vars must match /^_/u.","line":19,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Badge' is defined but never used. Allowed unused vars must match /^_/u.","line":20,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Calendar' is defined but never used. Allowed unused vars must match /^_/u.","line":21,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Popover' is defined but never used. Allowed unused vars must match /^_/u.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PopoverContent' is defined but never used. Allowed unused vars must match /^_/u.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PopoverTrigger' is defined but never used. Allowed unused vars must match /^_/u.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaTruck' is defined but never used. Allowed unused vars must match /^_/u.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaClock' is defined but never used. Allowed unused vars must match /^_/u.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaMapMarkerAlt' is defined but never used. Allowed unused vars must match /^_/u.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaDollarSign' is defined but never used. Allowed unused vars must match /^_/u.","line":31,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaShieldAlt' is defined but never used. Allowed unused vars must match /^_/u.","line":32,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaCalendarAlt' is defined but never used. Allowed unused vars must match /^_/u.","line":33,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaWeight' is defined but never used. Allowed unused vars must match /^_/u.","line":34,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaRuler' is defined but never used. Allowed unused vars must match /^_/u.","line":35,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaPhone' is defined but never used. Allowed unused vars must match /^_/u.","line":36,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaEnvelope' is defined but never used. Allowed unused vars must match /^_/u.","line":37,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaUser' is defined but never used. Allowed unused vars must match /^_/u.","line":38,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaHome' is defined but never used. Allowed unused vars must match /^_/u.","line":39,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaBuilding' is defined but never used. Allowed unused vars must match /^_/u.","line":40,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaGift' is defined but never used. Allowed unused vars must match /^_/u.","line":41,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaSnowflake' is defined but never used. Allowed unused vars must match /^_/u.","line":42,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaExclamationTriangle' is defined but never used. Allowed unused vars must match /^_/u.","line":43,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaCheckCircle' is defined but never used. Allowed unused vars must match /^_/u.","line":44,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaInfoCircle' is defined but never used. Allowed unused vars must match /^_/u.","line":45,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaStar' is defined but never used. Allowed unused vars must match /^_/u.","line":46,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaThumbsUp' is defined but never used. Allowed unused vars must match /^_/u.","line":47,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaHeart' is defined but never used. Allowed unused vars must match /^_/u.","line":48,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaShare' is defined but never used. Allowed unused vars must match /^_/u.","line":49,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaComment' is defined but never used. Allowed unused vars must match /^_/u.","line":50,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaEye' is defined but never used. Allowed unused vars must match /^_/u.","line":51,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaDownload' is defined but never used. Allowed unused vars must match /^_/u.","line":52,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaPrint' is defined but never used. Allowed unused vars must match /^_/u.","line":53,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaEdit' is defined but never used. Allowed unused vars must match /^_/u.","line":54,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaTrash' is defined but never used. Allowed unused vars must match /^_/u.","line":55,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaPlus' is defined but never used. Allowed unused vars must match /^_/u.","line":56,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaMinus' is defined but never used. Allowed unused vars must match /^_/u.","line":57,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":57,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaArrowLeft' is defined but never used. Allowed unused vars must match /^_/u.","line":58,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaArrowRight' is defined but never used. Allowed unused vars must match /^_/u.","line":59,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaArrowUp' is defined but never used. Allowed unused vars must match /^_/u.","line":60,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaArrowDown' is defined but never used. Allowed unused vars must match /^_/u.","line":61,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CalendarIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":64,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MapPin' is defined but never used. Allowed unused vars must match /^_/u.","line":66,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Star' is defined but never used. Allowed unused vars must match /^_/u.","line":70,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Users' is defined but never used. Allowed unused vars must match /^_/u.","line":73,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":73,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Search' is defined but never used. Allowed unused vars must match /^_/u.","line":75,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":75,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AlertCircle' is defined but never used. Allowed unused vars must match /^_/u.","line":86,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":86,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'User' is defined but never used. Allowed unused vars must match /^_/u.","line":87,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":87,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Phone' is defined but never used. Allowed unused vars must match /^_/u.","line":88,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":88,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Mail' is defined but never used. Allowed unused vars must match /^_/u.","line":89,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":89,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Upload' is defined but never used. Allowed unused vars must match /^_/u.","line":90,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":90,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'X' is defined but never used. Allowed unused vars must match /^_/u.","line":91,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":91,"endColumn":4},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setPackageWeight' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":125,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":125,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setPackageDimensions' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":126,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":126,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSpecialInstructions' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":127,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":127,"endColumn":53},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'estimatedPrice' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":128,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":128,"endColumn":24},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":474,"column":74,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[19319,19334],"text":"What&apos;s included"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[19319,19334],"text":"What&lsquo;s included"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[19319,19334],"text":"What&#39;s included"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[19319,19334],"text":"What&rsquo;s included"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":62,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nexport const dynamic = 'force-dynamic';\n\nimport type { Metadata } from 'next';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../../components/ui/card';\nimport { Button } from '../../../components/ui/button';\nimport { Input } from '../../../components/ui/input';\nimport { Label } from '../../../components/ui/label';\nimport { Textarea } from '../../../components/ui/textarea';\n\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '../../../components/ui/select';\nimport { Separator } from '../../../components/ui/separator';\nimport { Badge } from '../../../components/ui/badge';\nimport { Calendar } from '../../../components/ui/calendar';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '../../../components/ui/popover';\nimport {\n  FaTruck,\n  FaClock,\n  FaMapMarkerAlt,\n  FaDollarSign,\n  FaShieldAlt,\n  FaCalendarAlt,\n  FaWeight,\n  FaRuler,\n  FaPhone,\n  FaEnvelope,\n  FaUser,\n  FaHome,\n  FaBuilding,\n  FaGift,\n  FaSnowflake,\n  FaExclamationTriangle,\n  FaCheckCircle,\n  FaInfoCircle,\n  FaStar,\n  FaThumbsUp,\n  FaHeart,\n  FaShare,\n  FaComment,\n  FaEye,\n  FaDownload,\n  FaPrint,\n  FaEdit,\n  FaTrash,\n  FaPlus,\n  FaMinus,\n  FaArrowLeft,\n  FaArrowRight,\n  FaArrowUp,\n  FaArrowDown,\n} from 'react-icons/fa';\nimport {\n  CalendarIcon,\n  Clock,\n  MapPin,\n  Package,\n  CreditCard,\n  Info,\n  Star,\n  Shield,\n  Zap,\n  Users,\n  ArrowRight,\n  Search,\n  Truck,\n  Timer,\n  CheckCircle,\n  Box,\n  FileText,\n  Camera,\n  Scale,\n  DollarSign,\n  Globe,\n  Smartphone,\n  AlertCircle,\n  User,\n  Phone,\n  Mail,\n  Upload,\n  X,\n} from 'lucide-react';\nimport Link from 'next/link';\nimport { useState, useEffect } from 'react';\nimport PlaceAutocomplete from '../../../components/maps/PlaceAutocomplete';\n\ninterface DeliveryService {\n  id: string;\n  name: string;\n  description: string;\n  basePrice: number;\n  pricePerMile: number;\n  maxWeight: number;\n  maxDimensions: string;\n  estimatedDelivery: string;\n  features: string[];\n  available?: boolean;\n}\n\ninterface PackageType {\n  id: string;\n  name: string;\n  description: string;\n  maxWeight: number;\n  maxDimensions: string;\n  handling: string;\n  available?: boolean;\n}\n\nexport default function PackagePage() {\n  const [selectedService, setSelectedService] = useState<string | null>(null);\n  const [pickupAddress, setPickupAddress] = useState('');\n  const [deliveryAddress, setDeliveryAddress] = useState('');\n  const [packageType, setPackageType] = useState('');\n  const [packageWeight, setPackageWeight] = useState('');\n  const [packageDimensions, setPackageDimensions] = useState('');\n  const [specialInstructions, setSpecialInstructions] = useState('');\n  const [estimatedPrice, setEstimatedPrice] = useState<number | null>(null);\n  const [deliveryServices, setDeliveryServices] = useState<DeliveryService[]>([]);\n  const [packageTypes, setPackageTypes] = useState<PackageType[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  // Fetch delivery services and package types from API\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const [servicesResponse, typesResponse] = await Promise.all([\n          fetch('/api/packages?type=services'),\n          fetch('/api/packages?type=package-types'),\n        ]);\n\n        const servicesData = await servicesResponse.json();\n        const typesData = await typesResponse.json();\n\n        if (servicesData.success) {\n          setDeliveryServices(servicesData.data);\n        }\n        if (typesData.success) {\n          setPackageTypes(typesData.data);\n        }\n      } catch (error) {\n        console.error('Error fetching package data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  // Calculate estimated price based on distance and selected service\n  const calculateEstimatedPrice = (service: DeliveryService, distance: number = 5) => {\n    return service.basePrice + (service.pricePerMile * distance);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-otw-gold mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading delivery options...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Handle service selection\n  const handleServiceSelect = (serviceId: string) => {\n    setSelectedService(serviceId);\n    const service = deliveryServices.find(s => s.id === serviceId);\n    if (service) {\n      setEstimatedPrice(calculateEstimatedPrice(service));\n    }\n  };\n\n  // Get icon for service type\n  const getServiceIcon = (serviceName: string) => {\n    if (serviceName.toLowerCase().includes('express') || serviceName.toLowerCase().includes('same')) {return Zap;}\n    if (serviceName.toLowerCase().includes('standard')) {return Truck;}\n    if (serviceName.toLowerCase().includes('fragile')) {return Shield;}\n    return Clock;\n  };\n\n  // Get icon for package type\n  const getPackageIcon = (typeName: string) => {\n    if (typeName.toLowerCase().includes('small') || typeName.toLowerCase().includes('document')) {return FileText;}\n    if (typeName.toLowerCase().includes('medium')) {return Box;}\n    return Package;\n  };\n\n  return (\n    <div className=\"min-h-screen pb-20 pt-16\">\n      {/* Enhanced Hero Section */}\n      <section className=\"relative min-h-[70vh] flex items-center justify-center overflow-hidden bg-gradient-to-br from-otw-black via-otw-black-800 to-otw-black-900\">\n        <div className=\"absolute inset-0 z-0\">\n          <div className=\"absolute inset-0 bg-gradient-to-r from-black/80 via-black/60 to-transparent z-10\"></div>\n          <div\n            className=\"absolute inset-0 bg-cover bg-center opacity-40\"\n            style={{ backgroundImage: \"url('/images/package-hero.jpg')\" }}\n          ></div>\n          {/* Animated background elements */}\n          <div className=\"absolute top-20 left-10 w-2 h-2 bg-otw-gold rounded-full animate-pulse\"></div>\n          <div className=\"absolute top-40 right-20 w-1 h-1 bg-otw-red rounded-full animate-ping\"></div>\n          <div className=\"absolute bottom-32 left-1/4 w-1.5 h-1.5 bg-otw-gold-400 rounded-full animate-pulse delay-1000\"></div>\n        </div>\n\n        <div className=\"container mx-auto px-4 z-10\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            {/* Left side - Hero content */}\n            <div className=\"text-left\">\n              <div className=\"inline-flex items-center bg-otw-gold/10 border border-otw-gold/20 rounded-full px-4 py-2 mb-6\">\n                <Package className=\"w-4 h-4 text-otw-gold mr-2\" />\n                <span className=\"text-otw-gold text-sm font-medium\">Trusted by 10,000+ customers</span>\n              </div>\n              <h1 className=\"text-6xl lg:text-7xl font-bold mb-6 text-white leading-tight\">\n                Package delivery\n                <span className=\"block text-otw-gold\">made simple</span>\n              </h1>\n              <p className=\"text-xl text-gray-300 mb-8 max-w-lg\">\n                Send packages anywhere in the city with real-time tracking, secure handling, and guaranteed delivery times.\n              </p>\n\n              {/* Quick stats */}\n              <div className=\"flex flex-wrap gap-6 mb-8\">\n                <div className=\"flex items-center text-gray-300\">\n                  <Timer className=\"w-5 h-5 text-otw-gold mr-2\" />\n                  <span>2-hour delivery</span>\n                </div>\n                <div className=\"flex items-center text-gray-300\">\n                  <Shield className=\"w-5 h-5 text-otw-gold mr-2\" />\n                  <span>$1000 insurance</span>\n                </div>\n                <div className=\"flex items-center text-gray-300\">\n                  <CheckCircle className=\"w-5 h-5 text-otw-gold mr-2\" />\n                  <span>99.9% success rate</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Right side - Quick quote form */}\n            <div className=\"bg-white/10 backdrop-blur-lg rounded-2xl p-8 border border-white/20\">\n              <h3 className=\"text-2xl font-bold text-white mb-6\">Get instant quote</h3>\n\n              <div className=\"space-y-4\">\n                <PlaceAutocomplete\n                  onPlaceSelect={(place) => {\n                    setPickupAddress(place.formatted_address || '');\n                    console.log('Selected pickup address:', place);\n                  }}\n                  placeholder=\"Pickup address in Fort Wayne, IN...\"\n                  className=\"h-14 bg-white/10 border-white/20 text-white placeholder:text-gray-400 text-lg\"\n                />\n\n                <PlaceAutocomplete\n                  onPlaceSelect={(place) => {\n                    setDeliveryAddress(place.formatted_address || '');\n                    console.log('Selected delivery address:', place);\n                  }}\n                  placeholder=\"Delivery address in Fort Wayne, IN...\"\n                  className=\"h-14 bg-white/10 border-white/20 text-white placeholder:text-gray-400 text-lg\"\n                />\n\n                <Select value={packageType} onValueChange={setPackageType}>\n                  <SelectTrigger className=\"h-14 bg-white/10 border-white/20 text-white\">\n                    <div className=\"flex items-center\">\n                      <Package className=\"w-5 h-5 text-gray-400 mr-3\" />\n                      <SelectValue placeholder=\"Package type\" />\n                    </div>\n                  </SelectTrigger>\n                  <SelectContent>\n                    {packageTypes.map((type) => {\n                      const IconComponent = getPackageIcon(type.name);\n                      return (\n                        <SelectItem key={type.id} value={type.name.toLowerCase()}>\n                          <div className=\"flex items-center\">\n                            <IconComponent className=\"w-4 h-4 mr-2\" />\n                            <span>{type.name} (up to {type.maxWeight})</span>\n                          </div>\n                        </SelectItem>\n                      );\n                    })}\n                  </SelectContent>\n                </Select>\n\n                <Button\n                  size=\"lg\"\n                  className=\"w-full h-14 text-lg font-semibold bg-otw-red hover:bg-otw-red/80 text-white\"\n                  disabled={!pickupAddress || !deliveryAddress}\n                >\n                  Calculate price & time\n                  <ArrowRight className=\"ml-2 w-5 h-5\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Service Selection Section */}\n      <section className=\"py-20 bg-gray-50\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-4\">Choose your delivery speed</h2>\n            <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n              From urgent same-day delivery to scheduled delivery, we have options for every need.\n            </p>\n          </div>\n\n          <div className=\"max-w-6xl mx-auto grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {deliveryServices.map((service) => {\n              const IconComponent = getServiceIcon(service.name);\n              const estimatedPrice = calculateEstimatedPrice(service);\n              return (\n                <div\n                  key={service.id}\n                  className={`relative bg-white rounded-2xl overflow-hidden shadow-lg border-2 transition-all duration-300 cursor-pointer hover:shadow-xl ${\n                    selectedService === service.id\n                      ? 'border-otw-gold shadow-lg scale-105'\n                      : 'border-gray-200 hover:border-gray-300'\n                  }`}\n                  onClick={() => handleServiceSelect(service.id)}\n                >\n                  {selectedService === service.id && (\n                    <div className=\"absolute top-4 right-4 w-8 h-8 bg-otw-gold rounded-full flex items-center justify-center z-10\">\n                      <CheckCircle className=\"w-5 h-5 text-white\" />\n                    </div>\n                  )}\n\n                  <div className={`h-32 bg-gradient-to-br ${service.color || 'from-otw-gold to-otw-gold-600'} flex items-center justify-center`}>\n                    <IconComponent className=\"w-16 h-16 text-white\" />\n                  </div>\n\n                  <div className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h3 className=\"text-xl font-bold text-gray-900\">{service.name}</h3>\n                      <div className=\"text-right\">\n                        <div className=\"text-2xl font-bold text-otw-red\">${estimatedPrice.toFixed(2)}</div>\n                        <div className=\"text-sm text-gray-500\">{service.estimatedTime}</div>\n                      </div>\n                    </div>\n\n                    <p className=\"text-gray-600 mb-4\">{service.description}</p>\n\n                    <div className=\"space-y-2\">\n                      {service.features && service.features.map((feature, index) => (\n                        <div key={index} className=\"flex items-center text-sm text-gray-700\">\n                          <CheckCircle className=\"w-4 h-4 text-otw-gold mr-2\" />\n                          <span>{feature}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n\n          {/* Package Types Section */}\n          <div className=\"mt-16\">\n            <h3 className=\"text-2xl font-bold text-gray-900 mb-8 text-center\">What are you sending?</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              {packageTypes.map((type) => {\n                const IconComponent = type.icon;\n                return (\n                  <div\n                    key={type.name}\n                    className=\"group bg-white rounded-xl p-6 text-center hover:shadow-lg transition-all duration-300 cursor-pointer border border-gray-200 hover:border-gray-300\"\n                  >\n                    <div className=\"w-12 h-12 bg-otw-red rounded-xl flex items-center justify-center mx-auto mb-3 group-hover:scale-110 transition-transform duration-300\">\n                      <IconComponent className=\"w-6 h-6 text-white\" />\n                    </div>\n                    <h4 className=\"font-semibold text-gray-900 text-sm mb-1\">{type.name}</h4>\n                    <p className=\"text-xs text-gray-500 mb-2\">Up to {type.maxWeight}</p>\n                    <p className=\"text-xs text-gray-400\">{type.examples}</p>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* Detailed Booking Form */}\n          <div className=\"max-w-4xl mx-auto mt-16\">\n            <div className=\"bg-white rounded-2xl shadow-xl p-8 border border-gray-200\">\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-8\">Package details</h3>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n                <div>\n                  <Label className=\"text-gray-700 font-medium\">Package dimensions</Label>\n                  <div className=\"grid grid-cols-3 gap-2 mt-2\">\n                    <Input placeholder=\"Length\" className=\"h-12\" />\n                    <Input placeholder=\"Width\" className=\"h-12\" />\n                    <Input placeholder=\"Height\" className=\"h-12\" />\n                  </div>\n                  <p className=\"text-xs text-gray-500 mt-1\">Dimensions in inches</p>\n                </div>\n\n                <div>\n                  <Label className=\"text-gray-700 font-medium\">Weight & Value</Label>\n                  <div className=\"grid grid-cols-2 gap-2 mt-2\">\n                    <div className=\"relative\">\n                      <Scale className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                      <Input placeholder=\"Weight (lbs)\" className=\"pl-10 h-12\" />\n                    </div>\n                    <div className=\"relative\">\n                      <DollarSign className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                      <Input placeholder=\"Value ($)\" className=\"pl-10 h-12\" />\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n                <div>\n                  <Label className=\"text-gray-700 font-medium\">Pickup details</Label>\n                  <div className=\"space-y-3 mt-2\">\n                    <Input placeholder=\"Contact name\" className=\"h-12\" />\n                    <Input placeholder=\"Phone number\" className=\"h-12\" />\n                    <Select>\n                      <SelectTrigger className=\"h-12\">\n                        <SelectValue placeholder=\"Pickup time\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"asap\">ASAP (within 2 hours)</SelectItem>\n                        <SelectItem value=\"today\">Later today</SelectItem>\n                        <SelectItem value=\"tomorrow\">Tomorrow</SelectItem>\n                        <SelectItem value=\"scheduled\">Schedule for later</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div>\n                  <Label className=\"text-gray-700 font-medium\">Delivery details</Label>\n                  <div className=\"space-y-3 mt-2\">\n                    <Input placeholder=\"Recipient name\" className=\"h-12\" />\n                    <Input placeholder=\"Recipient phone\" className=\"h-12\" />\n                    <Select>\n                      <SelectTrigger className=\"h-12\">\n                        <SelectValue placeholder=\"Delivery instructions\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"door\">Leave at door</SelectItem>\n                        <SelectItem value=\"person\">Hand to person</SelectItem>\n                        <SelectItem value=\"concierge\">Leave with concierge</SelectItem>\n                        <SelectItem value=\"signature\">Signature required</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"mb-6\">\n                <Label className=\"text-gray-700 font-medium\">Special instructions (optional)</Label>\n                <Textarea\n                  placeholder=\"Any special handling instructions, access codes, or delivery notes...\"\n                  className=\"mt-2 min-h-[100px]\"\n                />\n              </div>\n\n              <div className=\"bg-gradient-to-r from-otw-gold/10 to-otw-red/10 p-6 rounded-xl mb-8 border border-otw-gold/20\">\n                <div className=\"flex items-start\">\n                  <Info className=\"w-6 h-6 text-otw-gold mr-3 flex-shrink-0 mt-0.5\" />\n                  <div>\n                    <h4 className=\"font-semibold text-gray-900 mb-2\">What's included</h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 text-sm text-gray-700\">\n                      <div className=\"flex items-center\">\n                        <CheckCircle className=\"w-4 h-4 text-otw-gold mr-2\" />\n                        <span>Real-time GPS tracking</span>\n                      </div>\n                      <div className=\"flex items-center\">\n                        <CheckCircle className=\"w-4 h-4 text-otw-gold mr-2\" />\n                        <span>Photo confirmation of delivery</span>\n                      </div>\n                      <div className=\"flex items-center\">\n                        <CheckCircle className=\"w-4 h-4 text-otw-gold mr-2\" />\n                        <span>SMS & email notifications</span>\n                      </div>\n                      <div className=\"flex items-center\">\n                        <CheckCircle className=\"w-4 h-4 text-otw-gold mr-2\" />\n                        <span>Up to $1000 insurance coverage</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Button variant=\"outline\" className=\"flex-1 h-12\">\n                  Save as template\n                </Button>\n                <Button\n                  onClick={() => {\n                    // Get selected service details\n                    const selectedServiceData = deliveryServices.find(s => s.id === selectedService);\n\n                    if (!selectedServiceData) {\n                      alert('Please select a delivery service first');\n                      return;\n                    }\n\n                    // Store service details in localStorage for checkout\n                    const serviceDetails = {\n                      type: 'package' as const,\n                      title: selectedServiceData.name,\n                      description: selectedServiceData.description,\n                      estimatedPrice: calculateEstimatedPrice(selectedServiceData),\n                      serviceDetails: {\n                        pickupAddress,\n                        deliveryAddress,\n                        packageType,\n                        packageWeight,\n                        packageDimensions,\n                        specialInstructions,\n                        selectedService: selectedServiceData.name,\n                        estimatedDelivery: selectedServiceData.estimatedDelivery,\n                      },\n                    };\n\n                    // Store basic customer info (will be completed in checkout)\n                    const customerDetails = {\n                      name: '',\n                      phone: '',\n                      email: '',\n                      address: pickupAddress,\n                      specialInstructions: `Pickup: ${pickupAddress}, Delivery: ${deliveryAddress}. Package: ${packageType}. ${specialInstructions}`,\n                    };\n\n                    localStorage.setItem('otwServiceDetails', JSON.stringify(serviceDetails));\n                    localStorage.setItem('otwCustomerInfo', JSON.stringify(customerDetails));\n\n                    // Navigate to checkout\n                    window.location.href = '/otw/checkout?service=package';\n                  }}\n                  disabled={!selectedService || !pickupAddress || !deliveryAddress}\n                  className=\"flex-1 h-12 bg-otw-red hover:bg-otw-red/80 text-white font-semibold\"\n                >\n                  <div className=\"flex items-center justify-center w-full\">\n                     <CreditCard className=\"mr-2 w-5 h-5\" />\n                     Proceed to Checkout\n                     <ArrowRight className=\"ml-2 w-5 h-5\" />\n                   </div>\n                 </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Enhanced Features Section */}\n      <section className=\"py-20 bg-gray-900\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-white mb-4\">\n              Why choose OTW Package Delivery\n            </h2>\n            <p className=\"text-xl text-gray-400 max-w-2xl mx-auto\">\n              Professional package delivery service with advanced tracking, secure handling, and guaranteed delivery times.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            <div className=\"group text-center\">\n              <div className=\"w-20 h-20 bg-gradient-to-br from-otw-red to-otw-red/80 rounded-2xl flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform duration-300\">\n                <Smartphone className=\"w-10 h-10 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-bold mb-3 text-white\">Real-time tracking</h3>\n              <p className=\"text-gray-400\">\n                Track your package every step of the way with live GPS updates and notifications.\n              </p>\n            </div>\n\n            <div className=\"group text-center\">\n              <div className=\"w-20 h-20 bg-gradient-to-br from-otw-gold to-otw-gold/80 rounded-2xl flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform duration-300\">\n                <Shield className=\"w-10 h-10 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-bold mb-3 text-white\">Secure handling</h3>\n              <p className=\"text-gray-400\">\n                Professional couriers with background checks and secure vehicle storage.\n              </p>\n            </div>\n\n            <div className=\"group text-center\">\n              <div className=\"w-20 h-20 bg-gradient-to-br from-otw-red to-otw-gold rounded-2xl flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform duration-300\">\n                <Camera className=\"w-10 h-10 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-bold mb-3 text-white\">Proof of delivery</h3>\n              <p className=\"text-gray-400\">\n                Photo confirmation and digital signatures for complete peace of mind.\n              </p>\n            </div>\n\n            <div className=\"group text-center\">\n              <div className=\"w-20 h-20 bg-gradient-to-br from-otw-gold to-otw-red rounded-2xl flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform duration-300\">\n                <Globe className=\"w-10 h-10 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-bold mb-3 text-white\">City-wide coverage</h3>\n              <p className=\"text-gray-400\">\n                Delivery anywhere in the metro area with competitive pricing and fast service.\n              </p>\n            </div>\n          </div>\n\n          {/* Pricing transparency */}\n          <div className=\"mt-16\">\n            <div className=\"bg-white/10 rounded-2xl p-8 border border-white/20\">\n              <h3 className=\"text-2xl font-bold text-white mb-6 text-center\">Transparent pricing</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-otw-red mb-2\">$6.99</div>\n                  <div className=\"text-white font-medium mb-1\">Base rate</div>\n                  <div className=\"text-gray-400 text-sm\">First 5 miles included</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-otw-gold mb-2\">$1.50</div>\n                  <div className=\"text-white font-medium mb-1\">Per additional mile</div>\n                  <div className=\"text-gray-400 text-sm\">Beyond 5 mile radius</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-otw-red mb-2\">Free</div>\n                  <div className=\"text-white font-medium mb-1\">Insurance</div>\n                  <div className=\"text-gray-400 text-sm\">Up to $1000 coverage</div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Social proof */}\n          <div className=\"mt-16 text-center\">\n            <div className=\"inline-flex items-center bg-white/10 rounded-full px-8 py-4\">\n              <div className=\"flex -space-x-2 mr-4\">\n                <div className=\"w-8 h-8 bg-otw-red rounded-full border-2 border-white\"></div>\n              <div className=\"w-8 h-8 bg-otw-gold rounded-full border-2 border-white\"></div>\n              <div className=\"w-8 h-8 bg-otw-red rounded-full border-2 border-white\"></div>\n                <div className=\"w-8 h-8 bg-otw-gold rounded-full border-2 border-white flex items-center justify-center text-xs font-bold text-white\">+</div>\n              </div>\n              <span className=\"text-white font-medium\">Trusted by 10,000+ customers for secure package delivery</span>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Tier Membership CTA */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"bg-gradient-to-r from-otw-red to-otw-gold rounded-2xl overflow-hidden shadow-2xl p-8 text-center\">\n            <h2 className=\"text-3xl font-bold mb-4 text-white\">\n              Save More with Tier Membership\n            </h2>\n            <p className=\"text-xl text-white/90 mb-8 max-w-2xl mx-auto\">\n              Join our Tier Membership program and enjoy exclusive benefits like\n              discounted delivery rates, priority service, and free insurance upgrades.\n            </p>\n            <Link href=\"/tier\">\n              <Button size=\"lg\" className=\"bg-white text-otw-red hover:bg-gray-100 font-semibold\">\n                Learn About Tier Membership\n                <ArrowRight className=\"ml-2 w-5 h-5\" />\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/otw/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Clock' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MapPin' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Shield' is defined but never used. Allowed unused vars must match /^_/u.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Phone' is defined but never used. Allowed unused vars must match /^_/u.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Mail' is defined but never used. Allowed unused vars must match /^_/u.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Calendar' is defined but never used. Allowed unused vars must match /^_/u.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":11},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":272,"column":60,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[11834,11835],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[11834,11835],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[11834,11835],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[11834,11835],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":272,"column":80,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[11854,11855],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[11854,11855],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[11854,11855],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[11854,11855],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  ShoppingCart,\n  Car,\n  Package,\n  Clock,\n  MapPin,\n  Star,\n  ArrowRight,\n  CheckCircle,\n  Users,\n  Truck,\n  Shield,\n  Phone,\n  Mail,\n  Calendar,\n} from 'lucide-react';\nimport Link from 'next/link';\n\nexport default function OTWServicesPage() {\n  const services = [\n    {\n      icon: ShoppingCart,\n      title: 'Grocery Shop & Drop',\n      description: \"We'll shop for your groceries and deliver them to your door\",\n      features: ['Receipt upload', 'Custom shopping lists', 'Same-day delivery', 'Store selection'],\n      price: 'Starting at $4.99',\n      popular: true,\n      href: '/grocery-delivery',\n      color: 'otw-red',\n    },\n    {\n      icon: Car,\n      title: 'Local Rides',\n      description: 'Quick and reliable transportation around your neighborhood',\n      features: ['Door-to-door service', 'Local drivers', 'Affordable rates', 'Real-time tracking'],\n      price: 'Starting at $3.99',\n      popular: false,\n      href: '/otw/rides',\n      color: 'otw-gold',\n    },\n    {\n      icon: Package,\n      title: 'Package Delivery',\n      description: 'Fast and secure delivery for your packages and documents',\n      features: ['Same-day delivery', 'Package tracking', 'Secure handling', 'Photo confirmation'],\n      price: 'Starting at $2.99',\n      popular: false,\n      href: '/otw/package',\n      color: 'otw-red',\n    },\n  ];\n\n  const howItWorks = [\n    {\n      step: 1,\n      title: 'Choose Your Service',\n      description: 'Select from grocery delivery, local rides, or package delivery',\n    },\n    {\n      step: 2,\n      title: 'Provide Details',\n      description: 'Share your requirements, location, and preferences',\n    },\n    {\n      step: 3,\n      title: 'Get Matched',\n      description: 'We connect you with a nearby community helper',\n    },\n    {\n      step: 4,\n      title: 'Track & Receive',\n      description: 'Monitor progress and receive your service with a smile',\n    },\n  ];\n\n  const testimonials = [\n    {\n      name: 'Sarah Johnson',\n      role: 'Busy Parent',\n      quote: 'OTW grocery delivery saved me hours every week. The service is reliable and the helpers are so friendly!',\n      rating: 5,\n    },\n    {\n      name: 'Mike Chen',\n      role: 'Senior Citizen',\n      quote: \"I love that it's community-driven. The local drivers know the area well and always provide excellent service.\",\n      rating: 5,\n    },\n    {\n      name: 'Emma Davis',\n      role: 'College Student',\n      quote: \"Perfect for when I need groceries but don't have a car. Quick, affordable, and convenient!\",\n      rating: 5,\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-otw-black via-gray-900 to-black\">\n      {/* Hero Section */}\n      <div className=\"relative bg-otw-black shadow-sm border-b border-otw-red/30\">\n        <div className=\"absolute inset-0\">\n          <div className=\"absolute inset-0 bg-gradient-to-br from-otw-red/20 via-black to-otw-gold/20\" />\n          <div className=\"absolute top-1/4 left-1/4 w-96 h-96 bg-otw-gold/10 rounded-full blur-3xl animate-pulse\" />\n          <div className=\"absolute bottom-1/4 right-1/4 w-96 h-96 bg-otw-red/10 rounded-full blur-3xl animate-pulse\" />\n        </div>\n        <div className=\"relative z-10 container mx-auto px-4 py-16\">\n          <div className=\"text-center max-w-4xl mx-auto\">\n            <Badge className=\"mb-4 bg-otw-red/20 border border-otw-red/30 text-otw-gold hover:bg-otw-red/30\">\n              Community-Powered Services\n            </Badge>\n            <h1 className=\"text-4xl md:text-6xl font-bold mb-6\">\n              <span className=\"bg-gradient-to-r from-otw-gold via-white to-otw-gold bg-clip-text text-transparent\">\n                OTW Services\n              </span>\n            </h1>\n            <p className=\"text-xl text-gray-300 mb-8 leading-relaxed\">\n              Your neighborhood helpers for grocery delivery, local rides, and package delivery.\n              <span className=\"text-otw-gold font-semibold\">Fast, reliable, and powered by the community.</span>\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link href=\"/grocery-delivery\">\n                <Button size=\"lg\" className=\"bg-gradient-to-r from-otw-red to-otw-red/80 hover:from-otw-red/80 hover:to-otw-red text-white px-8 py-3 text-lg\">\n                  <ShoppingCart className=\"w-5 h-5 mr-2\" />\n                  Order Grocery Delivery\n                  <ArrowRight className=\"w-5 h-5 ml-2\" />\n                </Button>\n              </Link>\n              <Button variant=\"outline\" size=\"lg\" className=\"bg-otw-black/50 text-white border-2 border-otw-gold/50 hover:border-otw-gold px-8 py-3 text-lg\">\n                <Users className=\"w-5 h-5 mr-2\" />\n                Become a Helper\n              </Button>\n            </div>\n\n            {/* Quick Service Access */}\n            <div className=\"mt-8 grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <Link href=\"/otw/package\">\n                <Button variant=\"outline\" className=\"w-full h-16 border-white/30 text-white hover:bg-white/10 flex items-center justify-center\">\n                  <Package className=\"mr-3 w-6 h-6\" />\n                  <div className=\"text-left\">\n                    <div className=\"font-semibold\">Package Delivery</div>\n                    <div className=\"text-sm opacity-80\">Send packages anywhere</div>\n                  </div>\n                </Button>\n              </Link>\n              <Link href=\"/otw/rides\">\n                <Button variant=\"outline\" className=\"w-full h-16 border-white/30 text-white hover:bg-white/10 flex items-center justify-center\">\n                  <Car className=\"mr-3 w-6 h-6\" />\n                  <div className=\"text-left\">\n                    <div className=\"font-semibold\">Ride Service</div>\n                    <div className=\"text-sm opacity-80\">Book your ride now</div>\n                  </div>\n                </Button>\n              </Link>\n              <Link href=\"/otw/grocery-delivery\">\n                <Button variant=\"outline\" className=\"w-full h-16 border-white/30 text-white hover:bg-white/10 flex items-center justify-center\">\n                  <ShoppingCart className=\"mr-3 w-6 h-6\" />\n                  <div className=\"text-left\">\n                    <div className=\"font-semibold\">Grocery Shopping</div>\n                    <div className=\"text-sm opacity-80\">Shop & deliver groceries</div>\n                  </div>\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 py-16\">\n        {/* Services Section */}\n        <div className=\"mb-20\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-white mb-4\">\n              Our Services\n            </h2>\n            <p className=\"text-xl text-gray-300 max-w-2xl mx-auto\">\n              Choose from our range of community-powered services designed to make your life easier.\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {services.map((service, index) => {\n              const IconComponent = service.icon;\n              return (\n                <Card key={index} className={`relative transition-all duration-300 hover:shadow-xl hover:-translate-y-2 border-otw-red/30 shadow-lg bg-otw-black/50 hover:border-otw-gold/50 ${service.popular ? 'ring-2 ring-otw-gold shadow-lg' : ''}`}>\n                  {service.popular && (\n                    <Badge className=\"absolute -top-3 left-1/2 transform -translate-x-1/2 bg-gradient-to-r from-otw-red to-otw-gold text-white\">\n                      Most Popular\n                    </Badge>\n                  )}\n                  <CardHeader className=\"text-center pb-4\">\n                    <div className={`w-16 h-16 mx-auto rounded-full flex items-center justify-center mb-4 bg-gradient-to-br from-${service.color} to-${service.color}/80`}>\n                      <IconComponent className=\"w-8 h-8 text-white\" />\n                    </div>\n                    <CardTitle className=\"text-xl mb-2 text-white group-hover:text-otw-gold transition-colors\">{service.title}</CardTitle>\n                    <CardDescription className=\"text-base text-gray-300\">{service.description}</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    <div className=\"space-y-3 mb-6\">\n                      {service.features.map((feature, featureIndex) => (\n                        <div key={featureIndex} className=\"flex items-center gap-2\">\n                          <CheckCircle className=\"w-4 h-4 text-otw-gold flex-shrink-0\" />\n                          <span className=\"text-sm text-gray-300\">{feature}</span>\n                        </div>\n                      ))}\n                    </div>\n                    <div className=\"text-center\">\n                      <p className=\"text-lg font-semibold text-white mb-4\">{service.price}</p>\n                      <Link href={service.href}>\n                        <Button className=\"w-full bg-gradient-to-r from-otw-red to-otw-red/80 hover:from-otw-red/80 hover:to-otw-red\">\n                          Get Started\n                          <ArrowRight className=\"w-4 h-4 ml-2\" />\n                        </Button>\n                      </Link>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* How It Works Section */}\n        <div className=\"mb-20\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-white mb-4\">\n              How It Works\n            </h2>\n            <p className=\"text-xl text-gray-300 max-w-2xl mx-auto\">\n              Getting help from your community is simple and straightforward.\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-4 gap-8\">\n            {howItWorks.map((step, index) => (\n              <div key={index} className=\"text-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-otw-red to-otw-gold rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <span className=\"text-2xl font-bold text-white\">{step.step}</span>\n                </div>\n                <h3 className=\"text-xl font-semibold text-white mb-2\">{step.title}</h3>\n                <p className=\"text-gray-300\">{step.description}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Testimonials Section */}\n        <div className=\"mb-20\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-white mb-4\">\n              What Our Customers Say\n            </h2>\n            <p className=\"text-xl text-gray-300 max-w-2xl mx-auto\">\n              Real stories from real people in our community.\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {testimonials.map((testimonial, index) => (\n              <Card key={index} className=\"transition-all duration-300 hover:shadow-lg bg-otw-black/50 border-otw-red/30 hover:border-otw-gold/50\">\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center gap-1 mb-4\">\n                    {[...Array(testimonial.rating)].map((_, i) => (\n                      <Star key={i} className=\"w-4 h-4 fill-otw-gold text-otw-gold\" />\n                    ))}\n                  </div>\n                  <p className=\"text-gray-300 mb-4 italic\">\"{testimonial.quote}\"</p>\n                  <div>\n                    <p className=\"font-semibold text-white\">{testimonial.name}</p>\n                    <p className=\"text-sm text-gray-400\">{testimonial.role}</p>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n\n        {/* CTA Section */}\n        <div className=\"text-center bg-gradient-to-r from-otw-red to-otw-gold rounded-2xl p-12 text-white border border-otw-gold/30\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">\n            Ready to Get Started?\n          </h2>\n          <p className=\"text-xl mb-8 opacity-90\">\n            Join thousands of satisfied customers who trust OTW for their daily needs.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Link href=\"/grocery-delivery\">\n              <Button size=\"lg\" variant=\"secondary\" className=\"bg-white text-otw-red hover:bg-gray-100 px-8 py-3 text-lg font-semibold\">\n                <ShoppingCart className=\"w-5 h-5 mr-2\" />\n                Start Grocery Delivery\n              </Button>\n            </Link>\n            <Link href=\"/otw\">\n              <Button size=\"lg\" variant=\"outline\" className=\"border-white text-white hover:bg-white hover:text-otw-red px-8 py-3 text-lg font-semibold\">\n                <Truck className=\"w-5 h-5 mr-2\" />\n                Explore All Services\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/otw/rides/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Metadata' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Card' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardContent' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardDescription' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardHeader' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":56},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardTitle' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":58,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":67},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Separator' is defined but never used. Allowed unused vars must match /^_/u.","line":19,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MapPin' is defined but never used. Allowed unused vars must match /^_/u.","line":41,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Navigation' is defined but never used. Allowed unused vars must match /^_/u.","line":50,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaCar' is defined but never used. Allowed unused vars must match /^_/u.","line":53,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaMapMarkerAlt' is defined but never used. Allowed unused vars must match /^_/u.","line":54,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaClock' is defined but never used. Allowed unused vars must match /^_/u.","line":55,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaDollarSign' is defined but never used. Allowed unused vars must match /^_/u.","line":56,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaStar' is defined but never used. Allowed unused vars must match /^_/u.","line":57,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":57,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaUser' is defined but never used. Allowed unused vars must match /^_/u.","line":58,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaRoute' is defined but never used. Allowed unused vars must match /^_/u.","line":59,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaGasPump' is defined but never used. Allowed unused vars must match /^_/u.","line":60,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaShieldAlt' is defined but never used. Allowed unused vars must match /^_/u.","line":61,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaWifi' is defined but never used. Allowed unused vars must match /^_/u.","line":62,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaSnowflake' is defined but never used. Allowed unused vars must match /^_/u.","line":63,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaMusic' is defined but never used. Allowed unused vars must match /^_/u.","line":64,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaPhone' is defined but never used. Allowed unused vars must match /^_/u.","line":65,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaComments' is defined but never used. Allowed unused vars must match /^_/u.","line":66,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaHeart' is defined but never used. Allowed unused vars must match /^_/u.","line":67,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaShare' is defined but never used. Allowed unused vars must match /^_/u.","line":68,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaInfoCircle' is defined but never used. Allowed unused vars must match /^_/u.","line":69,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":69,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaCheckCircle' is defined but never used. Allowed unused vars must match /^_/u.","line":70,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaExclamationTriangle' is defined but never used. Allowed unused vars must match /^_/u.","line":71,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaPlus' is defined but never used. Allowed unused vars must match /^_/u.","line":72,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaMinus' is defined but never used. Allowed unused vars must match /^_/u.","line":73,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":73,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaEdit' is defined but never used. Allowed unused vars must match /^_/u.","line":74,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaTrash' is defined but never used. Allowed unused vars must match /^_/u.","line":75,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":75,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaEye' is defined but never used. Allowed unused vars must match /^_/u.","line":76,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":76,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaDownload' is defined but never used. Allowed unused vars must match /^_/u.","line":77,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":77,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FaPrint' is defined but never used. Allowed unused vars must match /^_/u.","line":78,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setPassengers' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":88,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":88,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setScheduledTime' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":89,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":89,"endColumn":41},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'calculateDistance'. Either include it or remove the dependency array.","line":188,"column":6,"nodeType":"ArrayExpression","endLine":188,"endColumn":35,"suggestions":[{"desc":"Update the dependencies array to be: [pickupLocation, destination, calculateDistance]","fix":{"range":[5040,5069],"text":"[pickupLocation, destination, calculateDistance]"}}]}],"suppressedMessages":[],"errorCount":37,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nexport const dynamic = 'force-dynamic';\n\nimport type { Metadata } from 'next';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../../components/ui/card';\nimport { Button } from '../../../components/ui/button';\nimport { Input } from '../../../components/ui/input';\nimport { Label } from '../../../components/ui/label';\nimport { Textarea } from '../../../components/ui/textarea';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '../../../components/ui/select';\nimport { Badge } from '../../../components/ui/badge';\nimport { Separator } from '../../../components/ui/separator';\n\ninterface VehicleType {\n  id: string;\n  name: string;\n  description: string;\n  basePrice: number;\n  pricePerMile: number;\n  capacity: number;\n  features: string[];\n  estimatedArrival: string;\n  available?: boolean;\n}\nimport { Calendar } from '../../../components/ui/calendar';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '../../../components/ui/popover';\nimport {\n  CalendarIcon,\n  Clock,\n  MapPin,\n  Car,\n  CreditCard,\n  Info,\n  Star,\n  Shield,\n  Zap,\n  Users,\n  ArrowRight,\n  Navigation,\n} from 'lucide-react';\nimport {\n  FaCar,\n  FaMapMarkerAlt,\n  FaClock,\n  FaDollarSign,\n  FaStar,\n  FaUser,\n  FaRoute,\n  FaGasPump,\n  FaShieldAlt,\n  FaWifi,\n  FaSnowflake,\n  FaMusic,\n  FaPhone,\n  FaComments,\n  FaHeart,\n  FaShare,\n  FaInfoCircle,\n  FaCheckCircle,\n  FaExclamationTriangle,\n  FaPlus,\n  FaMinus,\n  FaEdit,\n  FaTrash,\n  FaEye,\n  FaDownload,\n  FaPrint,\n} from 'react-icons/fa';\nimport Link from 'next/link';\nimport { useState, useEffect } from 'react';\nimport PlaceAutocomplete from '../../../components/maps/PlaceAutocomplete';\n\nexport default function RidesPage() {\n  const [pickupLocation, setPickupLocation] = useState('');\n  const [destination, setDestination] = useState('');\n  const [selectedVehicle, setSelectedVehicle] = useState<VehicleType | null>(null);\n  const [passengers, setPassengers] = useState(1);\n  const [scheduledTime, setScheduledTime] = useState<Date | undefined>(new Date());\n  const [estimatedPrice, setEstimatedPrice] = useState<number | null>(null);\n  const [vehicleTypes, setVehicleTypes] = useState<VehicleType[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [distance, setDistance] = useState<number>(0);\n  const [stats, setStats] = useState({\n    rating: 4.9,\n    totalRides: 10000,\n    averagePickupTime: 5,\n  });\n  const [fareBreakdown, setFareBreakdown] = useState({\n    baseFare: 0,\n    distanceFare: 0,\n    total: 0,\n  });\n\n  // Fetch vehicle types and stats from API\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Fetch vehicle types\n        const vehiclesResponse = await fetch('/api/rides?type=vehicles');\n        const vehiclesData = await vehiclesResponse.json();\n        if (vehiclesData.success) {\n          setVehicleTypes(vehiclesData.data);\n        }\n\n        // Fetch ride stats\n        const statsResponse = await fetch('/api/rides?type=stats');\n        const statsData = await statsResponse.json();\n        if (statsData.success) {\n          setStats(statsData.data);\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  // Calculate estimated price based on distance and selected vehicle\n  const calculateEstimatedPrice = (vehicle: VehicleType, calculatedDistance: number = 5) => {\n    const baseFare = vehicle.basePrice;\n    const distanceFare = vehicle.pricePerMile * calculatedDistance;\n    const total = baseFare + distanceFare;\n\n    setFareBreakdown({\n      baseFare,\n      distanceFare,\n      total,\n    });\n\n    return total;\n  };\n\n  // Calculate distance between pickup and destination\n  const calculateDistance = async (pickup: string, dest: string) => {\n    if (!pickup || !dest) {return;}\n\n    try {\n      const response = await fetch('/api/maps/distance', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          origin: pickup,\n          destination: dest,\n        }),\n      });\n\n      const data = await response.json();\n      if (data.success && data.distance) {\n        setDistance(data.distance);\n        if (selectedVehicle) {\n          const price = calculateEstimatedPrice(selectedVehicle, data.distance);\n          setEstimatedPrice(price);\n        }\n      }\n    } catch (error) {\n      console.error('Error calculating distance:', error);\n    }\n  };\n\n  // Handle vehicle selection\n  const handleVehicleSelect = (vehicle: VehicleType) => {\n    setSelectedVehicle(vehicle);\n    const currentDistance = distance || 5; // Default to 5 miles if no distance calculated\n    setEstimatedPrice(calculateEstimatedPrice(vehicle, currentDistance));\n  };\n\n  // Effect to recalculate distance when locations change\n  useEffect(() => {\n    if (pickupLocation && destination) {\n      calculateDistance(pickupLocation, destination);\n    }\n  }, [pickupLocation, destination]);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-otw-gold mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading vehicle options...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen pb-20 pt-16\">\n      {/* Enhanced Hero Section */}\n      <section className=\"relative min-h-[70vh] flex items-center justify-center overflow-hidden bg-gradient-to-br from-gray-900 via-black to-gray-900\">\n        <div className=\"absolute inset-0 z-0\">\n          <div className=\"absolute inset-0 bg-gradient-to-r from-black/80 via-black/60 to-transparent z-10\"></div>\n          <div\n            className=\"absolute inset-0 bg-cover bg-center opacity-40\"\n            style={{ backgroundImage: \"url('/images/rides-hero.jpg')\" }}\n          ></div>\n          {/* Animated background elements */}\n          <div className=\"absolute top-20 left-10 w-2 h-2 bg-otw-gold rounded-full animate-pulse\"></div>\n          <div className=\"absolute top-40 right-20 w-1 h-1 bg-otw-red rounded-full animate-ping\"></div>\n          <div className=\"absolute bottom-32 left-1/4 w-1.5 h-1.5 bg-otw-gold rounded-full animate-pulse delay-1000\"></div>\n        </div>\n\n        <div className=\"container mx-auto px-4 z-10\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            {/* Left side - Hero content */}\n            <div className=\"text-left\">\n              <div className=\"inline-flex items-center bg-otw-gold/10 border border-otw-gold/20 rounded-full px-4 py-2 mb-6\">\n                <Zap className=\"w-4 h-4 text-otw-gold mr-2\" />\n                <span className=\"text-otw-gold text-sm font-medium\">Available 24/7</span>\n              </div>\n              <h1 className=\"text-6xl lg:text-7xl font-bold mb-6 text-white leading-tight\">\n                Get there\n                <span className=\"block text-otw-gold\">your way</span>\n              </h1>\n              <p className=\"text-xl text-gray-300 mb-8 max-w-lg\">\n                Safe, reliable rides at the tap of a button. Professional drivers, transparent pricing, no surge fees.\n              </p>\n\n              {/* Quick stats */}\n              <div className=\"flex flex-wrap gap-6 mb-8\">\n                <div className=\"flex items-center text-gray-300\">\n                  <Star className=\"w-5 h-5 text-otw-gold mr-2\" />\n                  <span className=\"font-semibold\">{stats.rating}</span>\n                  <span className=\"ml-1\">rating</span>\n                </div>\n                <div className=\"flex items-center text-gray-300\">\n                  <Shield className=\"w-5 h-5 text-otw-gold mr-2\" />\n                  <span>Insured & licensed</span>\n                </div>\n                <div className=\"flex items-center text-gray-300\">\n                  <Users className=\"w-5 h-5 text-otw-gold mr-2\" />\n                  <span>{stats.totalRides.toLocaleString()}+ rides</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Right side - Quick booking form */}\n            <div className=\"bg-white/10 backdrop-blur-lg rounded-2xl p-8 border border-white/20\">\n              <h3 className=\"text-2xl font-bold text-white mb-6\">Book your ride</h3>\n\n              <div className=\"space-y-4\">\n                <div className=\"relative\">\n                  <div className=\"absolute left-4 top-1/2 transform -translate-y-1/2 w-3 h-3 bg-otw-gold rounded-full z-20\"></div>\n                  <PlaceAutocomplete\n                    onPlaceSelect={(place) => {\n                      setPickupLocation(place.formatted_address || '');\n                      console.log('Selected pickup location:', place);\n                    }}\n                    placeholder=\"Pickup location in Fort Wayne, IN...\"\n                    className=\"pl-12 h-14 bg-white/10 border-white/20 text-white placeholder:text-gray-400 text-lg\"\n                  />\n                </div>\n\n                <div className=\"relative\">\n                  <div className=\"absolute left-4 top-1/2 transform -translate-y-1/2 w-3 h-3 bg-otw-red rounded-full z-20\"></div>\n                  <PlaceAutocomplete\n                    onPlaceSelect={(place) => {\n                      setDestination(place.formatted_address || '');\n                      console.log('Selected destination:', place);\n                    }}\n                    placeholder=\"Destination in Fort Wayne, IN...\"\n                    className=\"pl-12 h-14 bg-white/10 border-white/20 text-white placeholder:text-gray-400 text-lg\"\n                  />\n                </div>\n\n                <Button\n                  size=\"lg\"\n                  className=\"w-full h-14 text-lg font-semibold bg-otw-gold hover:bg-otw-gold/90 text-black\"\n                  disabled={!pickupLocation || !destination}\n                >\n                  Get fare estimate\n                  <ArrowRight className=\"ml-2 w-5 h-5\" />\n                </Button>\n              </div>\n\n              {estimatedPrice && (\n                <div className=\"mt-4 p-4 bg-white/10 rounded-lg border border-white/20\">\n                  <p className=\"text-otw-gold font-semibold\">Estimated fare: ${estimatedPrice.toFixed(2)}</p>\n                  {distance > 0 && (\n                    <p className=\"text-gray-300 text-sm mt-1\">Distance: {distance.toFixed(1)} miles</p>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Vehicle Selection Section */}\n      <section className=\"py-20 bg-gray-50\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-4\">Choose your ride</h2>\n            <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n              Select the perfect vehicle for your journey. All rides include professional drivers and transparent pricing.\n            </p>\n          </div>\n\n          <div className=\"max-w-4xl mx-auto grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {vehicleTypes.map((vehicle) => {\n              const estimatedPrice = calculateEstimatedPrice(vehicle);\n              return (\n                <div\n                  key={vehicle.id}\n                  className={`relative bg-white rounded-2xl p-6 border-2 transition-all duration-300 cursor-pointer hover:shadow-xl ${\n                    selectedVehicle?.id === vehicle.id\n                      ? 'border-otw-gold shadow-lg scale-105'\n                      : 'border-gray-200 hover:border-gray-300'\n                  }`}\n                  onClick={() => handleVehicleSelect(vehicle)}\n                >\n                  {selectedVehicle?.id === vehicle.id && (\n                    <div className=\"absolute -top-3 -right-3 w-8 h-8 bg-otw-gold rounded-full flex items-center justify-center\">\n                      <svg className=\"w-5 h-5 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                        <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                      </svg>\n                    </div>\n                  )}\n\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <Car className=\"w-12 h-12 text-gray-700\" />\n                    <div className=\"text-right\">\n                      <div className=\"text-2xl font-bold text-gray-900\">${estimatedPrice.toFixed(2)}</div>\n                      <div className=\"text-sm text-gray-500\">{vehicle.estimatedArrival}</div>\n                    </div>\n                  </div>\n\n                  <h3 className=\"text-xl font-bold text-gray-900 mb-2\">{vehicle.name}</h3>\n                  <p className=\"text-gray-600 mb-3\">{vehicle.description}</p>\n                  <div className=\"flex items-center text-sm text-gray-500 mb-2\">\n                    <Users className=\"w-4 h-4 mr-1\" />\n                    {vehicle.capacity} passengers\n                  </div>\n                  <div className=\"flex flex-wrap gap-1\">\n                    {vehicle.features.map((feature, index) => (\n                      <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                        {feature}\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n\n          {/* Detailed Booking Form */}\n          <div className=\"max-w-3xl mx-auto mt-16\">\n            <div className=\"bg-white rounded-2xl shadow-xl p-8 border border-gray-200\">\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-8\">Complete your booking</h3>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n                <div>\n                  <Label className=\"text-gray-700 font-medium\">When do you need this ride?</Label>\n                  <div className=\"grid grid-cols-2 gap-3 mt-2\">\n                    <Popover>\n                      <PopoverTrigger asChild>\n                        <Button variant=\"outline\" className=\"justify-start text-left font-normal h-12\">\n                          <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                          <span>Pick date</span>\n                        </Button>\n                      </PopoverTrigger>\n                      <PopoverContent className=\"w-auto p-0\">\n                        <Calendar mode=\"single\" initialFocus />\n                      </PopoverContent>\n                    </Popover>\n\n                    <Select>\n                      <SelectTrigger className=\"h-12\">\n                        <SelectValue placeholder=\"Time\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"asap\">ASAP</SelectItem>\n                        <SelectItem value=\"morning\">Morning (8am-12pm)</SelectItem>\n                        <SelectItem value=\"afternoon\">Afternoon (12pm-5pm)</SelectItem>\n                        <SelectItem value=\"evening\">Evening (5pm-9pm)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div>\n                  <Label className=\"text-gray-700 font-medium\">Contact Information</Label>\n                  <Input placeholder=\"Your phone number\" className=\"mt-2 h-12\" />\n                </div>\n              </div>\n\n              <div className=\"mb-6\">\n                <Label className=\"text-gray-700 font-medium\">Special requests (optional)</Label>\n                <Textarea\n                  placeholder=\"Child seat, wheelchair accessible, pet-friendly, etc.\"\n                  className=\"mt-2 min-h-[100px]\"\n                />\n              </div>\n\n              {selectedVehicle && fareBreakdown.total > 0 && (\n                <div className=\"bg-gradient-to-r from-otw-gold/10 to-otw-red/10 p-6 rounded-xl mb-8 border border-otw-gold/20\">\n                  <div className=\"flex items-start\">\n                    <Info className=\"w-6 h-6 text-otw-gold mr-3 flex-shrink-0 mt-0.5\" />\n                    <div>\n                      <h4 className=\"font-semibold text-gray-900 mb-2\">Fare breakdown</h4>\n                      <div className=\"space-y-1 text-sm text-gray-700\">\n                        <div className=\"flex justify-between\">\n                          <span>Base fare</span>\n                          <span>${fareBreakdown.baseFare.toFixed(2)}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Distance ({distance.toFixed(1)} miles)</span>\n                          <span>${fareBreakdown.distanceFare.toFixed(2)}</span>\n                        </div>\n                        <div className=\"flex justify-between font-semibold border-t pt-1 mt-2\">\n                          <span>Total</span>\n                          <span>${fareBreakdown.total.toFixed(2)}</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Button variant=\"outline\" className=\"flex-1 h-12\">\n                  Save for later\n                </Button>\n                <Button\n                  onClick={() => {\n                    if (!selectedVehicle) {\n                      alert('Please select a vehicle type first');\n                      return;\n                    }\n\n                    if (!pickupLocation || !destination) {\n                      alert('Please enter pickup and destination locations');\n                      return;\n                    }\n\n                    // Store service details in localStorage for checkout\n                    const serviceDetails = {\n                      type: 'rides' as const,\n                      title: `${selectedVehicle.name} Ride`,\n                      description: selectedVehicle.description,\n                      estimatedPrice: fareBreakdown.total || estimatedPrice || selectedVehicle.basePrice,\n                      serviceDetails: {\n                        pickupLocation,\n                        destination,\n                        vehicleType: selectedVehicle.name,\n                        passengers,\n                        scheduledTime: scheduledTime?.toISOString(),\n                        distance,\n                        fareBreakdown,\n                        estimatedArrival: selectedVehicle.estimatedArrival,\n                      },\n                    };\n\n                    // Store basic customer info (will be completed in checkout)\n                    const customerDetails = {\n                      name: '',\n                      phone: '',\n                      email: '',\n                      address: pickupLocation,\n                      specialInstructions: `Pickup: ${pickupLocation}, Destination: ${destination}. Vehicle: ${selectedVehicle.name}, Passengers: ${passengers}. ${scheduledTime ? 'Scheduled for: ' + scheduledTime.toLocaleString() : 'ASAP'}`,\n                    };\n\n                    localStorage.setItem('otwServiceDetails', JSON.stringify(serviceDetails));\n                    localStorage.setItem('otwCustomerInfo', JSON.stringify(customerDetails));\n\n                    // Navigate to checkout\n                    window.location.href = '/otw/checkout?service=rides';\n                  }}\n                  disabled={!selectedVehicle || !pickupLocation || !destination}\n                  className=\"flex-1 h-12 bg-otw-gold hover:bg-otw-gold/90 text-black font-semibold\"\n                >\n                  <div className=\"flex items-center justify-center w-full\">\n                    <CreditCard className=\"mr-2 w-5 h-5\" />\n                    Proceed to Checkout\n                    <ArrowRight className=\"ml-2 w-5 h-5\" />\n                  </div>\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Enhanced Features Section */}\n      <section className=\"py-20 bg-gray-900\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-white mb-4\">\n              Why riders choose OTW\n            </h2>\n            <p className=\"text-xl text-gray-400 max-w-2xl mx-auto\">\n              Experience the difference with our commitment to safety, reliability, and exceptional service.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            <div className=\"group text-center\">\n              <div className=\"w-20 h-20 bg-gradient-to-br from-otw-gold to-otw-gold/80 rounded-2xl flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform duration-300\">\n                <Clock className=\"w-10 h-10 text-black\" />\n              </div>\n              <h3 className=\"text-xl font-bold mb-3 text-white\">Always on time</h3>\n              <p className=\"text-gray-400\">\n                Average pickup time under {stats.averagePickupTime} minutes. We respect your schedule.\n              </p>\n            </div>\n\n            <div className=\"group text-center\">\n              <div className=\"w-20 h-20 bg-gradient-to-br from-otw-red to-otw-red/80 rounded-2xl flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform duration-300\">\n                <Shield className=\"w-10 h-10 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-bold mb-3 text-white\">Safety first</h3>\n              <p className=\"text-gray-400\">\n                Background-checked drivers, GPS tracking, and 24/7 support.\n              </p>\n            </div>\n\n            <div className=\"group text-center\">\n              <div className=\"w-20 h-20 bg-gradient-to-br from-otw-gold to-otw-gold/80 rounded-2xl flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform duration-300\">\n                <CreditCard className=\"w-10 h-10 text-black\" />\n              </div>\n              <h3 className=\"text-xl font-bold mb-3 text-white\">Fair pricing</h3>\n              <p className=\"text-gray-400\">\n                No surge pricing, no hidden fees. What you see is what you pay.\n              </p>\n            </div>\n\n            <div className=\"group text-center\">\n              <div className=\"w-20 h-20 bg-gradient-to-br from-otw-red to-otw-red/80 rounded-2xl flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform duration-300\">\n                <Star className=\"w-10 h-10 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-bold mb-3 text-white\">Top rated</h3>\n              <p className=\"text-gray-400\">\n                {stats.rating}/5 average rating from thousands of satisfied customers.\n              </p>\n            </div>\n          </div>\n\n          {/* Social proof */}\n          <div className=\"mt-16 text-center\">\n            <div className=\"inline-flex items-center bg-white/10 rounded-full px-8 py-4\">\n              <div className=\"flex -space-x-2 mr-4\">\n                <div className=\"w-8 h-8 bg-otw-gold rounded-full border-2 border-white\"></div>\n                <div className=\"w-8 h-8 bg-otw-red rounded-full border-2 border-white\"></div>\n                <div className=\"w-8 h-8 bg-gray-400 rounded-full border-2 border-white\"></div>\n                <div className=\"w-8 h-8 bg-otw-gold rounded-full border-2 border-white flex items-center justify-center text-xs font-bold text-black\">+</div>\n              </div>\n              <span className=\"text-white font-medium\">Join {stats.totalRides.toLocaleString()}+ happy riders in Fort Wayne</span>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Tier Membership CTA */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"bg-gradient-to-r from-otw-gold to-otw-red rounded-2xl overflow-hidden shadow-2xl p-8 text-center\">\n            <h2 className=\"text-3xl font-bold mb-4 text-white\">\n              Save More with Tier Membership\n            </h2>\n            <p className=\"text-xl text-white/90 mb-8 max-w-2xl mx-auto\">\n              Join our Tier Membership program and enjoy exclusive benefits like\n              discounted rides, priority booking, and more.\n            </p>\n            <Link href=\"/tier\">\n              <Button size=\"lg\" className=\"bg-white text-otw-red hover:bg-gray-100 font-semibold\">\n                Learn About Tier Membership\n                <ArrowRight className=\"ml-2 w-5 h-5\" />\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Image' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'selectedAddress' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":50,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":25},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":79,"column":67,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3372,3456],"text":"\n                Experience lightning-fast delivery from Fort Wayne&apos;s\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3372,3456],"text":"\n                Experience lightning-fast delivery from Fort Wayne&lsquo;s\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3372,3456],"text":"\n                Experience lightning-fast delivery from Fort Wayne&#39;s\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3372,3456],"text":"\n                Experience lightning-fast delivery from Fort Wayne&rsquo;s\n              "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":120,"column":60,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[5361,5492],"text":"\n              From late-night munchies to family feasts, we&apos;ve got Fort Wayne covered with premium delivery services.\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[5361,5492],"text":"\n              From late-night munchies to family feasts, we&lsquo;ve got Fort Wayne covered with premium delivery services.\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[5361,5492],"text":"\n              From late-night munchies to family feasts, we&#39;ve got Fort Wayne covered with premium delivery services.\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[5361,5492],"text":"\n              From late-night munchies to family feasts, we&rsquo;ve got Fort Wayne covered with premium delivery services.\n            "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":390,"column":55,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[16848,16849],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[16848,16849],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[16848,16849],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[16848,16849],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":390,"column":76,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[16869,16870],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[16869,16870],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[16869,16870],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[16869,16870],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":459,"column":40,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[19928,20017],"text":"\n              Beyond food delivery - we&apos;re your complete lifestyle solution\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[19928,20017],"text":"\n              Beyond food delivery - we&lsquo;re your complete lifestyle solution\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[19928,20017],"text":"\n              Beyond food delivery - we&#39;re your complete lifestyle solution\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[19928,20017],"text":"\n              Beyond food delivery - we&rsquo;re your complete lifestyle solution\n            "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n// export const dynamic = \"force-dynamic\";\n\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport dynamic from 'next/dynamic';\nimport Button from '../components/Button.jsx';\nimport AddressSearch, { PlaceDetails } from '../components/AddressSearch';\nimport { useState } from 'react';\n\nconst MapSearch = dynamic(() => import('../components/maps/MapSearch'), { ssr: false });\n\ninterface ServiceCardProps {\n  icon: string;\n  title: string;\n  description: string;\n  href: string;\n  buttonText: string;\n  buttonVariant: 'primary' | 'secondary';\n}\n\nconst ServiceCard: React.FC<ServiceCardProps> = ({\n  icon,\n  title,\n  description,\n  href,\n  buttonText,\n  buttonVariant,\n}) => (\n  <div className=\"otw-card group relative overflow-hidden transform hover:scale-105 transition-all duration-500 hover:shadow-2xl hover:shadow-otw-red/20\">\n    <div className=\"absolute inset-0 bg-gradient-to-br from-otw-red/5 via-transparent to-otw-gold/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500\" />\n    <div className=\"relative z-10 p-8\">\n      <div className=\"w-16 h-16 bg-gradient-to-br from-otw-red to-otw-red/80 rounded-full flex items-center justify-center mb-6 group-hover:scale-110 transition-transform duration-300 shadow-lg\">\n        <span className=\"text-3xl animate-pulse\">{icon}</span>\n      </div>\n      <h3 className=\"text-2xl font-bold text-white mb-4 group-hover:text-otw-gold transition-colors duration-300\">{title}</h3>\n      <p className=\"text-gray-400 mb-6 group-hover:text-gray-300 transition-colors duration-300\">{description}</p>\n      <Link href={href}>\n        <Button variant={buttonVariant} className=\"w-full group-hover:scale-105 transition-transform duration-300\">\n          {buttonText}\n        </Button>\n      </Link>\n    </div>\n  </div>\n);\n\nexport default function Home() {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedAddress, setSelectedAddress] = useState<PlaceDetails | null>(null);\n\n  const handleAddressSelect = (place: PlaceDetails) => {\n    setSelectedAddress(place);\n    console.log('Selected address:', place.formatted_address);\n    console.log('Coordinates:', place.geometry.location.lat(), place.geometry.location.lng());\n  };\n\n  return (\n    <main className=\"min-h-screen overflow-hidden\">\n        {/* Hero Section */}\n        <section className=\"relative min-h-screen flex flex-col justify-center items-center px-4\">\n          {/* Animated Background */}\n          <div className=\"absolute inset-0\">\n            <div className=\"absolute top-1/4 left-1/4 w-96 h-96 bg-otw-gold/10 rounded-full blur-3xl animate-pulse\" />\n            <div className=\"absolute bottom-1/4 right-1/4 w-96 h-96 bg-otw-red/10 rounded-full blur-3xl animate-pulse\" />\n            <div className=\"absolute inset-0 bg-[url('/grid.svg')] opacity-10\" />\n          </div>\n\n          <div className=\"relative z-10 max-w-6xl mx-auto text-center\">\n            {/* Top Text */}\n            <div className=\"mb-8\">\n              <h1 className=\"text-4xl md:text-6xl lg:text-7xl font-bold mb-4\">\n                <span className=\"bg-gradient-to-r from-otw-gold via-white to-otw-gold bg-clip-text text-transparent animate-gradient-text\">\n                  OTW\n                </span>\n              </h1>\n\n              <p className=\"text-xl md:text-2xl lg:text-3xl text-white/90 max-w-4xl mx-auto leading-relaxed\">\n                Experience lightning-fast delivery from Fort Wayne's\n              </p>\n            </div>\n\n            {/* Service Buttons */}\n            <div className=\"flex flex-col sm:flex-row gap-6 justify-center mb-16\">\n              <Button href=\"/restaurants\" variant=\"primary\" className=\"text-xl px-12 py-6 transform hover:scale-105 transition-all duration-300 bg-otw-red hover:bg-otw-red/80\">\n                Order Broskis = Free Delivery\n              </Button>\n              <Button href=\"/otw/grocery-delivery\" variant=\"secondary\" className=\"text-xl px-12 py-6 transform hover:scale-105 transition-all duration-300\">\n                Order Groceries\n              </Button>\n            </div>\n          </div>\n\n        {/* Scroll Indicator */}\n        <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2 animate-bounce\">\n          <div className=\"w-6 h-10 border-2 border-white/30 rounded-full flex justify-center\">\n            <div className=\"w-1 h-3 bg-white/50 rounded-full mt-2 animate-pulse\" />\n          </div>\n        </div>\n      </section>\n\n      {/* Enhanced Services Section */}\n      <section className=\"py-24 relative\">\n        {/* Background Effects */}\n        <div className=\"absolute inset-0\">\n          <div className=\"absolute top-0 left-1/4 w-96 h-96 bg-otw-red/5 rounded-full blur-3xl\" />\n          <div className=\"absolute bottom-0 right-1/4 w-96 h-96 bg-otw-gold/5 rounded-full blur-3xl\" />\n        </div>\n\n        <div className=\"max-w-7xl mx-auto px-4 relative z-10\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl md:text-5xl font-bold mb-6\">\n              <span className=\"bg-gradient-to-r from-otw-gold via-white to-otw-gold bg-clip-text text-transparent\">\n                Your Cravings,\n              </span>\n              <br />\n              <span className=\"text-white\">Our Mission</span>\n            </h2>\n            <p className=\"text-xl text-white/80 max-w-3xl mx-auto leading-relaxed\">\n              From late-night munchies to family feasts, we've got Fort Wayne covered with premium delivery services.\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <ServiceCard\n              icon=\"🚗\"\n              title=\"Rides\"\n              description=\"Need a ride? We've got you covered.\"\n              href=\"/otw/rides\"\n              buttonText=\"Order A Ride\"\n              buttonVariant=\"primary\"\n            />\n            <ServiceCard\n              icon=\"🛒\"\n              title=\"Grocery Delivery\"\n              description=\"Fresh groceries delivered to your door. Same-day delivery from local stores.\"\n              href=\"/otw/grocery-delivery\"\n              buttonText=\"Shop Groceries\"\n              buttonVariant=\"secondary\"\n            />\n            <ServiceCard\n              icon=\"🎉\"\n              title=\"Event Catering\"\n              description=\"Large orders for parties, meetings, and events. Professional catering services.\"\n              href=\"/events\"\n              buttonText=\"Plan Event\"\n              buttonVariant=\"primary\"\n            />\n          </div>\n        </div>\n      </section>\n\n      {/* Restaurant Search Section */}\n      <section className=\"py-24 bg-gradient-to-r from-gray-900/50 to-black/50\">\n        <div className=\"max-w-4xl mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-4xl font-bold text-white mb-4\">\n              Find Your Perfect Meal\n            </h2>\n            <p className=\"text-xl text-white/80\">\n              Search from 150+ restaurants in Fort Wayne\n            </p>\n          </div>\n\n          <div className=\"bg-white/10 backdrop-blur-lg rounded-2xl p-8 border border-white/20\">\n            <div className=\"flex flex-col md:flex-row gap-4 mb-6\">\n              <input\n                type=\"text\"\n                placeholder=\"Search restaurants, cuisines, or dishes...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"flex-1 px-6 py-4 bg-white/10 border border-white/20 rounded-xl text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-otw-gold\"\n              />\n              <div className=\"md:w-64\">\n                <AddressSearch\n                  apiKey={process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY || ''}\n                  onPlaceSelect={handleAddressSelect}\n                  placeholder=\"Enter your address in Fort Wayne, IN...\"\n                  className=\"px-6 py-4 bg-white/10 border border-white/20 rounded-xl text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-otw-gold\"\n                />\n              </div>\n              <Link href=\"/restaurants\">\n                <Button variant=\"primary\" className=\"px-8 py-4\">\n                  Search\n                </Button>\n              </Link>\n            </div>\n\n            <MapSearch />\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Restaurants */}\n      <section className=\"py-24\">\n        <div className=\"max-w-7xl mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-white mb-4\">\n              Featured Restaurants\n            </h2>\n            <p className=\"text-xl text-white/80\">\n              Top-rated spots loved by Fort Wayne\n            </p>\n          </div>\n\n          <div className=\"flex flex-wrap justify-center gap-4 mb-12\">\n            {['All', 'Pizza', 'Asian', 'Mexican', 'American', 'Healthy'].map((category) => (\n              <Link key={category} href={`/restaurants?category=${category.toLowerCase()}`}>\n                <button\n                  className=\"px-6 py-3 bg-white/10 hover:bg-otw-gold/20 border border-white/20 hover:border-otw-gold/50 rounded-full text-white hover:text-otw-gold transition-all duration-300\"\n                >\n                  {category}\n                </button>\n              </Link>\n            ))}\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {[\n              {\n                name: 'Broskis',\n                cuisine: 'American',\n                rating: 4.9,\n                deliveryTime: '15-25 min',\n                image: '/restaurants/broskis.jpg',\n              },\n            ].map((restaurant, index) => (\n              <div key={index} className=\"otw-card group cursor-pointer\">\n                <div className=\"relative h-48 mb-4 overflow-hidden rounded-xl\">\n                  <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 to-transparent z-10\" />\n                  <div className=\"absolute top-4 right-4 z-20 bg-green-500 text-white px-3 py-1 rounded-full text-sm font-semibold\">\n                    {restaurant.deliveryTime}\n                  </div>\n                  <div className=\"w-full h-full bg-gradient-to-br from-otw-red/20 to-otw-gold/20 flex items-center justify-center\">\n                    <span className=\"text-6xl opacity-50\">🍽️</span>\n                  </div>\n                </div>\n                <div className=\"p-6\">\n                  <h3 className=\"text-xl font-bold text-white mb-2\">{restaurant.name}</h3>\n                  <p className=\"text-white/70 mb-3\">{restaurant.cuisine}</p>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center\">\n                      <span className=\"text-yellow-400 mr-1\">⭐</span>\n                      <span className=\"text-white font-semibold\">{restaurant.rating}</span>\n                    </div>\n                    <Link href={`/restaurant/${restaurant.name.toLowerCase().replace(/[^a-z0-9]/g, '-')}`}>\n                      <Button variant=\"primary\" className=\"text-sm px-4 py-2\">\n                        Order Now\n                      </Button>\n                    </Link>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n\n\n      {/* Interactive Map */}\n      <section className=\"py-24\">\n        <div className=\"max-w-6xl mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-white mb-4\">\n              Fort Wayne Delivery Coverage\n            </h2>\n            <p className=\"text-xl text-white/80\">\n              We deliver everywhere in Fort Wayne and surrounding areas\n            </p>\n          </div>\n\n          <div className=\"otw-card p-8\">\n            <div className=\"relative h-96 bg-gradient-to-br from-gray-800 to-gray-900 rounded-xl overflow-hidden\">\n              <div className=\"absolute inset-0 flex items-center justify-center\">\n                <div className=\"text-center\">\n                  <div className=\"text-6xl mb-4\">🗺️</div>\n                  <h3 className=\"text-2xl font-bold text-white mb-2\">Interactive Map</h3>\n                  <p className=\"text-white/70\">Real-time delivery zones and driver locations</p>\n                </div>\n              </div>\n\n              {/* Animated delivery zones */}\n              {Array.from({ length: 48 }).map((_, i) => {\n                // Use deterministic values based on index to avoid hydration mismatch\n                const left = ((i * 17 + 23) % 100);\n                const top = ((i * 31 + 47) % 100);\n                const delay = ((i * 0.13) % 3);\n                return (\n                  <div\n                    key={i}\n                    className=\"absolute w-2 h-2 bg-otw-gold/30 rounded-full animate-pulse\"\n                    style={{\n                      left: `${left}%`,\n                      top: `${top}%`,\n                      animationDelay: `${delay}s`,\n                    }}\n                  />\n                );\n              })}\n\n              {/* Delivery trucks */}\n              <div className=\"absolute top-1/4 left-1/4 text-2xl animate-bounce\">\n                🚚\n              </div>\n              <div className=\"absolute bottom-1/3 right-1/3 text-2xl animate-bounce\" style={{ animationDelay: '1s' }}>\n                🚚\n              </div>\n              <div className=\"absolute top-1/2 right-1/4 text-2xl animate-bounce\" style={{ animationDelay: '2s' }}>\n                🚚\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Customer Testimonials */}\n      <section className=\"py-24 bg-gradient-to-r from-gray-900/50 to-black/50\">\n        <div className=\"max-w-6xl mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-white mb-4\">\n              What Fort Wayne Says\n            </h2>\n            <p className=\"text-xl text-white/80\">\n              Real reviews from real customers\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {[\n              {\n                name: 'Sarah Johnson',\n                location: 'Downtown Fort Wayne',\n                rating: 5,\n                review: 'OTW is a game-changer! Food arrives hot and fast every single time. The drivers are super friendly too.',\n                avatar: '👩‍💼',\n              },\n              {\n                name: 'Mike Chen',\n                location: 'Aboite',\n                rating: 5,\n                review: 'Best delivery service in Fort Wayne hands down. The app is smooth and tracking is spot-on. Highly recommend!',\n                avatar: '👨‍💻',\n              },\n              {\n                name: 'Emily Rodriguez',\n                location: 'New Haven',\n                rating: 5,\n                review: 'Love the variety of restaurants and the quick delivery times. OTW has become our go-to for family dinners.',\n                avatar: '👩‍🍳',\n              },\n              {\n                name: 'David Thompson',\n                location: 'Southwest',\n                rating: 5,\n                review: 'Customer service is top-notch. Had an issue once and they resolved it immediately with a full refund.',\n                avatar: '👨‍🔧',\n              },\n              {\n                name: 'Lisa Park',\n                location: 'Northeast',\n                rating: 5,\n                review: 'The live tracking feature is amazing. I always know exactly when my food will arrive. So convenient!',\n                avatar: '👩‍⚕️',\n              },\n              {\n                name: 'James Wilson',\n                location: 'Waynedale',\n                rating: 5,\n                review: 'Great selection of restaurants and the delivery fees are very reasonable. OTW is the best!',\n                avatar: '👨‍🎓',\n              },\n            ].map((testimonial, index) => (\n              <div key={index} className=\"otw-card\">\n                <div className=\"p-6\">\n                  <div className=\"flex items-center mb-4\">\n                    <div className=\"text-3xl mr-4\">{testimonial.avatar}</div>\n                    <div>\n                      <h4 className=\"text-lg font-bold text-white\">{testimonial.name}</h4>\n                      <p className=\"text-white/70 text-sm\">{testimonial.location}</p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex mb-4\">\n                    {Array.from({ length: testimonial.rating }).map((_, i) => (\n                      <span key={i} className=\"text-yellow-400 text-lg\">⭐</span>\n                    ))}\n                  </div>\n\n                  <p className=\"text-white/80 italic\">\"{testimonial.review}\"</p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* App Download Section */}\n      <section className=\"py-24\">\n        <div className=\"max-w-6xl mx-auto px-4\">\n          <div className=\"otw-card p-12 text-center\">\n            <div className=\"max-w-3xl mx-auto\">\n              <h2 className=\"text-4xl md:text-5xl font-bold text-white mb-6\">\n                Get the OTW App\n              </h2>\n              <p className=\"text-xl text-white/80 mb-8\">\n                Download our app for exclusive deals, faster ordering, and secure delivery\n              </p>\n\n              <div className=\"grid md:grid-cols-3 gap-8 mb-12\">\n                {[\n                  { icon: '🎯', title: 'Exclusive Deals', description: 'App-only discounts and promotions' },\n                  { icon: '⚡', title: 'Faster Ordering', description: 'One-tap reordering and saved favorites' },\n                  { icon: '🔒', title: 'Secure Delivery', description: 'Safe and reliable delivery service' },\n                ].map((feature, index) => (\n                  <div key={index} className=\"text-center\">\n                    <div className=\"text-4xl mb-4\">{feature.icon}</div>\n                    <h3 className=\"text-xl font-bold text-white mb-2\">{feature.title}</h3>\n                    <p className=\"text-white/70\">{feature.description}</p>\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                <Button variant=\"primary\" className=\"text-lg px-8 py-4\">\n                  📱 Download for iOS\n                </Button>\n                <Button variant=\"secondary\" className=\"text-lg px-8 py-4\">\n                  🤖 Download for Android\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n\n\n      {/* Enhanced Services Section */}\n      <section className=\"py-24 relative\">\n        {/* Background Effects */}\n        <div className=\"absolute inset-0\">\n          <div className=\"absolute top-1/2 left-0 w-96 h-96 bg-otw-gold/10 rounded-full blur-3xl\" />\n          <div className=\"absolute bottom-0 left-1/4 w-64 h-64 bg-otw-red/5 rounded-full blur-3xl\" />\n          <div className=\"absolute bottom-0 right-1/4 w-64 h-64 bg-blue-500/5 rounded-full blur-3xl\" />\n          <div className=\"absolute top-1/2 left-0 w-full h-px bg-gradient-to-r from-transparent via-otw-gold/30 to-transparent\" />\n        </div>\n\n        <div className=\"max-w-7xl mx-auto px-4 relative z-10\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl md:text-5xl font-bold mb-6\">\n              <span className=\"bg-gradient-to-r from-otw-gold via-white to-otw-gold bg-clip-text text-transparent\">\n                Premium Services\n              </span>\n              <br />\n              <span className=\"text-white\">for Fort Wayne</span>\n            </h2>\n            <p className=\"text-xl text-white/80 max-w-3xl mx-auto leading-relaxed\">\n              Beyond food delivery - we're your complete lifestyle solution\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <ServiceCard\n              icon=\"🥘\"\n              title=\"Catering Services\"\n              description=\"Professional catering for events, meetings, and special occasions with premium presentation.\"\n              href=\"/events\"\n              buttonText=\"Plan Event\"\n              buttonVariant=\"primary\"\n            />\n            <ServiceCard\n              icon=\"🛍️\"\n              title=\"Personal Shopping\"\n              description=\"Grocery shopping, pharmacy runs, and retail pickup services delivered to your door.\"\n              href=\"/shop\"\n              buttonText=\"Start Shopping\"\n              buttonVariant=\"secondary\"\n            />\n            <ServiceCard\n              icon=\"⭐\"\n              title=\"VIP Membership\"\n              description=\"Exclusive perks, priority delivery, and special discounts for our premium members.\"\n              href=\"/tier\"\n              buttonText=\"Join VIP\"\n              buttonVariant=\"primary\"\n            />\n          </div>\n        </div>\n      </section>\n\n      {/* Newsletter Signup */}\n      <section className=\"py-24 bg-gradient-to-r from-otw-red/20 via-black to-otw-gold/20\">\n        {/* Background Effects */}\n        <div className=\"absolute inset-0\">\n          <div className=\"absolute top-1/2 left-0 w-96 h-96 bg-otw-gold/10 rounded-full blur-3xl\" />\n          <div className=\"absolute bottom-0 left-1/4 w-64 h-64 bg-otw-red/5 rounded-full blur-3xl\" />\n          <div className=\"absolute bottom-0 right-1/4 w-64 h-64 bg-blue-500/5 rounded-full blur-3xl\" />\n          <div className=\"absolute top-1/2 left-0 w-full h-px bg-gradient-to-r from-transparent via-otw-gold/30 to-transparent\" />\n        </div>\n\n        <div className=\"max-w-4xl mx-auto relative z-10\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl md:text-5xl font-bold\">\n              <span className=\"bg-gradient-to-r from-otw-gold via-white to-otw-gold bg-clip-text text-transparent\">\n                Stay in the Loop\n              </span>\n              <br />\n              <span className=\"text-white\">with OTW</span>\n            </h2>\n            <p className=\"text-xl text-white/80 max-w-2xl mx-auto leading-relaxed mb-8\">\n              Get exclusive deals, new restaurant announcements, and special offers delivered straight to your inbox. Join 25,000+ Fort Wayne food lovers!\n            </p>\n\n            <div className=\"max-w-md mx-auto\">\n              <form className=\"flex flex-col sm:flex-row gap-4\">\n                <input\n                  type=\"email\"\n                  placeholder=\"Enter your email\"\n                  className=\"flex-1 px-6 py-4 bg-white/10 border border-white/20 rounded-xl text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-otw-gold backdrop-blur-sm\"\n                />\n                <input\n                  type=\"tel\"\n                  placeholder=\"Phone (optional)\"\n                  className=\"flex-1 px-6 py-4 bg-white/10 border border-white/20 rounded-xl text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-otw-gold backdrop-blur-sm\"\n                />\n                <Link href=\"/signup\">\n                  <Button variant=\"primary\" className=\"px-8 py-4 whitespace-nowrap\">\n                    Join Now\n                  </Button>\n                </Link>\n              </form>\n            </div>\n          </div>\n        </div>\n      </section>\n    </main>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/partners/page.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":41,"column":28,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1260,1415],"text":"\n            Join Fort Wayne&apos;s premier motion platform and grow your business\n            with our community of customers and delivery partners.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1260,1415],"text":"\n            Join Fort Wayne&lsquo;s premier motion platform and grow your business\n            with our community of customers and delivery partners.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1260,1415],"text":"\n            Join Fort Wayne&#39;s premier motion platform and grow your business\n            with our community of customers and delivery partners.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1260,1415],"text":"\n            Join Fort Wayne&rsquo;s premier motion platform and grow your business\n            with our community of customers and delivery partners.\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Metadata } from 'next';\nimport PartnerSignup from '../../components/partners/PartnerSignup';\nimport { Card } from '../../components/ui/card';\nimport { Building2, ShieldCheck, TrendingUp } from 'lucide-react';\n\nexport const metadata: Metadata = {\n  title: 'Partner with OTW | The One-Stop Motion Platform',\n  description:\n    'Join OTW as a business partner and expand your reach in Fort Wayne.',\n};\n\nexport const dynamic = 'force-dynamic';\n\nconst benefits = [\n  {\n    title: 'Expand Your Reach',\n    description: 'Access our growing network of customers across Fort Wayne.',\n    icon: TrendingUp,\n  },\n  {\n    title: 'Secure Platform',\n    description: 'Advanced security measures to protect your business data.',\n    icon: ShieldCheck,\n  },\n  {\n    title: 'Business Tools',\n    description: 'Manage orders, inventory, and analytics all in one place.',\n    icon: Building2,\n  },\n];\n\nexport default function PartnersPage() {\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold text-otw-gold mb-4\">\n            Partner with OTW\n          </h1>\n          <p className=\"text-xl text-gray-300 max-w-3xl mx-auto\">\n            Join Fort Wayne's premier motion platform and grow your business\n            with our community of customers and delivery partners.\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-12\">\n          {benefits.map((benefit) => {\n            const Icon = benefit.icon;\n            return (\n              <Card key={benefit.title} className=\"p-6 text-center\">\n                <div className=\"inline-flex p-3 rounded-full bg-otw-red/10 text-otw-red mb-4\">\n                  <Icon className=\"w-6 h-6\" />\n                </div>\n                <h3 className=\"text-lg font-semibold mb-2\">{benefit.title}</h3>\n                <p className=\"text-gray-400\">{benefit.description}</p>\n              </Card>\n            );\n          })}\n        </div>\n\n        <div className=\"bg-gray-900 rounded-lg p-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n            <div>\n              <h2 className=\"text-3xl font-bold text-otw-gold mb-4\">\n                Get Started Today\n              </h2>\n              <p className=\"text-gray-300 mb-6\">\n                Fill out the form to begin your partnership with OTW. Our team\n                will review your application and get back to you within 24\n                hours.\n              </p>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-1.5 h-1.5 rounded-full bg-otw-gold\" />\n                  <span>No setup or hidden fees</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-1.5 h-1.5 rounded-full bg-otw-gold\" />\n                  <span>Flexible commission structure</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-1.5 h-1.5 rounded-full bg-otw-gold\" />\n                  <span>24/7 partner support</span>\n                </div>\n              </div>\n            </div>\n            <PartnerSignup />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/privacy-policy/page.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":78,"column":27,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3307,3361],"text":"\n                  Children&apos;s Privacy\n                "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3307,3361],"text":"\n                  Children&lsquo;s Privacy\n                "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3307,3361],"text":"\n                  Children&#39;s Privacy\n                "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3307,3361],"text":"\n                  Children&rsquo;s Privacy\n                "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":389,"column":27,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[18407,18461],"text":"\n                  Children&apos;s Privacy\n                "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[18407,18461],"text":"\n                  Children&lsquo;s Privacy\n                "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[18407,18461],"text":"\n                  Children&#39;s Privacy\n                "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[18407,18461],"text":"\n                  Children&rsquo;s Privacy\n                "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":473,"column":34,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[22382,22438],"text":"Update the &quot;Last Updated\" date at the top of this policy"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[22382,22438],"text":"Update the &ldquo;Last Updated\" date at the top of this policy"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[22382,22438],"text":"Update the &#34;Last Updated\" date at the top of this policy"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[22382,22438],"text":"Update the &rdquo;Last Updated\" date at the top of this policy"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":473,"column":47,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[22382,22438],"text":"Update the \"Last Updated&quot; date at the top of this policy"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[22382,22438],"text":"Update the \"Last Updated&ldquo; date at the top of this policy"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[22382,22438],"text":"Update the \"Last Updated&#34; date at the top of this policy"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[22382,22438],"text":"Update the \"Last Updated&rdquo; date at the top of this policy"},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Card, CardContent, CardHeader, CardTitle } from '../../components/ui/card';\nimport { Badge } from '../../components/ui/badge';\nimport { Button } from '../../components/ui/button';\nimport {\n  Shield,\n  Lock,\n  Eye,\n  FileText,\n  Mail,\n  Phone,\n  MapPin,\n  Calendar,\n  Users,\n  Database,\n  Globe,\n  AlertTriangle,\n} from 'lucide-react';\nimport Link from 'next/link';\n\nexport default function PrivacyPolicyPage() {\n  const lastUpdated = 'December 15, 2024';\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-otw-black via-otw-black-800 to-otw-black-900\">\n      {/* Hero Section */}\n      <div className=\"relative py-20 px-4\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-otw-gold/10 to-transparent\" />\n        <div className=\"container mx-auto relative z-10 text-center\">\n          <div className=\"w-20 h-20 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-full flex items-center justify-center mx-auto mb-6\">\n            <Shield className=\"w-10 h-10 text-black\" />\n          </div>\n          <h1 className=\"text-4xl md:text-6xl font-bold text-white mb-6\">\n            Privacy <span className=\"text-otw-gold\">Policy</span>\n          </h1>\n          <p className=\"text-xl text-gray-300 max-w-3xl mx-auto mb-8\">\n            Your privacy is important to us. This policy explains how we collect, use, and protect your personal information.\n          </p>\n          <Badge className=\"bg-otw-gold/20 text-otw-gold border border-otw-gold/30 px-4 py-2\">\n            <Calendar className=\"w-4 h-4 mr-2\" />\n            Last Updated: {lastUpdated}\n          </Badge>\n        </div>\n      </div>\n\n      {/* Quick Navigation */}\n      <div className=\"py-8 px-4\">\n        <div className=\"container mx-auto\">\n          <Card className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <FileText className=\"w-5 h-5 text-otw-gold\" />\n                Quick Navigation\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <a href=\"#information-collection\" className=\"text-otw-gold hover:text-yellow-400 transition-colors\">\n                  Information Collection\n                </a>\n                <a href=\"#data-usage\" className=\"text-otw-gold hover:text-yellow-400 transition-colors\">\n                  How We Use Data\n                </a>\n                <a href=\"#data-sharing\" className=\"text-otw-gold hover:text-yellow-400 transition-colors\">\n                  Data Sharing\n                </a>\n                <a href=\"#data-security\" className=\"text-otw-gold hover:text-yellow-400 transition-colors\">\n                  Data Security\n                </a>\n                <a href=\"#cookies\" className=\"text-otw-gold hover:text-yellow-400 transition-colors\">\n                  Cookies & Tracking\n                </a>\n                <a href=\"#user-rights\" className=\"text-otw-gold hover:text-yellow-400 transition-colors\">\n                  Your Rights\n                </a>\n                <a href=\"#children\" className=\"text-otw-gold hover:text-yellow-400 transition-colors\">\n                  Children's Privacy\n                </a>\n                <a href=\"#contact\" className=\"text-otw-gold hover:text-yellow-400 transition-colors\">\n                  Contact Us\n                </a>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"py-16 px-4\">\n        <div className=\"container mx-auto max-w-4xl space-y-12\">\n\n          {/* Information We Collect */}\n          <section id=\"information-collection\">\n            <Card className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Database className=\"w-6 h-6 text-otw-gold\" />\n                  Information We Collect\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-gray-300 space-y-6\">\n                <div>\n                  <h3 className=\"text-xl font-semibold text-white mb-3\">Personal Information</h3>\n                  <ul className=\"space-y-2 list-disc list-inside\">\n                    <li>Name, email address, and phone number</li>\n                    <li>Delivery addresses and location data</li>\n                    <li>Payment information (processed securely through third-party providers)</li>\n                    <li>Account preferences and settings</li>\n                    <li>Profile photos and user-generated content</li>\n                  </ul>\n                </div>\n\n                <div>\n                  <h3 className=\"text-xl font-semibold text-white mb-3\">Usage Information</h3>\n                  <ul className=\"space-y-2 list-disc list-inside\">\n                    <li>Order history and preferences</li>\n                    <li>App usage patterns and interactions</li>\n                    <li>Device information and IP addresses</li>\n                    <li>Location data when using our services</li>\n                    <li>Communication records with customer support</li>\n                  </ul>\n                </div>\n\n                <div>\n                  <h3 className=\"text-xl font-semibold text-white mb-3\">Automatically Collected Data</h3>\n                  <ul className=\"space-y-2 list-disc list-inside\">\n                    <li>Cookies and similar tracking technologies</li>\n                    <li>Log files and analytics data</li>\n                    <li>Performance and error reporting</li>\n                    <li>Marketing campaign effectiveness</li>\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n          </section>\n\n          {/* How We Use Your Data */}\n          <section id=\"data-usage\">\n            <Card className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Eye className=\"w-6 h-6 text-otw-gold\" />\n                  How We Use Your Data\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-gray-300 space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <h3 className=\"text-xl font-semibold text-white mb-3\">Service Delivery</h3>\n                    <ul className=\"space-y-2 list-disc list-inside\">\n                      <li>Process and fulfill your orders</li>\n                      <li>Coordinate delivery services</li>\n                      <li>Provide customer support</li>\n                      <li>Send order updates and notifications</li>\n                    </ul>\n                  </div>\n\n                  <div>\n                    <h3 className=\"text-xl font-semibold text-white mb-3\">Personalization</h3>\n                    <ul className=\"space-y-2 list-disc list-inside\">\n                      <li>Customize your app experience</li>\n                      <li>Recommend restaurants and items</li>\n                      <li>Remember your preferences</li>\n                      <li>Provide relevant promotions</li>\n                    </ul>\n                  </div>\n\n                  <div>\n                    <h3 className=\"text-xl font-semibold text-white mb-3\">Business Operations</h3>\n                    <ul className=\"space-y-2 list-disc list-inside\">\n                      <li>Improve our services and features</li>\n                      <li>Conduct analytics and research</li>\n                      <li>Prevent fraud and abuse</li>\n                      <li>Comply with legal obligations</li>\n                    </ul>\n                  </div>\n\n                  <div>\n                    <h3 className=\"text-xl font-semibold text-white mb-3\">Communication</h3>\n                    <ul className=\"space-y-2 list-disc list-inside\">\n                      <li>Send promotional emails (with consent)</li>\n                      <li>Provide customer service</li>\n                      <li>Share important updates</li>\n                      <li>Respond to your inquiries</li>\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </section>\n\n          {/* Data Sharing */}\n          <section id=\"data-sharing\">\n            <Card className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Users className=\"w-6 h-6 text-otw-gold\" />\n                  When We Share Your Data\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-gray-300 space-y-6\">\n                <div className=\"bg-yellow-500/10 border border-yellow-500/20 rounded-lg p-4\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <AlertTriangle className=\"w-5 h-5 text-yellow-400\" />\n                    <span className=\"font-semibold text-yellow-400\">Important Note</span>\n                  </div>\n                  <p className=\"text-gray-300\">\n                    We never sell your personal information to third parties. We only share data as described below.\n                  </p>\n                </div>\n\n                <div>\n                  <h3 className=\"text-xl font-semibold text-white mb-3\">Service Partners</h3>\n                  <ul className=\"space-y-2 list-disc list-inside\">\n                    <li>Restaurants and stores to fulfill your orders</li>\n                    <li>Delivery drivers to complete deliveries</li>\n                    <li>Payment processors for secure transactions</li>\n                    <li>Technology providers for app functionality</li>\n                  </ul>\n                </div>\n\n                <div>\n                  <h3 className=\"text-xl font-semibold text-white mb-3\">Legal Requirements</h3>\n                  <ul className=\"space-y-2 list-disc list-inside\">\n                    <li>When required by law or legal process</li>\n                    <li>To protect our rights and property</li>\n                    <li>To ensure user safety and security</li>\n                    <li>In connection with business transfers</li>\n                  </ul>\n                </div>\n\n                <div>\n                  <h3 className=\"text-xl font-semibold text-white mb-3\">With Your Consent</h3>\n                  <ul className=\"space-y-2 list-disc list-inside\">\n                    <li>Marketing partners (only with explicit consent)</li>\n                    <li>Social media integrations you choose to use</li>\n                    <li>Third-party services you connect to your account</li>\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n          </section>\n\n          {/* Data Security */}\n          <section id=\"data-security\">\n            <Card className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Lock className=\"w-6 h-6 text-otw-gold\" />\n                  Data Security\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-gray-300 space-y-6\">\n                <p className=\"text-lg\">\n                  We implement industry-standard security measures to protect your personal information:\n                </p>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <h3 className=\"text-xl font-semibold text-white mb-3\">Technical Safeguards</h3>\n                    <ul className=\"space-y-2 list-disc list-inside\">\n                      <li>SSL/TLS encryption for data transmission</li>\n                      <li>Encrypted data storage</li>\n                      <li>Regular security audits and testing</li>\n                      <li>Secure payment processing</li>\n                    </ul>\n                  </div>\n\n                  <div>\n                    <h3 className=\"text-xl font-semibold text-white mb-3\">Operational Safeguards</h3>\n                    <ul className=\"space-y-2 list-disc list-inside\">\n                      <li>Limited access to personal data</li>\n                      <li>Employee training on data protection</li>\n                      <li>Regular backup and recovery procedures</li>\n                      <li>Incident response protocols</li>\n                    </ul>\n                  </div>\n                </div>\n\n                <div className=\"bg-blue-500/10 border border-blue-500/20 rounded-lg p-4\">\n                  <p className=\"text-gray-300\">\n                    <strong className=\"text-blue-400\">Data Retention:</strong> We retain your personal information only as long as necessary to provide our services and comply with legal obligations. You can request deletion of your account and data at any time.\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </section>\n\n          {/* Cookies & Tracking */}\n          <section id=\"cookies\">\n            <Card className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Globe className=\"w-6 h-6 text-otw-gold\" />\n                  Cookies & Tracking Technologies\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-gray-300 space-y-6\">\n                <p>\n                  We use cookies and similar technologies to enhance your experience and analyze usage patterns.\n                </p>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-white mb-3\">Essential Cookies</h3>\n                    <p className=\"text-sm\">Required for basic app functionality, security, and user authentication.</p>\n                  </div>\n\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-white mb-3\">Analytics Cookies</h3>\n                    <p className=\"text-sm\">Help us understand how users interact with our app to improve performance.</p>\n                  </div>\n\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-white mb-3\">Marketing Cookies</h3>\n                    <p className=\"text-sm\">Used to deliver relevant advertisements and measure campaign effectiveness.</p>\n                  </div>\n                </div>\n\n                <p className=\"text-sm\">\n                  You can manage your cookie preferences through your browser settings or our cookie consent banner.\n                </p>\n              </CardContent>\n            </Card>\n          </section>\n\n          {/* Your Rights */}\n          <section id=\"user-rights\">\n            <Card className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Shield className=\"w-6 h-6 text-otw-gold\" />\n                  Your Privacy Rights\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-gray-300 space-y-6\">\n                <p>\n                  You have several rights regarding your personal information:\n                </p>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-white mb-3\">Access & Portability</h3>\n                    <ul className=\"space-y-2 list-disc list-inside text-sm\">\n                      <li>Request a copy of your personal data</li>\n                      <li>Download your data in a portable format</li>\n                      <li>View your account information anytime</li>\n                    </ul>\n                  </div>\n\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-white mb-3\">Control & Correction</h3>\n                    <ul className=\"space-y-2 list-disc list-inside text-sm\">\n                      <li>Update or correct your information</li>\n                      <li>Delete your account and data</li>\n                      <li>Opt-out of marketing communications</li>\n                    </ul>\n                  </div>\n\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-white mb-3\">Restriction & Objection</h3>\n                    <ul className=\"space-y-2 list-disc list-inside text-sm\">\n                      <li>Restrict processing of your data</li>\n                      <li>Object to certain data uses</li>\n                      <li>Withdraw consent at any time</li>\n                    </ul>\n                  </div>\n\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-white mb-3\">Complaints</h3>\n                    <ul className=\"space-y-2 list-disc list-inside text-sm\">\n                      <li>File complaints with data protection authorities</li>\n                      <li>Contact our privacy team directly</li>\n                      <li>Request privacy impact assessments</li>\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </section>\n\n          {/* Children's Privacy */}\n          <section id=\"children\">\n            <Card className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Users className=\"w-6 h-6 text-otw-gold\" />\n                  Children's Privacy\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-gray-300 space-y-4\">\n                <p>\n                  Our services are not intended for children under 13 years of age. We do not knowingly collect personal information from children under 13.\n                </p>\n                <p>\n                  If you are a parent or guardian and believe your child has provided us with personal information, please contact us immediately so we can delete such information.\n                </p>\n                <p>\n                  For users between 13-18 years old, we recommend parental guidance when using our services.\n                </p>\n              </CardContent>\n            </Card>\n          </section>\n\n          {/* Contact Information */}\n          <section id=\"contact\">\n            <Card className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Mail className=\"w-6 h-6 text-otw-gold\" />\n                  Contact Us About Privacy\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-gray-300 space-y-6\">\n                <p>\n                  If you have questions about this Privacy Policy or our data practices, please contact us:\n                </p>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  <div className=\"flex items-center gap-3\">\n                    <Mail className=\"w-5 h-5 text-otw-gold\" />\n                    <div>\n                      <p className=\"font-semibold text-white\">Email</p>\n                      <p className=\"text-sm\">privacy@ezydelivery.com</p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center gap-3\">\n                    <Phone className=\"w-5 h-5 text-otw-gold\" />\n                    <div>\n                      <p className=\"font-semibold text-white\">Phone</p>\n                      <p className=\"text-sm\">(260) 555-PRIVACY</p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center gap-3\">\n                    <MapPin className=\"w-5 h-5 text-otw-gold\" />\n                    <div>\n                      <p className=\"font-semibold text-white\">Address</p>\n                      <p className=\"text-sm\">123 Privacy Lane<br />Fort Wayne, IN 46802</p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"bg-otw-gold/10 border border-otw-gold/20 rounded-lg p-4\">\n                  <p className=\"text-sm\">\n                    <strong className=\"text-otw-gold\">Response Time:</strong> We will respond to privacy-related inquiries within 30 days of receipt.\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </section>\n\n          {/* Policy Updates */}\n          <section>\n            <Card className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Calendar className=\"w-6 h-6 text-otw-gold\" />\n                  Policy Updates\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-gray-300 space-y-4\">\n                <p>\n                  We may update this Privacy Policy from time to time to reflect changes in our practices or legal requirements.\n                </p>\n                <p>\n                  When we make significant changes, we will:\n                </p>\n                <ul className=\"space-y-2 list-disc list-inside ml-4\">\n                  <li>Notify you via email or app notification</li>\n                  <li>Update the \"Last Updated\" date at the top of this policy</li>\n                  <li>Provide a summary of key changes</li>\n                  <li>Give you time to review before changes take effect</li>\n                </ul>\n                <p>\n                  Your continued use of our services after policy updates constitutes acceptance of the revised terms.\n                </p>\n              </CardContent>\n            </Card>\n          </section>\n        </div>\n      </div>\n\n      {/* CTA Section */}\n      <div className=\"py-16 px-4 bg-gradient-to-r from-otw-gold/5 to-transparent\">\n        <div className=\"container mx-auto text-center\">\n          <h2 className=\"text-3xl font-bold text-white mb-4\">\n            Questions About Your <span className=\"text-otw-gold\">Privacy</span>?\n          </h2>\n          <p className=\"text-gray-300 mb-8 max-w-2xl mx-auto\">\n            Our privacy team is here to help. Contact us anytime with questions or concerns about your data.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button className=\"bg-gradient-to-r from-otw-gold to-yellow-500 text-black font-semibold px-8 py-3 rounded-full hover:shadow-lg transition-all duration-300\">\n              <Mail className=\"w-5 h-5 mr-2\" />\n              Contact Privacy Team\n            </Button>\n            <Link href=\"/help\">\n              <Button variant=\"outline\" className=\"border-2 border-otw-gold text-otw-gold hover:bg-otw-gold hover:text-black px-8 py-3 rounded-full transition-all duration-300\">\n                Visit Help Center\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/privacy/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardDescription' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":44}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../components/ui/card';\nimport { Badge } from '../../components/ui/badge';\nimport { Button } from '../../components/ui/button';\nimport {\n  Shield,\n  Eye,\n  Lock,\n  Database,\n  Share2,\n  Cookie,\n  UserCheck,\n  Baby,\n  Mail,\n  Phone,\n  MapPin,\n  ExternalLink,\n  Download,\n  Printer,\n  AlertTriangle,\n  Clock,\n  Globe,\n  Settings,\n} from 'lucide-react';\nimport Link from 'next/link';\n\nexport default function PrivacyPage() {\n  const lastUpdated = 'January 15, 2024';\n  const effectiveDate = 'January 1, 2024';\n\n  const sections = [\n    {\n      id: 'overview',\n      title: 'Privacy Overview',\n      icon: Shield,\n      content: [\n        'At OTW, we are committed to protecting your privacy and ensuring the security of your personal information.',\n        'This Privacy Policy explains how we collect, use, disclose, and safeguard your information when you use our platform.',\n        'By using our Service, you consent to the data practices described in this policy.',\n        'We encourage you to read this policy carefully and contact us if you have any questions.',\n      ],\n    },\n    {\n      id: 'information-collection',\n      title: 'Information We Collect',\n      icon: Database,\n      content: [\n        'Personal Information: Name, email address, phone number, delivery address, and payment information.',\n        'Account Information: Username, password, profile preferences, and order history.',\n        'Location Data: GPS coordinates and delivery addresses to facilitate order delivery.',\n        'Device Information: Device type, operating system, browser type, and IP address.',\n        'Usage Data: How you interact with our platform, including pages visited and features used.',\n        'Communication Data: Messages, reviews, and feedback you provide through our platform.',\n      ],\n    },\n    {\n      id: 'how-we-use',\n      title: 'How We Use Your Information',\n      icon: Settings,\n      content: [\n        'To process and fulfill your food delivery orders.',\n        'To communicate with you about your orders, account, and our services.',\n        'To improve our platform and develop new features.',\n        'To personalize your experience and provide relevant recommendations.',\n        'To prevent fraud and ensure the security of our platform.',\n        'To comply with legal obligations and resolve disputes.',\n        'To send you marketing communications (with your consent).',\n      ],\n    },\n    {\n      id: 'information-sharing',\n      title: 'Information Sharing',\n      icon: Share2,\n      content: [\n        'Restaurant Partners: We share order details with restaurants to fulfill your orders.',\n        'Delivery Drivers: We share delivery information necessary to complete your order.',\n        'Payment Processors: We share payment information with secure payment processing services.',\n        'Service Providers: We may share information with trusted third-party service providers.',\n        'Legal Requirements: We may disclose information when required by law or to protect our rights.',\n        'Business Transfers: Information may be transferred in connection with mergers or acquisitions.',\n        'We do not sell your personal information to third parties for marketing purposes.',\n      ],\n    },\n    {\n      id: 'data-security',\n      title: 'Data Security',\n      icon: Lock,\n      content: [\n        'We implement industry-standard security measures to protect your personal information.',\n        'All payment information is encrypted using SSL technology.',\n        'We regularly monitor our systems for potential vulnerabilities and attacks.',\n        'Access to personal information is restricted to authorized personnel only.',\n        'We conduct regular security audits and assessments.',\n        'In the event of a data breach, we will notify affected users promptly.',\n        'However, no method of transmission over the internet is 100% secure.',\n      ],\n    },\n    {\n      id: 'cookies',\n      title: 'Cookies and Tracking',\n      icon: Cookie,\n      content: [\n        'We use cookies and similar technologies to enhance your experience on our platform.',\n        'Essential cookies are necessary for the platform to function properly.',\n        'Analytics cookies help us understand how users interact with our platform.',\n        'Marketing cookies are used to deliver relevant advertisements.',\n        'You can control cookie preferences through your browser settings.',\n        'Disabling certain cookies may limit the functionality of our platform.',\n        'We also use web beacons and pixel tags for analytics and marketing purposes.',\n      ],\n    },\n    {\n      id: 'user-rights',\n      title: 'Your Rights and Choices',\n      icon: UserCheck,\n      content: [\n        'Access: You can request access to the personal information we hold about you.',\n        'Correction: You can request correction of inaccurate or incomplete information.',\n        'Deletion: You can request deletion of your personal information, subject to certain exceptions.',\n        'Portability: You can request a copy of your data in a structured, machine-readable format.',\n        'Opt-out: You can opt out of marketing communications at any time.',\n        'Location Services: You can disable location tracking through your device settings.',\n        'Account Deletion: You can delete your account through the app or by contacting support.',\n      ],\n    },\n    {\n      id: 'data-retention',\n      title: 'Data Retention',\n      icon: Clock,\n      content: [\n        'We retain personal information for as long as necessary to provide our services.',\n        'Account information is retained until you delete your account.',\n        'Order history is retained for 7 years for business and legal purposes.',\n        'Payment information is retained according to payment processor requirements.',\n        'Marketing data is retained until you opt out of communications.',\n        'Some information may be retained longer if required by law.',\n        'We regularly review and delete information that is no longer necessary.',\n      ],\n    },\n    {\n      id: 'international',\n      title: 'International Transfers',\n      icon: Globe,\n      content: [\n        'Your information may be transferred to and processed in countries other than your own.',\n        'We ensure appropriate safeguards are in place for international transfers.',\n        'We comply with applicable data protection laws in all jurisdictions where we operate.',\n        'Standard contractual clauses are used to protect data transferred outside the EU.',\n        'You consent to the transfer of your information to countries with different privacy laws.',\n        'We will notify you of any significant changes to our international transfer practices.',\n      ],\n    },\n    {\n      id: 'children',\n      title: \"Children's Privacy\",\n      icon: Baby,\n      content: [\n        'Our Service is not intended for children under the age of 13.',\n        'We do not knowingly collect personal information from children under 13.',\n        'If we become aware that we have collected information from a child under 13, we will delete it.',\n        'Parents or guardians who believe their child has provided information should contact us.',\n        'Users between 13 and 18 should have parental consent before using our Service.',\n        'We encourage parents to monitor their children\\'s online activities.',\n      ],\n    },\n    {\n      id: 'third-party',\n      title: 'Third-Party Services',\n      icon: ExternalLink,\n      content: [\n        'Our platform may contain links to third-party websites and services.',\n        'This Privacy Policy does not apply to third-party websites or services.',\n        'We are not responsible for the privacy practices of third-party services.',\n        'We encourage you to read the privacy policies of any third-party services you use.',\n        'Social media plugins may collect information about your visit to our platform.',\n        'Third-party analytics services help us understand platform usage.',\n      ],\n    },\n    {\n      id: 'california',\n      title: 'California Privacy Rights',\n      icon: AlertTriangle,\n      content: [\n        'California residents have additional rights under the California Consumer Privacy Act (CCPA).',\n        'You have the right to know what personal information we collect and how it is used.',\n        'You have the right to delete personal information we have collected about you.',\n        'You have the right to opt out of the sale of personal information (we do not sell personal information).',\n        'You have the right to non-discrimination for exercising your privacy rights.',\n        'To exercise these rights, please contact us using the information provided below.',\n      ],\n    },\n    {\n      id: 'changes',\n      title: 'Changes to This Policy',\n      icon: Settings,\n      content: [\n        'We may update this Privacy Policy from time to time to reflect changes in our practices.',\n        'We will notify you of any material changes by posting the new policy on this page.',\n        'We will also notify you via email or in-app notification for significant changes.',\n        'Your continued use of our Service after changes constitutes acceptance of the new policy.',\n        'We encourage you to review this policy periodically for any updates.',\n        'The \"Last Updated\" date at the top of this policy indicates when it was last revised.',\n      ],\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-otw-black via-otw-black-800 to-otw-black-900\">\n      {/* Hero Section */}\n      <div className=\"relative py-20 px-4\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-otw-gold/10 to-transparent\" />\n        <div className=\"container mx-auto relative z-10\">\n          <div className=\"text-center max-w-4xl mx-auto\">\n            <div className=\"w-20 h-20 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-full flex items-center justify-center mx-auto mb-6\">\n              <Shield className=\"w-10 h-10 text-black\" />\n            </div>\n            <h1 className=\"text-4xl md:text-6xl font-bold text-white mb-6\">\n              Privacy <span className=\"text-otw-gold\">Policy</span>\n            </h1>\n            <p className=\"text-xl text-gray-300 mb-8 max-w-2xl mx-auto\">\n              Your privacy is important to us. This policy explains how we collect, use, and protect your personal information.\n            </p>\n\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center mb-8\">\n              <Badge className=\"bg-otw-gold/20 text-otw-gold border-otw-gold/30 px-4 py-2\">\n                <Clock className=\"w-4 h-4 mr-2\" />\n                Last Updated: {lastUpdated}\n              </Badge>\n              <Badge className=\"bg-green-500/20 text-green-400 border-green-500/30 px-4 py-2\">\n                <Shield className=\"w-4 h-4 mr-2\" />\n                Effective: {effectiveDate}\n              </Badge>\n            </div>\n\n            <div className=\"flex flex-wrap justify-center gap-4\">\n              <Button className=\"bg-gradient-to-r from-otw-gold to-yellow-500 text-black font-semibold px-6 py-3 rounded-full hover:shadow-lg transition-all duration-300\">\n                <Download className=\"w-5 h-5 mr-2\" />\n                Download PDF\n              </Button>\n              <Button variant=\"outline\" className=\"border-2 border-otw-gold text-otw-gold hover:bg-otw-gold hover:text-black px-6 py-3 rounded-full transition-all duration-300\">\n                <Printer className=\"w-5 h-5 mr-2\" />\n                Print Policy\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Quick Navigation */}\n      <div className=\"py-16 px-4 bg-gradient-to-r from-otw-gold/5 to-transparent\">\n        <div className=\"container mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-white mb-4\">\n              Quick <span className=\"text-otw-gold\">Navigation</span>\n            </h2>\n            <p className=\"text-gray-300\">Jump to specific sections</p>\n          </div>\n\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n            {sections.map((section) => {\n              const IconComponent = section.icon;\n              return (\n                <a\n                  key={section.id}\n                  href={`#${section.id}`}\n                  className=\"group p-4 bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20 hover:border-otw-gold/40 rounded-lg transition-all duration-300 hover:shadow-lg hover:shadow-otw-gold/10\"\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-8 h-8 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-lg flex items-center justify-center group-hover:scale-110 transition-transform duration-300\">\n                      <IconComponent className=\"w-4 h-4 text-black\" />\n                    </div>\n                    <span className=\"text-white text-sm font-medium group-hover:text-otw-gold transition-colors duration-300\">\n                      {section.title}\n                    </span>\n                  </div>\n                </a>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n\n      {/* Privacy Content */}\n      <div className=\"py-16 px-4\">\n        <div className=\"container mx-auto max-w-4xl\">\n          <div className=\"space-y-12\">\n            {sections.map((section, index) => {\n              const IconComponent = section.icon;\n              return (\n                <Card\n                  key={section.id}\n                  id={section.id}\n                  className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20 hover:border-otw-gold/40 transition-all duration-300 hover:shadow-lg hover:shadow-otw-gold/10\"\n                >\n                  <CardHeader>\n                    <div className=\"flex items-center gap-4\">\n                      <div className=\"w-12 h-12 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-lg flex items-center justify-center\">\n                        <IconComponent className=\"w-6 h-6 text-black\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-white text-2xl\">\n                          {index + 1}. {section.title}\n                        </CardTitle>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {section.content.map((paragraph, pIndex) => (\n                        <p key={pIndex} className=\"text-gray-300 leading-relaxed\">\n                          {paragraph}\n                        </p>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n\n      {/* Data Rights Section */}\n      <div className=\"py-16 px-4 bg-gradient-to-r from-otw-gold/5 to-transparent\">\n        <div className=\"container mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-white mb-4\">\n              Exercise Your <span className=\"text-otw-gold\">Rights</span>\n            </h2>\n            <p className=\"text-gray-300\">Manage your privacy preferences and data</p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <Card className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20 hover:border-otw-gold/40 transition-all duration-300 hover:shadow-lg hover:shadow-otw-gold/10\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <Eye className=\"w-6 h-6 text-black\" />\n                </div>\n                <h3 className=\"text-white font-semibold mb-2\">Access Data</h3>\n                <p className=\"text-gray-300 text-sm mb-4\">Request a copy of your data</p>\n                <Button className=\"w-full bg-gradient-to-r from-otw-gold to-yellow-500 text-black font-semibold\">\n                  Request Data\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20 hover:border-otw-gold/40 transition-all duration-300 hover:shadow-lg hover:shadow-otw-gold/10\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <Settings className=\"w-6 h-6 text-black\" />\n                </div>\n                <h3 className=\"text-white font-semibold mb-2\">Update Info</h3>\n                <p className=\"text-gray-300 text-sm mb-4\">Correct your information</p>\n                <Button className=\"w-full bg-gradient-to-r from-otw-gold to-yellow-500 text-black font-semibold\">\n                  Update Data\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20 hover:border-otw-gold/40 transition-all duration-300 hover:shadow-lg hover:shadow-otw-gold/10\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <AlertTriangle className=\"w-6 h-6 text-black\" />\n                </div>\n                <h3 className=\"text-white font-semibold mb-2\">Delete Data</h3>\n                <p className=\"text-gray-300 text-sm mb-4\">Request data deletion</p>\n                <Button className=\"w-full bg-gradient-to-r from-otw-gold to-yellow-500 text-black font-semibold\">\n                  Delete Data\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20 hover:border-otw-gold/40 transition-all duration-300 hover:shadow-lg hover:shadow-otw-gold/10\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <Cookie className=\"w-6 h-6 text-black\" />\n                </div>\n                <h3 className=\"text-white font-semibold mb-2\">Cookie Settings</h3>\n                <p className=\"text-gray-300 text-sm mb-4\">Manage cookie preferences</p>\n                <Button className=\"w-full bg-gradient-to-r from-otw-gold to-yellow-500 text-black font-semibold\">\n                  Manage Cookies\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* Contact Information */}\n      <div className=\"py-16 px-4\">\n        <div className=\"container mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-white mb-4\">\n              Privacy <span className=\"text-otw-gold\">Questions</span>?\n            </h2>\n            <p className=\"text-gray-300\">Contact our privacy team for any concerns</p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-4xl mx-auto\">\n            <Card className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20 hover:border-otw-gold/40 transition-all duration-300 hover:shadow-lg hover:shadow-otw-gold/10\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <Mail className=\"w-6 h-6 text-black\" />\n                </div>\n                <h3 className=\"text-white font-semibold mb-2\">Email Privacy Team</h3>\n                <p className=\"text-gray-300 text-sm mb-4\">Get privacy support via email</p>\n                <a href=\"mailto:privacy@otw.com\" className=\"text-otw-gold hover:underline\">\n                  privacy@otw.com\n                </a>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20 hover:border-otw-gold/40 transition-all duration-300 hover:shadow-lg hover:shadow-otw-gold/10\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <Phone className=\"w-6 h-6 text-black\" />\n                </div>\n                <h3 className=\"text-white font-semibold mb-2\">Privacy Hotline</h3>\n                <p className=\"text-gray-300 text-sm mb-4\">Speak with privacy experts</p>\n                <a href=\"tel:1-800-OTW-PRIVACY\" className=\"text-otw-gold hover:underline\">\n                  1-800-OTW-PRIVACY\n                </a>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20 hover:border-otw-gold/40 transition-all duration-300 hover:shadow-lg hover:shadow-otw-gold/10\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <MapPin className=\"w-6 h-6 text-black\" />\n                </div>\n                <h3 className=\"text-white font-semibold mb-2\">Privacy Office</h3>\n                <p className=\"text-gray-300 text-sm mb-4\">Send privacy inquiries</p>\n                <div className=\"text-otw-gold text-sm\">\n                  <p>OTW Privacy Office</p>\n                  <p>123 Privacy Street</p>\n                  <p>Secure City, SC 12345</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* Related Links */}\n      <div className=\"py-16 px-4 bg-gradient-to-r from-otw-gold/5 to-transparent\">\n        <div className=\"container mx-auto text-center\">\n          <h2 className=\"text-3xl font-bold text-white mb-8\">\n            Related <span className=\"text-otw-gold\">Documents</span>\n          </h2>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Link href=\"/terms\">\n              <Button className=\"bg-gradient-to-r from-otw-gold to-yellow-500 text-black font-semibold px-8 py-3 rounded-full hover:shadow-lg transition-all duration-300\">\n                <Shield className=\"w-5 h-5 mr-2\" />\n                Terms of Service\n              </Button>\n            </Link>\n            <Link href=\"/help\">\n              <Button variant=\"outline\" className=\"border-2 border-otw-gold text-otw-gold hover:bg-otw-gold hover:text-black px-8 py-3 rounded-full transition-all duration-300\">\n                <ExternalLink className=\"w-5 h-5 mr-2\" />\n                Help Center\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/private-events/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Calendar' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Clock' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Mail' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":7},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":46,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[937,940],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[937,940],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":216,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":216,"endColumn":19},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":471,"column":19,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[17356,17511],"text":"\n                  &quot;The team made our anniversary celebration absolutely perfect. Every detail was handled with care and professionalism.\"\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[17356,17511],"text":"\n                  &ldquo;The team made our anniversary celebration absolutely perfect. Every detail was handled with care and professionalism.\"\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[17356,17511],"text":"\n                  &#34;The team made our anniversary celebration absolutely perfect. Every detail was handled with care and professionalism.\"\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[17356,17511],"text":"\n                  &rdquo;The team made our anniversary celebration absolutely perfect. Every detail was handled with care and professionalism.\"\n                "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":471,"column":137,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[17356,17511],"text":"\n                  \"The team made our anniversary celebration absolutely perfect. Every detail was handled with care and professionalism.&quot;\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[17356,17511],"text":"\n                  \"The team made our anniversary celebration absolutely perfect. Every detail was handled with care and professionalism.&ldquo;\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[17356,17511],"text":"\n                  \"The team made our anniversary celebration absolutely perfect. Every detail was handled with care and professionalism.&#34;\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[17356,17511],"text":"\n                  \"The team made our anniversary celebration absolutely perfect. Every detail was handled with care and professionalism.&rdquo;\n                "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":493,"column":19,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[18524,18660],"text":"\n                  &quot;Our corporate event was a huge success thanks to their attention to detail and seamless execution.\"\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[18524,18660],"text":"\n                  &ldquo;Our corporate event was a huge success thanks to their attention to detail and seamless execution.\"\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[18524,18660],"text":"\n                  &#34;Our corporate event was a huge success thanks to their attention to detail and seamless execution.\"\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[18524,18660],"text":"\n                  &rdquo;Our corporate event was a huge success thanks to their attention to detail and seamless execution.\"\n                "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":493,"column":118,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[18524,18660],"text":"\n                  \"Our corporate event was a huge success thanks to their attention to detail and seamless execution.&quot;\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[18524,18660],"text":"\n                  \"Our corporate event was a huge success thanks to their attention to detail and seamless execution.&ldquo;\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[18524,18660],"text":"\n                  \"Our corporate event was a huge success thanks to their attention to detail and seamless execution.&#34;\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[18524,18660],"text":"\n                  \"Our corporate event was a huge success thanks to their attention to detail and seamless execution.&rdquo;\n                "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":515,"column":19,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[19674,19810],"text":"\n                  &quot;They turned our daughter's graduation party into an unforgettable celebration. Highly recommended!\"\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[19674,19810],"text":"\n                  &ldquo;They turned our daughter's graduation party into an unforgettable celebration. Highly recommended!\"\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[19674,19810],"text":"\n                  &#34;They turned our daughter's graduation party into an unforgettable celebration. Highly recommended!\"\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[19674,19810],"text":"\n                  &rdquo;They turned our daughter's graduation party into an unforgettable celebration. Highly recommended!\"\n                "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":515,"column":44,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[19674,19810],"text":"\n                  \"They turned our daughter&apos;s graduation party into an unforgettable celebration. Highly recommended!\"\n                "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[19674,19810],"text":"\n                  \"They turned our daughter&lsquo;s graduation party into an unforgettable celebration. Highly recommended!\"\n                "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[19674,19810],"text":"\n                  \"They turned our daughter&#39;s graduation party into an unforgettable celebration. Highly recommended!\"\n                "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[19674,19810],"text":"\n                  \"They turned our daughter&rsquo;s graduation party into an unforgettable celebration. Highly recommended!\"\n                "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":515,"column":118,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[19674,19810],"text":"\n                  \"They turned our daughter's graduation party into an unforgettable celebration. Highly recommended!&quot;\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[19674,19810],"text":"\n                  \"They turned our daughter's graduation party into an unforgettable celebration. Highly recommended!&ldquo;\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[19674,19810],"text":"\n                  \"They turned our daughter's graduation party into an unforgettable celebration. Highly recommended!&#34;\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[19674,19810],"text":"\n                  \"They turned our daughter's graduation party into an unforgettable celebration. Highly recommended!&rdquo;\n                "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":548,"column":48,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[21202,21298],"text":"\n                Tell us about your event and we&apos;ll create a custom quote for you\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[21202,21298],"text":"\n                Tell us about your event and we&lsquo;ll create a custom quote for you\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[21202,21298],"text":"\n                Tell us about your event and we&#39;ll create a custom quote for you\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[21202,21298],"text":"\n                Tell us about your event and we&rsquo;ll create a custom quote for you\n              "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { Button } from '../../components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../components/ui/card';\nimport { Badge } from '../../components/ui/badge';\nimport { Input } from '../../components/ui/input';\nimport { Textarea } from '../../components/ui/textarea';\nimport {\n  Calendar,\n  Users,\n  MapPin,\n  Clock,\n  Phone,\n  Mail,\n  Star,\n  CheckCircle,\n  Heart,\n  Gift,\n  Camera,\n  Music,\n  Utensils,\n  Cake,\n  PartyPopper,\n  Crown,\n} from 'lucide-react';\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport { toast } from '../../components/ui/use-toast';\n\ninterface EventPackage {\n  id: string;\n  name: string;\n  description: string;\n  price: number;\n  duration: string;\n  guestCount: string;\n  features: string[];\n  popular?: boolean;\n  premium?: boolean;\n}\n\ninterface EventType {\n  id: string;\n  name: string;\n  icon: any;\n  description: string;\n  minGuests: number;\n  maxGuests: number;\n  basePrice: number;\n}\n\nconst EVENT_PACKAGES: EventPackage[] = [\n  {\n    id: 'intimate',\n    name: 'Intimate Gathering',\n    description: 'Perfect for small celebrations with close friends and family',\n    price: 299,\n    duration: '3 hours',\n    guestCount: '10-20 guests',\n    features: [\n      'Dedicated event coordinator',\n      'Custom menu planning',\n      'Table setup and decoration',\n      'Professional service staff',\n      'Basic sound system',\n      'Cleanup service',\n    ],\n  },\n  {\n    id: 'celebration',\n    name: 'Celebration Package',\n    description: 'Ideal for birthdays, anniversaries, and milestone events',\n    price: 599,\n    duration: '4 hours',\n    guestCount: '20-50 guests',\n    features: [\n      'Everything in Intimate package',\n      'Enhanced decorations',\n      'Photography service (2 hours)',\n      'Custom cake or dessert station',\n      'Premium sound system',\n      'Dance floor setup',\n      'Personalized menu cards',\n    ],\n    popular: true,\n  },\n  {\n    id: 'premium',\n    name: 'Premium Experience',\n    description: 'Luxury event experience with all the bells and whistles',\n    price: 1299,\n    duration: '6 hours',\n    guestCount: '50-100 guests',\n    features: [\n      'Everything in Celebration package',\n      'Full photography & videography',\n      'Live music or DJ service',\n      'Premium bar service',\n      'Gourmet multi-course menu',\n      'Floral arrangements',\n      'Valet parking service',\n      'Custom lighting design',\n    ],\n    premium: true,\n  },\n];\n\nconst EVENT_TYPES: EventType[] = [\n  {\n    id: 'birthday',\n    name: 'Birthday Parties',\n    icon: Cake,\n    description: 'Memorable birthday celebrations for all ages',\n    minGuests: 10,\n    maxGuests: 100,\n    basePrice: 25,\n  },\n  {\n    id: 'anniversary',\n    name: 'Anniversaries',\n    icon: Heart,\n    description: 'Romantic celebrations for couples',\n    minGuests: 10,\n    maxGuests: 80,\n    basePrice: 30,\n  },\n  {\n    id: 'corporate',\n    name: 'Corporate Events',\n    icon: Users,\n    description: 'Professional gatherings and team building',\n    minGuests: 20,\n    maxGuests: 150,\n    basePrice: 35,\n  },\n  {\n    id: 'graduation',\n    name: 'Graduations',\n    icon: Crown,\n    description: 'Celebrate academic achievements',\n    minGuests: 15,\n    maxGuests: 75,\n    basePrice: 28,\n  },\n  {\n    id: 'baby-shower',\n    name: 'Baby Showers',\n    icon: Gift,\n    description: 'Welcome new arrivals with style',\n    minGuests: 10,\n    maxGuests: 50,\n    basePrice: 25,\n  },\n  {\n    id: 'holiday',\n    name: 'Holiday Parties',\n    icon: PartyPopper,\n    description: 'Festive celebrations for any holiday',\n    minGuests: 15,\n    maxGuests: 100,\n    basePrice: 32,\n  },\n];\n\nexport default function PrivateEventsPage() {\n  const [selectedPackage, setSelectedPackage] = useState<string>('');\n  const [selectedEventType, setSelectedEventType] = useState<string>('');\n  const [showQuoteForm, setShowQuoteForm] = useState(false);\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    eventDate: '',\n    guestCount: '',\n    eventType: '',\n    packageType: '',\n    venue: '',\n    budget: '',\n    specialRequests: '',\n  });\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const handleSubmitQuote = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    // Simulate API call\n    try {\n      // In a real app, this would send to your API\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      toast({\n        title: 'Quote Request Submitted!',\n        description: \"We'll contact you within 24 hours with a custom quote.\",\n      });\n\n      setShowQuoteForm(false);\n      setFormData({\n        name: '',\n        email: '',\n        phone: '',\n        eventDate: '',\n        guestCount: '',\n        eventType: '',\n        packageType: '',\n        venue: '',\n        budget: '',\n        specialRequests: '',\n      });\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to submit quote request. Please try again.',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-otw-black via-otw-black-800 to-otw-black-900\">\n      {/* Hero Section */}\n      <div className=\"relative py-20 px-4\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-otw-gold/10 to-transparent\" />\n        <div className=\"container mx-auto relative z-10\">\n          <div className=\"flex flex-col lg:flex-row items-center gap-12\">\n            <div className=\"flex-1 text-center lg:text-left\">\n              <div className=\"w-20 h-20 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-full flex items-center justify-center mx-auto lg:mx-0 mb-6\">\n                <PartyPopper className=\"w-10 h-10 text-black\" />\n              </div>\n              <h1 className=\"text-4xl md:text-6xl font-bold text-white mb-6\">\n                Private <span className=\"text-otw-gold\">Events</span>\n              </h1>\n              <p className=\"text-xl text-gray-300 mb-8 max-w-2xl\">\n                Create unforgettable memories with our premium private event services. From intimate gatherings to grand celebrations, we handle every detail.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Button\n                  onClick={() => setShowQuoteForm(true)}\n                  className=\"bg-gradient-to-r from-otw-gold to-yellow-500 text-black font-semibold px-8 py-3 rounded-full hover:shadow-lg transition-all duration-300\"\n                >\n                  Get Custom Quote\n                </Button>\n                <Button variant=\"outline\" className=\"border-2 border-otw-gold text-otw-gold hover:bg-otw-gold hover:text-black px-8 py-3 rounded-full transition-all duration-300\">\n                  <Phone className=\"w-5 h-5 mr-2\" />\n                  Call (260) 555-EVENTS\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"flex-1 max-w-lg\">\n              <div className=\"relative h-80 rounded-2xl overflow-hidden\">\n                <Image\n                  src=\"/images/events/private-event-hero.jpg\"\n                  alt=\"Private Event Setup\"\n                  fill\n                  className=\"object-cover\"\n                />\n                <div className=\"absolute inset-0 bg-gradient-to-t from-black/30 to-transparent\" />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Event Types */}\n      <div className=\"py-16 px-4\">\n        <div className=\"container mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-4xl font-bold text-white mb-4\">\n              Event <span className=\"text-otw-gold\">Types</span>\n            </h2>\n            <p className=\"text-xl text-gray-300 max-w-2xl mx-auto\">\n              We specialize in a variety of private events, each tailored to your unique vision\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {EVENT_TYPES.map((eventType) => {\n              const IconComponent = eventType.icon;\n              return (\n                <Card\n                  key={eventType.id}\n                  className={`bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border transition-all duration-300 hover:shadow-2xl hover:shadow-otw-gold/10 cursor-pointer ${\n                    selectedEventType === eventType.id\n                      ? 'border-otw-gold/60 shadow-lg shadow-otw-gold/20'\n                      : 'border-otw-gold/20 hover:border-otw-gold/40'\n                  }`}\n                  onClick={() => setSelectedEventType(eventType.id)}\n                >\n                  <CardHeader className=\"text-center\">\n                    <div className=\"w-16 h-16 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n                      <IconComponent className=\"w-8 h-8 text-black\" />\n                    </div>\n                    <CardTitle className=\"text-white\">{eventType.name}</CardTitle>\n                    <CardDescription className=\"text-gray-300\">\n                      {eventType.description}\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2 text-sm text-gray-400\">\n                      <div className=\"flex justify-between\">\n                        <span>Guest Range:</span>\n                        <span className=\"text-otw-gold\">{eventType.minGuests}-{eventType.maxGuests}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Starting at:</span>\n                        <span className=\"text-otw-gold\">${eventType.basePrice}/person</span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n\n      {/* Event Packages */}\n      <div className=\"py-16 px-4 bg-gradient-to-r from-otw-gold/5 to-transparent\">\n        <div className=\"container mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-4xl font-bold text-white mb-4\">\n              Event <span className=\"text-otw-gold\">Packages</span>\n            </h2>\n            <p className=\"text-xl text-gray-300 max-w-2xl mx-auto\">\n              Choose from our curated packages or let us create a custom experience just for you\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {EVENT_PACKAGES.map((pkg) => (\n              <Card\n                key={pkg.id}\n                className={`bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border transition-all duration-300 hover:shadow-2xl hover:shadow-otw-gold/10 relative ${\n                  selectedPackage === pkg.id\n                    ? 'border-otw-gold/60 shadow-lg shadow-otw-gold/20 scale-105'\n                    : 'border-otw-gold/20 hover:border-otw-gold/40'\n                }`}\n              >\n                {pkg.popular && (\n                  <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2\">\n                    <Badge className=\"bg-red-500 text-white px-4 py-2 text-sm font-semibold\">\n                      🔥 Most Popular\n                    </Badge>\n                  </div>\n                )}\n                {pkg.premium && (\n                  <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2\">\n                    <Badge className=\"bg-gradient-to-r from-purple-500 to-pink-500 text-white px-4 py-2 text-sm font-semibold\">\n                      ✨ Premium\n                    </Badge>\n                  </div>\n                )}\n\n                <CardHeader className=\"text-center\">\n                  <CardTitle className=\"text-2xl text-white mb-2\">{pkg.name}</CardTitle>\n                  <CardDescription className=\"text-gray-300 mb-4\">\n                    {pkg.description}\n                  </CardDescription>\n                  <div className=\"text-4xl font-bold text-otw-gold mb-2\">\n                    ${pkg.price}\n                  </div>\n                  <div className=\"text-sm text-gray-400\">\n                    {pkg.duration} • {pkg.guestCount}\n                  </div>\n                </CardHeader>\n\n                <CardContent>\n                  <ul className=\"space-y-3 mb-6\">\n                    {pkg.features.map((feature, index) => (\n                      <li key={index} className=\"flex items-center gap-2 text-gray-300\">\n                        <CheckCircle className=\"w-4 h-4 text-green-400 flex-shrink-0\" />\n                        <span className=\"text-sm\">{feature}</span>\n                      </li>\n                    ))}\n                  </ul>\n\n                  <Button\n                    onClick={() => {\n                      setSelectedPackage(pkg.id);\n                      setFormData(prev => ({ ...prev, packageType: pkg.name }));\n                      setShowQuoteForm(true);\n                    }}\n                    className={`w-full py-3 rounded-xl transition-all duration-300 ${\n                      pkg.premium\n                        ? 'bg-gradient-to-r from-purple-500 to-pink-500 text-white hover:shadow-lg hover:shadow-purple-500/20'\n                        : 'bg-gradient-to-r from-otw-gold to-yellow-500 text-black font-semibold hover:shadow-lg hover:shadow-otw-gold/20'\n                    }`}\n                  >\n                    Select Package\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Services & Features */}\n      <div className=\"py-16 px-4\">\n        <div className=\"container mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-4xl font-bold text-white mb-4\">\n              Our <span className=\"text-otw-gold\">Services</span>\n            </h2>\n            <p className=\"text-xl text-gray-300 max-w-2xl mx-auto\">\n              Comprehensive event services to make your celebration perfect\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Utensils className=\"w-8 h-8 text-black\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-white mb-2\">Catering</h3>\n              <p className=\"text-gray-300 text-sm\">Custom menus from local restaurants and professional chefs</p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Camera className=\"w-8 h-8 text-black\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-white mb-2\">Photography</h3>\n              <p className=\"text-gray-300 text-sm\">Professional photography and videography services</p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Music className=\"w-8 h-8 text-black\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-white mb-2\">Entertainment</h3>\n              <p className=\"text-gray-300 text-sm\">DJ services, live music, and entertainment options</p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <MapPin className=\"w-8 h-8 text-black\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-white mb-2\">Venue Setup</h3>\n              <p className=\"text-gray-300 text-sm\">Complete venue decoration and setup services</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Testimonials */}\n      <div className=\"py-16 px-4 bg-gradient-to-r from-otw-gold/5 to-transparent\">\n        <div className=\"container mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-4xl font-bold text-white mb-4\">\n              Client <span className=\"text-otw-gold\">Testimonials</span>\n            </h2>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <Card className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center gap-1 mb-4\">\n                  {[...Array(5)].map((_, i) => (\n                    <Star key={i} className=\"w-4 h-4 text-yellow-400 fill-current\" />\n                  ))}\n                </div>\n                <p className=\"text-gray-300 mb-4\">\n                  \"The team made our anniversary celebration absolutely perfect. Every detail was handled with care and professionalism.\"\n                </p>\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-10 h-10 bg-otw-gold rounded-full flex items-center justify-center\">\n                    <span className=\"text-black font-semibold\">SM</span>\n                  </div>\n                  <div>\n                    <p className=\"text-white font-semibold\">Sarah & Mike</p>\n                    <p className=\"text-gray-400 text-sm\">25th Anniversary</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center gap-1 mb-4\">\n                  {[...Array(5)].map((_, i) => (\n                    <Star key={i} className=\"w-4 h-4 text-yellow-400 fill-current\" />\n                  ))}\n                </div>\n                <p className=\"text-gray-300 mb-4\">\n                  \"Our corporate event was a huge success thanks to their attention to detail and seamless execution.\"\n                </p>\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-10 h-10 bg-otw-gold rounded-full flex items-center justify-center\">\n                    <span className=\"text-black font-semibold\">JD</span>\n                  </div>\n                  <div>\n                    <p className=\"text-white font-semibold\">Jennifer Davis</p>\n                    <p className=\"text-gray-400 text-sm\">Corporate Event</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center gap-1 mb-4\">\n                  {[...Array(5)].map((_, i) => (\n                    <Star key={i} className=\"w-4 h-4 text-yellow-400 fill-current\" />\n                  ))}\n                </div>\n                <p className=\"text-gray-300 mb-4\">\n                  \"They turned our daughter's graduation party into an unforgettable celebration. Highly recommended!\"\n                </p>\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-10 h-10 bg-otw-gold rounded-full flex items-center justify-center\">\n                    <span className=\"text-black font-semibold\">RT</span>\n                  </div>\n                  <div>\n                    <p className=\"text-white font-semibold\">Robert Thompson</p>\n                    <p className=\"text-gray-400 text-sm\">Graduation Party</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* Quote Form Modal */}\n      {showQuoteForm && (\n        <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4\">\n          <Card className=\"bg-gradient-to-br from-otw-black-800 to-otw-black-900 border border-otw-gold/20 max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center justify-between\">\n                <span>Get Custom Quote</span>\n                <Button\n                  variant=\"ghost\"\n                  onClick={() => setShowQuoteForm(false)}\n                  className=\"text-gray-400 hover:text-white\"\n                >\n                  ✕\n                </Button>\n              </CardTitle>\n              <CardDescription className=\"text-gray-300\">\n                Tell us about your event and we'll create a custom quote for you\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmitQuote} className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-white mb-2\">Full Name *</label>\n                    <Input\n                      name=\"name\"\n                      value={formData.name}\n                      onChange={handleInputChange}\n                      required\n                      className=\"bg-otw-black-800 border-otw-gold/30 text-white\"\n                      placeholder=\"Your full name\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-white mb-2\">Email *</label>\n                    <Input\n                      name=\"email\"\n                      type=\"email\"\n                      value={formData.email}\n                      onChange={handleInputChange}\n                      required\n                      className=\"bg-otw-black-800 border-otw-gold/30 text-white\"\n                      placeholder=\"your@email.com\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-white mb-2\">Phone Number *</label>\n                    <Input\n                      name=\"phone\"\n                      type=\"tel\"\n                      value={formData.phone}\n                      onChange={handleInputChange}\n                      required\n                      className=\"bg-otw-black-800 border-otw-gold/30 text-white\"\n                      placeholder=\"(260) 555-0123\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-white mb-2\">Event Date *</label>\n                    <Input\n                      name=\"eventDate\"\n                      type=\"date\"\n                      value={formData.eventDate}\n                      onChange={handleInputChange}\n                      required\n                      className=\"bg-otw-black-800 border-otw-gold/30 text-white\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-white mb-2\">Guest Count *</label>\n                    <Input\n                      name=\"guestCount\"\n                      type=\"number\"\n                      value={formData.guestCount}\n                      onChange={handleInputChange}\n                      required\n                      className=\"bg-otw-black-800 border-otw-gold/30 text-white\"\n                      placeholder=\"50\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-white mb-2\">Budget Range</label>\n                    <Input\n                      name=\"budget\"\n                      value={formData.budget}\n                      onChange={handleInputChange}\n                      className=\"bg-otw-black-800 border-otw-gold/30 text-white\"\n                      placeholder=\"$500 - $1000\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-white mb-2\">Venue Location</label>\n                  <Input\n                    name=\"venue\"\n                    value={formData.venue}\n                    onChange={handleInputChange}\n                    className=\"bg-otw-black-800 border-otw-gold/30 text-white\"\n                    placeholder=\"Your venue or 'Need venue recommendation'\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-white mb-2\">Special Requests</label>\n                  <Textarea\n                    name=\"specialRequests\"\n                    value={formData.specialRequests}\n                    onChange={handleInputChange}\n                    className=\"bg-otw-black-800 border-otw-gold/30 text-white\"\n                    placeholder=\"Any special requirements, dietary restrictions, themes, etc.\"\n                    rows={4}\n                  />\n                </div>\n\n                <div className=\"flex gap-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setShowQuoteForm(false)}\n                    className=\"flex-1 border-otw-gold/30 text-otw-gold hover:bg-otw-gold/10\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    className=\"flex-1 bg-gradient-to-r from-otw-gold to-yellow-500 text-black font-semibold\"\n                  >\n                    Submit Quote Request\n                  </Button>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* CTA Section */}\n      <div className=\"py-16 px-4\">\n        <div className=\"container mx-auto text-center\">\n          <h2 className=\"text-3xl font-bold text-white mb-4\">\n            Ready to Plan Your <span className=\"text-otw-gold\">Event</span>?\n          </h2>\n          <p className=\"text-gray-300 mb-8 max-w-2xl mx-auto\">\n            Let our experienced team create an unforgettable experience for you and your guests.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button\n              onClick={() => setShowQuoteForm(true)}\n              className=\"bg-gradient-to-r from-otw-gold to-yellow-500 text-black font-semibold px-8 py-3 rounded-full hover:shadow-lg transition-all duration-300\"\n            >\n              Get Started Today\n            </Button>\n            <Link href=\"/catering\">\n              <Button variant=\"outline\" className=\"border-2 border-otw-gold text-otw-gold hover:bg-otw-gold hover:text-black px-8 py-3 rounded-full transition-all duration-300\">\n                View Catering Options\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/profile/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Metadata' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":23}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nexport const dynamic = 'force-dynamic';\n\nimport type { Metadata } from 'next';\nimport { useState, useEffect } from 'react';\nimport { Button } from '../../components/ui/button';\nimport { Input } from '../../components/ui/input';\nimport { Label } from '../../components/ui/label';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '../../components/ui/card';\nimport {\n  Avatar,\n  AvatarFallback,\n  AvatarImage,\n} from '../../components/ui/avatar';\nimport { Badge } from '../../components/ui/badge';\nimport { User, CreditCard, MapPin, Bell, Shield, LogOut } from 'lucide-react';\nimport Link from 'next/link';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { doc, getDoc, collection, query, where, getDocs } from 'firebase/firestore';\nimport { db } from '../../lib/firebase-config';\nimport type { UserProfile } from '../../types';\n\ninterface Address {\n  id: string;\n  name: string;\n  street: string;\n  city: string;\n  state: string;\n  zip: string;\n  default: boolean;\n}\n\ninterface PaymentMethod {\n  id: string;\n  type: string;\n  last4: string;\n  expiry: string;\n  default: boolean;\n}\n\ninterface UserData {\n  name: string;\n  email: string;\n  phone?: string;\n  avatar?: string;\n  memberSince: string;\n  tier: string;\n  rewardPoints: number;\n  addresses: Address[];\n  paymentMethods: PaymentMethod[];\n}\n\nexport default function ProfilePage() {\n  const [activeTab, setActiveTab] = useState('account');\n  const [userData, setUserData] = useState<UserData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const { user, logout } = useAuth();\n\n  const handleSignOut = async () => {\n    try {\n      await logout();\n    } catch (error) {\n      console.error('Error signing out:', error);\n    }\n  };\n\n  // Fetch user profile data from Firebase\n  useEffect(() => {\n    const fetchUserData = async () => {\n      if (!user?.uid) {\n        setLoading(false);\n        return;\n      }\n\n      try {\n        // Fetch user profile from Firestore\n        const userDocRef = doc(db, 'users', user.uid);\n        const userDoc = await getDoc(userDocRef);\n\n        let profileData: Partial<UserProfile> = {};\n        if (userDoc.exists()) {\n          profileData = userDoc.data() as UserProfile;\n        }\n\n        // Fetch user addresses\n        const addressesQuery = query(\n          collection(db, 'addresses'),\n          where('userId', '==', user.uid),\n        );\n        const addressesSnapshot = await getDocs(addressesQuery);\n        const addresses: Address[] = addressesSnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data(),\n        })) as Address[];\n\n        // Fetch user payment methods\n        const paymentMethodsQuery = query(\n          collection(db, 'paymentMethods'),\n          where('userId', '==', user.uid),\n        );\n        const paymentMethodsSnapshot = await getDocs(paymentMethodsQuery);\n        const paymentMethods: PaymentMethod[] = paymentMethodsSnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data(),\n        })) as PaymentMethod[];\n\n        // Calculate member since date\n        const memberSince = profileData.createdAt\n          ? new Date(profileData.createdAt).toLocaleDateString('en-US', {\n              year: 'numeric',\n              month: 'long',\n            })\n          : 'Recently';\n\n        // Determine tier based on reward points\n        const points = profileData.rewardPoints || 0;\n        let tier = 'Bronze';\n        if (points >= 1000) {tier = 'Gold';}\n        else if (points >= 500) {tier = 'Silver';}\n\n        setUserData({\n          name: user.displayName || profileData.displayName || 'User',\n          email: user.email || profileData.email || '',\n          phone: profileData.phone || '',\n          avatar: user.photoURL || profileData.photoURL || '',\n          memberSince,\n          tier,\n          rewardPoints: points,\n          addresses,\n          paymentMethods,\n        });\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchUserData();\n  }, [user]);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen pb-20 pt-24 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-otw-gold mx-auto mb-4\"></div>\n          <p className=\"text-lg\">Loading your profile...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user || !userData) {\n    return (\n      <div className=\"min-h-screen pb-20 pt-24 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <p className=\"text-lg mb-4\">Please sign in to view your profile.</p>\n          <Link href=\"/auth/signin\">\n            <Button>Sign In</Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen pb-20 pt-24\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n          {/* Sidebar */}\n          <div className=\"lg:col-span-1\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex flex-col items-center\">\n                  <Avatar className=\"h-24 w-24 mb-4\">\n                    <AvatarImage\n                      src={userData.avatar || '/assets/users/default-avatar.jpg'}\n                      alt={userData.name}\n                    />\n                    <AvatarFallback>\n                      {userData.name\n                        .split(' ')\n                        .map((n) => n[0])\n                        .join('')}\n                    </AvatarFallback>\n                  </Avatar>\n                  <CardTitle>{userData.name}</CardTitle>\n                  <CardDescription>\n                    Member since {userData.memberSince}\n                  </CardDescription>\n                  <Badge className=\"mt-2 bg-otw-gold text-black\">\n                    {userData.tier} Member\n                  </Badge>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <nav className=\"flex flex-col space-y-1\">\n                  <Button\n                    variant={activeTab === 'account' ? 'default' : 'ghost'}\n                    className=\"justify-start\"\n                    onClick={() => setActiveTab('account')}\n                  >\n                    <User className=\"mr-2 h-4 w-4\" />\n                    Account\n                  </Button>\n                  <Button\n                    variant={activeTab === 'addresses' ? 'default' : 'ghost'}\n                    className=\"justify-start\"\n                    onClick={() => setActiveTab('addresses')}\n                  >\n                    <MapPin className=\"mr-2 h-4 w-4\" />\n                    Addresses\n                  </Button>\n                  <Button\n                    variant={activeTab === 'payment' ? 'default' : 'ghost'}\n                    className=\"justify-start\"\n                    onClick={() => setActiveTab('payment')}\n                  >\n                    <CreditCard className=\"mr-2 h-4 w-4\" />\n                    Payment Methods\n                  </Button>\n                  <Button\n                    variant={\n                      activeTab === 'notifications' ? 'default' : 'ghost'\n                    }\n                    className=\"justify-start\"\n                    onClick={() => setActiveTab('notifications')}\n                  >\n                    <Bell className=\"mr-2 h-4 w-4\" />\n                    Notifications\n                  </Button>\n                  <Button\n                    variant={activeTab === 'security' ? 'default' : 'ghost'}\n                    className=\"justify-start\"\n                    onClick={() => setActiveTab('security')}\n                  >\n                    <Shield className=\"mr-2 h-4 w-4\" />\n                    Security\n                  </Button>\n                </nav>\n              </CardContent>\n              <CardFooter>\n                <Button\n                  variant=\"destructive\"\n                  className=\"w-full\"\n                  onClick={handleSignOut}\n                >\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  Sign Out\n                </Button>\n              </CardFooter>\n            </Card>\n\n            <Card className=\"mt-6\">\n              <CardHeader>\n                <CardTitle>Tier Membership</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center justify-between mb-4\">\n                  <span>Current Tier:</span>\n                  <Badge className=\"bg-otw-gold text-black\">{userData.tier}</Badge>\n                </div>\n                <div className=\"flex items-center justify-between mb-4\">\n                  <span>Reward Points:</span>\n                  <span className=\"font-semibold\">{userData.rewardPoints}</span>\n                </div>\n                <Link href=\"/tier\">\n                  <Button variant=\"outline\" className=\"w-full\">\n                    Manage Membership\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Main Content */}\n          <div className=\"lg:col-span-3\">\n            {/* Account Tab */}\n            {activeTab === 'account' && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Account Information</CardTitle>\n                  <CardDescription>\n                    Update your personal information\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <form className=\"space-y-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div>\n                        <Label htmlFor=\"name\">Full Name</Label>\n                        <Input\n                          id=\"name\"\n                          defaultValue={userData.name}\n                          className=\"mt-1\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"email\">Email Address</Label>\n                        <Input\n                          id=\"email\"\n                          type=\"email\"\n                          defaultValue={userData.email}\n                          className=\"mt-1\"\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div>\n                        <Label htmlFor=\"phone\">Phone Number</Label>\n                        <Input\n                          id=\"phone\"\n                          defaultValue={userData.phone || ''}\n                          className=\"mt-1\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"dob\">Date of Birth</Label>\n                        <Input id=\"dob\" type=\"date\" className=\"mt-1\" />\n                      </div>\n                    </div>\n\n                    <div>\n                      <Button>Save Changes</Button>\n                    </div>\n                  </form>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Addresses Tab */}\n            {activeTab === 'addresses' && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Saved Addresses</CardTitle>\n                  <CardDescription>\n                    Manage your delivery addresses\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-6\">\n                    {userData.addresses.map((address) => (\n                      <div\n                        key={address.id}\n                        className=\"bg-gray-900 p-4 rounded-lg border border-gray-800\"\n                      >\n                        <div className=\"flex justify-between items-start\">\n                          <div>\n                            <h3 className=\"font-medium\">{address.name}</h3>\n                            <p className=\"text-sm text-gray-400\">\n                              {address.street}\n                              <br />\n                              {address.city}, {address.state} {address.zip}\n                            </p>\n                          </div>\n                          <div className=\"flex space-x-2\">\n                            <Button variant=\"outline\" size=\"sm\">\n                              Edit\n                            </Button>\n                            <Button variant=\"destructive\" size=\"sm\">\n                              Delete\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                    <Button variant=\"outline\" className=\"w-full\">\n                      Add New Address\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Payment Methods Tab */}\n            {activeTab === 'payment' && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Payment Methods</CardTitle>\n                  <CardDescription>Manage your payment options</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-6\">\n                    {userData.paymentMethods.map((method) => (\n                      <div\n                        key={method.id}\n                        className=\"bg-gray-900 p-4 rounded-lg border border-gray-800\"\n                      >\n                        <div className=\"flex justify-between items-start\">\n                          <div>\n                            <div className=\"flex items-center\">\n                              <h3 className=\"font-bold\">\n                                {method.type} •••• {method.last4}\n                              </h3>\n                              {method.default && (\n                                <Badge className=\"ml-2 bg-otw-gold text-black\">\n                                  Default\n                                </Badge>\n                              )}\n                            </div>\n                            <p className=\"text-gray-400 mt-1\">\n                              Expires {method.expiry}\n                            </p>\n                          </div>\n                          <div className=\"flex gap-2\">\n                            {!method.default && (\n                              <Button variant=\"outline\" size=\"sm\">\n                                Set as Default\n                              </Button>\n                            )}\n                            {!method.default && (\n                              <Button variant=\"destructive\" size=\"sm\">\n                                Delete\n                              </Button>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n\n                    <Button>Add New Payment Method</Button>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Notifications Tab */}\n            {activeTab === 'notifications' && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Notification Preferences</CardTitle>\n                  <CardDescription>Manage how we contact you</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <h3 className=\"font-bold\">Order Updates</h3>\n                        <p className=\"text-gray-400\">\n                          Receive updates about your orders\n                        </p>\n                      </div>\n                      <div className=\"flex gap-4\">\n                        <div className=\"flex items-center space-x-2\">\n                          <input\n                            type=\"checkbox\"\n                            id=\"order-email\"\n                            className=\"rounded border-gray-600 text-otw-gold focus:ring-otw-gold\"\n                            defaultChecked\n                          />\n                          <Label htmlFor=\"order-email\">Email</Label>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <input\n                            type=\"checkbox\"\n                            id=\"order-sms\"\n                            className=\"rounded border-gray-600 text-otw-gold focus:ring-otw-gold\"\n                            defaultChecked\n                          />\n                          <Label htmlFor=\"order-sms\">SMS</Label>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <h3 className=\"font-bold\">Promotions</h3>\n                        <p className=\"text-gray-400\">\n                          Receive special offers and promotions\n                        </p>\n                      </div>\n                      <div className=\"flex gap-4\">\n                        <div className=\"flex items-center space-x-2\">\n                          <input\n                            type=\"checkbox\"\n                            id=\"promo-email\"\n                            className=\"rounded border-gray-600 text-otw-gold focus:ring-otw-gold\"\n                            defaultChecked\n                          />\n                          <Label htmlFor=\"promo-email\">Email</Label>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <input\n                            type=\"checkbox\"\n                            id=\"promo-sms\"\n                            className=\"rounded border-gray-600 text-otw-gold focus:ring-otw-gold\"\n                          />\n                          <Label htmlFor=\"promo-sms\">SMS</Label>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div>\n                      <Button>Save Changes</Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/providers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/quantum-entangling-delivery/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/restaurants/BroskisOrderPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Filter' is defined but never used. Allowed unused vars must match /^_/u.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Award' is defined but never used. Allowed unused vars must match /^_/u.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Users' is defined but never used. Allowed unused vars must match /^_/u.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'loading' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":56,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":57,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":57,"endColumn":15},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'menuItems'. Either include it or remove the dependency array.","line":106,"column":6,"nodeType":"ArrayExpression","endLine":106,"endColumn":37,"suggestions":[{"desc":"Update the dependencies array to be: [selectedCategory, searchQuery, menuItems]","fix":{"range":[2821,2852],"text":"[selectedCategory, searchQuery, menuItems]"}}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":172,"column":21,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[5402,5446],"text":"\n              BROSKI&apos;S KITCHEN\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[5402,5446],"text":"\n              BROSKI&lsquo;S KITCHEN\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[5402,5446],"text":"\n              BROSKI&#39;S KITCHEN\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[5402,5446],"text":"\n              BROSKI&rsquo;S KITCHEN\n            "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport { Button } from '../../components/ui/button';\nimport { Card, CardContent } from '../../components/ui/card';\nimport { Badge } from '../../components/ui/badge';\nimport { Input } from '../../components/ui/input';\nimport {\n  Star,\n  Clock,\n  MapPin,\n  ShoppingCart,\n  Plus,\n  Minus,\n  Search,\n  Filter,\n  Award,\n  Users,\n  Utensils,\n} from 'lucide-react';\n// TODO: Remove static data import - get menu data from API\n\ninterface CartItem {\n  id: string;\n  name: string;\n  price: number;\n  quantity: number;\n  image: string;\n}\n\ninterface MenuItem {\n  id: string;\n  name: string;\n  description: string;\n  price: number;\n  image: string;\n  category: string;\n  popular?: boolean;\n  new?: boolean;\n  dietary: {\n    dairyFree: boolean;\n    glutenFree: boolean;\n    vegetarian: boolean;\n    vegan: boolean;\n  };\n}\n\nexport default function BroskisOrderPage() {\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [cart, setCart] = useState<CartItem[]>([]);\n  const [menuItems, setMenuItems] = useState<MenuItem[]>([]);\n  const [categories, setCategories] = useState<string[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [filteredItems, setFilteredItems] = useState<MenuItem[]>([]);\n\n  // Fetch menu items from API\n  useEffect(() => {\n    const fetchMenuItems = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch('/api/restaurants/broskis/menu');\n        if (!response.ok) {\n          throw new Error('Failed to fetch menu items');\n        }\n        const data = await response.json();\n        const items = data.data || [];\n        setMenuItems(items);\n\n        // Extract unique categories\n        const uniqueCategories = [...new Set(items.map((item: MenuItem) => item.category).filter(Boolean))];\n        setCategories(uniqueCategories as string[]);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'An error occurred');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchMenuItems();\n  }, []);\n\n  // Filter menu items based on category and search\n  useEffect(() => {\n    let filtered = menuItems;\n\n    // Filter by category\n    if (selectedCategory !== 'all') {\n      filtered = filtered.filter((item) => item.category === selectedCategory);\n    }\n\n    // Filter by search query\n    if (searchQuery) {\n      const query = searchQuery.toLowerCase();\n      filtered = filtered.filter(\n        (item) =>\n          item.name.toLowerCase().includes(query) ||\n          item.description.toLowerCase().includes(query),\n      );\n    }\n\n    setFilteredItems(filtered);\n  }, [selectedCategory, searchQuery]);\n\n  const addToCart = (item: MenuItem) => {\n    setCart((prevCart) => {\n      const existingItem = prevCart.find((cartItem) => cartItem.id === item.id);\n      if (existingItem) {\n        return prevCart.map((cartItem) =>\n          cartItem.id === item.id\n            ? { ...cartItem, quantity: cartItem.quantity + 1 }\n            : cartItem,\n        );\n      } else {\n        return [\n          ...prevCart,\n          {\n            id: item.id,\n            name: item.name,\n            price: item.price,\n            quantity: 1,\n            image: item.image,\n          },\n        ];\n      }\n    });\n  };\n\n  const removeFromCart = (itemId: string) => {\n    setCart((prevCart) => {\n      const existingItem = prevCart.find((cartItem) => cartItem.id === itemId);\n      if (existingItem && existingItem.quantity > 1) {\n        return prevCart.map((cartItem) =>\n          cartItem.id === itemId\n            ? { ...cartItem, quantity: cartItem.quantity - 1 }\n            : cartItem,\n        );\n      } else {\n        return prevCart.filter((cartItem) => cartItem.id !== itemId);\n      }\n    });\n  };\n\n  const getCartItemQuantity = (itemId: string) => {\n    const item = cart.find((cartItem) => cartItem.id === itemId);\n    return item ? item.quantity : 0;\n  };\n\n  const getTotalPrice = () => {\n    return cart.reduce((total, item) => total + item.price * item.quantity, 0);\n  };\n\n  const getTotalItems = () => {\n    return cart.reduce((total, item) => total + item.quantity, 0);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-otw-black via-gray-900 to-otw-black pb-20\">\n      {/* Hero Section */}\n      <section className=\"relative h-[60vh] flex items-center justify-center overflow-hidden\">\n        <div className=\"absolute inset-0 z-0\">\n          <div className=\"absolute inset-0 bg-gradient-to-br from-otw-red/90 via-otw-gold/70 to-otw-red/90 animate-pulse\"></div>\n          <div className=\"absolute inset-0 bg-[url('/restaurants/broskis.jpg')] bg-cover bg-center opacity-80 transform hover:scale-105 transition-transform duration-700\"></div>\n          <div className=\"absolute inset-0 bg-gradient-to-t from-otw-black/60 via-transparent to-otw-black/40\"></div>\n        </div>\n        <div className=\"container mx-auto px-4 z-10 text-center\">\n          <div className=\"bg-otw-black/30 backdrop-blur-sm rounded-2xl p-8 border border-otw-gold/20 shadow-2xl\">\n            <h1 className=\"text-6xl md:text-7xl font-black mb-6 text-transparent bg-gradient-to-r from-otw-gold via-yellow-300 to-otw-gold bg-clip-text animate-pulse\">\n              BROSKI'S KITCHEN\n            </h1>\n            <p className=\"text-2xl text-gray-100 max-w-3xl mx-auto mb-8 font-medium leading-relaxed\">\n              🔥 Premium Street Gourmet • Luxury Delivered 🔥\n            </p>\n            <div className=\"flex flex-wrap justify-center gap-8 text-white\">\n              <div className=\"flex items-center bg-otw-red/20 px-4 py-2 rounded-full border border-otw-gold/30\">\n                <Star className=\"text-otw-gold mr-2 w-6 h-6 animate-pulse\" />\n                <span className=\"font-bold text-lg\">4.8★ Rating</span>\n              </div>\n              <div className=\"flex items-center bg-otw-red/20 px-4 py-2 rounded-full border border-otw-gold/30\">\n                <Clock className=\"text-otw-gold mr-2 w-6 h-6\" />\n                <span className=\"font-bold text-lg\">25-35 min</span>\n              </div>\n              <div className=\"flex items-center bg-otw-red/20 px-4 py-2 rounded-full border border-otw-gold/30\">\n                <MapPin className=\"text-otw-gold mr-2 w-6 h-6\" />\n                <span className=\"font-bold text-lg\">Fort Wayne, IN</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Search and Filter Section */}\n      <section className=\"py-12 bg-gradient-to-r from-otw-black/80 via-gray-900/90 to-otw-black/80 backdrop-blur-sm border-y border-otw-gold/20\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-8\">\n            <h2 className=\"text-4xl font-bold text-transparent bg-gradient-to-r from-otw-gold to-yellow-300 bg-clip-text mb-2\">\n              Explore Our Menu\n            </h2>\n            <p className=\"text-gray-300 text-lg\">Discover premium gourmet creations</p>\n          </div>\n\n          <div className=\"flex flex-col md:flex-row gap-6 mb-8\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-otw-gold w-6 h-6\" />\n              <Input\n                type=\"text\"\n                placeholder=\"Search for your favorite dishes...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-12 pr-4 py-4 bg-gray-800/50 border-2 border-gray-700 text-white placeholder-gray-400 focus:border-otw-gold focus:ring-2 focus:ring-otw-gold/20 rounded-xl text-lg backdrop-blur-sm\"\n              />\n            </div>\n          </div>\n\n          {/* Category Filter */}\n          <div className=\"flex flex-wrap justify-center gap-3 mb-8\">\n            <Button\n              variant={selectedCategory === 'all' ? 'default' : 'outline'}\n              onClick={() => setSelectedCategory('all')}\n              className={`${\n                selectedCategory === 'all'\n                  ? 'bg-gradient-to-r from-otw-red to-red-600 text-white shadow-lg transform scale-105 border-otw-gold'\n                  : 'border-2 border-gray-600 text-gray-300 hover:border-otw-gold hover:text-otw-gold hover:bg-otw-gold/10 hover:scale-105'\n              } px-6 py-3 rounded-full font-semibold transition-all duration-300`}\n            >\n              🍽️ All Items\n            </Button>\n            {categories.map((category: string) => (\n              <Button\n                key={category}\n                variant={selectedCategory === category ? 'default' : 'outline'}\n                onClick={() => setSelectedCategory(category)}\n                className={`${\n                  selectedCategory === category\n                    ? 'bg-gradient-to-r from-otw-red to-red-600 text-white shadow-lg transform scale-105 border-otw-gold'\n                    : 'border-2 border-gray-600 text-gray-300 hover:border-otw-gold hover:text-otw-gold hover:bg-otw-gold/10 hover:scale-105'\n                } px-6 py-3 rounded-full font-semibold transition-all duration-300`}\n              >\n                {category}\n              </Button>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Menu Items Section */}\n      <section className=\"py-16 bg-gradient-to-b from-transparent to-otw-black/30\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-5xl font-black text-transparent bg-gradient-to-r from-otw-gold via-yellow-300 to-otw-gold bg-clip-text mb-4\">\n              {selectedCategory === 'all' ? '🍽️ FULL MENU' : `🔥 ${selectedCategory.toUpperCase()}`}\n            </h2>\n            <p className=\"text-gray-300 text-xl font-medium\">\n              {filteredItems.length} premium {filteredItems.length === 1 ? 'creation' : 'creations'} available\n            </p>\n          </div>\n\n          {filteredItems.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n              {filteredItems.map((item) => {\n                const quantity = getCartItemQuantity(item.id);\n                return (\n                  <Card key={item.id} className=\"bg-gradient-to-br from-gray-800/90 to-gray-900/90 border-2 border-gray-700 hover:border-otw-gold hover:shadow-2xl hover:shadow-otw-gold/20 transition-all duration-500 transform hover:scale-105 backdrop-blur-sm group\">\n                    <div className=\"relative h-56 overflow-hidden rounded-t-lg\">\n                      <Image\n                        src={item.image}\n                        alt={item.name}\n                        fill\n                        className=\"object-cover group-hover:scale-110 transition-transform duration-700\"\n                      />\n                      <div className=\"absolute inset-0 bg-gradient-to-t from-otw-black/60 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n                      {item.popular && (\n                        <Badge className=\"absolute top-3 left-3 bg-gradient-to-r from-otw-red to-red-600 text-white font-bold px-3 py-1 shadow-lg animate-pulse\">\n                          🔥 POPULAR\n                        </Badge>\n                      )}\n                      {item.new && (\n                        <Badge className=\"absolute top-3 right-3 bg-gradient-to-r from-otw-gold to-yellow-400 text-black font-bold px-3 py-1 shadow-lg\">\n                          ✨ NEW\n                        </Badge>\n                      )}\n                    </div>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex justify-between items-start mb-3\">\n                        <h3 className=\"text-2xl font-black text-white group-hover:text-otw-gold transition-colors duration-300\">{item.name}</h3>\n                        <span className=\"text-otw-gold font-black text-2xl bg-otw-black/30 px-3 py-1 rounded-full border border-otw-gold/30\">\n                          ${item.price.toFixed(2)}\n                        </span>\n                      </div>\n                      <p className=\"text-gray-300 mb-6 text-base leading-relaxed\">{item.description}</p>\n\n                      {/* Dietary badges */}\n                      <div className=\"flex flex-wrap gap-2 mb-6\">\n                        {item.dietary.vegan && (\n                          <Badge variant=\"outline\" className=\"text-green-400 border-green-400 bg-green-400/10 px-3 py-1 font-semibold\">\n                            🌱 Vegan\n                          </Badge>\n                        )}\n                        {item.dietary.vegetarian && !item.dietary.vegan && (\n                          <Badge variant=\"outline\" className=\"text-green-400 border-green-400 bg-green-400/10 px-3 py-1 font-semibold\">\n                            🥬 Vegetarian\n                          </Badge>\n                        )}\n                        {item.dietary.glutenFree && (\n                          <Badge variant=\"outline\" className=\"text-blue-400 border-blue-400 bg-blue-400/10 px-3 py-1 font-semibold\">\n                            🌾 Gluten-Free\n                          </Badge>\n                        )}\n                        {item.dietary.dairyFree && (\n                          <Badge variant=\"outline\" className=\"text-purple-400 border-purple-400 bg-purple-400/10 px-3 py-1 font-semibold\">\n                            🥛 Dairy-Free\n                          </Badge>\n                        )}\n                      </div>\n\n                      {/* Add to cart controls */}\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center text-otw-gold\">\n                          {[...Array(5)].map((_, i) => (\n                            <Star key={i} className=\"w-5 h-5 fill-current drop-shadow-sm\" />\n                          ))}\n                          <span className=\"ml-2 text-sm font-bold text-gray-300\">5.0</span>\n                        </div>\n                        {quantity > 0 ? (\n                          <div className=\"flex items-center gap-3 bg-otw-black/30 rounded-full p-1 border border-otw-gold/30\">\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => removeFromCart(item.id)}\n                              className=\"border-otw-red text-otw-red hover:bg-otw-red hover:text-white w-10 h-10 p-0 rounded-full transition-all duration-300 hover:scale-110\"\n                            >\n                              <Minus className=\"w-5 h-5\" />\n                            </Button>\n                            <span className=\"text-white font-black text-lg w-8 text-center\">\n                              {quantity}\n                            </span>\n                            <Button\n                              size=\"sm\"\n                              onClick={() => addToCart(item)}\n                              className=\"bg-gradient-to-r from-otw-red to-red-600 hover:from-red-600 hover:to-otw-red w-10 h-10 p-0 rounded-full transition-all duration-300 hover:scale-110 shadow-lg\"\n                            >\n                              <Plus className=\"w-5 h-5\" />\n                            </Button>\n                          </div>\n                        ) : (\n                          <Button\n                            size=\"lg\"\n                            onClick={() => addToCart(item)}\n                            className=\"bg-gradient-to-r from-otw-red to-red-600 hover:from-red-600 hover:to-otw-red px-6 py-3 rounded-full font-bold transition-all duration-300 hover:scale-110 shadow-lg\"\n                          >\n                            <Plus className=\"w-5 h-5 mr-2\" />\n                            ADD TO CART\n                          </Button>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          ) : (\n            <div className=\"text-center py-24 bg-gradient-to-br from-gray-800/50 to-gray-900/50 rounded-3xl border-2 border-gray-700 backdrop-blur-sm\">\n              <div className=\"bg-otw-black/30 rounded-full w-32 h-32 flex items-center justify-center mx-auto mb-6 border-2 border-otw-gold/30\">\n                <Utensils className=\"w-20 h-20 text-otw-gold\" />\n              </div>\n              <h3 className=\"text-4xl font-black mb-6 text-transparent bg-gradient-to-r from-otw-gold to-yellow-300 bg-clip-text\">\n                No Creations Found\n              </h3>\n              <p className=\"text-gray-300 mb-8 text-xl max-w-md mx-auto leading-relaxed\">\n                🔍 Try adjusting your search or explore different categories\n              </p>\n              <Button\n                onClick={() => {\n                  setSearchQuery('');\n                  setSelectedCategory('all');\n                }}\n                className=\"bg-gradient-to-r from-otw-red to-red-600 hover:from-red-600 hover:to-otw-red px-8 py-4 rounded-full font-bold text-lg transition-all duration-300 hover:scale-110 shadow-lg\"\n              >\n                🔄 Reset Filters\n              </Button>\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Floating Cart */}\n      {cart.length > 0 && (\n        <div className=\"fixed bottom-6 right-6 z-50\">\n          <Link href=\"/cart\">\n            <Button\n              size=\"lg\"\n              className=\"bg-gradient-to-r from-otw-red to-red-600 hover:from-red-600 hover:to-otw-red text-white shadow-2xl relative px-8 py-4 rounded-full font-bold text-lg transition-all duration-300 hover:scale-110 border-2 border-otw-gold/30 backdrop-blur-sm\"\n            >\n              <ShoppingCart className=\"w-6 h-6 mr-3\" />\n              🛒 Cart ({getTotalItems()}) • ${getTotalPrice().toFixed(2)}\n              <Badge className=\"absolute -top-3 -right-3 bg-gradient-to-r from-otw-gold to-yellow-400 text-black font-black px-3 py-1 rounded-full shadow-lg animate-bounce\">\n                {getTotalItems()}\n              </Badge>\n            </Button>\n          </Link>\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/restaurants/[id]/RestaurantDetailPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CustomizationOption' is defined but never used. Allowed unused vars must match /^_/u.","line":14,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1120,1123],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1120,1123],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1185,1188],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1185,1188],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nexport const dynamic = 'force-dynamic';\n\nimport { useState, useEffect } from 'react';\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport { useCart } from '../../../lib/context/CartContext';\nimport { Star, ChevronLeft, Search, ShoppingBag } from 'lucide-react';\nimport MenuItemCard from '../../../components/menu/MenuItemCard';\nimport CategoryFilter from '../../../components/menu/CategoryFilter';\nimport type { Restaurant } from '../../../types/restaurant';\n// TODO: Remove static data import - fetch restaurant images and logos from API instead\nimport type { CustomizationOption } from '../../../types';\n\ninterface RestaurantDetailPageProps {\n  restaurant: Restaurant\n}\n\nexport default function RestaurantDetailPage({ restaurant }: RestaurantDetailPageProps) {\n  // Always call hooks at the top level\n  const cartContext = useCart();\n  const { itemCount, addItem } = cartContext || { itemCount: 0, addItem: undefined };\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [menuItems, setMenuItems] = useState<any[]>([]);\n  const [filteredItems, setFilteredItems] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [categories, setCategories] = useState<string[]>([]);\n\n  // Fetch menu categories from the menu items\n  useEffect(() => {\n    if (menuItems.length > 0) {\n      const uniqueCategories = [...new Set(menuItems.map(item => item.category).filter(Boolean))];\n      setCategories(uniqueCategories as string[]);\n    }\n  }, [menuItems]);\n\n  // Fetch menu items for this restaurant\n  useEffect(() => {\n    async function fetchMenuItems() {\n      try {\n        setLoading(true);\n        const response = await fetch(`/api/restaurants/${restaurant.id}/menu`);\n        const data = await response.json();\n\n        if (data.success) {\n          setMenuItems(data.menu || []);\n        } else {\n          setError('Failed to fetch menu items');\n        }\n      } catch (err) {\n        setError('Error fetching menu items');\n        console.error('Error fetching menu items:', err);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    if (restaurant?.id) {\n      fetchMenuItems();\n    }\n  }, [restaurant?.id]);\n\n  // TODO: Fetch restaurant images and logos from API instead of static data\n  const getRestaurantImage = () => {\n    if (!restaurant || !restaurant.id) {return '/placeholder.svg';}\n    return restaurant.image || '/placeholder.svg';\n  };\n\n  const getRestaurantLogo = () => {\n    if (!restaurant || !restaurant.id) {return '/placeholder.svg';}\n    return restaurant.logo || '/placeholder.svg';\n  };\n\n  // Filter menu items based on selected category and search query\n  useEffect(() => {\n    let filtered = [...menuItems];\n\n    // Filter by category\n    if (selectedCategory !== 'all') {\n      filtered = filtered.filter((item) => item.category === selectedCategory);\n    }\n\n    // Filter by search query\n    if (searchQuery) {\n      const query = searchQuery.toLowerCase();\n      filtered = filtered.filter(\n        (item) => item.name.toLowerCase().includes(query) || item.description.toLowerCase().includes(query),\n      );\n    }\n\n    setFilteredItems(filtered);\n  }, [selectedCategory, searchQuery, menuItems]);\n\n  return (\n    <div className=\"min-h-screen pb-20\">\n      {/* Restaurant Header */}\n      <section className=\"relative h-[40vh] flex items-center justify-center overflow-hidden\">\n        <div className=\"absolute inset-0 z-0\">\n          <Image src={getRestaurantImage() || '/placeholder.svg'} alt={restaurant?.name || 'Restaurant'} fill className=\"object-cover\" />\n          <div className=\"absolute inset-0 bg-black bg-opacity-60\"></div>\n        </div>\n        <div className=\"container mx-auto px-4 z-10\">\n          <Link href=\"/restaurants\" className=\"inline-flex items-center text-white hover:text-[#FFD700] mb-4\">\n            <ChevronLeft size={20} />\n            <span>Back to restaurants</span>\n          </Link>\n          <div className=\"flex items-center gap-4\">\n            <div className=\"w-20 h-20 bg-[#111111] rounded-lg overflow-hidden relative border-2 border-[#333333]\">\n              <Image\n                src={getRestaurantLogo() || '/placeholder.svg'}\n                alt={`${restaurant?.name || 'Restaurant'} logo`}\n                fill\n                className=\"object-cover\"\n              />\n            </div>\n            <div>\n              <h1 className=\"text-4xl font-bold text-white\">{restaurant?.name || 'Restaurant'}</h1>\n              <div className=\"flex items-center flex-wrap gap-2 mt-2\">\n                <div className=\"flex items-center text-[#FFD700]\">\n                  <Star size={18} fill=\"#FFD700\" />\n                  <span className=\"ml-1 font-medium\">{restaurant?.rating || 'N/A'}</span>\n                </div>\n                <span className=\"text-gray-400\">({restaurant?.reviewCount || 0} reviews)</span>\n                <span className=\"mx-2 text-gray-500\">•</span>\n                <span className=\"text-gray-400\">{restaurant?.priceLevel || 'N/A'}</span>\n                <span className=\"mx-2 text-gray-500\">•</span>\n                <span className=\"text-gray-400\">{restaurant?.deliveryTime || 'N/A'}</span>\n                <span className=\"mx-2 text-gray-500\">•</span>\n                <span className=\"text-gray-400\">${(restaurant?.deliveryFee || 0).toFixed(2)} delivery</span>\n              </div>\n              <p className=\"text-gray-300 mt-2\">{restaurant?.description || 'No description available'}</p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Search and Filter Section */}\n      <section className=\"bg-[#111111] py-8 sticky top-20 z-30 border-b border-[#333333]\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center gap-4\">\n            {/* Search Bar */}\n            <div className=\"relative w-full md:w-1/3\">\n              <input\n                type=\"text\"\n                placeholder=\"Search menu...\"\n                className=\"w-full pl-10 pr-4 py-2 bg-[#1A1A1A] border border-[#333333] rounded-lg text-white focus:outline-none focus:border-[#FFD700]\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n              />\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={18} />\n            </div>\n\n            {/* Category Filter */}\n            <CategoryFilter\n              categories={categories}\n              selectedCategory={selectedCategory}\n              setSelectedCategory={setSelectedCategory}\n            />\n\n            {/* Cart Button */}\n            <Link href=\"/cart\" className=\"relative\">\n              <button className=\"flex items-center gap-2 py-2 px-4 bg-[#C1272D] text-white rounded-lg hover:bg-[#A01F24]\">\n                <ShoppingBag size={18} />\n                <span>View Cart</span>\n                {itemCount > 0 && (\n                  <span className=\"absolute -top-2 -right-2 bg-[#FFD700] text-black text-xs w-5 h-5 flex items-center justify-center rounded-full font-bold\">\n                    {itemCount}\n                  </span>\n                )}\n              </button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Menu Items Section */}\n      <section className=\"py-12\">\n        <div className=\"container mx-auto px-4\">\n          {loading ? (\n            <div className=\"text-center py-12\">\n              <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-[#C1272D] mx-auto mb-4\"></div>\n              <p className=\"text-white\">Loading menu items...</p>\n            </div>\n          ) : error ? (\n            <div className=\"text-center py-12\">\n              <p className=\"text-red-500 mb-4\">{error}</p>\n              <button\n                onClick={() => window.location.reload()}\n                className=\"bg-[#C1272D] text-white px-4 py-2 rounded hover:bg-[#A01F24]\"\n              >\n                Try Again\n              </button>\n            </div>\n          ) : filteredItems.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {filteredItems.map((item) => (\n                <MenuItemCard\n                  key={item.id}\n                  item={item}\n                  onAddToCart={(quantity, customizations) => {\n                    // Add item to cart using the extracted addItem function\n                    if (addItem) {\n                      addItem({\n                        id: item.id,\n                        name: item.name,\n                        price: item.price,\n                        quantity: quantity || 1,\n                        image: item.image,\n                        customizations: customizations || {}, // Provide empty object as fallback\n                      });\n                    }\n                  }}\n                />\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-20\">\n              <h3 className=\"text-2xl font-bold mb-4 text-white\">No items found</h3>\n              <p className=\"text-gray-400 mb-6\">Try adjusting your filters or search query</p>\n              <button\n                className=\"py-2 px-6 bg-[#C1272D] text-white rounded-lg hover:bg-[#A01F24]\"\n                onClick={() => {\n                  setSelectedCategory('all');\n                  setSearchQuery('');\n                }}\n              >\n                Reset Filters\n              </button>\n            </div>\n          )}\n        </div>\n      </section>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/restaurants/[id]/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[509,512],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[509,512],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Metadata } from 'next';\nimport RestaurantDetailPage from './RestaurantDetailPage';\n\nimport { notFound } from 'next/navigation';\n\ninterface RestaurantPageProps {\n  params: {\n    id: string;\n  };\n}\n\nasync function getRestaurant(id: string) {\n  try {\n    const response = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/restaurants`, {\n      cache: 'no-store',\n    });\n    const data = await response.json();\n\n    if (data.success) {\n      return data.data.find((r: any) => r.id === id);\n    }\n    return null;\n  } catch (error) {\n    console.error('Error fetching restaurant:', error);\n    return null;\n  }\n}\n\nexport async function generateMetadata({\n  params,\n}: RestaurantPageProps): Promise<Metadata> {\n  const restaurant = await getRestaurant(params.id);\n\n  if (!restaurant) {\n    return {\n      title: 'Restaurant Not Found | OTW',\n      description: \"The restaurant you're looking for could not be found.\",\n    };\n  }\n\n  return {\n    title: `${restaurant.name} | OTW Food Delivery`,\n    description: restaurant.description,\n  };\n}\n\nexport default async function RestaurantPage({ params }: RestaurantPageProps) {\n  const restaurant = await getRestaurant(params.id);\n\n  if (!restaurant) {\n    notFound();\n  }\n\n  return <RestaurantDetailPage restaurant={restaurant} />;\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/restaurants/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/restaurants/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/rewards/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/rewards/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Metadata' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Card' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardContent' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardDescription' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardHeader' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":56},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardTitle' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":58,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":67}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nexport const dynamic = 'force-dynamic';\n\nimport type { Metadata } from 'next';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../components/ui/card';\nimport { useState } from 'react';\nimport { useRewards } from '../../lib/context/RewardsContext';\nimport { useEffect } from 'react';\nimport RewardCard from '../../components/rewards/RewardCard';\nimport PointsTracker from '../../components/rewards/PointsTracker';\nimport RewardHistory from '../../components/rewards/RewardHistory';\nimport SpinGame from '../../components/rewards/SpinGame';\nimport RedeemModal from '../../components/rewards/RedeemModal';\nimport { FaTrophy, FaGift, FaHistory, FaGamepad } from 'react-icons/fa';\nimport type { Reward } from '../../types/reward';\n\nexport default function RewardsPage() {\n  const { points, tier, history } = useRewards();\n  const [activeTab, setActiveTab] = useState('rewards');\n  const [selectedReward, setSelectedReward] = useState<Reward | null>(null);\n  const [showRedeemModal, setShowRedeemModal] = useState(false);\n  const [showSpinGame, setShowSpinGame] = useState(false);\n  const [rewards, setRewards] = useState<Reward[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Fetch rewards data from API\n  useEffect(() => {\n    const fetchRewards = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch('/api/rewards');\n        if (!response.ok) {\n          throw new Error('Failed to fetch rewards');\n        }\n        const data = await response.json();\n        setRewards(data.data || []);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'An error occurred');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchRewards();\n  }, []);\n\n  // Determine next tier details\n  const getNextTierInfo = () => {\n    if (tier === 'Gold') {\n      return { name: 'Gold', points: 1000 };\n    } else if (tier === 'Silver') {\n      return { name: 'Gold', points: 1000 };\n    } else {\n      return { name: 'Silver', points: 500 };\n    }\n  };\n\n  const nextTier = getNextTierInfo();\n\n  // Handle selecting a reward\n  const handleSelectReward = (reward: Reward) => {\n    setSelectedReward(reward);\n    setShowRedeemModal(true);\n  };\n\n  // Handle closing the redeem modal\n  const handleCloseRedeemModal = () => {\n    setShowRedeemModal(false);\n    setSelectedReward(null);\n  };\n\n  // Group rewards by category\n  const categoryGroups = rewards.reduce<Record<string, Reward[]>>(\n    (groups, reward) => {\n      if (!groups[reward.category]) {\n        groups[reward.category] = [];\n      }\n      // TypeScript now knows groups[reward.category] is defined\n      groups[reward.category]!.push(reward);\n      return groups;\n    },\n    {},\n  );\n\n  return (\n    <div className=\"min-h-screen pb-20\">\n      {/* Hero Section */}\n      <section className=\"relative h-[40vh] flex items-center justify-center overflow-hidden\">\n        <div className=\"absolute inset-0 z-0 bg-black\">\n          <div className=\"absolute inset-0 bg-gradient-to-r from-black to-transparent opacity-70 z-10\"></div>\n          <div\n            className=\"absolute inset-0 bg-cover bg-center\"\n            style={{ backgroundImage: \"url('/images/rewards-hero.jpg')\" }}\n          ></div>\n        </div>\n        <div className=\"container mx-auto px-4 z-10 text-center\">\n          <h1 className=\"heading-xl mb-4 text-white gritty-shadow\">\n            Rewards Program\n          </h1>\n          <p className=\"text-xl text-gray-200 max-w-2xl mx-auto\">\n            Earn points with every purchase and redeem them for exclusive\n            rewards.\n          </p>\n        </div>\n      </section>\n\n      {/* Points Status */}\n      <section className=\"bg-[#111111] py-8 border-b border-[#333333]\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"bg-[#1A1A1A] rounded-lg p-6 border border-[#333333]\">\n            <div className=\"flex flex-col md:flex-row items-center justify-between gap-6\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"bg-gold-foil bg-opacity-20 p-4 rounded-full\">\n                  <FaTrophy className=\"text-gold-foil text-2xl\" />\n                </div>\n                <div>\n                  <h2 className=\"text-2xl font-bold text-gold-foil\">\n                    {points}\n                  </h2>\n                  <p className=\"text-gray-400\">Available Points</p>\n                </div>\n              </div>\n\n              <div className=\"w-full md:w-1/2\">\n                <PointsTracker\n                  currentPoints={points}\n                  nextTierPoints={nextTier.points}\n                  nextTierName={nextTier.name}\n                />\n              </div>\n\n              <div>\n                <button\n                  onClick={() => setShowSpinGame(true)}\n                  className=\"btn-primary flex items-center gap-2\"\n                >\n                  <FaGamepad /> Daily Spin\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Tabs Section */}\n      <section className=\"py-8 bg-[#0A0A0A] sticky top-20 z-30 border-b border-[#333333]\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex overflow-x-auto pb-2 hide-scrollbar\">\n            <button\n              className={`px-6 py-2 font-medium text-sm whitespace-nowrap ${\n                activeTab === 'rewards'\n                  ? 'text-gold-foil border-b-2 border-gold-foil'\n                  : 'text-gray-400 hover:text-white'\n              }`}\n              onClick={() => setActiveTab('rewards')}\n            >\n              <FaGift className=\"inline mr-2\" /> Rewards\n            </button>\n            <button\n              className={`px-6 py-2 font-medium text-sm whitespace-nowrap ${\n                activeTab === 'history'\n                  ? 'text-gold-foil border-b-2 border-gold-foil'\n                  : 'text-gray-400 hover:text-white'\n              }`}\n              onClick={() => setActiveTab('history')}\n            >\n              <FaHistory className=\"inline mr-2\" /> History\n            </button>\n          </div>\n        </div>\n      </section>\n\n      {/* Content Section */}\n      <section className=\"py-12\">\n        <div className=\"container mx-auto px-4\">\n          {/* Rewards Tab */}\n          {activeTab === 'rewards' && (\n            <div className=\"animate-fade-in\">\n              {loading ? (\n                <div className=\"flex justify-center items-center py-12\">\n                  <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-gold-foil\"></div>\n                </div>\n              ) : error ? (\n                <div className=\"text-center py-12\">\n                  <p className=\"text-red-400 mb-4\">{error}</p>\n                  <button\n                    onClick={() => window.location.reload()}\n                    className=\"btn-primary\"\n                  >\n                    Try Again\n                  </button>\n                </div>\n              ) : (\n                Object.entries(categoryGroups).map(\n                  ([category, categoryRewards]) => (\n                    <div key={category} className=\"mb-12\">\n                      <h2 className=\"text-2xl font-bold mb-6\">\n                        {category.charAt(0).toUpperCase() + category.slice(1)}{' '}\n                        Rewards\n                      </h2>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                        {categoryRewards.map((reward: Reward) => (\n                          <RewardCard\n                            key={reward.id}\n                            reward={reward}\n                            userPoints={points}\n                            onSelect={() => handleSelectReward(reward)}\n                            userTier={tier.toLowerCase()}\n                          />\n                        ))}\n                      </div>\n                    </div>\n                  ),\n                )\n              )}\n            </div>\n          )}\n\n          {/* History Tab */}\n          {activeTab === 'history' && (\n            <div className=\"animate-fade-in\">\n              <h2 className=\"text-2xl font-bold mb-6\">Points History</h2>\n              <RewardHistory history={history} />\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Redeem Modal */}\n      {selectedReward && showRedeemModal && (\n        <RedeemModal\n          reward={selectedReward}\n          userPoints={points}\n          onClose={handleCloseRedeemModal}\n        />\n      )}\n\n      {/* Spin Game Modal */}\n      {showSpinGame && (\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4 bg-black bg-opacity-80\">\n          <div className=\"bg-[#1A1A1A] rounded-lg shadow-xl w-full max-w-md overflow-hidden animate-fade-in p-6\">\n            <h2 className=\"text-xl font-bold mb-6 text-center\">Daily Spin</h2>\n            <SpinGame onComplete={() => setShowSpinGame(false)} />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/settings/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/signin/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1010,1013],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1010,1013],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":113,"column":20,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3947,3986],"text":"\n                Don&apos;t have an account?"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3947,3986],"text":"\n                Don&lsquo;t have an account?"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3947,3986],"text":"\n                Don&#39;t have an account?"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3947,3986],"text":"\n                Don&rsquo;t have an account?"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nexport const dynamic = 'force-dynamic';\n\nimport { useState } from 'react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport Link from 'next/link';\nimport { Button } from '../../components/ui/button';\nimport { Input } from '../../components/ui/input';\nimport { Label } from '../../components/ui/label';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '../../components/ui/card';\nimport { Alert, AlertDescription } from '../../components/ui/alert';\nimport { Loader2 } from 'lucide-react';\n\nexport default function SignInPage() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const { signIn } = useAuth();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n    setIsLoading(true);\n\n    try {\n      await signIn(email, password);\n    } catch (err: any) {\n      setError(err.message || 'Failed to sign in');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-otw-black via-gray-900 to-otw-black flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md bg-white/10 backdrop-blur-md border-otw-gold/20\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl font-bold text-center text-white\">\n            Sign In\n          </CardTitle>\n          <CardDescription className=\"text-center text-gray-300\">\n            Enter your email and password to access your account\n          </CardDescription>\n        </CardHeader>\n        <form onSubmit={handleSubmit}>\n          <CardContent className=\"space-y-4\">\n            {error && (\n              <Alert variant=\"destructive\" className=\"bg-red-500/10 border-red-500/20\">\n                <AlertDescription className=\"text-red-300\">{error}</AlertDescription>\n              </Alert>\n            )}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\" className=\"text-white\">\n                Email\n              </Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n                className=\"bg-white/10 border-otw-gold/20 text-white placeholder:text-gray-400 focus:border-otw-gold\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\" className=\"text-white\">\n                Password\n              </Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"Enter your password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n                className=\"bg-white/10 border-otw-gold/20 text-white placeholder:text-gray-400 focus:border-otw-gold\"\n              />\n            </div>\n          </CardContent>\n          <CardFooter className=\"flex flex-col space-y-4\">\n            <Button\n              type=\"submit\"\n              className=\"w-full bg-otw-gold hover:bg-otw-gold/90 text-black font-semibold\"\n              disabled={isLoading}\n            >\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Signing in...\n                </>\n              ) : (\n                'Sign In'\n              )}\n            </Button>\n            <div className=\"text-center space-y-2\">\n              <Link\n                href=\"/forgot-password\"\n                className=\"text-sm text-otw-gold hover:underline\"\n              >\n                Forgot your password?\n              </Link>\n              <p className=\"text-sm text-gray-300\">\n                Don't have an account?{' '}\n                <Link href=\"/signup\" className=\"text-otw-gold hover:underline\">\n                  Sign up\n                </Link>\n              </p>\n            </div>\n          </CardFooter>\n        </form>\n      </Card>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/signup/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":59,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1499,1502],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1499,1502],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nexport const dynamic = 'force-dynamic';\n\nimport { useState } from 'react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport Link from 'next/link';\nimport { Button } from '../../components/ui/button';\nimport { Input } from '../../components/ui/input';\nimport { Label } from '../../components/ui/label';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '../../components/ui/card';\nimport { Alert, AlertDescription } from '../../components/ui/alert';\nimport { Loader2 } from 'lucide-react';\n\nexport default function SignUpPage() {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n  });\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const { signUp } = useAuth();\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n\n    // Validation\n    if (formData.password !== formData.confirmPassword) {\n      setError('Passwords do not match');\n      return;\n    }\n\n    if (formData.password.length < 6) {\n      setError('Password must be at least 6 characters long');\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      await signUp(formData.email, formData.password, formData.name);\n    } catch (err: any) {\n      setError(err.message || 'Failed to create account');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-otw-black via-gray-900 to-otw-black flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md bg-white/10 backdrop-blur-md border-otw-gold/20\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl font-bold text-center text-white\">\n            Create Account\n          </CardTitle>\n          <CardDescription className=\"text-center text-gray-300\">\n            Join On The Way Delivery and start ordering today\n          </CardDescription>\n        </CardHeader>\n        <form onSubmit={handleSubmit}>\n          <CardContent className=\"space-y-4\">\n            {error && (\n              <Alert variant=\"destructive\" className=\"bg-red-500/10 border-red-500/20\">\n                <AlertDescription className=\"text-red-300\">{error}</AlertDescription>\n              </Alert>\n            )}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\" className=\"text-white\">\n                Full Name\n              </Label>\n              <Input\n                id=\"name\"\n                name=\"name\"\n                type=\"text\"\n                placeholder=\"Enter your full name\"\n                value={formData.name}\n                onChange={handleChange}\n                required\n                className=\"bg-white/10 border-otw-gold/20 text-white placeholder:text-gray-400 focus:border-otw-gold\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\" className=\"text-white\">\n                Email\n              </Label>\n              <Input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                value={formData.email}\n                onChange={handleChange}\n                required\n                className=\"bg-white/10 border-otw-gold/20 text-white placeholder:text-gray-400 focus:border-otw-gold\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\" className=\"text-white\">\n                Password\n              </Label>\n              <Input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                placeholder=\"Create a password (min. 6 characters)\"\n                value={formData.password}\n                onChange={handleChange}\n                required\n                className=\"bg-white/10 border-otw-gold/20 text-white placeholder:text-gray-400 focus:border-otw-gold\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"confirmPassword\" className=\"text-white\">\n                Confirm Password\n              </Label>\n              <Input\n                id=\"confirmPassword\"\n                name=\"confirmPassword\"\n                type=\"password\"\n                placeholder=\"Confirm your password\"\n                value={formData.confirmPassword}\n                onChange={handleChange}\n                required\n                className=\"bg-white/10 border-otw-gold/20 text-white placeholder:text-gray-400 focus:border-otw-gold\"\n              />\n            </div>\n          </CardContent>\n          <CardFooter className=\"flex flex-col space-y-4\">\n            <Button\n              type=\"submit\"\n              className=\"w-full bg-otw-gold hover:bg-otw-gold/90 text-black font-semibold\"\n              disabled={isLoading}\n            >\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Creating account...\n                </>\n              ) : (\n                'Create Account'\n              )}\n            </Button>\n            <p className=\"text-sm text-gray-300 text-center\">\n              Already have an account?{' '}\n              <Link href=\"/signin\" className=\"text-otw-gold hover:underline\">\n                Sign in\n              </Link>\n            </p>\n          </CardFooter>\n        </form>\n      </Card>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/terms/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardDescription' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":44}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../components/ui/card';\nimport { Badge } from '../../components/ui/badge';\nimport { Button } from '../../components/ui/button';\nimport {\n  FileText,\n  Scale,\n  Shield,\n  Users,\n  CreditCard,\n  Truck,\n  AlertTriangle,\n  Clock,\n  Mail,\n  Phone,\n  MapPin,\n  ExternalLink,\n  Download,\n  Printer,\n} from 'lucide-react';\nimport Link from 'next/link';\n\nexport default function TermsPage() {\n  const lastUpdated = 'January 15, 2024';\n  const effectiveDate = 'January 1, 2024';\n\n  const sections = [\n    {\n      id: 'acceptance',\n      title: 'Acceptance of Terms',\n      icon: FileText,\n      content: [\n        'By accessing and using the OTW platform, you accept and agree to be bound by the terms and provision of this agreement.',\n        'If you do not agree to abide by the above, please do not use this service.',\n        'These Terms of Service constitute a legally binding agreement between you and OTW.',\n      ],\n    },\n    {\n      id: 'definitions',\n      title: 'Definitions',\n      icon: Users,\n      content: [\n        '\"Service\" refers to the OTW platform, including all websites, mobile applications, and related services.',\n        '\"User\" refers to any individual who accesses or uses our Service.',\n        '\"Driver\" refers to independent contractors who provide delivery services through our platform.',\n        '\"Restaurant Partner\" refers to food establishments that offer their services through our platform.',\n        '\"Order\" refers to a request for food delivery or pickup placed through our Service.',\n      ],\n    },\n    {\n      id: 'eligibility',\n      title: 'User Eligibility',\n      icon: Shield,\n      content: [\n        'You must be at least 18 years old to use our Service.',\n        'You must provide accurate, current, and complete information during registration.',\n        'You are responsible for maintaining the confidentiality of your account credentials.',\n        'You may not use our Service if you have been previously banned or suspended.',\n        'Commercial use of the Service requires prior written consent from OTW.',\n      ],\n    },\n    {\n      id: 'orders',\n      title: 'Orders and Payments',\n      icon: CreditCard,\n      content: [\n        'All orders are subject to acceptance by the restaurant and availability of delivery drivers.',\n        'Prices are set by restaurant partners and may vary from in-store prices.',\n        'Payment is processed at the time of order placement.',\n        'Delivery fees, service fees, and taxes are additional to menu prices.',\n        'Tips for drivers are optional but encouraged.',\n        'Refunds are processed according to our refund policy outlined below.',\n      ],\n    },\n    {\n      id: 'delivery',\n      title: 'Delivery Services',\n      icon: Truck,\n      content: [\n        'Delivery times are estimates and may vary due to weather, traffic, or high demand.',\n        'You must be available to receive your order at the specified delivery address.',\n        'OTW is not responsible for orders that cannot be delivered due to incorrect address information.',\n        'Special delivery instructions should be clearly specified in your order.',\n        'Drivers have the right to refuse delivery to unsafe locations or intoxicated customers.',\n      ],\n    },\n    {\n      id: 'refunds',\n      title: 'Refunds and Cancellations',\n      icon: AlertTriangle,\n      content: [\n        'Orders may be cancelled within 2 minutes of placement for a full refund.',\n        'Refunds for quality issues must be reported within 24 hours of delivery.',\n        'Missing items will be refunded or replaced at our discretion.',\n        'Refunds are processed to the original payment method within 3-5 business days.',\n        'Repeated refund requests may result in account suspension.',\n        'Restaurant partners are responsible for food quality and preparation.',\n      ],\n    },\n    {\n      id: 'prohibited',\n      title: 'Prohibited Uses',\n      icon: Scale,\n      content: [\n        'You may not use our Service for any unlawful purpose or to solicit others to perform unlawful acts.',\n        'You may not violate any international, federal, provincial, or state regulations, rules, or laws.',\n        'You may not transmit any worms, viruses, or any code of a destructive nature.',\n        'You may not infringe upon or violate our intellectual property rights or the intellectual property rights of others.',\n        'You may not harass, abuse, insult, harm, defame, slander, disparage, intimidate, or discriminate.',\n        'You may not submit false or misleading information.',\n      ],\n    },\n    {\n      id: 'liability',\n      title: 'Limitation of Liability',\n      icon: Shield,\n      content: [\n        'OTW acts as an intermediary between customers, restaurants, and drivers.',\n        'We are not responsible for the quality, safety, or preparation of food items.',\n        'Our liability is limited to the amount paid for the specific order in question.',\n        'We are not liable for indirect, incidental, special, consequential, or punitive damages.',\n        'Some jurisdictions do not allow the exclusion of certain warranties or the limitation of liability for consequential damages.',\n      ],\n    },\n    {\n      id: 'intellectual',\n      title: 'Intellectual Property',\n      icon: FileText,\n      content: [\n        'The Service and its original content, features, and functionality are owned by OTW.',\n        'The Service is protected by copyright, trademark, and other laws.',\n        'Our trademarks and trade dress may not be used without our prior written consent.',\n        'You retain ownership of content you submit, but grant us a license to use it.',\n        'You may not reproduce, distribute, or create derivative works without permission.',\n      ],\n    },\n    {\n      id: 'privacy',\n      title: 'Privacy Policy',\n      icon: Shield,\n      content: [\n        'Your privacy is important to us. Please review our Privacy Policy.',\n        'By using our Service, you agree to the collection and use of information in accordance with our Privacy Policy.',\n        'We implement appropriate security measures to protect your personal information.',\n        'We do not sell, trade, or rent your personal information to third parties.',\n        'You have the right to access, update, or delete your personal information.',\n      ],\n    },\n    {\n      id: 'termination',\n      title: 'Termination',\n      icon: AlertTriangle,\n      content: [\n        'We may terminate or suspend your account immediately for any breach of these Terms.',\n        'Upon termination, your right to use the Service will cease immediately.',\n        'You may terminate your account at any time by contacting customer support.',\n        'All provisions which by their nature should survive termination shall survive.',\n        'Termination does not relieve you of any obligations incurred prior to termination.',\n      ],\n    },\n    {\n      id: 'changes',\n      title: 'Changes to Terms',\n      icon: Clock,\n      content: [\n        'We reserve the right to modify these terms at any time.',\n        'Changes will be effective immediately upon posting on this page.',\n        'Your continued use of the Service after changes constitutes acceptance.',\n        'We will notify users of significant changes via email or in-app notification.',\n        'It is your responsibility to review these terms periodically.',\n      ],\n    },\n    {\n      id: 'governing',\n      title: 'Governing Law',\n      icon: Scale,\n      content: [\n        'These Terms shall be governed by and construed in accordance with the laws of the jurisdiction in which OTW operates.',\n        'Any disputes arising under these Terms shall be subject to the exclusive jurisdiction of the courts in that jurisdiction.',\n        'If any provision of these Terms is found to be unenforceable, the remaining provisions will remain in effect.',\n        'These Terms constitute the entire agreement between you and OTW regarding the Service.',\n      ],\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-otw-black via-otw-black-800 to-otw-black-900\">\n      {/* Hero Section */}\n      <div className=\"relative py-20 px-4\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-otw-gold/10 to-transparent\" />\n        <div className=\"container mx-auto relative z-10\">\n          <div className=\"text-center max-w-4xl mx-auto\">\n            <div className=\"w-20 h-20 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-full flex items-center justify-center mx-auto mb-6\">\n              <Scale className=\"w-10 h-10 text-black\" />\n            </div>\n            <h1 className=\"text-4xl md:text-6xl font-bold text-white mb-6\">\n              Terms of <span className=\"text-otw-gold\">Service</span>\n            </h1>\n            <p className=\"text-xl text-gray-300 mb-8 max-w-2xl mx-auto\">\n              Please read these Terms of Service carefully before using the OTW platform. By using our service, you agree to these terms.\n            </p>\n\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center mb-8\">\n              <Badge className=\"bg-otw-gold/20 text-otw-gold border-otw-gold/30 px-4 py-2\">\n                <Clock className=\"w-4 h-4 mr-2\" />\n                Last Updated: {lastUpdated}\n              </Badge>\n              <Badge className=\"bg-green-500/20 text-green-400 border-green-500/30 px-4 py-2\">\n                <FileText className=\"w-4 h-4 mr-2\" />\n                Effective: {effectiveDate}\n              </Badge>\n            </div>\n\n            <div className=\"flex flex-wrap justify-center gap-4\">\n              <Button className=\"bg-gradient-to-r from-otw-gold to-yellow-500 text-black font-semibold px-6 py-3 rounded-full hover:shadow-lg transition-all duration-300\">\n                <Download className=\"w-5 h-5 mr-2\" />\n                Download PDF\n              </Button>\n              <Button variant=\"outline\" className=\"border-2 border-otw-gold text-otw-gold hover:bg-otw-gold hover:text-black px-6 py-3 rounded-full transition-all duration-300\">\n                <Printer className=\"w-5 h-5 mr-2\" />\n                Print Terms\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Quick Navigation */}\n      <div className=\"py-16 px-4 bg-gradient-to-r from-otw-gold/5 to-transparent\">\n        <div className=\"container mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-white mb-4\">\n              Quick <span className=\"text-otw-gold\">Navigation</span>\n            </h2>\n            <p className=\"text-gray-300\">Jump to specific sections</p>\n          </div>\n\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n            {sections.map((section) => {\n              const IconComponent = section.icon;\n              return (\n                <a\n                  key={section.id}\n                  href={`#${section.id}`}\n                  className=\"group p-4 bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20 hover:border-otw-gold/40 rounded-lg transition-all duration-300 hover:shadow-lg hover:shadow-otw-gold/10\"\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-8 h-8 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-lg flex items-center justify-center group-hover:scale-110 transition-transform duration-300\">\n                      <IconComponent className=\"w-4 h-4 text-black\" />\n                    </div>\n                    <span className=\"text-white text-sm font-medium group-hover:text-otw-gold transition-colors duration-300\">\n                      {section.title}\n                    </span>\n                  </div>\n                </a>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n\n      {/* Terms Content */}\n      <div className=\"py-16 px-4\">\n        <div className=\"container mx-auto max-w-4xl\">\n          <div className=\"space-y-12\">\n            {sections.map((section, index) => {\n              const IconComponent = section.icon;\n              return (\n                <Card\n                  key={section.id}\n                  id={section.id}\n                  className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20 hover:border-otw-gold/40 transition-all duration-300 hover:shadow-lg hover:shadow-otw-gold/10\"\n                >\n                  <CardHeader>\n                    <div className=\"flex items-center gap-4\">\n                      <div className=\"w-12 h-12 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-lg flex items-center justify-center\">\n                        <IconComponent className=\"w-6 h-6 text-black\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-white text-2xl\">\n                          {index + 1}. {section.title}\n                        </CardTitle>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {section.content.map((paragraph, pIndex) => (\n                        <p key={pIndex} className=\"text-gray-300 leading-relaxed\">\n                          {paragraph}\n                        </p>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n\n      {/* Contact Information */}\n      <div className=\"py-16 px-4 bg-gradient-to-r from-otw-gold/5 to-transparent\">\n        <div className=\"container mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-white mb-4\">\n              Questions About These <span className=\"text-otw-gold\">Terms</span>?\n            </h2>\n            <p className=\"text-gray-300\">Contact us if you have any questions or concerns</p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-4xl mx-auto\">\n            <Card className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20 hover:border-otw-gold/40 transition-all duration-300 hover:shadow-lg hover:shadow-otw-gold/10\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <Mail className=\"w-6 h-6 text-black\" />\n                </div>\n                <h3 className=\"text-white font-semibold mb-2\">Email Support</h3>\n                <p className=\"text-gray-300 text-sm mb-4\">Get help via email</p>\n                <a href=\"mailto:legal@otw.com\" className=\"text-otw-gold hover:underline\">\n                  legal@otw.com\n                </a>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20 hover:border-otw-gold/40 transition-all duration-300 hover:shadow-lg hover:shadow-otw-gold/10\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <Phone className=\"w-6 h-6 text-black\" />\n                </div>\n                <h3 className=\"text-white font-semibold mb-2\">Phone Support</h3>\n                <p className=\"text-gray-300 text-sm mb-4\">Speak with our legal team</p>\n                <a href=\"tel:1-800-OTW-LEGAL\" className=\"text-otw-gold hover:underline\">\n                  1-800-OTW-LEGAL\n                </a>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20 hover:border-otw-gold/40 transition-all duration-300 hover:shadow-lg hover:shadow-otw-gold/10\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <MapPin className=\"w-6 h-6 text-black\" />\n                </div>\n                <h3 className=\"text-white font-semibold mb-2\">Mailing Address</h3>\n                <p className=\"text-gray-300 text-sm mb-4\">Send us mail</p>\n                <div className=\"text-otw-gold text-sm\">\n                  <p>OTW Legal Department</p>\n                  <p>123 Food Street</p>\n                  <p>Delivery City, DC 12345</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* Related Links */}\n      <div className=\"py-16 px-4\">\n        <div className=\"container mx-auto text-center\">\n          <h2 className=\"text-3xl font-bold text-white mb-8\">\n            Related <span className=\"text-otw-gold\">Documents</span>\n          </h2>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Link href=\"/privacy-policy\">\n              <Button className=\"bg-gradient-to-r from-otw-gold to-yellow-500 text-black font-semibold px-8 py-3 rounded-full hover:shadow-lg transition-all duration-300\">\n                <Shield className=\"w-5 h-5 mr-2\" />\n                Privacy Policy\n              </Button>\n            </Link>\n            <Link href=\"/help\">\n              <Button variant=\"outline\" className=\"border-2 border-otw-gold text-otw-gold hover:bg-otw-gold hover:text-black px-8 py-3 rounded-full transition-all duration-300\">\n                <ExternalLink className=\"w-5 h-5 mr-2\" />\n                Help Center\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/test-place-autocomplete/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/tier/page.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":267,"column":17,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[12152,12363],"text":"\n                &quot;The Silver membership has paid for itself in just two weeks! I\n                use OTW for food delivery almost daily, and the savings on fees\n                alone is worth it.\"\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[12152,12363],"text":"\n                &ldquo;The Silver membership has paid for itself in just two weeks! I\n                use OTW for food delivery almost daily, and the savings on fees\n                alone is worth it.\"\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[12152,12363],"text":"\n                &#34;The Silver membership has paid for itself in just two weeks! I\n                use OTW for food delivery almost daily, and the savings on fees\n                alone is worth it.\"\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[12152,12363],"text":"\n                &rdquo;The Silver membership has paid for itself in just two weeks! I\n                use OTW for food delivery almost daily, and the savings on fees\n                alone is worth it.\"\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":269,"column":35,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[12152,12363],"text":"\n                \"The Silver membership has paid for itself in just two weeks! I\n                use OTW for food delivery almost daily, and the savings on fees\n                alone is worth it.&quot;\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[12152,12363],"text":"\n                \"The Silver membership has paid for itself in just two weeks! I\n                use OTW for food delivery almost daily, and the savings on fees\n                alone is worth it.&ldquo;\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[12152,12363],"text":"\n                \"The Silver membership has paid for itself in just two weeks! I\n                use OTW for food delivery almost daily, and the savings on fees\n                alone is worth it.&#34;\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[12152,12363],"text":"\n                \"The Silver membership has paid for itself in just two weeks! I\n                use OTW for food delivery almost daily, and the savings on fees\n                alone is worth it.&rdquo;\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":288,"column":17,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[13086,13313],"text":"\n                &quot;As a Gold member, I love the unlimited free grocery delivery.\n                It's so convenient to have my groceries delivered whenever I\n                need them without worrying about fees.\"\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[13086,13313],"text":"\n                &ldquo;As a Gold member, I love the unlimited free grocery delivery.\n                It's so convenient to have my groceries delivered whenever I\n                need them without worrying about fees.\"\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[13086,13313],"text":"\n                &#34;As a Gold member, I love the unlimited free grocery delivery.\n                It's so convenient to have my groceries delivered whenever I\n                need them without worrying about fees.\"\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[13086,13313],"text":"\n                &rdquo;As a Gold member, I love the unlimited free grocery delivery.\n                It's so convenient to have my groceries delivered whenever I\n                need them without worrying about fees.\"\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":289,"column":19,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[13086,13313],"text":"\n                \"As a Gold member, I love the unlimited free grocery delivery.\n                It&apos;s so convenient to have my groceries delivered whenever I\n                need them without worrying about fees.\"\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[13086,13313],"text":"\n                \"As a Gold member, I love the unlimited free grocery delivery.\n                It&lsquo;s so convenient to have my groceries delivered whenever I\n                need them without worrying about fees.\"\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[13086,13313],"text":"\n                \"As a Gold member, I love the unlimited free grocery delivery.\n                It&#39;s so convenient to have my groceries delivered whenever I\n                need them without worrying about fees.\"\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[13086,13313],"text":"\n                \"As a Gold member, I love the unlimited free grocery delivery.\n                It&rsquo;s so convenient to have my groceries delivered whenever I\n                need them without worrying about fees.\"\n              "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":290,"column":55,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[13086,13313],"text":"\n                \"As a Gold member, I love the unlimited free grocery delivery.\n                It's so convenient to have my groceries delivered whenever I\n                need them without worrying about fees.&quot;\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[13086,13313],"text":"\n                \"As a Gold member, I love the unlimited free grocery delivery.\n                It's so convenient to have my groceries delivered whenever I\n                need them without worrying about fees.&ldquo;\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[13086,13313],"text":"\n                \"As a Gold member, I love the unlimited free grocery delivery.\n                It's so convenient to have my groceries delivered whenever I\n                need them without worrying about fees.&#34;\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[13086,13313],"text":"\n                \"As a Gold member, I love the unlimited free grocery delivery.\n                It's so convenient to have my groceries delivered whenever I\n                need them without worrying about fees.&rdquo;\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":309,"column":17,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[14034,14256],"text":"\n                &quot;The ride tokens that come with my Bronze membership are perfect\n                for my needs. I use them for my weekly grocery trips and save a\n                ton on transportation costs.\"\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[14034,14256],"text":"\n                &ldquo;The ride tokens that come with my Bronze membership are perfect\n                for my needs. I use them for my weekly grocery trips and save a\n                ton on transportation costs.\"\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[14034,14256],"text":"\n                &#34;The ride tokens that come with my Bronze membership are perfect\n                for my needs. I use them for my weekly grocery trips and save a\n                ton on transportation costs.\"\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[14034,14256],"text":"\n                &rdquo;The ride tokens that come with my Bronze membership are perfect\n                for my needs. I use them for my weekly grocery trips and save a\n                ton on transportation costs.\"\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":311,"column":45,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[14034,14256],"text":"\n                \"The ride tokens that come with my Bronze membership are perfect\n                for my needs. I use them for my weekly grocery trips and save a\n                ton on transportation costs.&quot;\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[14034,14256],"text":"\n                \"The ride tokens that come with my Bronze membership are perfect\n                for my needs. I use them for my weekly grocery trips and save a\n                ton on transportation costs.&ldquo;\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[14034,14256],"text":"\n                \"The ride tokens that come with my Bronze membership are perfect\n                for my needs. I use them for my weekly grocery trips and save a\n                ton on transportation costs.&#34;\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[14034,14256],"text":"\n                \"The ride tokens that come with my Bronze membership are perfect\n                for my needs. I use them for my weekly grocery trips and save a\n                ton on transportation costs.&rdquo;\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":334,"column":52,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[14993,15271],"text":"\n                Ride tokens are credits you can use for OTW rides. Each token is\n                worth up to $10 in ride value. They&apos;re automatically applied to\n                your account each month and expire at the end of the month if\n                unused.\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[14993,15271],"text":"\n                Ride tokens are credits you can use for OTW rides. Each token is\n                worth up to $10 in ride value. They&lsquo;re automatically applied to\n                your account each month and expire at the end of the month if\n                unused.\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[14993,15271],"text":"\n                Ride tokens are credits you can use for OTW rides. Each token is\n                worth up to $10 in ride value. They&#39;re automatically applied to\n                your account each month and expire at the end of the month if\n                unused.\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[14993,15271],"text":"\n                Ride tokens are credits you can use for OTW rides. Each token is\n                worth up to $10 in ride value. They&rsquo;re automatically applied to\n                your account each month and expire at the end of the month if\n                unused.\n              "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":381,"column":17,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[16933,17083],"text":"\n            Start saving today with an OTW Tier Membership. Choose the plan\n            that&apos;s right for you and enjoy exclusive benefits.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[16933,17083],"text":"\n            Start saving today with an OTW Tier Membership. Choose the plan\n            that&lsquo;s right for you and enjoy exclusive benefits.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[16933,17083],"text":"\n            Start saving today with an OTW Tier Membership. Choose the plan\n            that&#39;s right for you and enjoy exclusive benefits.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[16933,17083],"text":"\n            Start saving today with an OTW Tier Membership. Choose the plan\n            that&rsquo;s right for you and enjoy exclusive benefits.\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Button } from '../../components/ui/button';\nimport { Check, Star, Shield, Clock, Gift, Zap } from 'lucide-react';\nimport Link from 'next/link';\n\nexport const dynamic = 'force-dynamic';\n\nexport default function TierMembershipPage() {\n  return (\n    <div className=\"min-h-screen pb-20 pt-24\">\n      {/* Hero Section */}\n      <section className=\"relative h-[50vh] flex items-center justify-center overflow-hidden\">\n        <div className=\"absolute inset-0 z-0 bg-black\">\n          <div className=\"absolute inset-0 bg-gradient-to-r from-black to-transparent opacity-70 z-10\"></div>\n          <div\n            className=\"absolute inset-0 bg-cover bg-center\"\n            style={{ backgroundImage: \"url('/images/tier-hero.jpg')\" }}\n          ></div>\n        </div>\n        <div className=\"container mx-auto px-4 z-10 text-center\">\n          <h1 className=\"text-5xl font-bold mb-4 text-white\">\n            OTW Tier Membership\n          </h1>\n          <p className=\"text-xl text-gray-200 max-w-2xl mx-auto\">\n            Join our premium membership program and unlock exclusive benefits,\n            savings, and perks.\n          </p>\n        </div>\n      </section>\n\n      {/* Pricing Section */}\n      <section className=\"py-16 -mt-20 relative z-20\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-5xl mx-auto\">\n            {/* Bronze Tier */}\n            <div className=\"bg-gray-900 rounded-lg overflow-hidden shadow-lg border border-gray-800 hover:border-otw-gold transition-all duration-300\">\n              <div className=\"p-6\">\n                <h3 className=\"text-2xl font-bold mb-2\">Bronze</h3>\n                <div className=\"text-4xl font-bold text-otw-gold mb-4\">\n                  $9.99\n                  <span className=\"text-lg font-normal text-gray-400\">\n                    /month\n                  </span>\n                </div>\n                <p className=\"text-gray-400 mb-6\">\n                  Perfect for occasional users who want to save on fees.\n                </p>\n\n                <ul className=\"space-y-3 mb-8\">\n                  <li className=\"flex items-start\">\n                    <Check className=\"w-5 h-5 text-otw-gold mr-2 flex-shrink-0 mt-0.5\" />\n                    <span>No service fees on food delivery</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <Check className=\"w-5 h-5 text-otw-gold mr-2 flex-shrink-0 mt-0.5\" />\n                    <span>10% off package delivery</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <Check className=\"w-5 h-5 text-otw-gold mr-2 flex-shrink-0 mt-0.5\" />\n                    <span>2 free ride tokens per month</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <Check className=\"w-5 h-5 text-otw-gold mr-2 flex-shrink-0 mt-0.5\" />\n                    <span>Standard customer support</span>\n                  </li>\n                </ul>\n\n                <Link href=\"/checkout?plan=bronze\">\n                  <Button className=\"w-full\">Join Bronze</Button>\n                </Link>\n              </div>\n            </div>\n\n            {/* Silver Tier */}\n            <div className=\"bg-gray-900 rounded-lg overflow-hidden shadow-xl border-2 border-otw-gold transform scale-105 z-10\">\n              <div className=\"bg-otw-gold text-black text-center py-2 font-bold text-sm\">\n                MOST POPULAR\n              </div>\n              <div className=\"p-6\">\n                <h3 className=\"text-2xl font-bold mb-2\">Silver</h3>\n                <div className=\"text-4xl font-bold text-otw-gold mb-4\">\n                  $19.99\n                  <span className=\"text-lg font-normal text-gray-400\">\n                    /month\n                  </span>\n                </div>\n                <p className=\"text-gray-400 mb-6\">\n                  Great for regular users who want premium benefits.\n                </p>\n\n                <ul className=\"space-y-3 mb-8\">\n                  <li className=\"flex items-start\">\n                    <Check className=\"w-5 h-5 text-otw-gold mr-2 flex-shrink-0 mt-0.5\" />\n                    <span>All Bronze benefits</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <Check className=\"w-5 h-5 text-otw-gold mr-2 flex-shrink-0 mt-0.5\" />\n                    <span>20% off package delivery</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <Check className=\"w-5 h-5 text-otw-gold mr-2 flex-shrink-0 mt-0.5\" />\n                    <span>5 free ride tokens per month</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <Check className=\"w-5 h-5 text-otw-gold mr-2 flex-shrink-0 mt-0.5\" />\n                    <span>Priority customer support</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <Check className=\"w-5 h-5 text-otw-gold mr-2 flex-shrink-0 mt-0.5\" />\n                    <span>Free grocery delivery (up to 3 per month)</span>\n                  </li>\n                </ul>\n\n                <Link href=\"/checkout?plan=silver\">\n                  <Button className=\"w-full\">Join Silver</Button>\n                </Link>\n              </div>\n            </div>\n\n            {/* Gold Tier */}\n            <div className=\"bg-gray-900 rounded-lg overflow-hidden shadow-lg border border-gray-800 hover:border-otw-gold transition-all duration-300\">\n              <div className=\"p-6\">\n                <h3 className=\"text-2xl font-bold mb-2\">Gold</h3>\n                <div className=\"text-4xl font-bold text-otw-gold mb-4\">\n                  $39.99\n                  <span className=\"text-lg font-normal text-gray-400\">\n                    /month\n                  </span>\n                </div>\n                <p className=\"text-gray-400 mb-6\">\n                  For power users who want the ultimate OTW experience.\n                </p>\n\n                <ul className=\"space-y-3 mb-8\">\n                  <li className=\"flex items-start\">\n                    <Check className=\"w-5 h-5 text-otw-gold mr-2 flex-shrink-0 mt-0.5\" />\n                    <span>All Silver benefits</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <Check className=\"w-5 h-5 text-otw-gold mr-2 flex-shrink-0 mt-0.5\" />\n                    <span>Unlimited free food delivery</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <Check className=\"w-5 h-5 text-otw-gold mr-2 flex-shrink-0 mt-0.5\" />\n                    <span>50% off package delivery</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <Check className=\"w-5 h-5 text-otw-gold mr-2 flex-shrink-0 mt-0.5\" />\n                    <span>10 free ride tokens per month</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <Check className=\"w-5 h-5 text-otw-gold mr-2 flex-shrink-0 mt-0.5\" />\n                    <span>VIP customer support</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <Check className=\"w-5 h-5 text-otw-gold mr-2 flex-shrink-0 mt-0.5\" />\n                    <span>Free unlimited grocery delivery</span>\n                  </li>\n                </ul>\n\n                <Link href=\"/checkout?plan=gold\">\n                  <Button className=\"w-full\">Join Gold</Button>\n                </Link>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-16 bg-gray-900\">\n        <div className=\"container mx-auto px-4\">\n          <h2 className=\"text-3xl font-bold mb-12 text-center\">\n            Membership Benefits\n          </h2>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            <div className=\"bg-gray-800 p-6 rounded-lg\">\n              <div className=\"w-12 h-12 bg-otw-red/10 rounded-full flex items-center justify-center mb-6\">\n                <Star className=\"w-6 h-6 text-otw-red\" />\n              </div>\n              <h3 className=\"text-xl font-bold mb-3\">Exclusive Savings</h3>\n              <p className=\"text-gray-400\">\n                Save on delivery fees, service charges, and enjoy special\n                member-only discounts on all OTW services.\n              </p>\n            </div>\n\n            <div className=\"bg-gray-800 p-6 rounded-lg\">\n              <div className=\"w-12 h-12 bg-otw-red/10 rounded-full flex items-center justify-center mb-6\">\n                <Clock className=\"w-6 h-6 text-otw-red\" />\n              </div>\n              <h3 className=\"text-xl font-bold mb-3\">Priority Service</h3>\n              <p className=\"text-gray-400\">\n                Skip the queue with priority booking, faster delivery times, and\n                preferred scheduling for all services.\n              </p>\n            </div>\n\n            <div className=\"bg-gray-800 p-6 rounded-lg\">\n              <div className=\"w-12 h-12 bg-otw-red/10 rounded-full flex items-center justify-center mb-6\">\n                <Shield className=\"w-6 h-6 text-otw-red\" />\n              </div>\n              <h3 className=\"text-xl font-bold mb-3\">Premium Support</h3>\n              <p className=\"text-gray-400\">\n                Enjoy dedicated customer support with faster response times and\n                personalized assistance.\n              </p>\n            </div>\n\n            <div className=\"bg-gray-800 p-6 rounded-lg\">\n              <div className=\"w-12 h-12 bg-otw-red/10 rounded-full flex items-center justify-center mb-6\">\n                <Gift className=\"w-6 h-6 text-otw-red\" />\n              </div>\n              <h3 className=\"text-xl font-bold mb-3\">Free Ride Tokens</h3>\n              <p className=\"text-gray-400\">\n                Receive monthly ride tokens that can be redeemed for free rides\n                anywhere in our service area.\n              </p>\n            </div>\n\n            <div className=\"bg-gray-800 p-6 rounded-lg\">\n              <div className=\"w-12 h-12 bg-otw-red/10 rounded-full flex items-center justify-center mb-6\">\n                <Zap className=\"w-6 h-6 text-otw-red\" />\n              </div>\n              <h3 className=\"text-xl font-bold mb-3\">Exclusive Features</h3>\n              <p className=\"text-gray-400\">\n                Access member-only features like advanced scheduling, recurring\n                deliveries, and special requests.\n              </p>\n            </div>\n\n            <div className=\"bg-gray-800 p-6 rounded-lg\">\n              <div className=\"w-12 h-12 bg-otw-red/10 rounded-full flex items-center justify-center mb-6\">\n                <Star className=\"w-6 h-6 text-otw-red\" />\n              </div>\n              <h3 className=\"text-xl font-bold mb-3\">Special Events</h3>\n              <p className=\"text-gray-400\">\n                Get invited to exclusive member events, tastings, and special\n                promotions throughout the year.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials Section */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-4\">\n          <h2 className=\"text-3xl font-bold mb-12 text-center\">\n            What Our Members Say\n          </h2>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <div className=\"bg-gray-900 p-6 rounded-lg\">\n              <div className=\"flex items-center text-otw-gold mb-4\">\n                {[...Array(5)].map((_, i) => (\n                  <svg\n                    key={i}\n                    className=\"w-5 h-5 fill-current\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    <path d=\"M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z\" />\n                  </svg>\n                ))}\n              </div>\n              <p className=\"text-gray-300 mb-4\">\n                \"The Silver membership has paid for itself in just two weeks! I\n                use OTW for food delivery almost daily, and the savings on fees\n                alone is worth it.\"\n              </p>\n              <p className=\"font-bold\">- Michael R.</p>\n              <p className=\"text-sm text-gray-400\">Silver Member</p>\n            </div>\n\n            <div className=\"bg-gray-900 p-6 rounded-lg\">\n              <div className=\"flex items-center text-otw-gold mb-4\">\n                {[...Array(5)].map((_, i) => (\n                  <svg\n                    key={i}\n                    className=\"w-5 h-5 fill-current\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    <path d=\"M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z\" />\n                  </svg>\n                ))}\n              </div>\n              <p className=\"text-gray-300 mb-4\">\n                \"As a Gold member, I love the unlimited free grocery delivery.\n                It's so convenient to have my groceries delivered whenever I\n                need them without worrying about fees.\"\n              </p>\n              <p className=\"font-bold\">- Jessica T.</p>\n              <p className=\"text-sm text-gray-400\">Gold Member</p>\n            </div>\n\n            <div className=\"bg-gray-900 p-6 rounded-lg\">\n              <div className=\"flex items-center text-otw-gold mb-4\">\n                {[...Array(5)].map((_, i) => (\n                  <svg\n                    key={i}\n                    className=\"w-5 h-5 fill-current\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    <path d=\"M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z\" />\n                  </svg>\n                ))}\n              </div>\n              <p className=\"text-gray-300 mb-4\">\n                \"The ride tokens that come with my Bronze membership are perfect\n                for my needs. I use them for my weekly grocery trips and save a\n                ton on transportation costs.\"\n              </p>\n              <p className=\"font-bold\">- David L.</p>\n              <p className=\"text-sm text-gray-400\">Bronze Member</p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* FAQ Section */}\n      <section className=\"py-16 bg-gray-900\">\n        <div className=\"container mx-auto px-4\">\n          <h2 className=\"text-3xl font-bold mb-12 text-center\">\n            Frequently Asked Questions\n          </h2>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 max-w-4xl mx-auto\">\n            <div className=\"bg-gray-800 p-6 rounded-lg\">\n              <h3 className=\"text-xl font-bold mb-3\">\n                How do ride tokens work?\n              </h3>\n              <p className=\"text-gray-400\">\n                Ride tokens are credits you can use for OTW rides. Each token is\n                worth up to $10 in ride value. They're automatically applied to\n                your account each month and expire at the end of the month if\n                unused.\n              </p>\n            </div>\n\n            <div className=\"bg-gray-800 p-6 rounded-lg\">\n              <h3 className=\"text-xl font-bold mb-3\">\n                Can I cancel my membership anytime?\n              </h3>\n              <p className=\"text-gray-400\">\n                Yes, you can cancel your membership at any time. Your benefits\n                will continue until the end of your current billing cycle.\n              </p>\n            </div>\n\n            <div className=\"bg-gray-800 p-6 rounded-lg\">\n              <h3 className=\"text-xl font-bold mb-3\">\n                How do I upgrade my membership?\n              </h3>\n              <p className=\"text-gray-400\">\n                You can upgrade your membership at any time from your account\n                settings. The new rate will be prorated for the remainder of\n                your billing cycle.\n              </p>\n            </div>\n\n            <div className=\"bg-gray-800 p-6 rounded-lg\">\n              <h3 className=\"text-xl font-bold mb-3\">\n                Is there a family plan available?\n              </h3>\n              <p className=\"text-gray-400\">\n                Yes, we offer family plans that allow up to 5 members to share\n                benefits under one account. Contact our customer support for\n                more information.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h2 className=\"text-3xl font-bold mb-6\">Ready to Join?</h2>\n          <p className=\"text-xl text-gray-300 mb-8 max-w-2xl mx-auto\">\n            Start saving today with an OTW Tier Membership. Choose the plan\n            that's right for you and enjoy exclusive benefits.\n          </p>\n          <div className=\"flex flex-col sm:flex-row justify-center gap-4\">\n            <Link href=\"/checkout?plan=bronze\">\n              <Button size=\"lg\">Join Bronze</Button>\n            </Link>\n            <Link href=\"/checkout?plan=silver\">\n              <Button\n                size=\"lg\"\n                className=\"bg-otw-gold text-black hover:bg-otw-gold/90\"\n              >\n                Join Silver\n              </Button>\n            </Link>\n            <Link href=\"/checkout?plan=gold\">\n              <Button size=\"lg\">Join Gold</Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/track/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":46,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1213,1216],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1213,1216],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":84,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":84,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '../../components/ui/card';\nimport { Input } from '../../components/ui/input';\nimport { Button } from '../../components/ui/button';\nimport { Alert, AlertDescription } from '../../components/ui/alert';\nimport { CheckCircle, Clock, MapPin, User, AlertCircle } from 'lucide-react';\n\nconst statusSteps = [\n  {\n    id: 'received',\n    title: 'Order Received',\n    icon: Clock,\n    description: \"We've received your order\",\n  },\n  {\n    id: 'confirmed',\n    title: 'Order Confirmed',\n    icon: CheckCircle,\n    description: 'Your order has been confirmed',\n  },\n  {\n    id: 'preparing',\n    title: 'Preparing',\n    icon: User,\n    description: 'Your order is being prepared',\n  },\n  {\n    id: 'out_for_delivery',\n    title: 'Out for Delivery',\n    icon: MapPin,\n    description: 'Your order is on the way',\n  },\n  {\n    id: 'delivered',\n    title: 'Delivered',\n    icon: CheckCircle,\n    description: 'Order delivered successfully',\n  },\n];\n\nexport default function TrackPage() {\n  const [orderId, setOrderId] = useState('');\n  const [email, setEmail] = useState('');\n  const [orderData, setOrderData] = useState<any>(null);\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleTrack = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n    setOrderData(null);\n\n    if (!orderId.trim() || !email.trim()) {\n      setError('Please enter both Order ID and email address');\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      // Mock verification - replace with actual API call\n      // This would verify the order belongs to the customer\n      const mockOrderData = {\n        orderId: orderId,\n        customerEmail: email,\n        status: 'preparing',\n        estimatedDelivery: '7:30 PM',\n        items: ['2x Pepperoni Pizza', '1x Garlic Bread'],\n        total: 28.99,\n        address: '123 Main St, Fort Wayne, IN',\n      };\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Mock validation - in real implementation, verify email matches order\n      if (email.toLowerCase() === 'test@example.com' || email.includes('@')) {\n        setOrderData(mockOrderData);\n      } else {\n        setError('Order not found or email does not match our records');\n      }\n    } catch (error) {\n      setError('Unable to track order. Please try again later.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-black text-white p-6\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold text-otw-gold mb-2\">\n            Track Your Order\n          </h1>\n          <p className=\"text-lg text-gray-300\">\n            Enter your order details to track your delivery in real-time.\n          </p>\n        </div>\n\n        <Card className=\"bg-gray-900 border-gray-800 mb-8\">\n          <CardHeader>\n            <CardTitle className=\"text-white\">Order Verification</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleTrack} className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                  Order ID\n                </label>\n                <Input\n                  value={orderId}\n                  onChange={(e) => setOrderId(e.target.value)}\n                  placeholder=\"Enter your order ID (e.g., OTW-2024-001)\"\n                  className=\"bg-gray-800 border-gray-700 text-white\"\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                  Email Address\n                </label>\n                <Input\n                  type=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  placeholder=\"Enter the email used for this order\"\n                  className=\"bg-gray-800 border-gray-700 text-white\"\n                  required\n                />\n              </div>\n              {error && (\n                <Alert className=\"bg-red-900/20 border-red-800\">\n                  <AlertCircle className=\"h-4 w-4\" />\n                  <AlertDescription className=\"text-red-400\">\n                    {error}\n                  </AlertDescription>\n                </Alert>\n              )}\n              <Button\n                type=\"submit\"\n                disabled={isLoading}\n                className=\"w-full bg-otw-gold hover:bg-yellow-600 text-black font-semibold\"\n              >\n                {isLoading ? 'Tracking...' : 'Track Order'}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n\n        {orderData && (\n          <div className=\"space-y-6\">\n            <Card className=\"bg-gray-900 border-gray-800\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Order Details</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <p className=\"text-gray-400\">Order ID</p>\n                    <p className=\"text-white font-semibold\">{orderData.orderId}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-gray-400\">Estimated Delivery</p>\n                    <p className=\"text-white font-semibold\">{orderData.estimatedDelivery}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-gray-400\">Total</p>\n                    <p className=\"text-white font-semibold\">${orderData.total}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-gray-400\">Delivery Address</p>\n                    <p className=\"text-white font-semibold\">{orderData.address}</p>\n                  </div>\n                </div>\n                <div className=\"mt-4\">\n                  <p className=\"text-gray-400 mb-2\">Items</p>\n                  <div className=\"space-y-1\">\n                    {orderData.items.map((item: string, index: number) => (\n                      <p key={index} className=\"text-white\">{item}</p>\n                    ))}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gray-900 border-gray-800\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Order Status</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"relative\">\n                  <div className=\"absolute left-8 top-0 h-full w-0.5 bg-gray-700\" />\n                  <div className=\"space-y-8\">\n                    {statusSteps.map((step) => {\n                      const isActive = statusSteps\n                        .slice(0, statusSteps.findIndex((s) => s.id === orderData.status) + 1)\n                        .map((s) => s.id)\n                        .includes(step.id);\n\n                      return (\n                        <div key={step.id} className=\"relative flex items-start gap-4\">\n                          <div\n                            className={`relative z-10 rounded-full p-2 ${\n                              isActive ? 'bg-otw-gold text-black' : 'bg-gray-800 text-gray-400'\n                            }`}\n                          >\n                            <step.icon className=\"w-4 h-4\" />\n                          </div>\n                          <div>\n                            <h3\n                              className={`font-semibold ${\n                                isActive ? 'text-otw-gold' : 'text-gray-400'\n                              }`}\n                            >\n                              {step.title}\n                            </h3>\n                            <p className=\"text-sm text-gray-500\">{step.description}</p>\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/app/volunteers/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Select' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SelectContent' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SelectItem' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SelectTrigger' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":58},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SelectValue' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":71},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Badge' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MapPin' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":169,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":169,"endColumn":19},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":328,"column":19,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[12170,12373],"text":"\n                  &quot;Volunteering with OTW has been incredibly rewarding. I love being able to help\n                  families in my community while meeting amazing people along the way.\"\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[12170,12373],"text":"\n                  &ldquo;Volunteering with OTW has been incredibly rewarding. I love being able to help\n                  families in my community while meeting amazing people along the way.\"\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[12170,12373],"text":"\n                  &#34;Volunteering with OTW has been incredibly rewarding. I love being able to help\n                  families in my community while meeting amazing people along the way.\"\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[12170,12373],"text":"\n                  &rdquo;Volunteering with OTW has been incredibly rewarding. I love being able to help\n                  families in my community while meeting amazing people along the way.\"\n                "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":329,"column":87,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[12170,12373],"text":"\n                  \"Volunteering with OTW has been incredibly rewarding. I love being able to help\n                  families in my community while meeting amazing people along the way.&quot;\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[12170,12373],"text":"\n                  \"Volunteering with OTW has been incredibly rewarding. I love being able to help\n                  families in my community while meeting amazing people along the way.&ldquo;\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[12170,12373],"text":"\n                  \"Volunteering with OTW has been incredibly rewarding. I love being able to help\n                  families in my community while meeting amazing people along the way.&#34;\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[12170,12373],"text":"\n                  \"Volunteering with OTW has been incredibly rewarding. I love being able to help\n                  families in my community while meeting amazing people along the way.&rdquo;\n                "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":346,"column":19,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[13165,13370],"text":"\n                  &quot;The events team is like a family. We work together to create memorable experiences\n                  for the community, and I've gained valuable event planning skills.\"\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[13165,13370],"text":"\n                  &ldquo;The events team is like a family. We work together to create memorable experiences\n                  for the community, and I've gained valuable event planning skills.\"\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[13165,13370],"text":"\n                  &#34;The events team is like a family. We work together to create memorable experiences\n                  for the community, and I've gained valuable event planning skills.\"\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[13165,13370],"text":"\n                  &rdquo;The events team is like a family. We work together to create memorable experiences\n                  for the community, and I've gained valuable event planning skills.\"\n                "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":347,"column":43,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[13165,13370],"text":"\n                  \"The events team is like a family. We work together to create memorable experiences\n                  for the community, and I&apos;ve gained valuable event planning skills.\"\n                "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[13165,13370],"text":"\n                  \"The events team is like a family. We work together to create memorable experiences\n                  for the community, and I&lsquo;ve gained valuable event planning skills.\"\n                "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[13165,13370],"text":"\n                  \"The events team is like a family. We work together to create memorable experiences\n                  for the community, and I&#39;ve gained valuable event planning skills.\"\n                "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[13165,13370],"text":"\n                  \"The events team is like a family. We work together to create memorable experiences\n                  for the community, and I&rsquo;ve gained valuable event planning skills.\"\n                "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":347,"column":85,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[13165,13370],"text":"\n                  \"The events team is like a family. We work together to create memorable experiences\n                  for the community, and I've gained valuable event planning skills.&quot;\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[13165,13370],"text":"\n                  \"The events team is like a family. We work together to create memorable experiences\n                  for the community, and I've gained valuable event planning skills.&ldquo;\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[13165,13370],"text":"\n                  \"The events team is like a family. We work together to create memorable experiences\n                  for the community, and I've gained valuable event planning skills.&#34;\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[13165,13370],"text":"\n                  \"The events team is like a family. We work together to create memorable experiences\n                  for the community, and I've gained valuable event planning skills.&rdquo;\n                "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":364,"column":19,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[14165,14374],"text":"\n                  &quot;Helping customers solve their problems and seeing their satisfaction makes every\n                  shift worthwhile. The flexible schedule works perfectly with my studies.\"\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[14165,14374],"text":"\n                  &ldquo;Helping customers solve their problems and seeing their satisfaction makes every\n                  shift worthwhile. The flexible schedule works perfectly with my studies.\"\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[14165,14374],"text":"\n                  &#34;Helping customers solve their problems and seeing their satisfaction makes every\n                  shift worthwhile. The flexible schedule works perfectly with my studies.\"\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[14165,14374],"text":"\n                  &rdquo;Helping customers solve their problems and seeing their satisfaction makes every\n                  shift worthwhile. The flexible schedule works perfectly with my studies.\"\n                "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":365,"column":91,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[14165,14374],"text":"\n                  \"Helping customers solve their problems and seeing their satisfaction makes every\n                  shift worthwhile. The flexible schedule works perfectly with my studies.&quot;\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[14165,14374],"text":"\n                  \"Helping customers solve their problems and seeing their satisfaction makes every\n                  shift worthwhile. The flexible schedule works perfectly with my studies.&ldquo;\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[14165,14374],"text":"\n                  \"Helping customers solve their problems and seeing their satisfaction makes every\n                  shift worthwhile. The flexible schedule works perfectly with my studies.&#34;\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[14165,14374],"text":"\n                  \"Helping customers solve their problems and seeing their satisfaction makes every\n                  shift worthwhile. The flexible schedule works perfectly with my studies.&rdquo;\n                "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { Button } from '../../components/ui/button';\nimport { Input } from '../../components/ui/input';\nimport { Label } from '../../components/ui/label';\nimport { Textarea } from '../../components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../../components/ui/select';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../components/ui/card';\nimport { Badge } from '../../components/ui/badge';\nimport {\n  Heart,\n  Users,\n  Clock,\n  MapPin,\n  Star,\n  CheckCircle,\n  Phone,\n  Mail,\n  Calendar,\n  Award,\n  Truck,\n  Package,\n  Coffee,\n} from 'lucide-react';\nimport { toast } from '../../components/ui/use-toast';\n\ninterface VolunteerApplication {\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  address: string;\n  dateOfBirth: string;\n  availability: string[];\n  interests: string[];\n  experience: string;\n  motivation: string;\n  emergencyContact: string;\n  emergencyPhone: string;\n}\n\nconst VOLUNTEER_OPPORTUNITIES = [\n  {\n    id: 'delivery',\n    title: 'Delivery Volunteer',\n    description: 'Help deliver food and groceries to community members',\n    icon: Truck,\n    timeCommitment: '4-8 hours/week',\n    requirements: ['Valid driver\\'s license', 'Reliable vehicle', 'Background check'],\n    benefits: ['Flexible schedule', 'Mileage reimbursement', 'Community impact'],\n  },\n  {\n    id: 'packing',\n    title: 'Order Packing',\n    description: 'Assist with organizing and packing orders at our fulfillment center',\n    icon: Package,\n    timeCommitment: '3-6 hours/week',\n    requirements: ['Ability to lift 25lbs', 'Attention to detail', 'Team player'],\n    benefits: ['Indoor work', 'Team environment', 'Skill development'],\n  },\n  {\n    id: 'events',\n    title: 'Event Support',\n    description: 'Help with community events, fundraisers, and special initiatives',\n    icon: Calendar,\n    timeCommitment: '2-4 hours/event',\n    requirements: ['Good communication skills', 'Enthusiasm', 'Reliability'],\n    benefits: ['Networking opportunities', 'Event planning experience', 'Fun environment'],\n  },\n  {\n    id: 'customer-service',\n    title: 'Customer Support',\n    description: 'Provide assistance to customers via phone, chat, or in-person',\n    icon: Coffee,\n    timeCommitment: '4-6 hours/week',\n    requirements: ['Excellent communication', 'Problem-solving skills', 'Patience'],\n    benefits: ['Customer service experience', 'Flexible remote options', 'Training provided'],\n  },\n];\n\nconst AVAILABILITY_OPTIONS = [\n  'Monday Morning',\n  'Monday Afternoon',\n  'Monday Evening',\n  'Tuesday Morning',\n  'Tuesday Afternoon',\n  'Tuesday Evening',\n  'Wednesday Morning',\n  'Wednesday Afternoon',\n  'Wednesday Evening',\n  'Thursday Morning',\n  'Thursday Afternoon',\n  'Thursday Evening',\n  'Friday Morning',\n  'Friday Afternoon',\n  'Friday Evening',\n  'Saturday Morning',\n  'Saturday Afternoon',\n  'Saturday Evening',\n  'Sunday Morning',\n  'Sunday Afternoon',\n  'Sunday Evening',\n];\n\nexport default function VolunteersPage() {\n  const [application, setApplication] = useState<VolunteerApplication>({\n    firstName: '',\n    lastName: '',\n    email: '',\n    phone: '',\n    address: '',\n    dateOfBirth: '',\n    availability: [],\n    interests: [],\n    experience: '',\n    motivation: '',\n    emergencyContact: '',\n    emergencyPhone: '',\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [showApplication, setShowApplication] = useState(false);\n\n  const handleInputChange = (field: keyof VolunteerApplication, value: string) => {\n    setApplication(prev => ({\n      ...prev,\n      [field]: value,\n    }));\n  };\n\n  const handleArrayChange = (field: 'availability' | 'interests', value: string, checked: boolean) => {\n    setApplication(prev => ({\n      ...prev,\n      [field]: checked\n        ? [...prev[field], value]\n        : prev[field].filter(item => item !== value),\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      toast({\n        title: 'Application Submitted!',\n        description: \"Thank you for your interest in volunteering. We'll be in touch soon!\",\n      });\n\n      // Reset form\n      setApplication({\n        firstName: '',\n        lastName: '',\n        email: '',\n        phone: '',\n        address: '',\n        dateOfBirth: '',\n        availability: [],\n        interests: [],\n        experience: '',\n        motivation: '',\n        emergencyContact: '',\n        emergencyPhone: '',\n      });\n      setShowApplication(false);\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to submit application. Please try again.',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-otw-black via-otw-black-800 to-otw-black-900\">\n      {/* Hero Section */}\n      <div className=\"relative py-20 px-4\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-otw-gold/10 to-transparent\" />\n        <div className=\"container mx-auto text-center relative z-10\">\n          <div className=\"flex justify-center mb-6\">\n            <div className=\"p-4 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-full\">\n              <Heart className=\"w-12 h-12 text-black\" />\n            </div>\n          </div>\n          <h1 className=\"text-5xl md:text-6xl font-bold text-white mb-6\">\n            Volunteer with <span className=\"text-otw-gold\">OTW</span>\n          </h1>\n          <p className=\"text-xl text-gray-300 mb-8 max-w-3xl mx-auto\">\n            Join our community of volunteers and make a real difference in Fort Wayne.\n            Help us deliver food, support events, and build stronger communities together.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button\n              onClick={() => setShowApplication(true)}\n              className=\"bg-gradient-to-r from-otw-gold to-yellow-500 text-black font-semibold px-8 py-4 rounded-full text-lg hover:shadow-lg transition-all duration-300\"\n            >\n              Apply to Volunteer\n            </Button>\n            <Button\n              variant=\"outline\"\n              className=\"border-2 border-otw-gold text-otw-gold hover:bg-otw-gold hover:text-black px-8 py-4 rounded-full text-lg transition-all duration-300\"\n            >\n              Learn More\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Stats Section */}\n      <div className=\"py-16 px-4\">\n        <div className=\"container mx-auto\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n            <div className=\"text-center\">\n              <div className=\"text-4xl font-bold text-otw-gold mb-2\">500+</div>\n              <div className=\"text-gray-300\">Active Volunteers</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-4xl font-bold text-otw-gold mb-2\">10K+</div>\n              <div className=\"text-gray-300\">Deliveries Made</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-4xl font-bold text-otw-gold mb-2\">50+</div>\n              <div className=\"text-gray-300\">Events Supported</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-4xl font-bold text-otw-gold mb-2\">95%</div>\n              <div className=\"text-gray-300\">Volunteer Satisfaction</div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Volunteer Opportunities */}\n      <div className=\"py-16 px-4\">\n        <div className=\"container mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-4xl font-bold text-white mb-4\">\n              Volunteer <span className=\"text-otw-gold\">Opportunities</span>\n            </h2>\n            <p className=\"text-xl text-gray-300 max-w-3xl mx-auto\">\n              Choose from various volunteer roles that match your interests, skills, and availability\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n            {VOLUNTEER_OPPORTUNITIES.map((opportunity) => {\n              const Icon = opportunity.icon;\n              return (\n                <Card key={opportunity.id} className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20 hover:border-otw-gold/40 transition-all duration-300\">\n                  <CardHeader>\n                    <div className=\"flex items-center gap-4 mb-4\">\n                      <div className=\"p-3 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-full\">\n                        <Icon className=\"w-6 h-6 text-black\" />\n                      </div>\n                      <div>\n                        <CardTitle className=\"text-white text-xl\">{opportunity.title}</CardTitle>\n                        <div className=\"flex items-center gap-2 mt-1\">\n                          <Clock className=\"w-4 h-4 text-gray-400\" />\n                          <span className=\"text-gray-400 text-sm\">{opportunity.timeCommitment}</span>\n                        </div>\n                      </div>\n                    </div>\n                    <CardDescription className=\"text-gray-300 text-base\">\n                      {opportunity.description}\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div>\n                        <h4 className=\"text-white font-semibold mb-2\">Requirements:</h4>\n                        <ul className=\"space-y-1\">\n                          {opportunity.requirements.map((req, index) => (\n                            <li key={index} className=\"flex items-center gap-2 text-gray-300 text-sm\">\n                              <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                              {req}\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                      <div>\n                        <h4 className=\"text-white font-semibold mb-2\">Benefits:</h4>\n                        <ul className=\"space-y-1\">\n                          {opportunity.benefits.map((benefit, index) => (\n                            <li key={index} className=\"flex items-center gap-2 text-gray-300 text-sm\">\n                              <Star className=\"w-4 h-4 text-otw-gold\" />\n                              {benefit}\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n\n      {/* Testimonials */}\n      <div className=\"py-16 px-4 bg-gradient-to-r from-otw-gold/5 to-transparent\">\n        <div className=\"container mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-4xl font-bold text-white mb-4\">\n              Volunteer <span className=\"text-otw-gold\">Stories</span>\n            </h2>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <Card className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center gap-4 mb-4\">\n                  <div className=\"w-12 h-12 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-full flex items-center justify-center\">\n                    <Users className=\"w-6 h-6 text-black\" />\n                  </div>\n                  <div>\n                    <h4 className=\"text-white font-semibold\">Sarah M.</h4>\n                    <p className=\"text-gray-400 text-sm\">Delivery Volunteer</p>\n                  </div>\n                </div>\n                <p className=\"text-gray-300 italic\">\n                  \"Volunteering with OTW has been incredibly rewarding. I love being able to help\n                  families in my community while meeting amazing people along the way.\"\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center gap-4 mb-4\">\n                  <div className=\"w-12 h-12 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-full flex items-center justify-center\">\n                    <Award className=\"w-6 h-6 text-black\" />\n                  </div>\n                  <div>\n                    <h4 className=\"text-white font-semibold\">Mike R.</h4>\n                    <p className=\"text-gray-400 text-sm\">Event Support</p>\n                  </div>\n                </div>\n                <p className=\"text-gray-300 italic\">\n                  \"The events team is like a family. We work together to create memorable experiences\n                  for the community, and I've gained valuable event planning skills.\"\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-otw-black-800/80 to-otw-black-900/80 backdrop-blur-sm border border-otw-gold/20\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center gap-4 mb-4\">\n                  <div className=\"w-12 h-12 bg-gradient-to-r from-otw-gold to-yellow-500 rounded-full flex items-center justify-center\">\n                    <Heart className=\"w-6 h-6 text-black\" />\n                  </div>\n                  <div>\n                    <h4 className=\"text-white font-semibold\">Lisa K.</h4>\n                    <p className=\"text-gray-400 text-sm\">Customer Support</p>\n                  </div>\n                </div>\n                <p className=\"text-gray-300 italic\">\n                  \"Helping customers solve their problems and seeing their satisfaction makes every\n                  shift worthwhile. The flexible schedule works perfectly with my studies.\"\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* Application Modal */}\n      {showApplication && (\n        <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4\">\n          <div className=\"bg-gradient-to-br from-otw-black-800 to-otw-black-900 rounded-2xl border border-otw-gold/20 max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n            <div className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h2 className=\"text-2xl font-bold text-white\">Volunteer Application</h2>\n                <Button\n                  variant=\"ghost\"\n                  onClick={() => setShowApplication(false)}\n                  className=\"text-gray-400 hover:text-white\"\n                >\n                  ×\n                </Button>\n              </div>\n\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                {/* Personal Information */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"firstName\" className=\"text-white\">First Name *</Label>\n                    <Input\n                      id=\"firstName\"\n                      value={application.firstName}\n                      onChange={(e) => handleInputChange('firstName', e.target.value)}\n                      required\n                      className=\"bg-gray-800/50 border-gray-700 text-white\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"lastName\" className=\"text-white\">Last Name *</Label>\n                    <Input\n                      id=\"lastName\"\n                      value={application.lastName}\n                      onChange={(e) => handleInputChange('lastName', e.target.value)}\n                      required\n                      className=\"bg-gray-800/50 border-gray-700 text-white\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"email\" className=\"text-white\">Email *</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={application.email}\n                      onChange={(e) => handleInputChange('email', e.target.value)}\n                      required\n                      className=\"bg-gray-800/50 border-gray-700 text-white\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"phone\" className=\"text-white\">Phone *</Label>\n                    <Input\n                      id=\"phone\"\n                      type=\"tel\"\n                      value={application.phone}\n                      onChange={(e) => handleInputChange('phone', e.target.value)}\n                      required\n                      className=\"bg-gray-800/50 border-gray-700 text-white\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"address\" className=\"text-white\">Address *</Label>\n                  <Input\n                    id=\"address\"\n                    value={application.address}\n                    onChange={(e) => handleInputChange('address', e.target.value)}\n                    required\n                    className=\"bg-gray-800/50 border-gray-700 text-white\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"dateOfBirth\" className=\"text-white\">Date of Birth *</Label>\n                  <Input\n                    id=\"dateOfBirth\"\n                    type=\"date\"\n                    value={application.dateOfBirth}\n                    onChange={(e) => handleInputChange('dateOfBirth', e.target.value)}\n                    required\n                    className=\"bg-gray-800/50 border-gray-700 text-white\"\n                  />\n                </div>\n\n                {/* Availability */}\n                <div>\n                  <Label className=\"text-white mb-3 block\">Availability (select all that apply)</Label>\n                  <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2 max-h-40 overflow-y-auto\">\n                    {AVAILABILITY_OPTIONS.map((time) => (\n                      <label key={time} className=\"flex items-center gap-2 text-gray-300 text-sm\">\n                        <input\n                          type=\"checkbox\"\n                          checked={application.availability.includes(time)}\n                          onChange={(e) => handleArrayChange('availability', time, e.target.checked)}\n                          className=\"rounded border-gray-700 bg-gray-800/50\"\n                        />\n                        {time}\n                      </label>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Interests */}\n                <div>\n                  <Label className=\"text-white mb-3 block\">Areas of Interest (select all that apply)</Label>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                    {VOLUNTEER_OPPORTUNITIES.map((opportunity) => (\n                      <label key={opportunity.id} className=\"flex items-center gap-2 text-gray-300\">\n                        <input\n                          type=\"checkbox\"\n                          checked={application.interests.includes(opportunity.id)}\n                          onChange={(e) => handleArrayChange('interests', opportunity.id, e.target.checked)}\n                          className=\"rounded border-gray-700 bg-gray-800/50\"\n                        />\n                        {opportunity.title}\n                      </label>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Experience */}\n                <div>\n                  <Label htmlFor=\"experience\" className=\"text-white\">Previous Volunteer Experience</Label>\n                  <Textarea\n                    id=\"experience\"\n                    value={application.experience}\n                    onChange={(e) => handleInputChange('experience', e.target.value)}\n                    placeholder=\"Tell us about any previous volunteer work or relevant experience...\"\n                    className=\"bg-gray-800/50 border-gray-700 text-white\"\n                    rows={3}\n                  />\n                </div>\n\n                {/* Motivation */}\n                <div>\n                  <Label htmlFor=\"motivation\" className=\"text-white\">Why do you want to volunteer with OTW? *</Label>\n                  <Textarea\n                    id=\"motivation\"\n                    value={application.motivation}\n                    onChange={(e) => handleInputChange('motivation', e.target.value)}\n                    required\n                    placeholder=\"Share your motivation for volunteering with us...\"\n                    className=\"bg-gray-800/50 border-gray-700 text-white\"\n                    rows={3}\n                  />\n                </div>\n\n                {/* Emergency Contact */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"emergencyContact\" className=\"text-white\">Emergency Contact Name *</Label>\n                    <Input\n                      id=\"emergencyContact\"\n                      value={application.emergencyContact}\n                      onChange={(e) => handleInputChange('emergencyContact', e.target.value)}\n                      required\n                      className=\"bg-gray-800/50 border-gray-700 text-white\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"emergencyPhone\" className=\"text-white\">Emergency Contact Phone *</Label>\n                    <Input\n                      id=\"emergencyPhone\"\n                      type=\"tel\"\n                      value={application.emergencyPhone}\n                      onChange={(e) => handleInputChange('emergencyPhone', e.target.value)}\n                      required\n                      className=\"bg-gray-800/50 border-gray-700 text-white\"\n                    />\n                  </div>\n                </div>\n\n                {/* Submit Button */}\n                <div className=\"flex gap-4 pt-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setShowApplication(false)}\n                    className=\"flex-1 border-gray-700 text-gray-300 hover:bg-gray-800\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                    className=\"flex-1 bg-gradient-to-r from-otw-gold to-yellow-500 text-black font-semibold hover:shadow-lg transition-all duration-300\"\n                  >\n                    {isSubmitting ? 'Submitting...' : 'Submit Application'}\n                  </Button>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Contact Section */}\n      <div className=\"py-16 px-4\">\n        <div className=\"container mx-auto text-center\">\n          <h2 className=\"text-3xl font-bold text-white mb-4\">\n            Questions About Volunteering?\n          </h2>\n          <p className=\"text-gray-300 mb-8 max-w-2xl mx-auto\">\n            Our volunteer coordinator is here to help answer any questions you might have\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <div className=\"flex items-center gap-2 text-gray-300\">\n              <Phone className=\"w-5 h-5 text-otw-gold\" />\n              <span>(260) 555-VOLUNTEER</span>\n            </div>\n            <div className=\"flex items-center gap-2 text-gray-300\">\n              <Mail className=\"w-5 h-5 text-otw-gold\" />\n              <span>volunteers@otw.com</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/AddressSearch.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":99,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2928,2931],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2928,2931],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":143,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":143,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4208,4211],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4208,4211],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useRef, useEffect } from 'react';\nimport { Wrapper } from '@googlemaps/react-wrapper';\n\ninterface PlaceDetails {\n  formatted_address: string;\n  place_id: string;\n  geometry: {\n    location: {\n      lat: () => number;\n      lng: () => number;\n    };\n  };\n  address_components: google.maps.GeocoderAddressComponent[];\n  name?: string;\n}\n\ntype ThemeVariant = 'default' | 'modern' | 'minimal' | 'glassmorphism' | 'dark';\ntype SizeVariant = 'sm' | 'md' | 'lg' | 'xl';\n\ninterface StyleConfig {\n  container?: string;\n  input?: string;\n  loading?: string;\n  error?: string;\n  icon?: string;\n}\n\ninterface AddressSearchProps {\n  onPlaceSelect: (place: PlaceDetails) => void;\n  placeholder?: string;\n  className?: string;\n  apiKey: string;\n  theme?: ThemeVariant;\n  size?: SizeVariant;\n  disabled?: boolean;\n  showIcon?: boolean;\n  customStyles?: StyleConfig;\n  borderRadius?: 'none' | 'sm' | 'md' | 'lg' | 'xl' | 'full';\n  focusColor?: string;\n  errorMessage?: string;\n  loadingText?: string;\n}\n\n// Theme configurations\nconst getThemeStyles = (theme: ThemeVariant = 'default', focusColor?: string): string => {\n  const themes = {\n    default: 'border-gray-300 bg-white text-gray-900 focus:ring-blue-500 focus:border-blue-500',\n    modern: 'border-gray-200 bg-gray-50 text-gray-900 focus:ring-indigo-500 focus:border-indigo-500 shadow-sm',\n    minimal: 'border-gray-200 bg-transparent text-gray-900 focus:ring-gray-400 focus:border-gray-400 border-b-2 border-t-0 border-l-0 border-r-0 rounded-none',\n    glassmorphism: 'border-white/20 bg-white/10 backdrop-blur-md text-gray-900 focus:ring-white/30 focus:border-white/30 shadow-lg',\n    dark: 'border-gray-600 bg-gray-800 text-white focus:ring-gray-400 focus:border-gray-400 placeholder-gray-400',\n  };\n\n  let baseStyle = themes[theme];\n\n  if (focusColor) {\n    baseStyle = baseStyle.replace(/focus:ring-\\w+-\\d+/, `focus:ring-[${focusColor}]`);\n    baseStyle = baseStyle.replace(/focus:border-\\w+-\\d+/, `focus:border-[${focusColor}]`);\n  }\n\n  return baseStyle;\n};\n\nconst getSizeStyles = (size: SizeVariant = 'md'): string => {\n  const sizes = {\n    sm: 'px-3 py-1.5 text-sm',\n    md: 'px-4 py-2 text-base',\n    lg: 'px-5 py-3 text-lg',\n    xl: 'px-6 py-4 text-xl',\n  };\n  return sizes[size];\n};\n\nconst getBorderRadiusStyles = (borderRadius: AddressSearchProps['borderRadius'] = 'md'): string => {\n  const radiusMap = {\n    none: 'rounded-none',\n    sm: 'rounded-sm',\n    md: 'rounded-md',\n    lg: 'rounded-lg',\n    xl: 'rounded-xl',\n    full: 'rounded-full',\n  };\n  return radiusMap[borderRadius];\n};\n\nconst AutocompleteInput: React.FC<Omit<AddressSearchProps, 'apiKey'>> = ({\n  onPlaceSelect,\n  placeholder = 'Enter an address...',\n  className = '',\n  theme = 'default',\n  size = 'md',\n  disabled = false,\n  showIcon = true,\n  customStyles,\n  borderRadius = 'md',\n  focusColor,\n}) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const autocompleteRef = useRef<any>(null);\n\n  useEffect(() => {\n    if (!containerRef.current || !window.google) {return;}\n\n    // Initialize the new PlaceAutocompleteElement\n    const autocompleteElement = new window.google.maps.places.PlaceAutocompleteElement({\n      types: ['address'],\n      fields: [\n        'formattedAddress',\n        'id',\n        'location',\n        'addressComponents',\n        'displayName',\n      ],\n    });\n\n    // Configure the autocomplete element\n    autocompleteElement.placeholder = placeholder;\n    if (disabled) {\n      autocompleteElement.setAttribute('disabled', 'true');\n    }\n\n    // Apply custom styling to the autocomplete element\n    const inputStyles = [\n      'w-full',\n      'outline-none',\n      'transition-all duration-200',\n      'focus:ring-2',\n      getSizeStyles(size),\n      getThemeStyles(theme, focusColor),\n      getBorderRadiusStyles(borderRadius),\n      disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-text',\n      customStyles?.input || '',\n      className,\n      showIcon ? 'pl-10' : '',\n    ].filter(Boolean).join(' ');\n\n    autocompleteElement.className = inputStyles;\n\n    // Add the element to the container\n    containerRef.current.appendChild(autocompleteElement);\n\n    // Add place changed listener\n    const handlePlaceSelect = (event: any) => {\n      const place = event.place;\n\n      if (place && place.location) {\n        const placeDetails: PlaceDetails = {\n          formatted_address: place.formattedAddress || '',\n          place_id: place.id || '',\n          geometry: {\n            location: {\n              lat: () => place.location.lat(),\n              lng: () => place.location.lng(),\n            },\n          },\n          address_components: place.addressComponents || [],\n          name: place.displayName,\n        };\n\n        onPlaceSelect(placeDetails);\n      }\n    };\n\n    autocompleteElement.addEventListener('gmp-placeselect', handlePlaceSelect);\n\n    // Store reference for cleanup\n    autocompleteRef.current = autocompleteElement;\n\n    // Cleanup\n    return () => {\n      if (autocompleteElement) {\n        autocompleteElement.removeEventListener('gmp-placeselect', handlePlaceSelect);\n        if (autocompleteElement.parentNode) {\n          autocompleteElement.parentNode.removeChild(autocompleteElement);\n        }\n      }\n    };\n  }, [onPlaceSelect, placeholder, disabled, theme, size, borderRadius, focusColor, className, customStyles, showIcon]);\n\n  // Location icon SVG\n  const LocationIcon = () => (\n    <svg\n      className={`w-5 h-5 ${theme === 'dark' ? 'text-gray-400' : 'text-gray-500'} ${customStyles?.icon || ''}`}\n      fill=\"none\"\n      stroke=\"currentColor\"\n      viewBox=\"0 0 24 24\"\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth={2}\n        d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\"\n      />\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth={2}\n        d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\"\n      />\n    </svg>\n  );\n\n  return (\n    <div className={`relative ${customStyles?.container || ''}`}>\n      {showIcon && (\n        <div className={'absolute left-3 top-1/2 transform -translate-y-1/2 pointer-events-none z-10'}>\n          <LocationIcon />\n        </div>\n      )}\n      <div ref={containerRef} className=\"w-full\" />\n    </div>\n  );\n};\n\nconst AddressSearch: React.FC<AddressSearchProps> = ({\n  onPlaceSelect,\n  placeholder,\n  className,\n  apiKey,\n  theme = 'default',\n  size = 'md',\n  disabled = false,\n  showIcon = true,\n  customStyles,\n  borderRadius = 'md',\n  focusColor,\n  errorMessage,\n  loadingText = 'Loading Google Maps...',\n}) => {\n  const render = (status: string) => {\n    if (status === 'LOADING') {\n      const loadingStyles = [\n        'flex items-center justify-center',\n        getSizeStyles(size),\n        getThemeStyles(theme),\n        getBorderRadiusStyles(borderRadius),\n        'border',\n        customStyles?.loading || '',\n      ].filter(Boolean).join(' ');\n\n      return (\n        <div className={loadingStyles}>\n          <div className={`animate-spin rounded-full h-5 w-5 border-b-2 ${\n            theme === 'dark' ? 'border-white' : 'border-blue-500'\n          }`}></div>\n          <span className={`ml-2 ${\n            theme === 'dark' ? 'text-gray-300' : 'text-gray-600'\n          }`}>{loadingText}</span>\n        </div>\n      );\n    }\n\n    if (status === 'FAILURE') {\n      const errorStyles = [\n        getSizeStyles(size),\n        getBorderRadiusStyles(borderRadius),\n        theme === 'dark'\n          ? 'bg-red-900/20 border-red-500/30 text-red-300'\n          : 'bg-red-50 border-red-200 text-red-600',\n        'border',\n        customStyles?.error || '',\n      ].filter(Boolean).join(' ');\n\n      return (\n        <div className={errorStyles}>\n          <p>{errorMessage || 'Failed to load Google Maps. Please check your API key.'}</p>\n        </div>\n      );\n    }\n\n    return (\n      <AutocompleteInput\n        onPlaceSelect={onPlaceSelect}\n        placeholder={placeholder}\n        className={className}\n        theme={theme}\n        size={size}\n        disabled={disabled}\n        showIcon={showIcon}\n        customStyles={customStyles}\n        borderRadius={borderRadius}\n        focusColor={focusColor}\n      />\n    );\n  };\n\n  return (\n    <Wrapper\n      apiKey={apiKey}\n      libraries={['places']}\n      render={render}\n    />\n  );\n};\n\nexport default AddressSearch;\nexport type { PlaceDetails, AddressSearchProps };","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/AddressSearchExample.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/AddressSearchStylesExample.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/AnimatedSection.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/Button.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/Button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/EnhancedButton.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/EnhancedButton.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":67,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2074,2077],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2074,2077],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, PropsWithChildren } from 'react';\nimport Link from 'next/link';\n\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  href?: string;\n  variant?: 'primary' | 'secondary';\n  disabled?: boolean;\n  fullWidth?: boolean;\n  glow?: boolean;\n}\n\nexport default function EnhancedButton({\n  href,\n  variant = 'primary',\n  children,\n  className = '',\n  fullWidth = false,\n  glow = true,\n  ...props\n}: PropsWithChildren<ButtonProps>) {\n  const [isHovered, setIsHovered] = useState(false);\n\n  const baseClasses =\n    'relative font-bold py-3 px-8 rounded-md transition-all duration-300 inline-flex items-center justify-center focus:outline-none focus:ring-2 focus:ring-offset-2 overflow-hidden';\n\n  const variantClasses = {\n    primary: `\n      bg-[#C1272D] text-white hover:bg-[#D1373D] focus:ring-[#C1272D]\n      ${glow ? 'shadow-lg shadow-[#FFD700]/50 hover:shadow-[#FFD700]/70' : ''}\n      transform hover:-translate-y-1\n    `,\n    secondary: `\n      bg-[#FFD700] text-black hover:bg-[#FFDF20] focus:ring-[#FFD700]\n      ${glow ? 'shadow-lg shadow-[#C1272D]/50 hover:shadow-[#C1272D]/70' : ''}\n      transform hover:-translate-y-1\n    `,\n  };\n\n  const widthClass = fullWidth ? 'w-full' : '';\n  const buttonClasses = `${baseClasses} ${variantClasses[variant]} ${widthClass} ${className}`;\n\n  // Add subtle particle effect on hover\n  const renderParticles = () => {\n    if (!isHovered) {return null;}\n\n    return (\n      <span className=\"absolute inset-0 pointer-events-none\">\n        {variant === 'primary' && (\n          <span className=\"absolute top-0 left-1/2 w-1 h-1 rounded-full bg-[#FFD700] animate-ping\"></span>\n        )}\n        {variant === 'secondary' && (\n          <span className=\"absolute top-0 left-1/2 w-1 h-1 rounded-full bg-[#C1272D] animate-ping\"></span>\n        )}\n      </span>\n    );\n  };\n\n  if (href) {\n    return (\n      <Link\n        href={href}\n        className={buttonClasses}\n        onMouseEnter={() => setIsHovered(true)}\n        onMouseLeave={() => setIsHovered(false)}\n        {...(props as any)} // Cast props to any to avoid TypeScript errors with event handlers\n      >\n        {renderParticles()}\n        {children}\n      </Link>\n    );\n  }\n\n  return (\n    <button\n      className={buttonClasses}\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n      {...props}\n    >\n      {renderParticles()}\n      {children}\n    </button>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/Footer.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":69,"column":23,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[2051,2101],"text":"\n                Broski&apos;s Kitchen\n                "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[2051,2101],"text":"\n                Broski&lsquo;s Kitchen\n                "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[2051,2101],"text":"\n                Broski&#39;s Kitchen\n                "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[2051,2101],"text":"\n                Broski&rsquo;s Kitchen\n                "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\n// Footer navigation sections\n// This is a commented out section that was causing TypeScript errors\n// Keeping it as reference for future implementation\n/*\nconst footerSections = [\n  {\n    title: \"Services\",\n    links: [\n      { name: \"Food Delivery\", path: \"/broskis\" },\n      { name: \"Grocery Shop & Drop\", path: \"/otw\" },\n      { name: \"Local Rides & Moving\", path: \"/otw\" },\n      { name: \"Tier Membership\", path: \"/tier\" },\n    ],\n  },\n  {\n    title: \"Company\",\n    links: [\n      { name: \"About Us\", path: \"/about\" },\n      { name: \"Partners\", path: \"/partners\" },\n      { name: \"Volunteers\", path: \"/volunteers\" },\n      { name: \"Hall of Hustle\", path: \"/hall-of-hustle\" },\n    ],\n  },\n  {\n    title: \"Support\",\n    links: [\n      { name: \"Help Center\", path: \"/help\" },\n\n      { name: \"Contact Us\", path: \"/contact\" },\n      { name: \"Emergency\", path: \"/emergency\" },\n    ],\n  },\n  {\n    title: \"Legal\",\n    links: [\n      { name: \"Privacy Policy\", path: \"/privacy\" },\n      { name: \"Terms of Service\", path: \"/terms\" },\n      { name: \"Cookie Policy\", path: \"/cookies\" },\n      { name: \"Accessibility\", path: \"/accessibility\" },\n    ],\n  },\n];\n*/\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-black border-t border-white/10\">\n      <div className=\"max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n          <div>\n            <h3 className=\"text-white text-lg font-semibold mb-4\">About OTW</h3>\n            <p className=\"text-gray-400\">\n              Delivering flavors and motion to your doorstep. Fast, reliable,\n              and community-driven service.\n            </p>\n          </div>\n          <div>\n            <h3 className=\"text-white text-lg font-semibold mb-4\">\n              Quick Links\n            </h3>\n            <ul className=\"space-y-2\">\n              <li>\n                <a\n                  href=\"/restaurants\"\n                className=\"text-gray-400 hover:text-white transition-colors\"\n              >\n                Broski's Kitchen\n                </a>\n              </li>\n              <li>\n                <a\n                  href=\"/otw\"\n                  className=\"text-gray-400 hover:text-white transition-colors\"\n                >\n                  OTW Service\n                </a>\n              </li>\n            </ul>\n          </div>\n          <div>\n            <h3 className=\"text-white text-lg font-semibold mb-4\">Contact</h3>\n            <ul className=\"space-y-2\">\n              <li className=\"text-gray-400\">Email: support@otw.com</li>\n              <li className=\"text-gray-400\">Phone: (260) 555-OTWD</li>\n            </ul>\n          </div>\n        </div>\n        <div className=\"mt-8 pt-8 border-t border-white/10\">\n          <p className=\"text-gray-400 text-center\">\n            © {new Date().getFullYear()} OTW. All rights reserved.\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/Header.jsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":54,"column":23,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[2027,2075],"text":"\n                Broski&apos;s Kitchen\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[2027,2075],"text":"\n                Broski&lsquo;s Kitchen\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[2027,2075],"text":"\n                Broski&#39;s Kitchen\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[2027,2075],"text":"\n                Broski&rsquo;s Kitchen\n              "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":159,"column":21,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[6011,6055],"text":"\n              Broski&apos;s Kitchen\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[6011,6055],"text":"\n              Broski&lsquo;s Kitchen\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[6011,6055],"text":"\n              Broski&#39;s Kitchen\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[6011,6055],"text":"\n              Broski&rsquo;s Kitchen\n            "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport Button from './Button';\n\nexport default function Header() {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [scrolled, setScrolled] = useState(false);\n\n  // Handle scroll effect for header\n  useEffect(() => {\n    const handleScroll = () => {\n      if (window.scrollY > 10) {\n        setScrolled(true);\n      } else {\n        setScrolled(false);\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  return (\n    <header\n      className={`fixed top-0 left-0 right-0 z-50 transition-all duration-300 ${\n        scrolled ? 'bg-black/95 backdrop-blur-md shadow-lg' : 'bg-black/80'\n      } border-b border-primary-red/50`}\n    >\n      <div className=\"container mx-auto px-4 py-3 sm:py-4\">\n        <div className=\"flex justify-between items-center\">\n          <div className=\"flex items-center space-x-4 sm:space-x-8\">\n            <Link href=\"/\" className=\"flex items-center group\">\n              <div className=\"relative h-10 w-20 sm:h-12 sm:w-24 transition-transform duration-300 group-hover:scale-105\">\n                <Image\n                  src=\"/assets/logos/otw-logo-new-red-transparent.jpg\"\n                  alt=\"OTW Logo\"\n                  fill\n                  style={{ objectFit: 'contain' }}\n                  className=\"transition-opacity duration-300 hover:opacity-90\"\n                  priority\n                  sizes=\"(max-width: 640px) 80px, 96px\"\n                />\n              </div>\n              <span className=\"sr-only\">OTW — Thee Motion of the People</span>\n            </Link>\n            <nav className=\"hidden md:flex items-center space-x-4 lg:space-x-6\">\n              <Link\n                href=\"/broskis\"\n                className=\"text-white hover:text-accent-gold transition-colors duration-300 font-medium min-h-[44px] flex items-center\"\n              >\n                Broski's Kitchen\n              </Link>\n              <Link\n                href=\"/otw\"\n                className=\"text-white hover:text-accent-gold transition-colors duration-300 font-medium min-h-[44px] flex items-center\"\n              >\n                OTW Services\n              </Link>\n              <Link\n                href=\"/track\"\n                className=\"text-white hover:text-accent-gold transition-colors duration-300 font-medium min-h-[44px] flex items-center\"\n              >\n                Track Order\n              </Link>\n              <Link\n                href=\"/dashboard\"\n                className=\"text-white hover:text-accent-gold transition-colors duration-300 font-medium min-h-[44px] flex items-center\"\n              >\n                MyOTW\n              </Link>\n              <Link\n                href=\"/partners\"\n                className=\"text-white hover:text-accent-gold transition-colors duration-300 font-medium min-h-[44px] flex items-center\"\n              >\n                Partners\n              </Link>\n              <Link\n                href=\"/volunteers\"\n                className=\"text-white hover:text-accent-gold transition-colors duration-300 font-medium min-h-[44px] flex items-center\"\n              >\n                Volunteers\n              </Link>\n              <Link\n                href=\"/hall-of-hustle\"\n                className=\"text-white hover:text-accent-gold transition-colors duration-300 font-medium min-h-[44px] flex items-center\"\n              >\n                Hall of Hustle\n              </Link>\n            </nav>\n          </div>\n\n          <div className=\"hidden md:flex items-center space-x-4\">\n            <Button href=\"/signup\" variant=\"secondary\" className=\"py-2 px-4\">\n              Sign Up\n            </Button>\n            <Button href=\"/signin\" variant=\"primary\" className=\"py-2 px-4\">\n              Sign In\n            </Button>\n            <Button href=\"/tier\" variant=\"secondary\" className=\"py-2 px-4\">\n              Join Tier\n            </Button>\n          </div>\n\n          <button\n            className=\"md:hidden text-white p-2 rounded-md hover:bg-gray-800 transition-colors focus:outline-none focus:ring-2 focus:ring-primary-red min-h-[44px] min-w-[44px]\"\n            onClick={() => setIsMenuOpen(!isMenuOpen)}\n            aria-expanded={isMenuOpen}\n            aria-label=\"Toggle menu\"\n          >\n            {isMenuOpen ? (\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n                className=\"w-6 h-6\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M6 18L18 6M6 6l12 12\"\n                />\n              </svg>\n            ) : (\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n                className=\"w-6 h-6\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M4 6h16M4 12h16M4 18h16\"\n                />\n              </svg>\n            )}\n          </button>\n        </div>\n\n        {/* Mobile menu - improved animation and touch targets */}\n        <div\n          className={`md:hidden overflow-hidden transition-all duration-300 ease-in-out ${\n            isMenuOpen ? 'max-h-[600px] opacity-100 mt-4' : 'max-h-0 opacity-0'\n          }`}\n        >\n          <nav className=\"flex flex-col space-y-4 py-4\">\n            <Link\n              href=\"/broskis\"\n              className=\"text-white hover:text-accent-gold transition-colors px-2 py-2 rounded hover:bg-gray-800/50 min-h-[44px] flex items-center\"\n              onClick={() => setIsMenuOpen(false)}\n            >\n              Broski's Kitchen\n            </Link>\n            <Link\n              href=\"/otw\"\n              className=\"text-white hover:text-accent-gold transition-colors px-2 py-2 rounded hover:bg-gray-800/50 min-h-[44px] flex items-center\"\n              onClick={() => setIsMenuOpen(false)}\n            >\n              OTW Services\n            </Link>\n            <Link\n              href=\"/track\"\n              className=\"text-white hover:text-accent-gold transition-colors px-2 py-2 rounded hover:bg-gray-800/50 min-h-[44px] flex items-center\"\n              onClick={() => setIsMenuOpen(false)}\n            >\n              Track Order\n            </Link>\n            <Link\n              href=\"/dashboard\"\n              className=\"text-white hover:text-accent-gold transition-colors px-2 py-2 rounded hover:bg-gray-800/50 min-h-[44px] flex items-center\"\n              onClick={() => setIsMenuOpen(false)}\n            >\n              MyOTW\n            </Link>\n            <Link\n              href=\"/partners\"\n              className=\"text-white hover:text-accent-gold transition-colors px-2 py-2 rounded hover:bg-gray-800/50 min-h-[44px] flex items-center\"\n              onClick={() => setIsMenuOpen(false)}\n            >\n              Partners\n            </Link>\n            <Link\n              href=\"/volunteers\"\n              className=\"text-white hover:text-accent-gold transition-colors px-2 py-2 rounded hover:bg-gray-800/50 min-h-[44px] flex items-center\"\n              onClick={() => setIsMenuOpen(false)}\n            >\n              Volunteers\n            </Link>\n            <Link\n              href=\"/hall-of-hustle\"\n              className=\"text-white hover:text-accent-gold transition-colors px-2 py-2 rounded hover:bg-gray-800/50 min-h-[44px] flex items-center\"\n              onClick={() => setIsMenuOpen(false)}\n            >\n              Hall of Hustle\n            </Link>\n            <div className=\"flex flex-col space-y-3 pt-3 border-t border-gray-800\">\n              <Button\n                href=\"/signup\"\n                variant=\"secondary\"\n                fullWidth\n                className=\"text-center\"\n                onClick={() => setIsMenuOpen(false)}\n              >\n                Sign Up\n              </Button>\n              <Button\n                href=\"/signin\"\n                variant=\"primary\"\n                fullWidth\n                className=\"text-center\"\n                onClick={() => setIsMenuOpen(false)}\n              >\n                Sign In\n              </Button>\n              <Button\n                href=\"/tier\"\n                variant=\"secondary\"\n                fullWidth\n                className=\"text-center\"\n                onClick={() => setIsMenuOpen(false)}\n              >\n                Join Tier\n              </Button>\n            </div>\n          </nav>\n        </div>\n      </div>\n    </header>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/Navbar.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":25,"column":23,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[901,949],"text":"\n                Broski&apos;s Kitchen\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[901,949],"text":"\n                Broski&lsquo;s Kitchen\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[901,949],"text":"\n                Broski&#39;s Kitchen\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[901,949],"text":"\n                Broski&rsquo;s Kitchen\n              "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":62,"column":19,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[2098,2138],"text":"\n            Broski&apos;s Kitchen\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[2098,2138],"text":"\n            Broski&lsquo;s Kitchen\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[2098,2138],"text":"\n            Broski&#39;s Kitchen\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[2098,2138],"text":"\n            Broski&rsquo;s Kitchen\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport Link from 'next/link';\nimport { useState } from 'react';\nimport { Menu, X } from 'lucide-react';\n\nexport default function Navbar() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <nav className=\"fixed top-0 left-0 right-0 z-50 bg-black/80 backdrop-blur-sm border-b border-white/10\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-16\">\n          <div className=\"flex items-center\">\n            <Link href=\"/\" className=\"text-white font-bold text-xl\">\n              OTW\n            </Link>\n          </div>\n          <div className=\"hidden md:block\">\n            <div className=\"ml-10 flex items-baseline space-x-4\">\n              <Link\n                href=\"/restaurants\"\n                className=\"text-gray-300 hover:text-white px-3 py-2 rounded-md text-sm font-medium\"\n              >\n                Broski's Kitchen\n              </Link>\n              <Link\n                href=\"/otw\"\n                className=\"text-gray-300 hover:text-white px-3 py-2 rounded-md text-sm font-medium\"\n              >\n                OTW Service\n              </Link>\n            </div>\n          </div>\n          <div className=\"md:hidden\">\n            <button\n              onClick={() => setIsOpen(!isOpen)}\n              className=\"text-gray-300 hover:text-white focus:outline-none\"\n            >\n              {isOpen ? (\n                <X className=\"h-6 w-6\" />\n              ) : (\n                <Menu className=\"h-6 w-6\" />\n              )}\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Mobile menu */}\n      <div\n        className={`md:hidden ${\n          isOpen ? 'block' : 'hidden'\n        } fixed right-0 top-16 w-64 h-screen bg-black/95 backdrop-blur-sm border-l border-white/10`}\n      >\n        <div className=\"px-2 pt-2 pb-3 space-y-1\">\n          <Link\n            href=\"/restaurants\"\n            className=\"text-gray-300 hover:text-white block px-3 py-2 rounded-md text-base font-medium\"\n            onClick={() => setIsOpen(false)}\n          >\n            Broski's Kitchen\n          </Link>\n          <Link\n            href=\"/otw\"\n            className=\"text-gray-300 hover:text-white block px-3 py-2 rounded-md text-base font-medium\"\n            onClick={() => setIsOpen(false)}\n          >\n            OTW Service\n          </Link>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/Navigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/PlaceAutocomplete.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[697,700],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[697,700],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2035,2038],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2035,2038],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useEffect, useRef, useState } from 'react';\nimport { useJsApiLoader } from '@react-google-maps/api';\n\nconst libraries: 'places'[] = ['places'];\n\nexport type PlaceSuggestion = {\n  formatted_address: string;\n  place_id: string;\n  lat: number;\n  lng: number;\n};\n\ninterface PlaceAutocompleteProps {\n  onSelectAddress: (s: PlaceSuggestion) => void;\n  placeholder?: string;\n  className?: string;\n  disabled?: boolean;\n}\n\nexport default function PlaceAutocomplete({\n  onSelectAddress,\n  placeholder = 'Type an address…',\n  className = '',\n  disabled = false,\n}: PlaceAutocompleteProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const autocompleteElementRef = useRef<any>(null);\n  const [loadError, setLoadError] = useState<string | null>(null);\n\n  // Use the Google Maps API loader hook\n  const { isLoaded, loadError: apiLoadError } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY || '',\n    libraries: libraries,\n  });\n\n  // Initialize PlaceAutocompleteElement when API is loaded\n  useEffect(() => {\n    if (!isLoaded || !containerRef.current || !window.google?.maps?.places?.PlaceAutocompleteElement) {\n      return;\n    }\n\n    try {\n      // Create the new PlaceAutocompleteElement\n      const autocompleteElement = new window.google.maps.places.PlaceAutocompleteElement({\n        types: ['address'],\n      });\n\n      // Configure the element\n      autocompleteElement.placeholder = placeholder;\n      autocompleteElement.disabled = disabled;\n\n      // Apply custom styling\n      autocompleteElement.style.setProperty('--gmp-input-border', '1px solid #ccc');\n      autocompleteElement.style.setProperty('--gmp-input-border-radius', '0.375rem');\n      autocompleteElement.style.setProperty('--gmp-input-padding', '0.5rem 1rem');\n      autocompleteElement.style.width = '100%';\n\n      // Store reference\n      autocompleteElementRef.current = autocompleteElement;\n\n      // Handle place selection\n      const handlePlaceSelect = (event: any) => {\n        const place = event.place;\n        if (place && place.geometry && place.geometry.location) {\n          const suggestion: PlaceSuggestion = {\n            formatted_address: place.formatted_address || '',\n            place_id: place.place_id || '',\n            lat: place.geometry.location.lat(),\n            lng: place.geometry.location.lng(),\n          };\n          onSelectAddress(suggestion);\n          console.log('Selected place:', suggestion);\n        }\n      };\n\n      // Add event listener\n      autocompleteElement.addEventListener('gmp-placeselect', handlePlaceSelect);\n\n      // Append to container\n      containerRef.current.appendChild(autocompleteElement);\n\n      // Cleanup function\n      return () => {\n        if (autocompleteElement) {\n          autocompleteElement.removeEventListener('gmp-placeselect', handlePlaceSelect);\n          if (autocompleteElement.parentNode) {\n            autocompleteElement.parentNode.removeChild(autocompleteElement);\n          }\n        }\n      };\n    } catch (error) {\n      console.error('Error initializing PlaceAutocompleteElement:', error);\n      setLoadError('Failed to initialize address autocomplete');\n    }\n  }, [isLoaded, placeholder, disabled, onSelectAddress]);\n\n  // Update placeholder when prop changes\n  useEffect(() => {\n    if (autocompleteElementRef.current) {\n      autocompleteElementRef.current.placeholder = placeholder;\n    }\n  }, [placeholder]);\n\n  // Update disabled state when prop changes\n  useEffect(() => {\n    if (autocompleteElementRef.current) {\n      autocompleteElementRef.current.disabled = disabled;\n    }\n  }, [disabled]);\n\n  // Handle loading state\n  if (!isLoaded) {\n    return (\n      <div className={`w-full ${className}`}>\n        <div className=\"flex items-center space-x-2 p-3 border border-gray-300 rounded-md bg-gray-50\">\n          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-gray-900\"></div>\n          <span className=\"text-gray-600\">Loading address search...</span>\n        </div>\n      </div>\n    );\n  }\n\n  // Handle error state\n  if (apiLoadError || loadError) {\n    return (\n      <div className={`w-full ${className}`}>\n        <div className=\"p-3 border border-red-300 rounded-md bg-red-50\">\n          <span className=\"text-red-600\">\n            Error loading address search: {apiLoadError?.message || loadError}\n          </span>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`w-full ${className}`}>\n      <div\n        ref={containerRef}\n        className=\"w-full\"\n        style={{\n          minHeight: '40px',\n        }}\n      />\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ResponsiveWrapper.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/SectionHeading.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ServiceCard.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/UniqueModules.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/admin/AdminDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[460,463],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[460,463],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[739,742],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[739,742],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport { Card } from '../ui/card';\nimport { Button } from '../ui/button';\nimport MenuAdmin from './MenuAdmin';\n\nconst TABS = [\n  { key: 'menu', label: 'Menu' },\n  { key: 'orders', label: 'Orders' },\n  { key: 'rewards', label: 'Rewards' },\n  { key: 'users', label: 'Users' },\n  { key: 'analytics', label: 'Analytics' },\n];\n\nexport default function AdminDashboard() {\n  const [, setProfile] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n  const [tab, setTab] = useState('menu');\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    async function fetchProfile() {\n      setLoading(true);\n      const token = await (window as any).firebase\n        ?.auth()\n        .currentUser?.getIdToken();\n      const res = await fetch('/api/user-profile', {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      const data = await res.json();\n      if (data.user?.role !== 'admin') {\n        setError('Access denied: Admins only');\n      } else {\n        setProfile(data);\n      }\n      setLoading(false);\n    }\n    fetchProfile();\n  }, []);\n\n  if (loading)\n    {return <div className=\"text-center py-12\">Loading admin dashboard...</div>;}\n  if (error)\n    {return <div className=\"text-center py-12 text-red-500\">{error}</div>;}\n\n  return (\n    <div className=\"max-w-6xl mx-auto space-y-8\">\n      <Card className=\"p-6 flex flex-col gap-4\">\n        <h2 className=\"text-2xl font-bold mb-4\">Admin Dashboard</h2>\n        <div className=\"flex gap-2 mb-4\">\n          {TABS.map((t) => (\n            <Button\n              key={t.key}\n              variant={tab === t.key ? 'default' : 'outline'}\n              onClick={() => setTab(t.key)}\n            >\n              {t.label}\n            </Button>\n          ))}\n        </div>\n        <div className=\"mt-4\">\n          {tab === 'menu' && <MenuAdmin />}\n          {tab === 'orders' && <div>Order Management (coming soon)</div>}\n          {tab === 'rewards' && <div>Rewards Management (coming soon)</div>}\n          {tab === 'users' && <div>User Management (coming soon)</div>}\n          {tab === 'analytics' && <div>Analytics Overview (coming soon)</div>}\n        </div>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/admin/MenuAdmin.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[520,523],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[520,523],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[784,787],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[784,787],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1034,1037],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1034,1037],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1302,1305],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1302,1305],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1507,1510],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1507,1510],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2198,2201],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2198,2201],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":95,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2552,2555],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2552,2555],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":118,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3238,3241],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3238,3241],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":131,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":131,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3549,3552],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3549,3552],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":141,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3928,3931],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3928,3931],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useEffect, useState } from 'react';\nimport { Card } from '../ui/card';\nimport { Button } from '../ui/button';\nimport { Input } from '../ui/input';\nimport { MenuItem } from '../../lib/firestoreModels';\n\nexport default function MenuAdmin() {\n  const [menu, setMenu] = useState<MenuItem[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [showAdd, setShowAdd] = useState(false);\n  const [newItem, setNewItem] = useState<any>({\n    name: '',\n    price: '',\n    description: '',\n    type: 'classic',\n    source: 'broskis',\n  });\n  const [saving, setSaving] = useState(false);\n  const [editingId, setEditingId] = useState<string | null>(null);\n  const [editItem, setEditItem] = useState<any>(null);\n  const [deletingId, setDeletingId] = useState<string | null>(null);\n\n  useEffect(() => {\n    fetchMenu();\n  }, []);\n\n  async function fetchMenu() {\n    setLoading(true);\n    setError(null);\n    try {\n      const token = await (window as any).firebase\n        ?.auth()\n        .currentUser?.getIdToken();\n      const res = await fetch('/api/admin/menu', {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      const data = await res.json();\n      setMenu(data.menu || []);\n    } catch (e: any) {\n      setError(e.message);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function handleAdd() {\n    setSaving(true);\n    setError(null);\n    try {\n      const token = await (window as any).firebase\n        ?.auth()\n        .currentUser?.getIdToken();\n      const res = await fetch('/api/admin/menu', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify({\n          ...newItem,\n          price: parseFloat(newItem.price),\n        }),\n      });\n      const data = await res.json();\n      if (data.error) {throw new Error(data.error);}\n      setMenu((m) => [...m, data]);\n      setShowAdd(false);\n      setNewItem({\n        name: '',\n        price: '',\n        description: '',\n        type: 'classic',\n        source: 'broskis',\n      });\n    } catch (e: any) {\n      setError(e.message);\n    } finally {\n      setSaving(false);\n    }\n  }\n\n  async function handleEdit(item: MenuItem) {\n    setEditingId(item.id ?? null);\n    setEditItem({ ...item });\n  }\n\n  async function handleEditSave() {\n    if (!editItem) {return;}\n    setSaving(true);\n    setError(null);\n    try {\n      const token = await (window as any).firebase\n        ?.auth()\n        .currentUser?.getIdToken();\n      const res = await fetch(`/api/admin/menu/${editingId}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify({\n          ...editItem,\n          price: parseFloat(editItem.price),\n        }),\n      });\n      const data = await res.json();\n      if (data.error) {throw new Error(data.error);}\n      setMenu((m) =>\n        m.map((item) =>\n          item.id === editingId ? { ...item, ...editItem } : item,\n        ),\n      );\n      setEditingId(null);\n      setEditItem(null);\n    } catch (e: any) {\n      setError(e.message);\n    } finally {\n      setSaving(false);\n    }\n  }\n\n  async function handleDelete(id: string) {\n    if (!window.confirm('Are you sure you want to delete this menu item?'))\n      {return;}\n    setDeletingId(id);\n    setError(null);\n    try {\n      const token = await (window as any).firebase\n        ?.auth()\n        .currentUser?.getIdToken();\n      const res = await fetch(`/api/admin/menu/${id}`, {\n        method: 'DELETE',\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      const data = await res.json();\n      if (data.error) {throw new Error(data.error);}\n      setMenu((m) => m.filter((item) => item.id !== id));\n    } catch (e: any) {\n      setError(e.message);\n    } finally {\n      setDeletingId(null);\n    }\n  }\n\n  return (\n    <div>\n      <div className=\"flex justify-between items-center mb-4\">\n        <h3 className=\"text-xl font-bold\">Menu Management</h3>\n        <Button onClick={() => setShowAdd((v) => !v)}>\n          {showAdd ? 'Cancel' : 'Add New Item'}\n        </Button>\n      </div>\n      {showAdd && (\n        <Card className=\"p-4 mb-4\">\n          <div className=\"flex flex-col gap-2 md:flex-row md:gap-4\">\n            <Input\n              placeholder=\"Name\"\n              value={newItem.name}\n              onChange={(e) => setNewItem({ ...newItem, name: e.target.value })}\n            />\n            <Input\n              placeholder=\"Price\"\n              type=\"number\"\n              value={newItem.price}\n              onChange={(e) =>\n                setNewItem({ ...newItem, price: e.target.value })\n              }\n            />\n            <Input\n              placeholder=\"Description\"\n              value={newItem.description}\n              onChange={(e) =>\n                setNewItem({ ...newItem, description: e.target.value })\n              }\n            />\n            <select\n              value={newItem.type}\n              onChange={(e) => setNewItem({ ...newItem, type: e.target.value })}\n              className=\"border rounded px-2 py-1\"\n            >\n              <option value=\"classic\">Classic</option>\n              <option value=\"infused\">Infused</option>\n            </select>\n            <select\n              value={newItem.source}\n              onChange={(e) =>\n                setNewItem({ ...newItem, source: e.target.value })\n              }\n              className=\"border rounded px-2 py-1\"\n            >\n              <option value=\"broskis\">Broskis</option>\n              <option value=\"partner\">Partner</option>\n            </select>\n            <Button onClick={handleAdd} disabled={saving}>\n              {saving ? 'Saving...' : 'Save'}\n            </Button>\n          </div>\n        </Card>\n      )}\n      {loading ? (\n        <div className=\"text-center py-8\">Loading menu...</div>\n      ) : error ? (\n        <div className=\"text-red-500 text-center py-8\">{error}</div>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {menu.map((item, i) => (\n            <Card key={item.id || i} className=\"p-4 flex flex-col gap-2\">\n              {editingId === item.id ? (\n                <div className=\"flex flex-col gap-2\">\n                  <Input\n                    value={editItem.name}\n                    onChange={(e) =>\n                      setEditItem({ ...editItem, name: e.target.value })\n                    }\n                  />\n                  <Input\n                    value={editItem.price}\n                    type=\"number\"\n                    onChange={(e) =>\n                      setEditItem({ ...editItem, price: e.target.value })\n                    }\n                  />\n                  <Input\n                    value={editItem.description}\n                    onChange={(e) =>\n                      setEditItem({ ...editItem, description: e.target.value })\n                    }\n                  />\n                  <select\n                    value={editItem.type}\n                    onChange={(e) =>\n                      setEditItem({ ...editItem, type: e.target.value })\n                    }\n                    className=\"border rounded px-2 py-1\"\n                  >\n                    <option value=\"classic\">Classic</option>\n                    <option value=\"infused\">Infused</option>\n                  </select>\n                  <select\n                    value={editItem.source}\n                    onChange={(e) =>\n                      setEditItem({ ...editItem, source: e.target.value })\n                    }\n                    className=\"border rounded px-2 py-1\"\n                  >\n                    <option value=\"broskis\">Broskis</option>\n                    <option value=\"partner\">Partner</option>\n                  </select>\n                  <div className=\"flex gap-2\">\n                    <Button onClick={handleEditSave} disabled={saving}>\n                      {saving ? 'Saving...' : 'Save'}\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      onClick={() => {\n                        setEditingId(null);\n                        setEditItem(null);\n                      }}\n                    >\n                      Cancel\n                    </Button>\n                  </div>\n                </div>\n              ) : (\n                <>\n                  <div className=\"flex justify-between items-center\">\n                    <div>\n                      <div className=\"font-bold text-lg\">{item.name}</div>\n                      <div className=\"text-sm text-gray-400\">\n                        {item.type} | {item.source}\n                      </div>\n                    </div>\n                    <div className=\"font-bold text-otw-gold-600\">\n                      ${item.price.toFixed(2)}\n                    </div>\n                  </div>\n                  <div className=\"text-gray-300 text-sm mb-2\">\n                    {item.description}\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => handleEdit(item)}\n                    >\n                      Edit\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"destructive\"\n                      onClick={() => handleDelete(item.id!)}\n                      disabled={deletingId === item.id}\n                    >\n                      {deletingId === item.id ? 'Deleting...' : 'Delete'}\n                    </Button>\n                  </div>\n                </>\n              )}\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/analytics-script.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/auth/AuthLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/auth/PasswordStrengthMeter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/cart/CartDropdown.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":72,"column":32,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[2689,2748],"text":"\n                  Browse Broski&apos;s Kitchen\n                "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[2689,2748],"text":"\n                  Browse Broski&lsquo;s Kitchen\n                "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[2689,2748],"text":"\n                  Browse Broski&#39;s Kitchen\n                "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[2689,2748],"text":"\n                  Browse Broski&rsquo;s Kitchen\n                "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useRef, useEffect } from 'react';\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport { ShoppingBag, X, ChevronRight, Trash2 } from 'lucide-react';\nimport { useCart } from '../../lib/context/CartContext';\nimport { useOnClickOutside } from '../../hooks/useOnClickOutside';\nimport Button from '../Button';\n\nexport default function CartDropdown() {\n  const [isOpen, setIsOpen] = useState(false);\n  const { items, itemCount, removeItem, updateQuantity, total } = useCart();\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  // Close dropdown when clicking outside\n  useOnClickOutside(dropdownRef, () => setIsOpen(false));\n\n  // Close dropdown when pressing escape key\n  useEffect(() => {\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        setIsOpen(false);\n      }\n    };\n\n    document.addEventListener('keydown', handleEscape);\n    return () => document.removeEventListener('keydown', handleEscape);\n  }, []);\n\n  return (\n    <div className=\"relative\" ref={dropdownRef}>\n      <button\n        className=\"flex items-center gap-1 px-4 py-2 text-white hover:text-otw-gold-600 transition-colors relative\"\n        onClick={() => setIsOpen(!isOpen)}\n        aria-expanded={isOpen}\n        aria-haspopup=\"true\"\n      >\n        <ShoppingBag className=\"h-5 w-5\" />\n        {itemCount > 0 && (\n          <span className=\"absolute -top-1 -right-1 bg-otw-red-600 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center\">\n            {itemCount}\n          </span>\n        )}\n      </button>\n\n      {isOpen && (\n        <div className=\"absolute right-0 mt-2 w-80 bg-otw-black-900 rounded-md shadow-otw-md z-50 border border-otw-black-800 overflow-hidden\">\n          <div className=\"p-4 border-b border-otw-black-800 flex justify-between items-center\">\n            <h3 className=\"font-medium\">Your Cart ({itemCount})</h3>\n            <button\n              onClick={() => setIsOpen(false)}\n              className=\"text-gray-400 hover:text-white\"\n              aria-label=\"Close cart\"\n            >\n              <X className=\"h-4 w-4\" />\n            </button>\n          </div>\n\n          {items.length === 0 ? (\n            <div className=\"p-6 text-center\">\n              <div className=\"flex justify-center mb-4\">\n                <ShoppingBag className=\"h-12 w-12 text-gray-500\" />\n              </div>\n              <p className=\"text-gray-400 mb-4\">Your cart is empty</p>\n              <Link\n                href=\"/restaurants\"\n                className=\"inline-block w-full\"\n                onClick={() => setIsOpen(false)}\n              >\n                <Button variant=\"primary\" size=\"sm\">\n                  Browse Broski's Kitchen\n                </Button>\n              </Link>\n            </div>\n          ) : (\n            <>\n              <div className=\"max-h-80 overflow-y-auto p-2\">\n                {items.map((item) => (\n                  <div\n                    key={item.id}\n                    className=\"flex items-center gap-3 p-2 hover:bg-otw-black-800 rounded-md transition-colors\"\n                  >\n                    <div className=\"relative h-16 w-16 flex-shrink-0 rounded-md overflow-hidden\">\n                      <Image\n                        src={item.image || '/placeholder.svg'}\n                        alt={item.name}\n                        fill\n                        className=\"object-cover\"\n                      />\n                    </div>\n                    <div className=\"flex-grow min-w-0\">\n                      <h4 className=\"font-medium text-sm truncate\">\n                        {item.name}\n                      </h4>\n                      <p className=\"text-gray-400 text-xs\">\n                        ${item.price.toFixed(2)}\n                      </p>\n                      <div className=\"flex items-center mt-1\">\n                        <button\n                          onClick={() =>\n                            updateQuantity(\n                              item.id,\n                              Math.max(1, item.quantity - 1),\n                            )\n                          }\n                          className=\"h-6 w-6 flex items-center justify-center bg-otw-black-800 rounded-md text-sm\"\n                          aria-label=\"Decrease quantity\"\n                        >\n                          -\n                        </button>\n                        <span className=\"mx-2 text-sm\">{item.quantity}</span>\n                        <button\n                          onClick={() =>\n                            updateQuantity(item.id, item.quantity + 1)\n                          }\n                          className=\"h-6 w-6 flex items-center justify-center bg-otw-black-800 rounded-md text-sm\"\n                          aria-label=\"Increase quantity\"\n                        >\n                          +\n                        </button>\n                      </div>\n                    </div>\n                    <button\n                      onClick={() => removeItem(item.id)}\n                      className=\"text-gray-400 hover:text-otw-red-600 transition-colors\"\n                      aria-label={`Remove ${item.name} from cart`}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </button>\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"p-4 border-t border-otw-black-800\">\n                <div className=\"flex justify-between mb-4\">\n                  <span className=\"text-gray-400\">Subtotal</span>\n                  <span className=\"font-medium\">${total.toFixed(2)}</span>\n                </div>\n                <Link\n                  href=\"/checkout\"\n                  className=\"flex items-center justify-between w-full bg-otw-red-600 text-white py-2 px-4 rounded-md hover:bg-otw-red-700 transition-colors\"\n                  onClick={() => setIsOpen(false)}\n                >\n                  <span className=\"font-medium\">Checkout</span>\n                  <ChevronRight className=\"h-4 w-4\" />\n                </Link>\n                <button\n                  className=\"w-full text-center mt-2 text-sm text-gray-400 hover:text-white transition-colors\"\n                  onClick={() => setIsOpen(false)}\n                >\n                  Continue Shopping\n                </button>\n              </div>\n            </>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/chat/ChatBot.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/chat/ChatMessage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/chat/WelcomeMessage.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":37,"column":26,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[868,912],"text":"\n        Welcome to Broski&apos;s Kitchen!\n      "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[868,912],"text":"\n        Welcome to Broski&lsquo;s Kitchen!\n      "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[868,912],"text":"\n        Welcome to Broski&#39;s Kitchen!\n      "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[868,912],"text":"\n        Welcome to Broski&rsquo;s Kitchen!\n      "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":40,"column":10,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[958,1038],"text":"\n        I&apos;m BroskiBot, your virtual assistant. How can I help you today?\n      "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[958,1038],"text":"\n        I&lsquo;m BroskiBot, your virtual assistant. How can I help you today?\n      "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[958,1038],"text":"\n        I&#39;m BroskiBot, your virtual assistant. How can I help you today?\n      "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[958,1038],"text":"\n        I&rsquo;m BroskiBot, your virtual assistant. How can I help you today?\n      "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport type React from 'react';\nimport {\n  FaUtensils,\n  FaMapMarkerAlt,\n  FaCalendarAlt,\n  FaGift,\n} from 'react-icons/fa';\n\ninterface QuickActionProps {\n  icon: React.ReactNode;\n  text: string;\n  onClick: () => void;\n}\n\nconst QuickAction: React.FC<QuickActionProps> = ({ icon, text, onClick }) => (\n  <button\n    onClick={onClick}\n    className=\"flex items-center gap-2 p-2 rounded-md hover:bg-[#333333] transition-colors text-left w-full\"\n  >\n    <div className=\"bg-gold-foil bg-opacity-20 p-2 rounded-full\">{icon}</div>\n    <span>{text}</span>\n  </button>\n);\n\ninterface WelcomeMessageProps {\n  onQuickActionClick: (message: string) => void;\n}\n\nconst WelcomeMessage: React.FC<WelcomeMessageProps> = ({\n  onQuickActionClick,\n}) => {\n  return (\n    <div className=\"bg-[#222222] rounded-lg p-4 mb-4\">\n      <h3 className=\"font-bold text-gold-foil mb-2\">\n        Welcome to Broski's Kitchen!\n      </h3>\n      <p className=\"text-gray-300 mb-4\">\n        I'm BroskiBot, your virtual assistant. How can I help you today?\n      </p>\n\n      <div className=\"space-y-2\">\n        <h4 className=\"text-sm font-medium text-gray-400 mb-1\">\n          Quick Actions:\n        </h4>\n        <QuickAction\n          icon={<FaUtensils className=\"text-gold-foil\" />}\n          text=\"Tell me about the menu\"\n          onClick={() => onQuickActionClick('Tell me about your menu options')}\n        />\n        <QuickAction\n          icon={<FaMapMarkerAlt className=\"text-gold-foil\" />}\n          text=\"Find a location\"\n          onClick={() => onQuickActionClick('What locations do you have?')}\n        />\n        <QuickAction\n          icon={<FaCalendarAlt className=\"text-gold-foil\" />}\n          text=\"Upcoming events\"\n          onClick={() =>\n            onQuickActionClick('What events do you have coming up?')\n          }\n        />\n        <QuickAction\n          icon={<FaGift className=\"text-gold-foil\" />}\n          text=\"Rewards program\"\n          onClick={() =>\n            onQuickActionClick('Tell me about your rewards program')\n          }\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default WelcomeMessage;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/coming-soon/ComingSoonOverlay.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":30,"column":15,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1231,1362],"text":"\n            We&apos;re excited to bring you our premium infused culinary creations\n            soon. Check back for updates!\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1231,1362],"text":"\n            We&lsquo;re excited to bring you our premium infused culinary creations\n            soon. Check back for updates!\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1231,1362],"text":"\n            We&#39;re excited to bring you our premium infused culinary creations\n            soon. Check back for updates!\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1231,1362],"text":"\n            We&rsquo;re excited to bring you our premium infused culinary creations\n            soon. Check back for updates!\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport type React from 'react';\nimport { FaCalendarAlt, FaInfoCircle } from 'react-icons/fa';\n\ninterface ComingSoonOverlayProps {\n  onClose: () => void;\n}\n\nconst ComingSoonOverlay: React.FC<ComingSoonOverlayProps> = ({ onClose }) => {\n  return (\n    <div className=\"fixed inset-0 z-40 flex items-center justify-center bg-black bg-opacity-80 backdrop-blur-md\">\n      <div className=\"bg-[#1A1A1A] rounded-lg shadow-xl w-full max-w-lg p-8 text-center animate-fade-in\">\n        <div className=\"w-20 h-20 bg-gold-foil bg-opacity-20 rounded-full flex items-center justify-center mx-auto mb-6\">\n          <FaInfoCircle className=\"text-gold-foil text-3xl\" />\n        </div>\n\n        <h2 className=\"text-3xl font-bold mb-4\">Coming Soon</h2>\n        <p className=\"text-xl text-gray-300 mb-6\">\n          Our infused menu will be available starting July 1st, 2024 in legal\n          locations\n        </p>\n\n        <div className=\"bg-[#111111] p-6 rounded-lg mb-8\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <FaCalendarAlt className=\"text-gold-foil mr-2\" />\n            <span className=\"text-gold-foil font-bold\">Stay Tuned</span>\n          </div>\n          <p className=\"text-gray-400 mb-4\">\n            We're excited to bring you our premium infused culinary creations\n            soon. Check back for updates!\n          </p>\n        </div>\n\n        <p className=\"text-sm text-gray-500\">\n          You must be 21 or older to access our infused menu when available.\n          Available only in locations where legal.\n        </p>\n\n        <button onClick={onClose} className=\"btn-primary mt-6\">\n          Close\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ComingSoonOverlay;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/common/JSComponent.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/contact/ContactForm.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":122,"column":43,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[2746,2852],"text":"\n            Thank you for reaching out. We&apos;ll get back to you as soon as\n            possible.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[2746,2852],"text":"\n            Thank you for reaching out. We&lsquo;ll get back to you as soon as\n            possible.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[2746,2852],"text":"\n            Thank you for reaching out. We&#39;ll get back to you as soon as\n            possible.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[2746,2852],"text":"\n            Thank you for reaching out. We&rsquo;ll get back to you as soon as\n            possible.\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport type React from 'react';\n\nimport { useState } from 'react';\nimport {\n  FaUser,\n  FaEnvelope,\n  FaPhone,\n  FaComment,\n  FaCheck,\n} from 'react-icons/fa';\n\nconst ContactForm = () => {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    subject: '',\n    message: '',\n  });\n\n  const [errors, setErrors] = useState<Record<string, string>>({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n\n  const handleChange = (\n    e: React.ChangeEvent<\n      HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement\n    >,\n  ) => {\n    const { name, value } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value,\n    });\n\n    // Clear error when field is updated\n    if (errors[name]) {\n      setErrors({\n        ...errors,\n        [name]: '',\n      });\n    }\n  };\n\n  const validateForm = () => {\n    const newErrors: Record<string, string> = {};\n\n    if (!formData.name.trim()) {\n      newErrors.name = 'Name is required';\n    }\n\n    if (!formData.email.trim()) {\n      newErrors.email = 'Email is required';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n      newErrors.email = 'Email is invalid';\n    }\n\n    if (!formData.message.trim()) {\n      newErrors.message = 'Message is required';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!validateForm()) {\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    try {\n      // Simulate API call\n      await new Promise((resolve) => setTimeout(resolve, 1500));\n\n      // Show success message\n      setIsSubmitted(true);\n\n      // Reset form\n      setFormData({\n        name: '',\n        email: '',\n        phone: '',\n        subject: '',\n        message: '',\n      });\n    } catch (error) {\n      console.error('Form submission error:', error);\n      setErrors({\n        ...errors,\n        form: 'An error occurred. Please try again later.',\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const subjectOptions = [\n    'General Inquiry',\n    'Catering',\n    'Events',\n    'Delivery',\n    'Feedback',\n    'Career',\n    'Other',\n  ];\n\n  return (\n    <div className=\"bg-[#1A1A1A] rounded-lg p-6 border border-[#333333]\">\n      {isSubmitted ? (\n        <div className=\"text-center py-8\">\n          <div className=\"w-16 h-16 bg-emerald-green bg-opacity-20 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <FaCheck className=\"text-emerald-green text-2xl\" />\n          </div>\n          <h3 className=\"text-xl font-bold mb-2\">Message Sent!</h3>\n          <p className=\"text-gray-300 mb-6\">\n            Thank you for reaching out. We'll get back to you as soon as\n            possible.\n          </p>\n          <button className=\"btn-primary\" onClick={() => setIsSubmitted(false)}>\n            Send Another Message\n          </button>\n        </div>\n      ) : (\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {errors.form && (\n            <div className=\"bg-blood-red bg-opacity-20 text-blood-red p-4 rounded-md\">\n              {errors.form}\n            </div>\n          )}\n\n          <div>\n            <label htmlFor=\"name\" className=\"block text-sm font-medium mb-1\">\n              Name *\n            </label>\n            <div className=\"relative\">\n              <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                <FaUser className=\"text-gray-500\" />\n              </div>\n              <input\n                type=\"text\"\n                id=\"name\"\n                name=\"name\"\n                value={formData.name}\n                onChange={handleChange}\n                className={`input pl-10 w-full ${errors.name ? 'border-blood-red' : ''}`}\n                placeholder=\"Your name\"\n              />\n            </div>\n            {errors.name && (\n              <p className=\"mt-1 text-sm text-blood-red\">{errors.name}</p>\n            )}\n          </div>\n\n          <div>\n            <label htmlFor=\"email\" className=\"block text-sm font-medium mb-1\">\n              Email *\n            </label>\n            <div className=\"relative\">\n              <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                <FaEnvelope className=\"text-gray-500\" />\n              </div>\n              <input\n                type=\"email\"\n                id=\"email\"\n                name=\"email\"\n                value={formData.email}\n                onChange={handleChange}\n                className={`input pl-10 w-full ${errors.email ? 'border-blood-red' : ''}`}\n                placeholder=\"your@email.com\"\n              />\n            </div>\n            {errors.email && (\n              <p className=\"mt-1 text-sm text-blood-red\">{errors.email}</p>\n            )}\n          </div>\n\n          <div>\n            <label htmlFor=\"phone\" className=\"block text-sm font-medium mb-1\">\n              Phone (Optional)\n            </label>\n            <div className=\"relative\">\n              <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                <FaPhone className=\"text-gray-500\" />\n              </div>\n              <input\n                type=\"tel\"\n                id=\"phone\"\n                name=\"phone\"\n                value={formData.phone}\n                onChange={handleChange}\n                className=\"input pl-10 w-full\"\n                placeholder=\"(123) 456-7890\"\n              />\n            </div>\n          </div>\n\n          <div>\n            <label htmlFor=\"subject\" className=\"block text-sm font-medium mb-1\">\n              Subject\n            </label>\n            <select\n              id=\"subject\"\n              name=\"subject\"\n              value={formData.subject}\n              onChange={handleChange}\n              className=\"input w-full\"\n            >\n              <option value=\"\">Select a subject</option>\n              {subjectOptions.map((option) => (\n                <option key={option} value={option}>\n                  {option}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div>\n            <label htmlFor=\"message\" className=\"block text-sm font-medium mb-1\">\n              Message *\n            </label>\n            <div className=\"relative\">\n              <div className=\"absolute top-3 left-3 pointer-events-none\">\n                <FaComment className=\"text-gray-500\" />\n              </div>\n              <textarea\n                id=\"message\"\n                name=\"message\"\n                value={formData.message}\n                onChange={handleChange}\n                rows={5}\n                className={`input pl-10 w-full ${errors.message ? 'border-blood-red' : ''}`}\n                placeholder=\"How can we help you?\"\n              ></textarea>\n            </div>\n            {errors.message && (\n              <p className=\"mt-1 text-sm text-blood-red\">{errors.message}</p>\n            )}\n          </div>\n\n          <button\n            type=\"submit\"\n            className=\"btn-primary w-full\"\n            disabled={isSubmitting}\n          >\n            {isSubmitting ? (\n              <span className=\"flex items-center justify-center\">\n                <svg\n                  className=\"animate-spin -ml-1 mr-3 h-5 w-5 text-black\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <circle\n                    className=\"opacity-25\"\n                    cx=\"12\"\n                    cy=\"12\"\n                    r=\"10\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"4\"\n                  ></circle>\n                  <path\n                    className=\"opacity-75\"\n                    fill=\"currentColor\"\n                    d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n                  ></path>\n                </svg>\n                Sending...\n              </span>\n            ) : (\n              'Send Message'\n            )}\n          </button>\n        </form>\n      )}\n    </div>\n  );\n};\n\nexport default ContactForm;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/contact/ContactMap.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'calculateCenter' function makes the dependencies of useEffect Hook (at line 193) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'calculateCenter' in its own useCallback() Hook.","line":29,"column":9,"nodeType":"VariableDeclarator","endLine":45,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport type React from 'react';\n\nimport { useEffect, useRef, useState } from 'react';\nimport { useJsApiLoader } from '@react-google-maps/api';\nimport type { Location } from '../../types/location';\n\nconst libraries: 'places'[] = ['places'];\n\ninterface ContactMapProps {\n  locations: Location[];\n}\n\nconst ContactMap: React.FC<ContactMapProps> = ({ locations }) => {\n  const mapRef = useRef<HTMLDivElement>(null);\n  const [selectedLocation, setSelectedLocation] = useState<Location | null>(\n    null,\n  );\n\n  // Use the Google Maps API loader hook\n  const { isLoaded, loadError } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY || '',\n    libraries: libraries,\n  });\n\n  // Calculate center point of all locations\n  const calculateCenter = () => {\n    if (locations.length === 0) {return { lat: 37.0902, lng: -95.7129 };} // Default to US center\n\n    const totalLat = locations.reduce(\n      (sum, loc) => sum + loc.coordinates.lat,\n      0,\n    );\n    const totalLng = locations.reduce(\n      (sum, loc) => sum + loc.coordinates.lng,\n      0,\n    );\n\n    return {\n      lat: totalLat / locations.length,\n      lng: totalLng / locations.length,\n    };\n  };\n\n  useEffect(() => {\n    if (!isLoaded || !mapRef.current) {return;}\n\n    // Initialize map\n    const initializeMap = () => {\n      const center = calculateCenter();\n\n      // Create map instance\n      const mapOptions = {\n        center: center,\n        zoom: 5,\n        styles: [\n          { elementType: 'geometry', stylers: [{ color: '#242f3e' }] },\n          {\n            elementType: 'labels.text.stroke',\n            stylers: [{ color: '#242f3e' }],\n          },\n          { elementType: 'labels.text.fill', stylers: [{ color: '#746855' }] },\n          {\n            featureType: 'administrative.locality',\n            elementType: 'labels.text.fill',\n            stylers: [{ color: '#d59563' }],\n          },\n          {\n            featureType: 'poi',\n            elementType: 'labels.text.fill',\n            stylers: [{ color: '#d59563' }],\n          },\n          {\n            featureType: 'poi.park',\n            elementType: 'geometry',\n            stylers: [{ color: '#263c3f' }],\n          },\n          {\n            featureType: 'poi.park',\n            elementType: 'labels.text.fill',\n            stylers: [{ color: '#6b9a76' }],\n          },\n          {\n            featureType: 'road',\n            elementType: 'geometry',\n            stylers: [{ color: '#38414e' }],\n          },\n          {\n            featureType: 'road',\n            elementType: 'geometry.stroke',\n            stylers: [{ color: '#212a37' }],\n          },\n          {\n            featureType: 'road',\n            elementType: 'labels.text.fill',\n            stylers: [{ color: '#9ca5b3' }],\n          },\n          {\n            featureType: 'road.highway',\n            elementType: 'geometry',\n            stylers: [{ color: '#746855' }],\n          },\n          {\n            featureType: 'road.highway',\n            elementType: 'geometry.stroke',\n            stylers: [{ color: '#1f2835' }],\n          },\n          {\n            featureType: 'road.highway',\n            elementType: 'labels.text.fill',\n            stylers: [{ color: '#f3d19c' }],\n          },\n          {\n            featureType: 'transit',\n            elementType: 'geometry',\n            stylers: [{ color: '#2f3948' }],\n          },\n          {\n            featureType: 'transit.station',\n            elementType: 'labels.text.fill',\n            stylers: [{ color: '#d59563' }],\n          },\n          {\n            featureType: 'water',\n            elementType: 'geometry',\n            stylers: [{ color: '#17263c' }],\n          },\n          {\n            featureType: 'water',\n            elementType: 'labels.text.fill',\n            stylers: [{ color: '#515c6d' }],\n          },\n          {\n            featureType: 'water',\n            elementType: 'labels.text.stroke',\n            stylers: [{ color: '#17263c' }],\n          },\n        ],\n        disableDefaultUI: true,\n        zoomControl: true,\n        mapTypeControl: false,\n        scaleControl: true,\n        streetViewControl: false,\n        rotateControl: false,\n        fullscreenControl: true,\n      };\n\n      const map = new window.google.maps.Map(mapRef.current, mapOptions);\n\n      // Add markers for each location\n      locations.forEach((location) => {\n        const marker = new window.google.maps.Marker({\n          position: {\n            lat: location.coordinates.lat,\n            lng: location.coordinates.lng,\n          },\n          map: map,\n          title: location.name,\n          icon: {\n            url: '/images/marker.png',\n            scaledSize: new window.google.maps.Size(30, 40),\n          },\n        });\n\n        // Create info window\n        const infoWindow = new window.google.maps.InfoWindow({\n          content: `\n            <div style=\"color: #000; padding: 5px;\">\n              <h3 style=\"font-weight: bold; margin-bottom: 5px;\">${location.name}</h3>\n              <p style=\"margin: 0;\">${location.address}, ${location.city}, ${location.state}</p>\n              <p style=\"margin: 5px 0 0;\"><a href=\"tel:${location.phone}\" style=\"color: #D4AF37;\">${location.phone}</a></p>\n            </div>\n          `,\n        });\n\n        // Add click event to marker\n        marker.addListener('click', () => {\n          // Close any open info windows\n          infoWindow.close();\n\n          // Open this info window\n          infoWindow.open(map, marker);\n\n          // Set selected location\n          setSelectedLocation(location);\n        });\n      });\n    };\n\n    initializeMap();\n  }, [isLoaded, locations, setSelectedLocation, calculateCenter]);\n\n  if (loadError) {\n    return (\n      <div className=\"w-full h-full flex items-center justify-center text-red-500\">\n        Error loading Google Maps\n      </div>\n    );\n  }\n\n  if (!isLoaded) {\n    return (\n      <div className=\"w-full h-full flex items-center justify-center\">\n        Loading map...\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-full h-full\">\n      <div ref={mapRef} className=\"w-full h-full rounded-lg\" />\n      <div className=\"sr-only\" aria-live=\"polite\">\n        {selectedLocation\n          ? `Selected location: ${selectedLocation.name} at ${selectedLocation.address}, ${selectedLocation.city}, ${selectedLocation.state}`\n          : \"Map showing all Broski's Kitchen locations\"}\n      </div>\n    </div>\n  );\n};\n\nexport default ContactMap;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/cookie-consent.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":45,"column":15,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[1310,1538],"text":"\n              We use cookies to enhance your browsing experience, serve\n              personalized ads or content, and analyze our traffic. By clicking\n              &quot;Accept All\", you consent to our use of cookies.\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[1310,1538],"text":"\n              We use cookies to enhance your browsing experience, serve\n              personalized ads or content, and analyze our traffic. By clicking\n              &ldquo;Accept All\", you consent to our use of cookies.\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[1310,1538],"text":"\n              We use cookies to enhance your browsing experience, serve\n              personalized ads or content, and analyze our traffic. By clicking\n              &#34;Accept All\", you consent to our use of cookies.\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[1310,1538],"text":"\n              We use cookies to enhance your browsing experience, serve\n              personalized ads or content, and analyze our traffic. By clicking\n              &rdquo;Accept All\", you consent to our use of cookies.\n            "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":45,"column":26,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[1310,1538],"text":"\n              We use cookies to enhance your browsing experience, serve\n              personalized ads or content, and analyze our traffic. By clicking\n              \"Accept All&quot;, you consent to our use of cookies.\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[1310,1538],"text":"\n              We use cookies to enhance your browsing experience, serve\n              personalized ads or content, and analyze our traffic. By clicking\n              \"Accept All&ldquo;, you consent to our use of cookies.\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[1310,1538],"text":"\n              We use cookies to enhance your browsing experience, serve\n              personalized ads or content, and analyze our traffic. By clicking\n              \"Accept All&#34;, you consent to our use of cookies.\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[1310,1538],"text":"\n              We use cookies to enhance your browsing experience, serve\n              personalized ads or content, and analyze our traffic. By clicking\n              \"Accept All&rdquo;, you consent to our use of cookies.\n            "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Button } from './ui/button';\nimport { X } from 'lucide-react';\n\nexport function CookieConsent() {\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    // Check if user has already consented\n    const hasConsented = localStorage.getItem('cookie-consent');\n    if (!hasConsented) {\n      // Show banner after a short delay\n      const timer = setTimeout(() => {\n        setIsVisible(true);\n      }, 1000);\n      return () => clearTimeout(timer);\n    }\n  }, []);\n\n  const acceptAll = () => {\n    localStorage.setItem('cookie-consent', 'all');\n    setIsVisible(false);\n  };\n\n  const acceptEssential = () => {\n    localStorage.setItem('cookie-consent', 'essential');\n    setIsVisible(false);\n  };\n\n  if (!isVisible) {return null;}\n\n  return (\n    <div className=\"fixed bottom-0 left-0 right-0 z-50 bg-otw-black-900 border-t border-otw-black-800 p-4 md:p-6 shadow-lg\">\n      <div className=\"container mx-auto max-w-7xl\">\n        <div className=\"flex flex-col md:flex-row items-start md:items-center justify-between gap-4\">\n          <div className=\"flex-1\">\n            <h3 className=\"text-lg font-semibold mb-2\">\n              We value your privacy\n            </h3>\n            <p className=\"text-sm text-gray-400 mb-2\">\n              We use cookies to enhance your browsing experience, serve\n              personalized ads or content, and analyze our traffic. By clicking\n              \"Accept All\", you consent to our use of cookies.\n            </p>\n            <a\n              href=\"/privacy-policy\"\n              className=\"text-sm text-otw-gold-600 hover:underline\"\n            >\n              Read our Cookie Policy\n            </a>\n          </div>\n\n          <div className=\"flex flex-col sm:flex-row gap-2 sm:items-center\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={acceptEssential}\n              className=\"whitespace-nowrap\"\n            >\n              Essential Only\n            </Button>\n            <Button\n              variant=\"default\"\n              size=\"sm\"\n              onClick={acceptAll}\n              className=\"whitespace-nowrap bg-otw-gold-600 hover:bg-otw-gold-700\"\n            >\n              Accept All\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={acceptEssential}\n              className=\"absolute top-2 right-2 md:hidden\"\n            >\n              <X className=\"h-4 w-4\" />\n              <span className=\"sr-only\">Close</span>\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/dashboard/Favorites.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/dashboard/OrderHistory.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Star' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[497,500],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[497,500],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[511,514],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[511,514],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":113,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3185,3188],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3185,3188],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card } from '../ui/card';\nimport { Button } from '../ui/button';\nimport { Clock, MapPin, DollarSign, Star, Loader2 } from 'lucide-react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { collection, query, where, orderBy, getDocs, limit } from 'firebase/firestore';\nimport { db } from '../../lib/firebase-config';\n\ninterface Order {\n  id: string;\n  userRef: string;\n  total: number;\n  status: string;\n  createdAt: any;\n  cart?: any[];\n  stripeId?: string;\n}\n\ninterface ScreenshotOrder {\n  id: string;\n  orderId: string;\n  status: string;\n  customerInfo: {\n    name: string;\n    phone: string;\n    email: string;\n  };\n  restaurantInfo: {\n    name: string;\n    pickupLocation: string;\n  };\n  orderDetails: {\n    estimatedTotal: string;\n    specialInstructions: string;\n  };\n  timestamps: {\n    created: string;\n    updated?: string;\n  };\n}\n\nexport default function OrderHistory() {\n  const [orders, setOrders] = useState<Order[]>([]);\n  const [screenshotOrders, setScreenshotOrders] = useState<ScreenshotOrder[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const { user } = useAuth();\n\n  useEffect(() => {\n    const fetchOrders = async () => {\n      if (!user?.uid) {\n        setLoading(false);\n        return;\n      }\n\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Fetch regular orders\n        const ordersQuery = query(\n          collection(db, 'orders'),\n          where('userRef', '==', user.uid),\n          orderBy('createdAt', 'desc'),\n          limit(20),\n        );\n        const ordersSnapshot = await getDocs(ordersQuery);\n        const ordersData = ordersSnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data(),\n        })) as Order[];\n\n        // Fetch screenshot orders\n        const screenshotOrdersQuery = query(\n          collection(db, 'screenshot_orders'),\n          where('customerInfo.email', '==', user.email || ''),\n          orderBy('timestamps.created', 'desc'),\n          limit(20),\n        );\n        const screenshotOrdersSnapshot = await getDocs(screenshotOrdersQuery);\n        const screenshotOrdersData = screenshotOrdersSnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data(),\n        })) as ScreenshotOrder[];\n\n        setOrders(ordersData);\n        setScreenshotOrders(screenshotOrdersData);\n      } catch (err) {\n        console.error('Error fetching orders:', err);\n        setError('Failed to load order history');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchOrders();\n  }, [user]);\n\n  // Calculate statistics\n  const totalOrders = orders.length + screenshotOrders.length;\n  const totalSpent = orders.reduce((sum, order) => sum + (order.total || 0), 0) +\n    screenshotOrders.reduce((sum, order) => {\n      const total = parseFloat(order.orderDetails?.estimatedTotal?.replace(/[^\\d.]/g, '') || '0');\n      return sum + total;\n    }, 0);\n\n  // For now, we'll show a placeholder for average rating since we don't have rating data\n  const avgRating = 'N/A';\n\n  // Format date helper\n  const formatDate = (date: any) => {\n    if (!date) {return 'Unknown';}\n\n    let dateObj: Date;\n    if (typeof date === 'string') {\n      dateObj = new Date(date);\n    } else if (date.toDate && typeof date.toDate === 'function') {\n      dateObj = date.toDate();\n    } else if (date instanceof Date) {\n      dateObj = date;\n    } else {\n      return 'Unknown';\n    }\n\n    return dateObj.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n    });\n  };\n\n  // Get status color\n  const getStatusColor = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'completed':\n      case 'fulfilled':\n      case 'delivered':\n        return 'text-green-500';\n      case 'pending':\n      case 'pending_review':\n      case 'confirmed':\n        return 'text-yellow-500';\n      case 'cancelled':\n      case 'failed':\n        return 'text-red-500';\n      default:\n        return 'text-gray-400';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-center py-12\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-otw-gold\" />\n          <span className=\"ml-2 text-lg\">Loading order history...</span>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"space-y-6\">\n        <Card className=\"p-6 bg-red-900/20 border-red-500\">\n          <p className=\"text-red-400\">{error}</p>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card className=\"p-6 bg-gray-900\">\n          <h3 className=\"text-lg font-semibold text-otw-gold mb-2\">\n            Total Orders\n          </h3>\n          <p className=\"text-3xl font-bold\">{totalOrders}</p>\n        </Card>\n        <Card className=\"p-6 bg-gray-900\">\n          <h3 className=\"text-lg font-semibold text-otw-gold mb-2\">\n            Total Spent\n          </h3>\n          <p className=\"text-3xl font-bold\">${totalSpent.toFixed(2)}</p>\n        </Card>\n        <Card className=\"p-6 bg-gray-900\">\n          <h3 className=\"text-lg font-semibold text-otw-gold mb-2\">\n            Avg Rating\n          </h3>\n          <p className=\"text-3xl font-bold\">{avgRating}</p>\n        </Card>\n      </div>\n\n      <div className=\"space-y-4\">\n        {totalOrders === 0 ? (\n          <Card className=\"p-6\">\n            <div className=\"text-center py-8\">\n              <p className=\"text-lg text-gray-400 mb-4\">No orders found</p>\n              <p className=\"text-sm text-gray-500\">Your order history will appear here once you place your first order.</p>\n            </div>\n          </Card>\n        ) : (\n          <>\n            {/* Regular Orders */}\n            {orders.map((order) => (\n              <Card key={`order-${order.id}`} className=\"p-6\">\n                <div className=\"flex flex-col md:flex-row justify-between gap-4\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <h3 className=\"font-semibold text-lg\">Food Order</h3>\n                      <span className=\"text-sm text-gray-400\">#{order.id.slice(-8)}</span>\n                    </div>\n                    <div className=\"flex items-center gap-4 text-sm text-gray-400\">\n                      <div className=\"flex items-center gap-1\">\n                        <Clock className=\"w-4 h-4\" />\n                        {formatDate(order.createdAt)}\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <MapPin className=\"w-4 h-4\" />\n                        Fort Wayne\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex flex-col md:flex-row items-start md:items-center gap-4\">\n                    <div className=\"flex items-center gap-2\">\n                      <DollarSign className=\"w-4 h-4 text-otw-gold\" />\n                      <span className=\"font-semibold\">${order.total?.toFixed(2) || '0.00'}</span>\n                    </div>\n                    <div className={`capitalize ${getStatusColor(order.status)}`}>\n                      {order.status}\n                    </div>\n                    <Button variant=\"outline\" size=\"sm\">\n                      View Details\n                    </Button>\n                  </div>\n                </div>\n              </Card>\n            ))}\n\n            {/* Screenshot Orders */}\n            {screenshotOrders.map((order) => (\n              <Card key={`screenshot-${order.id}`} className=\"p-6\">\n                <div className=\"flex flex-col md:flex-row justify-between gap-4\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <h3 className=\"font-semibold text-lg\">Screenshot Order - {order.restaurantInfo?.name || 'Restaurant'}</h3>\n                      <span className=\"text-sm text-gray-400\">#{order.orderId}</span>\n                    </div>\n                    <div className=\"flex items-center gap-4 text-sm text-gray-400\">\n                      <div className=\"flex items-center gap-1\">\n                        <Clock className=\"w-4 h-4\" />\n                        {formatDate(order.timestamps?.created)}\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <MapPin className=\"w-4 h-4\" />\n                        {order.restaurantInfo?.pickupLocation || 'Fort Wayne'}\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex flex-col md:flex-row items-start md:items-center gap-4\">\n                    <div className=\"flex items-center gap-2\">\n                      <DollarSign className=\"w-4 h-4 text-otw-gold\" />\n                      <span className=\"font-semibold\">{order.orderDetails?.estimatedTotal || '$0.00'}</span>\n                    </div>\n                    <div className={`capitalize ${getStatusColor(order.status)}`}>\n                      {order.status.replace('_', ' ')}\n                    </div>\n                    <Button variant=\"outline\" size=\"sm\">\n                      View Details\n                    </Button>\n                  </div>\n                </div>\n              </Card>\n            ))}\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/dashboard/Tasks.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Star' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Users' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MessageSquare' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Camera' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Share2' is defined but never used. Allowed unused vars must match /^_/u.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":9},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[480,483],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[480,483],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'user' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":63,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":136,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4255,4258],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4255,4258],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card } from '../ui/card';\nimport { Button } from '../ui/button';\nimport {\n  CheckCircle,\n  Clock,\n  Star,\n  Gift,\n  Users,\n  MessageSquare,\n  Camera,\n  Share2,\n  Trophy,\n  Target,\n} from 'lucide-react';\nimport { useAuth } from '../../contexts/AuthContext';\n\ninterface Task {\n  id: string;\n  title: string;\n  description: string;\n  points: number;\n  type: 'daily' | 'weekly' | 'monthly' | 'achievement';\n  icon: any;\n  completed: boolean;\n  progress?: {\n    current: number;\n    total: number;\n  };\n  reward?: string;\n  expiresAt?: Date;\n}\n\n// TODO: Replace with actual API call to fetch user tasks from backend\nconst mockTasks: Task[] = [];\n\nconst getTypeColor = (type: string) => {\n  switch (type) {\n    case 'daily': return 'text-blue-400';\n    case 'weekly': return 'text-green-400';\n    case 'monthly': return 'text-purple-400';\n    case 'achievement': return 'text-otw-gold';\n    default: return 'text-gray-400';\n  }\n};\n\nconst getTypeBadge = (type: string) => {\n  switch (type) {\n    case 'daily': return 'bg-blue-500/20 text-blue-400';\n    case 'weekly': return 'bg-green-500/20 text-green-400';\n    case 'monthly': return 'bg-purple-500/20 text-purple-400';\n    case 'achievement': return 'bg-otw-gold/20 text-otw-gold';\n    default: return 'bg-gray-500/20 text-gray-400';\n  }\n};\n\nexport default function Tasks() {\n  const [tasks, setTasks] = useState<Task[]>(mockTasks);\n  const [filter, setFilter] = useState<'all' | 'daily' | 'weekly' | 'monthly' | 'achievement'>('all');\n  const [totalPoints, setTotalPoints] = useState(0);\n  const { user } = useAuth();\n\n  useEffect(() => {\n    // Calculate total points earned\n    const earned = tasks.filter(task => task.completed).reduce((sum, task) => sum + task.points, 0);\n    setTotalPoints(earned);\n  }, [tasks]);\n\n  const filteredTasks = filter === 'all' ? tasks : tasks.filter(task => task.type === filter);\n\n  const completeTask = (taskId: string) => {\n    setTasks(prev => prev.map(task =>\n      task.id === taskId ? { ...task, completed: true } : task,\n    ));\n  };\n\n  const getTimeRemaining = (expiresAt?: Date) => {\n    if (!expiresAt) {return null;}\n    const now = new Date();\n    const diff = expiresAt.getTime() - now.getTime();\n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\n    return `${hours}h ${minutes}m remaining`;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card className=\"p-4\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"p-2 rounded-full bg-otw-gold/20\">\n              <Trophy className=\"w-5 h-5 text-otw-gold\" />\n            </div>\n            <div>\n              <p className=\"text-sm text-gray-400\">Total Points</p>\n              <p className=\"text-xl font-bold text-otw-gold\">{totalPoints}</p>\n            </div>\n          </div>\n        </Card>\n\n        <Card className=\"p-4\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"p-2 rounded-full bg-green-500/20\">\n              <CheckCircle className=\"w-5 h-5 text-green-400\" />\n            </div>\n            <div>\n              <p className=\"text-sm text-gray-400\">Completed</p>\n              <p className=\"text-xl font-bold\">{tasks.filter(t => t.completed).length}</p>\n            </div>\n          </div>\n        </Card>\n\n        <Card className=\"p-4\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"p-2 rounded-full bg-blue-500/20\">\n              <Target className=\"w-5 h-5 text-blue-400\" />\n            </div>\n            <div>\n              <p className=\"text-sm text-gray-400\">Available</p>\n              <p className=\"text-xl font-bold\">{tasks.filter(t => !t.completed).length}</p>\n            </div>\n          </div>\n        </Card>\n      </div>\n\n      {/* Filter Tabs */}\n      <div className=\"flex flex-wrap gap-2\">\n        {['all', 'daily', 'weekly', 'monthly', 'achievement'].map((type) => (\n          <Button\n            key={type}\n            variant={filter === type ? 'default' : 'outline'}\n            size=\"sm\"\n            onClick={() => setFilter(type as any)}\n            className={filter === type ? 'bg-otw-gold text-black hover:bg-otw-gold/90' : ''}\n          >\n            {type.charAt(0).toUpperCase() + type.slice(1)}\n          </Button>\n        ))}\n      </div>\n\n      {/* Tasks Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        {filteredTasks.map((task) => {\n          const Icon = task.icon;\n          const progressPercentage = task.progress ? (task.progress.current / task.progress.total) * 100 : 0;\n\n          return (\n            <Card key={task.id} className={`p-6 relative ${task.completed ? 'opacity-75' : ''}`}>\n              {task.completed && (\n                <div className=\"absolute top-4 right-4\">\n                  <CheckCircle className=\"w-6 h-6 text-green-400\" />\n                </div>\n              )}\n\n              <div className=\"flex items-start gap-4\">\n                <div className={'p-3 rounded-full bg-gray-800'}>\n                  <Icon className={`w-6 h-6 ${getTypeColor(task.type)}`} />\n                </div>\n\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <h3 className=\"font-semibold\">{task.title}</h3>\n                    <span className={`px-2 py-1 rounded-full text-xs ${getTypeBadge(task.type)}`}>\n                      {task.type}\n                    </span>\n                  </div>\n\n                  <p className=\"text-sm text-gray-400 mb-3\">{task.description}</p>\n\n                  {task.progress && (\n                    <div className=\"mb-3\">\n                      <div className=\"flex justify-between text-xs text-gray-400 mb-1\">\n                        <span>Progress</span>\n                        <span>{task.progress.current}/{task.progress.total}</span>\n                      </div>\n                      <div className=\"w-full bg-gray-700 rounded-full h-2\">\n                        <div\n                          className=\"bg-otw-gold h-2 rounded-full transition-all duration-300\"\n                          style={{ width: `${progressPercentage}%` }}\n                        />\n                      </div>\n                    </div>\n                  )}\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-4\">\n                      <div className=\"flex items-center gap-1\">\n                        <Gift className=\"w-4 h-4 text-otw-gold\" />\n                        <span className=\"text-sm font-medium text-otw-gold\">{task.points} pts</span>\n                      </div>\n\n                      {task.expiresAt && (\n                        <div className=\"flex items-center gap-1\">\n                          <Clock className=\"w-4 h-4 text-orange-400\" />\n                          <span className=\"text-xs text-orange-400\">\n                            {getTimeRemaining(task.expiresAt)}\n                          </span>\n                        </div>\n                      )}\n                    </div>\n\n                    {!task.completed && (\n                      <Button\n                        size=\"sm\"\n                        onClick={() => completeTask(task.id)}\n                        className=\"bg-otw-red hover:bg-otw-gold hover:text-black\"\n                      >\n                        Complete\n                      </Button>\n                    )}\n                  </div>\n\n                  {task.reward && (\n                    <div className=\"mt-3 p-2 bg-otw-gold/10 rounded border border-otw-gold/20\">\n                      <p className=\"text-xs text-otw-gold\">\n                        <strong>Reward:</strong> {task.reward}\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </Card>\n          );\n        })}\n      </div>\n\n      {filteredTasks.length === 0 && (\n        <div className=\"text-center py-12\">\n          <Target className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-400 mb-2\">No tasks available</h3>\n          <p className=\"text-sm text-gray-500\">Check back later for new tasks and challenges!</p>\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/dashboard/TierPerks.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/dashboard/dashboard-navbar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/dashboard/dashboard-sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/events/EventCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/events/EventDetailModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/events/EventFilter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/events/RegistrationModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/examples/GeocodingExample.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1351,1354],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1351,1354],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport { useGeocoding, useAddressInput, useCurrentLocation } from '../../hooks/useGeocoding';\nimport { extractAddressComponents } from '../../lib/utils/geocoding-utils';\nimport type { GeocodeResult as _GeocodeResult, AddressValidationResult as _AddressValidationResult } from '../../lib/services/geocoding-service';\n\n/**\n * Example component demonstrating geocoding functionality\n */\nexport default function GeocodingExample() {\n  const [activeTab, setActiveTab] = useState<'geocode' | 'reverse' | 'validate' | 'input' | 'location'>('geocode');\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6 space-y-6\">\n      <div className=\"bg-white rounded-lg shadow-lg p-6\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-6\">Geocoding Service Examples</h1>\n\n        {/* Tab Navigation */}\n        <div className=\"flex space-x-1 mb-6 bg-gray-100 p-1 rounded-lg\">\n          {[\n            { key: 'geocode', label: 'Geocoding' },\n            { key: 'reverse', label: 'Reverse Geocoding' },\n            { key: 'validate', label: 'Address Validation' },\n            { key: 'input', label: 'Address Input' },\n            { key: 'location', label: 'Current Location' },\n          ].map(tab => (\n            <button\n              key={tab.key}\n              onClick={() => setActiveTab(tab.key as any)}\n              className={`px-4 py-2 rounded-md font-medium transition-colors ${\n                activeTab === tab.key\n                  ? 'bg-white text-blue-600 shadow-sm'\n                  : 'text-gray-600 hover:text-gray-900'\n              }`}\n            >\n              {tab.label}\n            </button>\n          ))}\n        </div>\n\n        {/* Tab Content */}\n        <div className=\"space-y-6\">\n          {activeTab === 'geocode' && <GeocodingTab />}\n          {activeTab === 'reverse' && <ReverseGeocodingTab />}\n          {activeTab === 'validate' && <ValidationTab />}\n          {activeTab === 'input' && <AddressInputTab />}\n          {activeTab === 'location' && <CurrentLocationTab />}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n/**\n * Geocoding tab component\n */\nfunction GeocodingTab() {\n  const [address, setAddress] = useState('');\n  const { loading, error, result, geocode, isGeocodeResult } = useGeocoding();\n\n  const handleGeocode = async () => {\n    if (address.trim()) {\n      await geocode(address);\n    }\n  };\n\n  const geocodeResult = isGeocodeResult(result) ? result : null;\n  const addressComponents = geocodeResult ? extractAddressComponents(geocodeResult) : null;\n\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-xl font-semibold text-gray-900\">Address Geocoding</h2>\n      <p className=\"text-gray-600\">Convert an address to geographic coordinates.</p>\n\n      <div className=\"flex space-x-2\">\n        <input\n          type=\"text\"\n          value={address}\n          onChange={(e) => setAddress(e.target.value)}\n          placeholder=\"Enter an address (e.g., 1600 Amphitheatre Parkway, Mountain View, CA)\"\n          className=\"flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          onKeyPress={(e) => e.key === 'Enter' && handleGeocode()}\n        />\n        <button\n          onClick={handleGeocode}\n          disabled={loading || !address.trim()}\n          className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed\"\n        >\n          {loading ? 'Geocoding...' : 'Geocode'}\n        </button>\n      </div>\n\n      {error && (\n        <div className=\"p-3 bg-red-50 border border-red-200 rounded-md\">\n          <p className=\"text-red-700\">{error}</p>\n        </div>\n      )}\n\n      {geocodeResult && (\n        <div className=\"space-y-4\">\n          <div className=\"p-4 bg-green-50 border border-green-200 rounded-md\">\n            <h3 className=\"font-semibold text-green-800 mb-2\">Geocoding Result</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n              <div>\n                <p><strong>Formatted Address:</strong></p>\n                <p className=\"text-gray-700\">{geocodeResult.formatted_address}</p>\n              </div>\n              <div>\n                <p><strong>Coordinates:</strong></p>\n                <p className=\"text-gray-700\">\n                  {geocodeResult.geometry.location.lat.toFixed(6)}, {geocodeResult.geometry.location.lng.toFixed(6)}\n                </p>\n              </div>\n              <div>\n                <p><strong>Location Type:</strong></p>\n                <p className=\"text-gray-700\">{geocodeResult.geometry.location_type}</p>\n              </div>\n              <div>\n                <p><strong>Place ID:</strong></p>\n                <p className=\"text-gray-700 break-all\">{geocodeResult.place_id}</p>\n              </div>\n            </div>\n          </div>\n\n          {addressComponents && (\n            <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-md\">\n              <h3 className=\"font-semibold text-blue-800 mb-2\">Address Components</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 text-sm\">\n                {Object.entries(addressComponents).map(([key, value]) => (\n                  value && (\n                    <div key={key}>\n                      <span className=\"font-medium\">{key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}:</span>\n                      <span className=\"ml-2 text-gray-700\">{value}</span>\n                    </div>\n                  )\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\n/**\n * Reverse geocoding tab component\n */\nfunction ReverseGeocodingTab() {\n  const [lat, setLat] = useState('');\n  const [lng, setLng] = useState('');\n  const { loading, error, result, reverseGeocode, isReverseGeocodeResult } = useGeocoding();\n\n  const handleReverseGeocode = async () => {\n    const latitude = parseFloat(lat);\n    const longitude = parseFloat(lng);\n\n    if (isValidCoordinates(latitude, longitude)) {\n      await reverseGeocode(latitude, longitude);\n    }\n  };\n\n  const reverseResult = isReverseGeocodeResult(result) ? result : null;\n\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-xl font-semibold text-gray-900\">Reverse Geocoding</h2>\n      <p className=\"text-gray-600\">Convert geographic coordinates to an address.</p>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-2\">\n        <input\n          type=\"number\"\n          value={lat}\n          onChange={(e) => setLat(e.target.value)}\n          placeholder=\"Latitude (e.g., 37.4224764)\"\n          step=\"any\"\n          className=\"px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        />\n        <input\n          type=\"number\"\n          value={lng}\n          onChange={(e) => setLng(e.target.value)}\n          placeholder=\"Longitude (e.g., -122.0842499)\"\n          step=\"any\"\n          className=\"px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        />\n        <button\n          onClick={handleReverseGeocode}\n          disabled={loading || !lat.trim() || !lng.trim()}\n          className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed\"\n        >\n          {loading ? 'Processing...' : 'Reverse Geocode'}\n        </button>\n      </div>\n\n      {error && (\n        <div className=\"p-3 bg-red-50 border border-red-200 rounded-md\">\n          <p className=\"text-red-700\">{error}</p>\n        </div>\n      )}\n\n      {reverseResult && (\n        <div className=\"p-4 bg-green-50 border border-green-200 rounded-md\">\n          <h3 className=\"font-semibold text-green-800 mb-2\">Reverse Geocoding Result</h3>\n          <div className=\"space-y-2 text-sm\">\n            <div>\n              <p><strong>Address:</strong></p>\n              <p className=\"text-gray-700\">{reverseResult.formatted_address}</p>\n            </div>\n            <div>\n              <p><strong>Place Types:</strong></p>\n              <p className=\"text-gray-700\">{reverseResult.types.join(', ')}</p>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\n/**\n * Address validation tab component\n */\nfunction ValidationTab() {\n  const [address, setAddress] = useState('');\n  const { loading, error, result, validate, isValidationResult } = useGeocoding();\n\n  const handleValidate = async () => {\n    if (address.trim()) {\n      await validate(address);\n    }\n  };\n\n  const validationResult = isValidationResult(result) ? result : null;\n\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-xl font-semibold text-gray-900\">Address Validation</h2>\n      <p className=\"text-gray-600\">Validate an address and check its deliverability.</p>\n\n      <div className=\"flex space-x-2\">\n        <input\n          type=\"text\"\n          value={address}\n          onChange={(e) => setAddress(e.target.value)}\n          placeholder=\"Enter an address to validate\"\n          className=\"flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          onKeyPress={(e) => e.key === 'Enter' && handleValidate()}\n        />\n        <button\n          onClick={handleValidate}\n          disabled={loading || !address.trim()}\n          className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed\"\n        >\n          {loading ? 'Validating...' : 'Validate'}\n        </button>\n      </div>\n\n      {error && (\n        <div className=\"p-3 bg-red-50 border border-red-200 rounded-md\">\n          <p className=\"text-red-700\">{error}</p>\n        </div>\n      )}\n\n      {validationResult && (\n        <div className=\"space-y-4\">\n          <div className={`p-4 border rounded-md ${\n            validationResult.isValid\n              ? 'bg-green-50 border-green-200'\n              : 'bg-red-50 border-red-200'\n          }`}>\n            <h3 className={`font-semibold mb-2 ${\n              validationResult.isValid ? 'text-green-800' : 'text-red-800'\n            }`}>\n              Validation Result\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n              <div>\n                <p><strong>Valid:</strong></p>\n                <p className={validationResult.isValid ? 'text-green-700' : 'text-red-700'}>\n                  {validationResult.isValid ? 'Yes' : 'No'}\n                </p>\n              </div>\n              <div>\n                <p><strong>Deliverable:</strong></p>\n                <p className={validationResult.isDeliverable ? 'text-green-700' : 'text-red-700'}>\n                  {validationResult.isDeliverable ? 'Yes' : 'No'}\n                </p>\n              </div>\n              <div>\n                <p><strong>Confidence:</strong></p>\n                <p className=\"text-gray-700 capitalize\">{validationResult.confidence}</p>\n              </div>\n            </div>\n          </div>\n\n          {validationResult.issues.length > 0 && (\n            <div className=\"p-4 bg-yellow-50 border border-yellow-200 rounded-md\">\n              <h3 className=\"font-semibold text-yellow-800 mb-2\">Issues Found</h3>\n              <ul className=\"list-disc list-inside space-y-1 text-sm text-yellow-700\">\n                {validationResult.issues.map((issue, index) => (\n                  <li key={index}>{issue}</li>\n                ))}\n              </ul>\n            </div>\n          )}\n\n          {validationResult.geocodeResult && (\n            <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-md\">\n              <h3 className=\"font-semibold text-blue-800 mb-2\">Geocoded Address</h3>\n              <p className=\"text-sm text-blue-700\">{validationResult.geocodeResult.formatted_address}</p>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\n/**\n * Address input tab component\n */\nfunction AddressInputTab() {\n  const {\n    inputValue,\n    selectedAddress,\n    validation,\n    loading,\n    error,\n    suggestions,\n    handleInputChange,\n    handleAddressSelect,\n    clearInput,\n    isValid,\n    isDeliverable,\n    confidence,\n    issues,\n  } = useAddressInput({\n    autoValidate: true,\n    onAddressSelect: (result) => {\n      console.log('Address selected:', result);\n    },\n    onValidationChange: (validation) => {\n      console.log('Validation changed:', validation);\n    },\n  });\n\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-xl font-semibold text-gray-900\">Smart Address Input</h2>\n      <p className=\"text-gray-600\">Address input with auto-validation and suggestions.</p>\n\n      <div className=\"space-y-2\">\n        <div className=\"relative\">\n          <input\n            type=\"text\"\n            value={inputValue}\n            onChange={(e) => handleInputChange(e.target.value)}\n            placeholder=\"Start typing an address...\"\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          />\n          {inputValue && (\n            <button\n              onClick={clearInput}\n              className=\"absolute right-2 top-2 text-gray-400 hover:text-gray-600\"\n            >\n              ✕\n            </button>\n          )}\n        </div>\n\n        {loading && (\n          <p className=\"text-sm text-blue-600\">Validating address...</p>\n        )}\n\n        {error && (\n          <p className=\"text-sm text-red-600\">{error}</p>\n        )}\n      </div>\n\n      {suggestions.length > 0 && !selectedAddress && (\n        <div className=\"border border-gray-200 rounded-md\">\n          <h3 className=\"font-semibold text-gray-900 p-3 border-b border-gray-200\">Suggestions</h3>\n          <div className=\"divide-y divide-gray-200\">\n            {suggestions.map((suggestion, index) => (\n              <button\n                key={index}\n                onClick={() => handleAddressSelect(suggestion.formatted_address)}\n                className=\"w-full text-left p-3 hover:bg-gray-50 transition-colors\"\n              >\n                <p className=\"text-sm text-gray-900\">{suggestion.formatted_address}</p>\n                <p className=\"text-xs text-gray-500\">\n                  {suggestion.geometry.location.lat.toFixed(6)}, {suggestion.geometry.location.lng.toFixed(6)}\n                </p>\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {selectedAddress && (\n        <div className=\"p-4 bg-green-50 border border-green-200 rounded-md\">\n          <h3 className=\"font-semibold text-green-800 mb-2\">Selected Address</h3>\n          <p className=\"text-sm text-green-700\">{selectedAddress.formatted_address}</p>\n          <p className=\"text-xs text-green-600 mt-1\">\n            {selectedAddress.geometry.location.lat.toFixed(6)}, {selectedAddress.geometry.location.lng.toFixed(6)}\n          </p>\n        </div>\n      )}\n\n      {validation && (\n        <div className={`p-4 border rounded-md ${\n          isValid ? 'bg-green-50 border-green-200' : 'bg-red-50 border-red-200'\n        }`}>\n          <h3 className={`font-semibold mb-2 ${\n            isValid ? 'text-green-800' : 'text-red-800'\n          }`}>\n            Address Validation\n          </h3>\n          <div className=\"grid grid-cols-3 gap-4 text-sm\">\n            <div>\n              <p><strong>Valid:</strong></p>\n              <p className={isValid ? 'text-green-700' : 'text-red-700'}>\n                {isValid ? 'Yes' : 'No'}\n              </p>\n            </div>\n            <div>\n              <p><strong>Deliverable:</strong></p>\n              <p className={isDeliverable ? 'text-green-700' : 'text-red-700'}>\n                {isDeliverable ? 'Yes' : 'No'}\n              </p>\n            </div>\n            <div>\n              <p><strong>Confidence:</strong></p>\n              <p className=\"text-gray-700 capitalize\">{confidence}</p>\n            </div>\n          </div>\n\n          {issues.length > 0 && (\n            <div className=\"mt-3\">\n              <p className=\"font-medium text-yellow-800 mb-1\">Issues:</p>\n              <ul className=\"list-disc list-inside space-y-1 text-sm text-yellow-700\">\n                {issues.map((issue, index) => (\n                  <li key={index}>{issue}</li>\n                ))}\n              </ul>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\n/**\n * Current location tab component\n */\nfunction CurrentLocationTab() {\n  const {\n    coords,\n    address,\n    loading,\n    error,\n    getCurrentLocation,\n    clearLocation,\n    hasLocation,\n  } = useCurrentLocation();\n\n  const [targetLat, setTargetLat] = useState('');\n  const [targetLng, setTargetLng] = useState('');\n  const [distance, setDistance] = useState<number | null>(null);\n\n  const calculateDistanceToTarget = () => {\n    if (coords && targetLat && targetLng) {\n      const targetLatNum = parseFloat(targetLat);\n      const targetLngNum = parseFloat(targetLng);\n\n      if (isValidCoordinates(targetLatNum, targetLngNum)) {\n        const dist = calculateDistance(\n          coords.latitude,\n          coords.longitude,\n          targetLatNum,\n          targetLngNum,\n        );\n        setDistance(dist);\n      }\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-xl font-semibold text-gray-900\">Current Location</h2>\n      <p className=\"text-gray-600\">Get your current location and reverse geocode it to an address.</p>\n\n      <div className=\"flex space-x-2\">\n        <button\n          onClick={getCurrentLocation}\n          disabled={loading}\n          className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed\"\n        >\n          {loading ? 'Getting Location...' : 'Get Current Location'}\n        </button>\n\n        {hasLocation && (\n          <button\n            onClick={clearLocation}\n            className=\"px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700\"\n          >\n            Clear Location\n          </button>\n        )}\n      </div>\n\n      {error && (\n        <div className=\"p-3 bg-red-50 border border-red-200 rounded-md\">\n          <p className=\"text-red-700\">{error}</p>\n        </div>\n      )}\n\n      {coords && (\n        <div className=\"space-y-4\">\n          <div className=\"p-4 bg-green-50 border border-green-200 rounded-md\">\n            <h3 className=\"font-semibold text-green-800 mb-2\">Current Coordinates</h3>\n            <p className=\"text-sm text-green-700\">\n              Latitude: {coords.latitude.toFixed(6)}<br />\n              Longitude: {coords.longitude.toFixed(6)}\n            </p>\n          </div>\n\n          {address && (\n            <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-md\">\n              <h3 className=\"font-semibold text-blue-800 mb-2\">Current Address</h3>\n              <p className=\"text-sm text-blue-700\">{address.formatted_address}</p>\n            </div>\n          )}\n\n          {/* Distance Calculator */}\n          <div className=\"p-4 bg-gray-50 border border-gray-200 rounded-md\">\n            <h3 className=\"font-semibold text-gray-800 mb-2\">Distance Calculator</h3>\n            <p className=\"text-sm text-gray-600 mb-3\">Calculate distance to another location:</p>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-2\">\n              <input\n                type=\"number\"\n                value={targetLat}\n                onChange={(e) => setTargetLat(e.target.value)}\n                placeholder=\"Target Latitude\"\n                step=\"any\"\n                className=\"px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              />\n              <input\n                type=\"number\"\n                value={targetLng}\n                onChange={(e) => setTargetLng(e.target.value)}\n                placeholder=\"Target Longitude\"\n                step=\"any\"\n                className=\"px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              />\n              <button\n                onClick={calculateDistanceToTarget}\n                disabled={!targetLat || !targetLng}\n                className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                Calculate\n              </button>\n            </div>\n\n            {distance !== null && (\n              <div className=\"mt-3 p-3 bg-white border border-gray-200 rounded-md\">\n                <p className=\"text-sm\">\n                  <strong>Distance:</strong> {distance.toFixed(2)} km ({(distance * 0.621371).toFixed(2)} miles)\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/layout/Footer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/layout/MusicPlayer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/layout/Navbar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/layout/header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/layout/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/locations/LocationCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/locations/LocationFilter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/locations/LocationMap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/loyalty/MembershipCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/loyalty/TestimonialCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/loyalty/TierBenefitsTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/maintenance-mode.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/maps/AddressAutocomplete.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/maps/AddressSearch.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":190,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5493,5496],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5493,5496],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":199,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":199,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5791,5794],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5791,5794],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":216,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":216,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6244,6247],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6244,6247],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":253,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":253,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7375,7378],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7375,7378],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Search, MapPin, Navigation, Calculator } from 'lucide-react';\nimport {\n  useLoadScript,\n  GoogleMap,\n  Marker,\n} from '@react-google-maps/api';\nimport { Button } from '../ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\nimport { Label } from '../ui/label';\nimport { Separator } from '../ui/separator';\nimport PlaceAutocomplete from './PlaceAutocomplete';\n\nconst libraries: 'places'[] = ['places'];\n\ninterface AddressSearchProps {\n  onAddressSelect?: (address: {\n    formatted_address: string;\n    lat: number;\n    lng: number;\n    place_id?: string;\n  }) => void;\n  onDistanceCalculated?: (data: {\n    distance: number;\n    duration: number;\n    fee: number;\n  }) => void;\n  defaultLocation?: { lat: number; lng: number };\n  height?: string;\n  showFeeCalculator?: boolean;\n  baseFee?: number;\n  perMileRate?: number;\n}\n\ninterface RouteInfo {\n  distance: {\n    text: string;\n    value: number;\n  };\n  duration: {\n    text: string;\n    value: number;\n  };\n  fee: number;\n}\n\nexport default function AddressSearch({\n  onAddressSelect,\n  onDistanceCalculated,\n  defaultLocation = { lat: 40.7128, lng: -74.006 },\n  height = '500px',\n  showFeeCalculator = true,\n  baseFee = 5.99,\n  perMileRate = 1.5,\n}: AddressSearchProps) {\n  const [map, setMap] = useState<google.maps.Map | null>(null);\n  const [directionsService, setDirectionsService] =\n    useState<google.maps.DirectionsService | null>(null);\n  const [directionsRenderer, setDirectionsRenderer] =\n    useState<google.maps.DirectionsRenderer | null>(null);\n\n  const [originLocation, setOriginLocation] = useState<google.maps.LatLng | null>(null);\n  const [destinationLocation, setDestinationLocation] = useState<google.maps.LatLng | null>(null);\n  const [currentLocation, setCurrentLocation] = useState<google.maps.LatLng | null>(null);\n  const [routeInfo, setRouteInfo] = useState<RouteInfo | null>(null);\n  const [isCalculating, setIsCalculating] = useState(false);\n\n\n\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY || '',\n    libraries,\n  });\n\n  // Get user's current location\n  useEffect(() => {\n    if (navigator.geolocation && isLoaded) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          const location = new google.maps.LatLng(latitude, longitude);\n          setCurrentLocation(location);\n          if (map) {\n            map.panTo(location);\n          }\n        },\n        (error) => {\n          console.error('Error getting location:', error);\n        },\n        {\n          enableHighAccuracy: true,\n          timeout: 10000,\n          maximumAge: 300000, // 5 minutes\n        },\n      );\n    }\n  }, [map, isLoaded]);\n\n  const onMapLoad = useCallback((map: google.maps.Map) => {\n    setMap(map);\n    const directionsService = new google.maps.DirectionsService();\n    const directionsRenderer = new google.maps.DirectionsRenderer({\n      suppressMarkers: false,\n      draggable: true,\n    });\n    directionsRenderer.setMap(map);\n    setDirectionsService(directionsService);\n    setDirectionsRenderer(directionsRenderer);\n  }, []);\n\n\n\n  const calculateFee = useCallback((distanceInMeters: number): number => {\n    const distanceInMiles = distanceInMeters / 1609.34;\n    return Math.round((baseFee + (distanceInMiles * perMileRate)) * 100) / 100;\n  }, [baseFee, perMileRate]);\n\n  const calculateRoute = useCallback(async () => {\n    if (!directionsService || !originLocation || !destinationLocation) {\n      return;\n    }\n\n    setIsCalculating(true);\n\n    try {\n      const result = await new Promise<google.maps.DirectionsResult>((resolve, reject) => {\n        directionsService.route(\n          {\n            origin: originLocation,\n            destination: destinationLocation,\n            travelMode: google.maps.TravelMode.DRIVING,\n            unitSystem: google.maps.UnitSystem.IMPERIAL,\n            avoidHighways: false,\n            avoidTolls: false,\n          },\n          (result, status) => {\n            if (status === google.maps.DirectionsStatus.OK && result) {\n              resolve(result);\n            } else {\n              reject(new Error(`Directions request failed: ${status}`));\n            }\n          },\n        );\n      });\n\n      if (directionsRenderer) {\n        directionsRenderer.setDirections(result);\n      }\n\n      const route = result.routes[0];\n      if (!route) {return;}\n\n      const leg = route.legs[0];\n      if (!leg) {return;}\n\n      const distance = leg.distance?.value || 0;\n      const duration = leg.duration?.value || 0;\n      const fee = calculateFee(distance);\n\n      const routeData: RouteInfo = {\n        distance: {\n          text: leg.distance?.text || '0 mi',\n          value: distance,\n        },\n        duration: {\n          text: leg.duration?.text || '0 mins',\n          value: duration,\n        },\n        fee,\n      };\n\n      setRouteInfo(routeData);\n\n      if (onDistanceCalculated) {\n        onDistanceCalculated({\n          distance,\n          duration,\n          fee,\n        });\n      }\n    } catch (error) {\n      console.error('Error calculating route:', error);\n    } finally {\n      setIsCalculating(false);\n    }\n  }, [directionsService, directionsRenderer, originLocation, destinationLocation, calculateFee, onDistanceCalculated]);\n\n  const onOriginPlaceSelect = useCallback((place: any) => {\n    if (place && place.geometry && place.geometry.location) {\n      const location = new google.maps.LatLng(\n        place.geometry.location.lat(),\n        place.geometry.location.lng(),\n      );\n      setOriginLocation(location);\n\n      if (onAddressSelect) {\n        const addressData: any = {\n          formatted_address: place.formatted_address || '',\n          lat: place.geometry.location.lat(),\n          lng: place.geometry.location.lng(),\n        };\n        if (place.place_id) {\n          addressData.place_id = place.place_id;\n        }\n        onAddressSelect(addressData);\n      }\n\n      if (map) {\n        map.panTo(location);\n      }\n    }\n  }, [onAddressSelect, map]);\n\n  const onDestinationPlaceSelect = useCallback((place: any) => {\n    if (place && place.geometry && place.geometry.location) {\n      const location = new google.maps.LatLng(\n        place.geometry.location.lat(),\n        place.geometry.location.lng(),\n      );\n      setDestinationLocation(location);\n\n      if (map) {\n        const bounds = new google.maps.LatLngBounds();\n        if (originLocation) {bounds.extend(originLocation);}\n        bounds.extend(location);\n        map.fitBounds(bounds);\n      }\n    }\n  }, [map, originLocation]);\n\n  const handleCurrentLocation = useCallback(() => {\n    if (currentLocation && map) {\n      map.panTo(currentLocation);\n      map.setZoom(15);\n      setOriginLocation(currentLocation);\n\n      // Note: PlaceAutocomplete will handle the display value internally\n\n      if (onAddressSelect) {\n        onAddressSelect({\n          formatted_address: 'Current Location',\n          lat: currentLocation.lat(),\n          lng: currentLocation.lng(),\n        });\n      }\n    }\n  }, [currentLocation, map, onAddressSelect]);\n\n  const clearRoute = useCallback(() => {\n    if (directionsRenderer) {\n      directionsRenderer.setDirections({ routes: [] } as any);\n    }\n    setRouteInfo(null);\n    setOriginLocation(null);\n    setDestinationLocation(null);\n    // Note: PlaceAutocomplete components will handle clearing internally\n  }, [directionsRenderer]);\n\n  // Auto-calculate route when both locations are set\n  useEffect(() => {\n    if (originLocation && destinationLocation) {\n      calculateRoute();\n    }\n  }, [originLocation, destinationLocation, calculateRoute]);\n\n  if (loadError) {\n    return (\n      <Card className=\"w-full\">\n        <CardContent className=\"p-6\">\n          <div className=\"text-center text-red-500\">\n            Error loading Google Maps. Please check your API key configuration.\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!isLoaded) {\n    return (\n      <Card className=\"w-full\">\n        <CardContent className=\"p-6\">\n          <div className=\"text-center\">Loading maps...</div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"w-full overflow-hidden\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <MapPin className=\"h-5 w-5\" />\n          Address Search & Route Calculator\n        </CardTitle>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        {/* Origin Address Input */}\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"origin\">From (Origin)</Label>\n          <div className=\"relative\">\n            <PlaceAutocomplete\n              onPlaceSelect={onOriginPlaceSelect}\n              placeholder=\"Enter pickup address...\"\n              className=\"pl-10\"\n              types={['address']}\n              componentRestrictions={{ country: 'us' }}\n            />\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n            <Button\n              type=\"button\"\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"absolute right-2 top-1/2 transform -translate-y-1/2\"\n              onClick={handleCurrentLocation}\n            >\n              <Navigation className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n\n        {/* Destination Address Input */}\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"destination\">To (Destination)</Label>\n          <div className=\"relative\">\n            <PlaceAutocomplete\n              onPlaceSelect={onDestinationPlaceSelect}\n              placeholder=\"Enter delivery address...\"\n              className=\"pl-10\"\n              types={['address']}\n              componentRestrictions={{ country: 'us' }}\n            />\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n          </div>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex gap-2\">\n          <Button\n            onClick={calculateRoute}\n            disabled={!originLocation || !destinationLocation || isCalculating}\n            className=\"flex-1\"\n          >\n            {isCalculating ? (\n              <>\n                <Calculator className=\"mr-2 h-4 w-4 animate-spin\" />\n                Calculating...\n              </>\n            ) : (\n              <>\n                <Calculator className=\"mr-2 h-4 w-4\" />\n                Calculate Route\n              </>\n            )}\n          </Button>\n          <Button variant=\"outline\" onClick={clearRoute}>\n            Clear\n          </Button>\n        </div>\n\n        {/* Route Information */}\n        {routeInfo && showFeeCalculator && (\n          <div className=\"space-y-3 p-4 bg-gray-50 rounded-lg\">\n            <h4 className=\"font-semibold text-sm\">Route Information</h4>\n            <div className=\"grid grid-cols-3 gap-4 text-sm\">\n              <div className=\"text-center\">\n                <div className=\"font-medium text-blue-600\">{routeInfo.distance.text}</div>\n                <div className=\"text-gray-500\">Distance</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"font-medium text-green-600\">{routeInfo.duration.text}</div>\n                <div className=\"text-gray-500\">Duration</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"font-medium text-purple-600\">${routeInfo.fee.toFixed(2)}</div>\n                <div className=\"text-gray-500\">Delivery Fee</div>\n              </div>\n            </div>\n            <Separator />\n            <div className=\"text-xs text-gray-600\">\n              <div>Base fee: ${baseFee.toFixed(2)}</div>\n              <div>Rate: ${perMileRate.toFixed(2)} per mile</div>\n            </div>\n          </div>\n        )}\n\n        {/* Map */}\n        <div className=\"relative rounded-lg overflow-hidden\" style={{ height }}>\n          <GoogleMap\n            mapContainerStyle={{ width: '100%', height: '100%' }}\n            center={currentLocation || defaultLocation}\n            zoom={13}\n            onLoad={onMapLoad}\n            options={{\n              styles: [\n                {\n                  featureType: 'poi',\n                  elementType: 'labels',\n                  stylers: [{ visibility: 'off' }],\n                },\n              ],\n              disableDefaultUI: true,\n              zoomControl: true,\n              mapTypeControl: false,\n              streetViewControl: false,\n              fullscreenControl: true,\n            }}\n          >\n            {/* Origin Marker */}\n            {originLocation && (\n              <Marker\n                position={originLocation}\n                title=\"Origin\"\n                icon={{\n                  url: \"data:image/svg+xml;charset=UTF-8,%3csvg width='20' height='20' viewBox='0 0 20 20' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3ccircle cx='10' cy='10' r='8' fill='%234ade80'/%3e%3ccircle cx='10' cy='10' r='3' fill='white'/%3e%3c/svg%3e\",\n                  scaledSize: new google.maps.Size(20, 20),\n                }}\n              />\n            )}\n\n            {/* Destination Marker */}\n            {destinationLocation && (\n              <Marker\n                position={destinationLocation}\n                title=\"Destination\"\n                icon={{\n                  url: \"data:image/svg+xml;charset=UTF-8,%3csvg width='20' height='20' viewBox='0 0 20 20' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3ccircle cx='10' cy='10' r='8' fill='%23ef4444'/%3e%3ccircle cx='10' cy='10' r='3' fill='white'/%3e%3c/svg%3e\",\n                  scaledSize: new google.maps.Size(20, 20),\n                }}\n              />\n            )}\n          </GoogleMap>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/maps/MapSearch.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'currentLocation'. Either include it or remove the dependency array.","line":74,"column":6,"nodeType":"ArrayExpression","endLine":74,"endColumn":29,"suggestions":[{"desc":"Update the dependencies array to be: [currentLocation, map, selectedLocation]","fix":{"range":[2306,2329],"text":"[currentLocation, map, selectedLocation]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport {\n  GoogleMap,\n  Marker,\n  useLoadScript,\n} from '@react-google-maps/api';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Search, Navigation } from 'lucide-react';\nimport PlaceAutocomplete from './PlaceAutocomplete';\n\nconst libraries: 'places'[] = ['places'];\n\ninterface MapSearchProps {\n  onLocationSelect?: (location: {\n    lat: number;\n    lng: number;\n    address: string;\n  }) => void;\n  defaultLocation?: { lat: number; lng: number };\n  height?: string;\n  showSearchBar?: boolean;\n}\n\nexport default function MapSearch({\n  onLocationSelect,\n  defaultLocation = { lat: 41.0793, lng: -85.1394 }, // Default to Fort Wayne, IN\n  height = '400px',\n  showSearchBar = true,\n}: MapSearchProps) {\n  const [map, setMap] = useState<google.maps.Map | null>(null);\n  const [selectedLocation, setSelectedLocation] =\n    useState<google.maps.LatLng | null>(null);\n  const [currentLocation, setCurrentLocation] =\n    useState<google.maps.LatLng | null>(null);\n\n\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY || '',\n    libraries,\n  });\n\n  useEffect(() => {\n    // Set Fort Wayne as the initial center when map loads\n    if (map && !currentLocation && !selectedLocation) {\n      const fortWayneLocation = new google.maps.LatLng(41.0793, -85.1394);\n      map.panTo(fortWayneLocation);\n      map.setZoom(13);\n    }\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          const location = new google.maps.LatLng(latitude, longitude);\n          setCurrentLocation(location);\n          // Only pan to user location if they haven't selected anything yet\n          if (map && !selectedLocation) {\n            map.panTo(location);\n          }\n        },\n        (error) => {\n          console.error('Error getting location:', error);\n          // If geolocation fails, ensure we stay centered on Fort Wayne\n          if (map) {\n            const fortWayneLocation = new google.maps.LatLng(41.0793, -85.1394);\n            map.panTo(fortWayneLocation);\n          }\n        },\n      );\n    }\n  }, [map, selectedLocation]);\n\n  const onMapLoad = (map: google.maps.Map) => {\n    setMap(map);\n  };\n\n  const onPlaceSelect = useCallback((place: google.maps.places.PlaceResult) => {\n    if (place && place.geometry && place.geometry.location) {\n      const location = new google.maps.LatLng(\n        place.geometry.location.lat(),\n        place.geometry.location.lng(),\n      );\n      setSelectedLocation(location);\n\n      if (map) {\n        map.panTo(location);\n        map.setZoom(15);\n      }\n\n      if (onLocationSelect) {\n        onLocationSelect({\n          lat: location.lat(),\n          lng: location.lng(),\n          address: place.formatted_address || place.name || '',\n        });\n      }\n    }\n  }, [map, onLocationSelect]);\n\n  const handleCurrentLocation = () => {\n    if (currentLocation && map) {\n      map.panTo(currentLocation);\n      map.setZoom(15);\n      setSelectedLocation(currentLocation);\n      if (onLocationSelect) {\n        onLocationSelect({\n          lat: currentLocation.lat(),\n          lng: currentLocation.lng(),\n          address: 'Current Location',\n        });\n      }\n    }\n  };\n\n  if (loadError) {\n    return <div>Error loading maps</div>;\n  }\n\n  if (!isLoaded) {\n    return <div>Loading maps...</div>;\n  }\n\n  return (\n    <Card className=\"w-full overflow-hidden\">\n      {showSearchBar && (\n        <div className=\"p-4 border-b\">\n          <div className=\"relative\">\n            <PlaceAutocomplete\n              onPlaceSelect={onPlaceSelect}\n              placeholder=\"Enter address in Fort Wayne, IN...\"\n              className=\"pl-10 pr-12 py-2 w-full\"\n            />\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n            <Button\n              type=\"button\"\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"absolute right-2 top-1/2 transform -translate-y-1/2\"\n              onClick={handleCurrentLocation}\n              title=\"Use current location\"\n            >\n              <Navigation className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      )}\n\n      <div className=\"relative\" style={{ height }}>\n        <GoogleMap\n          mapContainerStyle={{ width: '100%', height: '100%' }}\n          center={defaultLocation}\n          zoom={13}\n          onLoad={onMapLoad}\n          options={{\n            styles: [\n              {\n                featureType: 'poi',\n                elementType: 'labels',\n                stylers: [{ visibility: 'off' }],\n              },\n            ],\n            disableDefaultUI: true,\n            zoomControl: true,\n          }}\n        >\n          {selectedLocation && (\n            <Marker\n              position={selectedLocation}\n              animation={google.maps.Animation.DROP}\n            />\n          )}\n        </GoogleMap>\n\n        {!showSearchBar && (\n          <Button\n            onClick={handleCurrentLocation}\n            className=\"absolute bottom-4 right-4 bg-white text-black hover:bg-gray-100 shadow-lg\"\n            size=\"icon\"\n            title=\"Use current location\"\n          >\n            <Navigation className=\"h-5 w-5\" />\n          </Button>\n        )}\n      </div>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/maps/PlaceAutocomplete.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1315,1318],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1315,1318],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2824,2827],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2824,2827],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":119,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3592,3595],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3592,3595],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useRef, useEffect } from 'react';\nimport { useJsApiLoader } from '@react-google-maps/api';\nimport { MapPin } from 'lucide-react';\nimport { Input } from '../ui/input';\nimport { cn } from '@/lib/utils';\n\nconst libraries: 'places'[] = ['places'];\n\ninterface PlaceDetails {\n  formatted_address: string;\n  place_id: string;\n  geometry: {\n    location: {\n      lat: () => number;\n      lng: () => number;\n    };\n  };\n  address_components?: google.maps.GeocoderAddressComponent[];\n  name?: string;\n}\n\ninterface PlaceAutocompleteProps {\n  onPlaceSelect: (place: PlaceDetails) => void;\n  placeholder?: string;\n  className?: string;\n  disabled?: boolean;\n  showIcon?: boolean;\n  types?: string[];\n  componentRestrictions?: { country?: string | string[] };\n  bounds?: google.maps.LatLngBounds | google.maps.LatLngBoundsLiteral;\n  strictBounds?: boolean;\n  value?: string;\n  onChange?: (value: string) => void;\n}\n\nexport default function PlaceAutocomplete({\n  onPlaceSelect,\n  placeholder = 'Enter an address...',\n  className = '',\n  disabled = false,\n  showIcon = true,\n  types = ['address'],\n  componentRestrictions,\n  bounds,\n  strictBounds = false,\n  value,\n  onChange,\n}: PlaceAutocompleteProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const autocompleteElementRef = useRef<any>(null);\n\n  // Use the Google Maps API loader hook\n  const { isLoaded, loadError } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY || '',\n    libraries: libraries,\n  });\n\n  // Initialize PlaceAutocompleteElement when API is loaded\n  useEffect(() => {\n    if (!isLoaded || !containerRef.current || !window.google?.maps?.places?.PlaceAutocompleteElement) {\n      return;\n    }\n\n    try {\n      // Create the new PlaceAutocompleteElement\n      const autocompleteElement = new window.google.maps.places.PlaceAutocompleteElement({\n        types,\n        componentRestrictions,\n        bounds,\n        strictBounds,\n      });\n\n      // Configure the element\n      autocompleteElement.placeholder = placeholder;\n      if (disabled) {\n        autocompleteElement.setAttribute('disabled', 'true');\n      }\n      if (value) {\n        autocompleteElement.value = value;\n      }\n\n      // Apply styling to match the project's Input component\n      autocompleteElement.className = cn(\n        'flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50',\n        showIcon ? 'pl-10' : '',\n        className,\n      );\n\n      // Add event listeners\n      const handlePlaceSelect = (event: any) => {\n        const place = event.place;\n\n        if (place && place.location) {\n          const placeDetails: PlaceDetails = {\n            formatted_address: place.formattedAddress || '',\n            place_id: place.id || '',\n            geometry: {\n              location: {\n                lat: () => place.location.lat(),\n                lng: () => place.location.lng(),\n              },\n            },\n            address_components: place.addressComponents || [],\n            name: place.displayName,\n          };\n\n          onPlaceSelect(placeDetails);\n\n          // Update external value if onChange is provided\n          if (onChange) {\n            onChange(place.formattedAddress || '');\n          }\n        }\n      };\n\n      const handleInput = (event: any) => {\n        if (onChange) {\n          onChange(event.target.value);\n        }\n      };\n\n      autocompleteElement.addEventListener('gmp-placeselect', handlePlaceSelect);\n      autocompleteElement.addEventListener('input', handleInput);\n\n      // Add to container\n      containerRef.current.appendChild(autocompleteElement);\n      autocompleteElementRef.current = autocompleteElement;\n\n      // Cleanup function\n      return () => {\n        if (autocompleteElement) {\n          autocompleteElement.removeEventListener('gmp-placeselect', handlePlaceSelect);\n          autocompleteElement.removeEventListener('input', handleInput);\n          if (autocompleteElement.parentNode) {\n            autocompleteElement.parentNode.removeChild(autocompleteElement);\n          }\n        }\n      };\n    } catch (error) {\n      console.error('Error initializing PlaceAutocompleteElement:', error);\n    }\n  }, [isLoaded, onPlaceSelect, placeholder, disabled, types, componentRestrictions, bounds, strictBounds, className, showIcon, onChange, value]);\n\n  // Update value when prop changes\n  useEffect(() => {\n    if (autocompleteElementRef.current && value !== undefined) {\n      autocompleteElementRef.current.value = value;\n    }\n  }, [value]);\n\n  // Update disabled state when prop changes\n  useEffect(() => {\n    if (autocompleteElementRef.current) {\n      if (disabled) {\n        autocompleteElementRef.current.setAttribute('disabled', 'true');\n      } else {\n        autocompleteElementRef.current.removeAttribute('disabled');\n      }\n    }\n  }, [disabled]);\n\n  if (loadError) {\n    return (\n      <div className={cn('relative', className)}>\n        {showIcon && (\n          <div className=\"absolute left-3 top-1/2 transform -translate-y-1/2 pointer-events-none z-10\">\n            <MapPin className=\"w-4 h-4 text-muted-foreground\" />\n          </div>\n        )}\n        <Input\n          placeholder={`Error: ${loadError}`}\n          disabled\n          className={cn('h-9', showIcon ? 'pl-10' : '')}\n        />\n      </div>\n    );\n  }\n\n  if (!isLoaded) {\n    return (\n      <div className={cn('relative', className)}>\n        {showIcon && (\n          <div className=\"absolute left-3 top-1/2 transform -translate-y-1/2 pointer-events-none z-10\">\n            <MapPin className=\"w-4 h-4 text-muted-foreground\" />\n          </div>\n        )}\n        <Input\n          placeholder=\"Loading...\"\n          disabled\n          className={cn('h-9', showIcon ? 'pl-10' : '')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn('relative', className)}>\n      {showIcon && (\n        <div className=\"absolute left-3 top-1/2 transform -translate-y-1/2 pointer-events-none z-10\">\n          <MapPin className=\"w-4 h-4 text-muted-foreground\" />\n        </div>\n      )}\n      <div ref={containerRef} className=\"w-full\" />\n    </div>\n  );\n}\n\n// Export types for external use\nexport type { PlaceDetails, PlaceAutocompleteProps };","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/maps/PlaceAutocompleteExample.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/menu/CategoryFilter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/menu/CustomizationModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/menu/MenuGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/menu/MenuItemCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1165,1168],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1165,1168],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport Image from 'next/image';\nimport { FaStar, FaFire, FaLeaf, FaShoppingCart, FaPlus, FaMinus, FaCog } from 'react-icons/fa';\nimport CustomizationModal from './CustomizationModal';\n// TODO: Remove static data import - get customization options from API\nimport type { CustomizationOption } from '../../types';\n\ninterface MenuItem {\n  id: string\n  name: string\n  description: string\n  price: number\n  image: string\n  category: string\n  popular?: boolean\n  new?: boolean\n  infused?: boolean\n  dietary?: {\n    vegetarian?: boolean\n    vegan?: boolean\n    glutenFree?: boolean\n    dairyFree?: boolean\n  }\n}\n\ninterface MenuItemProps {\n  item: MenuItem\n  onAddToCart: (quantity: number, customizations?: { [categoryId: string]: CustomizationOption[] }) => void\n}\n\nconst MenuItemCard: React.FC<MenuItemProps> = ({ item, onAddToCart }) => {\n  const [quantity, setQuantity] = useState(1);\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [showCustomizationModal, setShowCustomizationModal] = useState(false);\n\n  // TODO: Replace with API call to get customization options\n  const customizationOptions: any[] = [];\n  const hasCustomizationOptions = customizationOptions.length > 0;\n\n  const handleQuantityChange = (change: number) => {\n    const newQuantity = Math.max(1, quantity + change);\n    setQuantity(newQuantity);\n  };\n\n  const handleAddToCart = () => {\n    if (hasCustomizationOptions) {\n      setShowCustomizationModal(true);\n    } else {\n      onAddToCart(quantity);\n    }\n  };\n\n  const handleCustomizedAddToCart = (\n    quantity: number,\n    customizations: { [categoryId: string]: CustomizationOption[] },\n  ) => {\n    onAddToCart(quantity, customizations);\n  };\n\n  return (\n    <>\n      <div className=\"menu-card overflow-hidden\">\n        <div className=\"relative h-48 w-full\">\n          <div className=\"absolute inset-0 bg-gradient-to-t from-black/70 to-transparent z-10\"></div>\n          {item.image ? (\n            <Image src={item.image || '/placeholder.svg'} alt={item.name} fill className=\"object-cover\" />\n          ) : (\n            <div className=\"absolute inset-0 flex items-center justify-center bg-gray-800 text-gray-500\">No Image</div>\n          )}\n\n          {/* Badges */}\n          <div className=\"absolute top-2 right-2 flex flex-col gap-2 z-20\">\n            {item.popular && (\n              <div className=\"badge bg-gold-foil text-black text-xs px-2 py-1 rounded-full flex items-center gap-1\">\n                <FaStar /> POPULAR\n              </div>\n            )}\n            {item.new && (\n              <div className=\"badge bg-blood-red text-white text-xs px-2 py-1 rounded-full flex items-center gap-1\">\n                <FaFire /> NEW\n              </div>\n            )}\n            {item.infused && (\n              <div className=\"badge bg-emerald-green text-white text-xs px-2 py-1 rounded-full flex items-center gap-1\">\n                <FaLeaf /> INFUSED\n              </div>\n            )}\n          </div>\n\n          {/* Category Tag */}\n          <div className=\"absolute bottom-2 left-2 z-20\">\n            <span className=\"text-xs bg-black bg-opacity-70 text-white px-2 py-1 rounded\">{item.category}</span>\n          </div>\n        </div>\n\n        <div className=\"p-4\">\n          <div className=\"flex justify-between items-start mb-2\">\n            <h3 className=\"text-lg font-bold text-white\">{item.name}</h3>\n            <span className=\"text-gold-foil font-bold\">${item.price.toFixed(2)}</span>\n          </div>\n\n          <p className={`text-gray-400 text-sm mb-4 ${isExpanded ? '' : 'line-clamp-2'}`}>{item.description}</p>\n\n          {item.description.length > 100 && (\n            <button className=\"text-gold-foil text-xs mb-4 hover:underline\" onClick={() => setIsExpanded(!isExpanded)}>\n              {isExpanded ? 'Show less' : 'Read more'}\n            </button>\n          )}\n\n          {/* Dietary Icons */}\n          {item.dietary && Object.values(item.dietary).some(Boolean) && (\n            <div className=\"flex flex-wrap gap-2 mb-4\">\n              {item.dietary.vegetarian && (\n                <span className=\"text-xs bg-[#333333] text-white px-2 py-1 rounded\">Vegetarian</span>\n              )}\n              {item.dietary.vegan && <span className=\"text-xs bg-[#333333] text-white px-2 py-1 rounded\">Vegan</span>}\n              {item.dietary.glutenFree && (\n                <span className=\"text-xs bg-[#333333] text-white px-2 py-1 rounded\">Gluten Free</span>\n              )}\n              {item.dietary.dairyFree && (\n                <span className=\"text-xs bg-[#333333] text-white px-2 py-1 rounded\">Dairy Free</span>\n              )}\n            </div>\n          )}\n\n          <div className=\"flex items-center gap-2\">\n            <div className=\"flex items-center border border-[#333333] rounded-md\">\n              <button\n                className=\"px-2 py-1 text-white hover:bg-[#333333] transition-colors\"\n                onClick={() => handleQuantityChange(-1)}\n              >\n                <FaMinus size={12} />\n              </button>\n              <span className=\"px-3 py-1 text-white\">{quantity}</span>\n              <button\n                className=\"px-2 py-1 text-white hover:bg-[#333333] transition-colors\"\n                onClick={() => handleQuantityChange(1)}\n              >\n                <FaPlus size={12} />\n              </button>\n            </div>\n\n            {hasCustomizationOptions ? (\n              <button\n                onClick={() => setShowCustomizationModal(true)}\n                className=\"btn-primary flex-1 flex items-center justify-center gap-2\"\n              >\n                <FaCog size={14} /> Customize\n              </button>\n            ) : (\n              <button onClick={handleAddToCart} className=\"btn-primary flex-1 flex items-center justify-center gap-2\">\n                <FaShoppingCart size={14} /> Add to Cart\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {showCustomizationModal && (\n        <CustomizationModal\n          item={item}\n          customizationOptions={customizationOptions}\n          onClose={() => setShowCustomizationModal(false)}\n          onAddToCart={handleCustomizedAddToCart}\n        />\n      )}\n    </>\n  );\n};\n\nexport default MenuItemCard;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/menu/MenuTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/modals/AgeVerificationModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/notifications/NotificationCenter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/orders/ScreenshotOrderForm.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":481,"column":29,"nodeType":"JSXOpeningElement","endLine":485,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useRef } from 'react';\nimport { useRouter } from 'next/navigation';\nimport {\n  FaArrowLeft,\n  FaUpload,\n  FaCheck,\n  FaExclamationTriangle,\n} from 'react-icons/fa';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\nimport { Button } from '../ui/button';\nimport { Input } from '../ui/input';\nimport { Textarea } from '../ui/textarea';\nimport { Label } from '../ui/label';\nimport { Alert, AlertDescription } from '../ui/alert';\n\ninterface ScreenshotOrderData {\n  customerName: string;\n  customerPhone: string;\n  customerEmail: string;\n  restaurantName: string;\n  pickupLocation: string;\n  estimatedTotal: string;\n  specialInstructions: string;\n  screenshot: File | null;\n  screenshotPreview: string | null;\n}\n\nexport default function ScreenshotOrderForm() {\n  const router = useRouter();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [orderComplete, setOrderComplete] = useState(false);\n  const [orderId, setOrderId] = useState<string | null>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  const [formData, setFormData] = useState<ScreenshotOrderData>({\n    customerName: '',\n    customerPhone: '',\n    customerEmail: '',\n    restaurantName: '',\n    pickupLocation: '',\n    estimatedTotal: '',\n    specialInstructions: '',\n    screenshot: null,\n    screenshotPreview: null,\n  });\n\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  const handleInputChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n\n    if (errors[name]) {\n      setErrors(prev => ({ ...prev, [name]: '' }));\n    }\n  };\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      // Validate file type\n      if (!file.type.startsWith('image/')) {\n        setError('Please select a valid image file');\n        return;\n      }\n\n      // Validate file size (max 10MB)\n      if (file.size > 10 * 1024 * 1024) {\n        setError('Image file must be less than 10MB');\n        return;\n      }\n\n      // Create preview\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setFormData(prev => ({\n          ...prev,\n          screenshot: file,\n          screenshotPreview: e.target?.result as string,\n        }));\n      };\n      reader.readAsDataURL(file);\n      setError(null);\n    }\n  };\n\n  const removeScreenshot = () => {\n    setFormData(prev => ({\n      ...prev,\n      screenshot: null,\n      screenshotPreview: null,\n    }));\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  const validateForm = (): boolean => {\n    const newErrors: Record<string, string> = {};\n\n    if (!formData.customerName.trim()) {\n      newErrors.customerName = 'Name is required';\n    }\n\n    if (!formData.customerPhone.trim()) {\n      newErrors.customerPhone = 'Phone number is required';\n    } else if (!/^[\\d\\s\\-\\(\\)\\+]{10,}$/.test(formData.customerPhone)) {\n      newErrors.customerPhone = 'Please enter a valid phone number';\n    }\n\n    if (!formData.customerEmail.trim()) {\n      newErrors.customerEmail = 'Email is required';\n    } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.customerEmail)) {\n      newErrors.customerEmail = 'Please enter a valid email address';\n    }\n\n    if (!formData.restaurantName.trim()) {\n      newErrors.restaurantName = 'Restaurant name is required';\n    }\n\n    if (!formData.pickupLocation.trim()) {\n      newErrors.pickupLocation = 'Pickup location is required';\n    }\n\n    if (!formData.estimatedTotal.trim()) {\n      newErrors.estimatedTotal = 'Estimated total is required';\n    } else if (!/^\\$?\\d+(\\.\\d{2})?$/.test(formData.estimatedTotal)) {\n      newErrors.estimatedTotal = 'Please enter a valid amount (e.g., $25.99)';\n    }\n\n    if (!formData.screenshot) {\n      newErrors.screenshot = 'Screenshot is required';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!validateForm()) {\n      setError('Please correct the errors in the form');\n      return;\n    }\n\n    setIsSubmitting(true);\n    setError(null);\n\n    try {\n      // Create FormData for file upload\n      const submitData = new FormData();\n      submitData.append('customerName', formData.customerName);\n      submitData.append('customerPhone', formData.customerPhone);\n      submitData.append('customerEmail', formData.customerEmail);\n      submitData.append('restaurantName', formData.restaurantName);\n      submitData.append('pickupLocation', formData.pickupLocation);\n      submitData.append('estimatedTotal', formData.estimatedTotal);\n      submitData.append('specialInstructions', formData.specialInstructions);\n      if (formData.screenshot) {\n        submitData.append('screenshot', formData.screenshot);\n      }\n\n      // Submit to API\n      const response = await fetch('/api/orders/screenshot', {\n        method: 'POST',\n        body: submitData,\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to submit order');\n      }\n\n      const result = await response.json();\n      setOrderId(result.orderId);\n      setOrderComplete(true);\n    } catch (err) {\n      console.error('Order submission error:', err);\n      setError('There was an error submitting your order. Please try again.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  if (orderComplete) {\n    return (\n      <div className=\"min-h-screen py-20\">\n        <div className=\"container mx-auto px-4 max-w-2xl\">\n          <Card className=\"bg-[#1A1A1A] border-[#333333]\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"w-20 h-20 bg-emerald-green bg-opacity-20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <FaCheck className=\"text-emerald-green text-3xl\" />\n              </div>\n              <h1 className=\"text-3xl font-bold mb-4\">Order Submitted!</h1>\n              <p className=\"text-gray-300 mb-6\">\n                Thank you! Your screenshot order has been received. Our team will review your order and contact you shortly to confirm details and arrange pickup.\n              </p>\n\n              <div className=\"bg-[#111111] p-6 rounded-lg mb-6\">\n                <div className=\"flex justify-between items-center mb-4\">\n                  <h2 className=\"text-xl font-bold\">Order #{orderId}</h2>\n                  <span className=\"bg-yellow-500 bg-opacity-20 text-yellow-500 px-3 py-1 rounded-full text-sm\">\n                    Under Review\n                  </span>\n                </div>\n                <div className=\"text-left space-y-2\">\n                  <p><strong>Restaurant:</strong> {formData.restaurantName}</p>\n                  <p><strong>Pickup Location:</strong> {formData.pickupLocation}</p>\n                  <p><strong>Estimated Total:</strong> {formData.estimatedTotal}</p>\n                  <p><strong>Contact:</strong> {formData.customerPhone}</p>\n                </div>\n              </div>\n\n              <Alert className=\"mb-6 bg-blue-500/10 border-blue-500/20\">\n                <AlertDescription className=\"text-blue-300\">\n                  <strong>Next Steps:</strong> Our team will call you within 15-30 minutes to confirm your order details, verify the total amount, and provide pickup instructions.\n                </AlertDescription>\n              </Alert>\n\n              <div className=\"flex gap-4 justify-center\">\n                <Button\n                  onClick={() => router.push('/orders')}\n                  className=\"btn-primary\"\n                >\n                  View My Orders\n                </Button>\n                <Button\n                  onClick={() => router.push('/')}\n                  variant=\"outline\"\n                  className=\"border-[#333333] text-white hover:bg-[#333333]\"\n                >\n                  Back to Home\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen py-20\">\n      <div className=\"container mx-auto px-4 max-w-4xl\">\n        <div className=\"mb-8\">\n          <Button\n            onClick={() => router.back()}\n            variant=\"ghost\"\n            className=\"text-white hover:bg-[#333333] mb-6\"\n          >\n            <FaArrowLeft className=\"mr-2\" /> Back\n          </Button>\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-4xl font-bold mb-4\">Screenshot Order Service</h1>\n            <p className=\"text-xl text-gray-300 mb-6\">\n              Simply upload a screenshot of your order, and we&apos;ll handle everything else!\n            </p>\n\n            {/* Process Steps */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\n              <div className=\"bg-[#1A1A1A] border border-[#333333] rounded-lg p-4\">\n                <div className=\"w-8 h-8 bg-orange-500 rounded-full flex items-center justify-center mx-auto mb-2\">\n                  <span className=\"text-white text-sm font-bold\">1</span>\n                </div>\n                <h3 className=\"font-semibold mb-1\">Upload Screenshot</h3>\n                <p className=\"text-xs text-gray-400\">Share your order image</p>\n              </div>\n              <div className=\"bg-[#1A1A1A] border border-[#333333] rounded-lg p-4\">\n                <div className=\"w-8 h-8 bg-orange-500 rounded-full flex items-center justify-center mx-auto mb-2\">\n                  <span className=\"text-white text-sm font-bold\">2</span>\n                </div>\n                <h3 className=\"font-semibold mb-1\">We Review</h3>\n                <p className=\"text-xs text-gray-400\">Confirm details with you</p>\n              </div>\n              <div className=\"bg-[#1A1A1A] border border-[#333333] rounded-lg p-4\">\n                <div className=\"w-8 h-8 bg-orange-500 rounded-full flex items-center justify-center mx-auto mb-2\">\n                  <span className=\"text-white text-sm font-bold\">3</span>\n                </div>\n                <h3 className=\"font-semibold mb-1\">We Order</h3>\n                <p className=\"text-xs text-gray-400\">Place & pick up for you</p>\n              </div>\n              <div className=\"bg-[#1A1A1A] border border-[#333333] rounded-lg p-4\">\n                <div className=\"w-8 h-8 bg-orange-500 rounded-full flex items-center justify-center mx-auto mb-2\">\n                  <span className=\"text-white text-sm font-bold\">4</span>\n                </div>\n                <h3 className=\"font-semibold mb-1\">Fast Delivery</h3>\n                <p className=\"text-xs text-gray-400\">Right to your door</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {error && (\n          <Alert className=\"mb-6 bg-red-500/10 border-red-500/20\">\n            <FaExclamationTriangle className=\"h-4 w-4\" />\n            <AlertDescription className=\"text-red-300\">{error}</AlertDescription>\n          </Alert>\n        )}\n\n        {/* Main Form */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Main Form */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"bg-[#1A1A1A] border-[#333333]\">\n              <CardHeader>\n                <CardTitle className=\"text-2xl\">Order Information</CardTitle>\n                <p className=\"text-gray-400\">Fill out the details below - we&apos;ll handle the rest!</p>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleSubmit} className=\"space-y-8\">\n                  {/* Step 1: Customer Information */}\n                  <div className=\"space-y-6\">\n                    <div className=\"border-l-4 border-orange-500 pl-4\">\n                      <h3 className=\"text-xl font-semibold mb-2\">Step 1: Your Information</h3>\n                      <p className=\"text-gray-400 text-sm\">We need this to contact you about your order</p>\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div>\n                        <Label htmlFor=\"customerName\" className=\"text-base font-medium mb-2 block\">\n                          Full Name *\n                        </Label>\n                        <Input\n                          id=\"customerName\"\n                          name=\"customerName\"\n                          type=\"text\"\n                          value={formData.customerName}\n                          onChange={handleInputChange}\n                          className={`bg-[#111111] border-[#333333] h-12 text-base ${errors.customerName ? 'border-red-500' : ''}`}\n                          placeholder=\"John Doe\"\n                        />\n                        {errors.customerName && (\n                          <p className=\"text-red-500 text-sm mt-1\">{errors.customerName}</p>\n                        )}\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"customerPhone\" className=\"text-base font-medium mb-2 block\">\n                          Phone Number *\n                        </Label>\n                        <Input\n                          id=\"customerPhone\"\n                          name=\"customerPhone\"\n                          type=\"tel\"\n                          value={formData.customerPhone}\n                          onChange={handleInputChange}\n                          className={`bg-[#111111] border-[#333333] h-12 text-base ${errors.customerPhone ? 'border-red-500' : ''}`}\n                          placeholder=\"(555) 123-4567\"\n                        />\n                        {errors.customerPhone && (\n                          <p className=\"text-red-500 text-sm mt-1\">{errors.customerPhone}</p>\n                        )}\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"customerEmail\" className=\"text-base font-medium mb-2 block\">\n                        Email Address *\n                      </Label>\n                      <Input\n                        id=\"customerEmail\"\n                        name=\"customerEmail\"\n                        type=\"email\"\n                        value={formData.customerEmail}\n                        onChange={handleInputChange}\n                        className={`bg-[#111111] border-[#333333] h-12 text-base ${errors.customerEmail ? 'border-red-500' : ''}`}\n                        placeholder=\"john@example.com\"\n                      />\n                      {errors.customerEmail && (\n                        <p className=\"text-red-500 text-sm mt-1\">{errors.customerEmail}</p>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Step 2: Restaurant Information */}\n                  <div className=\"space-y-6\">\n                    <div className=\"border-l-4 border-orange-500 pl-4\">\n                      <h3 className=\"text-xl font-semibold mb-2\">Step 2: Restaurant Details</h3>\n                      <p className=\"text-gray-400 text-sm\">Tell us where to pick up your order</p>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"restaurantName\" className=\"text-base font-medium mb-2 block\">\n                        Restaurant Name *\n                      </Label>\n                      <Input\n                        id=\"restaurantName\"\n                        name=\"restaurantName\"\n                        type=\"text\"\n                        value={formData.restaurantName}\n                        onChange={handleInputChange}\n                        className={`bg-[#111111] border-[#333333] h-12 text-base ${errors.restaurantName ? 'border-red-500' : ''}`}\n                        placeholder=\"McDonald&apos;s, Chipotle, etc.\"\n                      />\n                      {errors.restaurantName && (\n                        <p className=\"text-red-500 text-sm mt-1\">{errors.restaurantName}</p>\n                      )}\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"pickupLocation\" className=\"text-base font-medium mb-2 block\">\n                        Pickup Location *\n                      </Label>\n                      <Input\n                        id=\"pickupLocation\"\n                        name=\"pickupLocation\"\n                        type=\"text\"\n                        value={formData.pickupLocation}\n                        onChange={handleInputChange}\n                        className={`bg-[#111111] border-[#333333] h-12 text-base ${errors.pickupLocation ? 'border-red-500' : ''}`}\n                        placeholder=\"123 Main St, Fort Wayne, IN\"\n                      />\n                      {errors.pickupLocation && (\n                        <p className=\"text-red-500 text-sm mt-1\">{errors.pickupLocation}</p>\n                      )}\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"estimatedTotal\" className=\"text-base font-medium mb-2 block\">\n                        Estimated Total *\n                      </Label>\n                      <Input\n                        id=\"estimatedTotal\"\n                        name=\"estimatedTotal\"\n                        type=\"text\"\n                        value={formData.estimatedTotal}\n                        onChange={handleInputChange}\n                        className={`bg-[#111111] border-[#333333] h-12 text-base ${errors.estimatedTotal ? 'border-red-500' : ''}`}\n                        placeholder=\"$25.99\"\n                      />\n                      <p className=\"text-xs text-gray-500 mt-1\">Total amount from your order (including tax & tip)</p>\n                      {errors.estimatedTotal && (\n                        <p className=\"text-red-500 text-sm mt-1\">{errors.estimatedTotal}</p>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Step 3: Screenshot Upload */}\n                  <div className=\"space-y-6\">\n                    <div className=\"border-l-4 border-orange-500 pl-4\">\n                      <h3 className=\"text-xl font-semibold mb-2\">Step 3: Upload Screenshot</h3>\n                      <p className=\"text-gray-400 text-sm\">Share a clear image of your order details</p>\n                    </div>\n\n                    {/* Screenshot Tips */}\n                    <div className=\"bg-blue-500/10 border border-blue-500/20 rounded-lg p-4\">\n                      <h4 className=\"font-medium text-blue-300 mb-2\">📸 Screenshot Tips:</h4>\n                      <ul className=\"text-sm text-blue-200 space-y-1\">\n                        <li>• Include restaurant name, items, and total price</li>\n                        <li>• Make sure text is clear and readable</li>\n                        <li>• Include any special instructions or modifications</li>\n                        <li>• Screenshots from any food delivery app work!</li>\n                      </ul>\n                    </div>\n\n                    {!formData.screenshotPreview ? (\n                      <div\n                        className={`border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors ${\n                          errors.screenshot ? 'border-red-500 bg-red-500/5' : 'border-[#333333] hover:border-orange-500 hover:bg-orange-500/5'\n                        }`}\n                        onClick={() => fileInputRef.current?.click()}\n                      >\n                        <FaUpload className=\"mx-auto text-4xl text-gray-400 mb-4\" />\n                        <h3 className=\"text-lg font-medium mb-2\">Upload Your Screenshot</h3>\n                        <p className=\"text-gray-400 mb-4\">\n                          Click here or drag and drop your order screenshot\n                        </p>\n                        <p className=\"text-sm text-gray-500\">\n                          Supports: JPG, PNG, WebP (Max 10MB)\n                        </p>\n                      </div>\n                    ) : (\n                      <div className=\"relative\">\n                        <div className=\"border border-[#333333] rounded-lg p-4\">\n                          <div className=\"relative w-full h-64 mb-4\">\n                            <img\n                              src={formData.screenshotPreview}\n                              alt=\"Order screenshot\"\n                              className=\"w-full h-full object-contain rounded-lg bg-[#111111]\"\n                            />\n                          </div>\n                          <div className=\"flex justify-between items-center\">\n                            <span className=\"text-sm text-gray-400\">\n                              {formData.screenshot?.name} ({Math.round((formData.screenshot?.size || 0) / 1024)}KB)\n                            </span>\n                            <Button\n                              type=\"button\"\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={removeScreenshot}\n                              className=\"border-red-500 text-red-500 hover:bg-red-500 hover:text-white\"\n                            >\n                              Remove\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n\n                    <input\n                      ref={fileInputRef}\n                      type=\"file\"\n                      accept=\"image/*\"\n                      onChange={handleFileSelect}\n                      className=\"hidden\"\n                    />\n                    {errors.screenshot && (\n                      <p className=\"text-red-500 text-sm\">{errors.screenshot}</p>\n                    )}\n                  </div>\n\n                  {/* Step 4: Special Instructions */}\n                  <div className=\"space-y-4\">\n                    <div className=\"border-l-4 border-orange-500 pl-4\">\n                      <h3 className=\"text-xl font-semibold mb-2\">Step 4: Additional Notes (Optional)</h3>\n                      <p className=\"text-gray-400 text-sm\">Any special delivery instructions or notes</p>\n                    </div>\n\n                    <div>\n                      <Textarea\n                        id=\"specialInstructions\"\n                        name=\"specialInstructions\"\n                        value={formData.specialInstructions}\n                        onChange={handleInputChange}\n                        className=\"bg-[#111111] border-[#333333] min-h-[100px] text-base\"\n                        placeholder=\"Leave at door, call when arriving, etc.\"\n                      />\n                    </div>\n                  </div>\n\n                  {/* Submit Button */}\n                  <div className=\"pt-4\">\n                    <Button\n                      type=\"submit\"\n                      disabled={isSubmitting}\n                      className=\"w-full bg-orange-500 hover:bg-orange-600 text-white font-semibold py-4 text-lg h-auto\"\n                    >\n                      {isSubmitting ? (\n                        <>\n                          <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2\"></div>\n                          Submitting Order...\n                        </>\n                      ) : (\n                        <>\n                          <FaCheck className=\"mr-2\" />\n                          Submit Screenshot Order\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                </form>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Sidebar with helpful information */}\n          <div className=\"lg:col-span-1 space-y-6\">\n            {/* Important Notice */}\n            <Card className=\"bg-yellow-500/10 border-yellow-500/20\">\n              <CardHeader>\n                <CardTitle className=\"text-yellow-300 flex items-center gap-2\">\n                  <FaExclamationTriangle className=\"h-5 w-5\" />\n                  Important Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"text-yellow-200 text-sm space-y-2\">\n                  <p><strong>📞 We&apos;ll call you:</strong> Within 15-30 minutes to confirm details</p>\n                  <p><strong>💰 Payment:</strong> Collected when we pick up your order</p>\n                  <p><strong>🚗 Service fee:</strong> Will be discussed during confirmation call</p>\n                  <p><strong>⏰ Processing:</strong> Orders handled Mon-Sun, 10 AM - 10 PM</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* How it Works */}\n            <Card className=\"bg-[#1A1A1A] border-[#333333]\">\n              <CardHeader>\n                <CardTitle className=\"text-green-400\">✅ How It Works</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-3 text-sm\">\n                  <div className=\"flex gap-3\">\n                    <span className=\"w-6 h-6 bg-orange-500 rounded-full flex items-center justify-center text-xs font-bold flex-shrink-0 mt-0.5\">1</span>\n                    <div>\n                      <p className=\"font-medium\">You submit this form</p>\n                      <p className=\"text-gray-400 text-xs\">With your screenshot and details</p>\n                    </div>\n                  </div>\n                  <div className=\"flex gap-3\">\n                    <span className=\"w-6 h-6 bg-orange-500 rounded-full flex items-center justify-center text-xs font-bold flex-shrink-0 mt-0.5\">2</span>\n                    <div>\n                      <p className=\"font-medium\">We review & call you</p>\n                      <p className=\"text-gray-400 text-xs\">To confirm details and payment</p>\n                    </div>\n                  </div>\n                  <div className=\"flex gap-3\">\n                    <span className=\"w-6 h-6 bg-orange-500 rounded-full flex items-center justify-center text-xs font-bold flex-shrink-0 mt-0.5\">3</span>\n                    <div>\n                      <p className=\"font-medium\">We place & pick up</p>\n                      <p className=\"text-gray-400 text-xs\">Your order from the restaurant</p>\n                    </div>\n                  </div>\n                  <div className=\"flex gap-3\">\n                    <span className=\"w-6 h-6 bg-orange-500 rounded-full flex items-center justify-center text-xs font-bold flex-shrink-0 mt-0.5\">4</span>\n                    <div>\n                      <p className=\"font-medium\">Fast delivery</p>\n                      <p className=\"text-gray-400 text-xs\">Right to your door</p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Contact Info */}\n            <Card className=\"bg-[#1A1A1A] border-[#333333]\">\n              <CardHeader>\n                <CardTitle className=\"text-blue-400\">📞 Need Help?</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2 text-sm\">\n                  <p><strong>Call us:</strong> (555) 123-4567</p>\n                  <p><strong>Text us:</strong> (555) 123-4567</p>\n                  <p><strong>Email:</strong> support@ezyzip.com</p>\n                  <p className=\"text-gray-400 text-xs mt-3\">Available Mon-Sun, 10 AM - 10 PM</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/otw/BookingForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/otw/OrderTracker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/partners/PartnerSignup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/profile/AvatarUpload.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[664,667],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[664,667],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[939,942],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[939,942],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1410,1413],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1410,1413],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useRef } from 'react'; // Added React import\nimport { Button } from '../ui/button';\nimport { Avatar, AvatarImage, AvatarFallback } from '../ui/avatar';\n\n// Define a more specific type for the user prop\ninterface User {\n  uid: string;\n  name?: string; // Assuming name can be optional\n  photoURL?: string; // Assuming photoURL can be optional\n}\n\n// Define types for Firebase services to avoid 'any'\n// These are simplified; for a real app, import types from 'firebase/app', 'firebase/storage', 'firebase/firestore'\ninterface FirebaseStorageRef {\n  child: (path: string) => FirebaseStorageRef;\n  put: (file: File) => Promise<any>; // Replace 'any' with actual UploadTaskSnapshot if using firebase/storage types\n  getDownloadURL: () => Promise<string>;\n}\n\ninterface FirebaseStorage {\n  ref: (path?: string) => FirebaseStorageRef;\n}\n\ninterface FirebaseFirestoreDocRef {\n  update: (data: Record<string, any>) => Promise<void>;\n}\n\ninterface FirebaseFirestoreCollectionRef {\n  doc: (documentPath: string) => FirebaseFirestoreDocRef;\n}\n\ninterface FirebaseFirestore {\n  collection: (collectionPath: string) => FirebaseFirestoreCollectionRef;\n}\n\ninterface FirebaseApp {\n  storage: () => FirebaseStorage;\n  firestore: () => FirebaseFirestore;\n}\n\n// Helper to safely access the Firebase instance from window\nconst getFirebase = (): FirebaseApp | undefined => {\n  return (window as any).firebase as FirebaseApp | undefined;\n};\n\nexport default function AvatarUpload({\n  user,\n  onUpload,\n}: {\n  user: User;\n  onUpload?: (url: string) => void;\n}) {\n  const [uploading, setUploading] = useState(false);\n  const [preview, setPreview] = useState<string | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (!file) {return;}\n\n    setPreview(URL.createObjectURL(file));\n    setUploading(true);\n\n    const firebaseApp = getFirebase();\n    if (!firebaseApp) {\n      alert('Firebase is not available.');\n      setUploading(false);\n      return;\n    }\n\n    try {\n      // Upload to Firebase Storage\n      const storageRef = firebaseApp.storage().ref();\n      const avatarRef = storageRef.child(`avatars/${user.uid}`);\n      await avatarRef.put(file);\n      const url = await avatarRef.getDownloadURL();\n\n      // Update Firestore user profile\n      await firebaseApp\n        .firestore()\n        .collection('users')\n        .doc(user.uid)\n        .update({ photoURL: url });\n\n      if (onUpload) {onUpload(url);}\n    } catch (err: unknown) {\n      console.error('Failed to upload avatar:', err); // Log the error for debugging\n      alert('Failed to upload avatar. Please try again.');\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col items-center gap-2\">\n      <Avatar className=\"w-24 h-24\">\n        <AvatarImage\n          src={preview || user.photoURL}\n          alt={user.name || 'User Avatar'}\n        />\n        <AvatarFallback>{user.name?.[0]?.toUpperCase() || 'U'}</AvatarFallback>\n      </Avatar>\n      <input\n        type=\"file\"\n        accept=\"image/*\"\n        className=\"hidden\"\n        ref={fileInputRef}\n        onChange={(e) => {\n          void handleFileChange(e);\n        }} // Added void to handle promise for onChange\n        disabled={uploading}\n      />\n      <Button\n        size=\"sm\"\n        variant=\"outline\"\n        onClick={() => fileInputRef.current?.click()}\n        disabled={uploading}\n      >\n        {uploading ? 'Uploading...' : 'Change Avatar'}\n      </Button>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/profile/UserProfile.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":68,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2093,2096],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2093,2096],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":104,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3240,3243],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3240,3243],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useEffect, useState } from 'react'; // Added React import\nimport { Card } from '../ui/card';\nimport { Button } from '../ui/button';\nimport { Input } from '../ui/input';\nimport { Badge } from '../ui/badge';\nimport AvatarUpload from './AvatarUpload';\n\n// Define interfaces for better type safety\ninterface User {\n  uid: string;\n  name: string;\n  email: string;\n  role: string;\n  rewardPoints: number;\n  photoURL?: string;\n}\n\ninterface Order {\n  stripeId?: string;\n  createdAt: string | { toDate: () => Date }; // Can be a string or a Firebase Timestamp-like object\n  total?: number;\n  status: string;\n}\n\ninterface ProfileData {\n  user: User;\n  orders: Order[];\n}\n\n// These interfaces are defined but not used in this component\n// They are kept here for documentation purposes but commented out to avoid linting warnings\n/*\ninterface ApiError {\n  message: string;\n}\n\n// This interface seems to be for a global FirebaseApp object, which is not ideal.\n// If Firebase is used, it should ideally be imported and typed correctly.\n// For now, we'll keep it if (window as any).firebase is used, but add specific services.\ninterface FirebaseApp {\n  auth: () => {\n    currentUser?: {\n      getIdToken: () => Promise<string>;\n      uid: string;\n    };\n  };\n  // Add other Firebase services if used, e.g., firestore, storage\n}\n*/\n\nexport default function UserProfile() {\n  const [profile, setProfile] = useState<ProfileData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [editing, setEditing] = useState(false);\n  const [name, setName] = useState('');\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  // const [firebase] = useState<FirebaseApp>(() => ({} as FirebaseApp)); // Unused, (window as any).firebase is used instead\n  // const [user, setUser] = useState<User | null>(null); // This seems to be a duplicate or misplaced state\n\n  useEffect(() => {\n    async function fetchProfileData() {\n      setLoading(true);\n      setError(null);\n      try {\n        const firebaseAuth = (window as any).firebase?.auth();\n        if (!firebaseAuth || !firebaseAuth.currentUser) {\n          throw new Error('Firebase user not available.');\n        }\n        const token = await firebaseAuth.currentUser.getIdToken();\n        const res = await fetch('/api/user-profile', {\n          headers: { Authorization: `Bearer ${token}` },\n        });\n        if (!res.ok) {\n          const errorData = await res.json();\n          throw new Error(\n            errorData.error || `Failed to fetch profile: ${res.statusText}`,\n          );\n        }\n        const data: ProfileData = await res.json();\n        setProfile(data);\n        setName(data.user?.name || '');\n      } catch (err: unknown) {\n        setError(\n          err instanceof Error\n            ? err.message\n            : 'An unknown error occurred while fetching profile.',\n        );\n        setProfile(null);\n      } finally {\n        setLoading(false);\n      }\n    }\n    void fetchProfileData(); // Handle no-floating-promises\n  }, []);\n\n  const handleSave = async () => {\n    if (!profile) {return;}\n    setSaving(true);\n    setError(null);\n    try {\n      const firebaseAuth = (window as any).firebase?.auth();\n      if (!firebaseAuth || !firebaseAuth.currentUser) {\n        throw new Error('Firebase user not available.');\n      }\n      const token = await firebaseAuth.currentUser.getIdToken();\n      const res = await fetch('/api/user-profile', {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify({ name }),\n      });\n      const data = await res.json(); // Assuming API returns { success: boolean, error?: string, user?: User }\n      if (!res.ok || !data.success) {\n        throw new Error(data.error || 'Failed to update name');\n      }\n      // Assuming the API returns the updated user object or we update it locally\n      setProfile((prevProfile) =>\n        prevProfile\n          ? {\n              ...prevProfile,\n              user: { ...prevProfile.user, name },\n            }\n          : null,\n      );\n      setEditing(false);\n    } catch (e: unknown) {\n      setError(\n        e instanceof Error\n          ? e.message\n          : 'An unknown error occurred while saving.',\n      );\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  if (loading)\n    {return <div className=\"text-center py-12\">Loading profile...</div>;}\n  if (error)\n    {return <div className=\"text-center py-12 text-red-500\">Error: {error}</div>;}\n  if (!profile)\n    {return (\n      <div className=\"text-center py-12 text-red-500\">\n        Could not load profile.\n      </div>\n    );}\n\n  const { user, orders } = profile;\n\n  interface BadgeInfo {\n    label: string;\n    color:\n      | 'destructive'\n      | 'default'\n      | 'secondary'\n      | 'outline'\n      | null\n      | undefined;\n  }\n\n  const badges: BadgeInfo[] = [\n    user.role === 'admin' && { label: 'Admin', color: 'destructive' },\n    user.rewardPoints > 100 && { label: 'VIP', color: 'secondary' },\n    orders && orders.length > 0 && { label: 'First Order', color: 'default' },\n  ].filter(Boolean) as BadgeInfo[];\n\n  return (\n    <div className=\"max-w-2xl mx-auto space-y-8\">\n      <Card className=\"p-6 flex flex-col gap-4\">\n        <h2 className=\"text-2xl font-bold mb-2\">Profile</h2>\n        <div className=\"flex items-center gap-4 mb-2\">\n          <AvatarUpload\n            user={user}\n            onUpload={(url) =>\n              setProfile((p) =>\n                p ? { ...p, user: { ...p.user, photoURL: url } } : null,\n              )\n            }\n          />\n          <div className=\"flex flex-col gap-2\">\n            {badges.map((b, i) => (\n              <Badge key={i} variant={b.color}>\n                {b.label}\n              </Badge>\n            ))}\n          </div>\n        </div>\n        <div className=\"flex flex-col gap-2\">\n          <label htmlFor=\"nameInput\" className=\"font-semibold\">\n            Name\n          </label>\n          {editing ? (\n            <div className=\"flex gap-2\">\n              <Input\n                id=\"nameInput\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n              />\n              <Button\n                onClick={async () => await handleSave()}\n                disabled={saving}\n              >\n                {saving ? 'Saving...' : 'Save'}\n              </Button>\n              <Button variant=\"ghost\" onClick={() => setEditing(false)}>\n                Cancel\n              </Button>\n            </div>\n          ) : (\n            <div className=\"flex items-center gap-2\">\n              <span>{user.name}</span>\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                onClick={() => setEditing(true)}\n              >\n                Edit\n              </Button>\n            </div>\n          )}\n        </div>\n        <div className=\"flex flex-col gap-2\">\n          <label htmlFor=\"emailDisplay\" className=\"font-semibold\">\n            Email\n          </label>\n          <span id=\"emailDisplay\">{user.email}</span>\n        </div>\n        <div className=\"flex flex-col gap-2\">\n          <label htmlFor=\"roleDisplay\" className=\"font-semibold\">\n            Role\n          </label>\n          <span id=\"roleDisplay\">{user.role}</span>\n        </div>\n        <div className=\"flex flex-col gap-2\">\n          <label htmlFor=\"rewardPointsDisplay\" className=\"font-semibold\">\n            Reward Points\n          </label>\n          <span id=\"rewardPointsDisplay\">{user.rewardPoints}</span>\n        </div>\n      </Card>\n      <Card className=\"p-6\">\n        <h3 className=\"font-semibold mb-4\">Order History</h3>\n        {!orders || orders.length === 0 ? (\n          <div className=\"text-gray-500\">No orders yet.</div>\n        ) : (\n          <ul className=\"space-y-2\">\n            {orders.map((order, i) => (\n              <li\n                key={order.stripeId || i}\n                className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-2 border-b border-otw-black-800 pb-2\"\n              >\n                <span className=\"font-medium text-otw-gold-600\">\n                  Order #{order.stripeId?.slice(-6) || i + 1}\n                </span>\n                <span className=\"text-xs text-gray-400\">\n                  {typeof order.createdAt === 'string'\n                    ? new Date(order.createdAt).toLocaleString()\n                    : order.createdAt?.toDate\n                      ? order.createdAt.toDate().toLocaleString()\n                      : 'N/A'}\n                </span>\n                <span className=\"text-sm\">\n                  ${order.total?.toFixed(2) || '0.00'}\n                </span>\n                <span className=\"text-xs capitalize\">{order.status}</span>\n              </li>\n            ))}\n          </ul>\n        )}\n      </Card>\n    </div>\n  );\n}\n\n// Removed unused interfaces like ApiResponse at the bottom, as they are defined locally or not used.\n// Removed misplaced useState and handleUploadPhoto function as they seem to belong to AvatarUpload or are unused.\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/restaurant/RestaurantCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/restaurants/AdvancedSearch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/restaurants/CategoryFilter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/restaurants/RestaurantCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/rewards/FaBirthdayCake.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/rewards/FaClipboardList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/rewards/FaInstagram.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/rewards/FaPercent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/rewards/FaStar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/rewards/FaTshirt.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/rewards/PointsTracker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/rewards/RedeemModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/rewards/RewardCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/rewards/RewardHistory.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/rewards/RewardsDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":75,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2227,2230],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2227,2230],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":98,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3042,3045],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3042,3045],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":119,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3748,3751],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3748,3751],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useEffect, useState } from 'react'; // Added React import\nimport { Card } from '../ui/card';\nimport { Button } from '../ui/button';\n// import { Progress } from '../ui/progress' // Removed unused Progress import\nimport { Badge } from '../ui/badge';\nimport Confetti from 'react-confetti';\n\ninterface PrizeHistoryItem {\n  prize: string;\n  date: string | Date;\n}\n\ninterface UserProfileData {\n  rewardPoints: number;\n  // Add other user properties if available from API\n}\n\ninterface RewardsData {\n  spinsRemaining: number;\n  prizeHistory: PrizeHistoryItem[];\n  lastSpinTime: string | null; // Assuming it can be a string date or null\n}\n\ninterface ProfileResponse {\n  user: UserProfileData;\n  rewards: RewardsData;\n  // Add other profile properties if available from API\n}\n\ninterface SpinResultData {\n  prize?: {\n    name: string;\n    type: string;\n  };\n  error?: string;\n  wait?: number;\n  // Add other spin result properties if available from API\n}\n\n// These interfaces are defined but not used in this component\n// They are kept here for documentation purposes but commented out to avoid linting warnings\n/*\ninterface Reward {\n  id: string;\n  name: string;\n  pointsRequired: number;\n  description: string;\n}\n\ninterface Redemption {\n  id: string;\n  rewardId: string;\n  status: 'pending' | 'completed' | 'failed';\n  createdAt: Date;\n}\n*/\n\nexport default function RewardsDashboard() {\n  const [profile, setProfile] = useState<ProfileResponse | null>(null); // Typed profile\n  const [loading, setLoading] = useState(true);\n  const [spinning, setSpinning] = useState(false);\n  const [spinResult, setSpinResult] = useState<SpinResultData | null>(null); // Typed spinResult\n  const [showConfetti, setShowConfetti] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  // const [availableRewards, setAvailableRewards] = React.useState<Reward[]>([]); // Commented out if unused\n  // const [redemptionHistory, setRedemptionHistory] = React.useState<Redemption[]>([]); // Commented out if unused\n\n  useEffect(() => {\n    async function fetchProfile() {\n      setLoading(true);\n      try {\n        // Assume Firebase Auth client SDK is available\n        const token = await (window as any).firebase\n          ?.auth()\n          .currentUser?.getIdToken();\n        const res = await fetch('/api/user-profile', {\n          headers: { Authorization: `Bearer ${token}` },\n        });\n        const data: ProfileResponse = await res.json(); // Typed data\n        setProfile(data);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Failed to load profile');\n        setProfile(null); // Set profile to null on error\n      } finally {\n        setLoading(false);\n      }\n    }\n    void fetchProfile(); // Added void to handle no-floating-promises\n  }, [spinResult]); // Consider if spinResult should trigger a full profile reload\n\n  const handleSpin = async () => {\n    setSpinning(true);\n    setError(null);\n    setSpinResult(null);\n    try {\n      const token = await (window as any).firebase\n        ?.auth()\n        .currentUser?.getIdToken();\n      const res = await fetch('/api/redeem-spin', {\n        method: 'POST',\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      const data: SpinResultData = await res.json(); // Typed data\n      if (data.error) {\n        setError(\n          data.error === 'Cooldown'\n            ? `Please wait ${Math.ceil((data.wait || 0) / 60)} min before your next spin.`\n            : data.error,\n        );\n      } else {\n        setSpinResult(data);\n        if (data.prize && data.prize.type !== 'none') {\n          setShowConfetti(true);\n          setTimeout(() => setShowConfetti(false), 4000);\n        }\n      }\n    } catch (e: any) {\n      setError(e.message);\n    } finally {\n      setSpinning(false);\n    }\n  };\n\n  if (loading)\n    {return <div className=\"text-center py-12\">Loading rewards...</div>;}\n  if (!profile || !profile.user || !profile.rewards)\n    {return (\n      <div className=\"text-center py-12 text-red-500\">\n        Could not load profile data.\n      </div>\n    );} // Added null check for profile.user and profile.rewards\n\n  const { rewards, user } = profile;\n  const spinsRemaining = rewards?.spinsRemaining || 0;\n  const prizeHistory: PrizeHistoryItem[] = rewards?.prizeHistory || [];\n  const lastSpinTime = rewards?.lastSpinTime\n    ? new Date(rewards.lastSpinTime)\n    : null;\n\n  return (\n    <div className=\"max-w-2xl mx-auto space-y-8\">\n      {showConfetti && typeof window !== 'undefined' && (\n        <Confetti\n          width={window.innerWidth}\n          height={window.innerHeight}\n          recycle={false}\n          numberOfPieces={300}\n        />\n      )}\n      <Card className=\"p-6 flex flex-col gap-4\">\n        <h2 className=\"text-2xl font-bold mb-2\">Rewards Dashboard</h2>\n        <div className=\"flex items-center gap-4\">\n          <Badge variant=\"default\">Points: {user.rewardPoints}</Badge>\n          <Badge variant={spinsRemaining > 0 ? 'default' : 'destructive'}>\n            Spins Remaining: {spinsRemaining}\n          </Badge>\n        </div>\n        <div className=\"flex items-center gap-4 mt-2\">\n          <Button\n            onClick={handleSpin}\n            disabled={spinning || spinsRemaining < 1}\n            className=\"bg-otw-gold-600 hover:bg-otw-gold-700 text-otw-black-950 font-bold px-6 py-2\"\n          >\n            {spinning ? 'Spinning...' : 'Spin the Wheel!'}\n          </Button>\n          {error && <span className=\"text-red-500 text-sm\">{error}</span>}\n        </div>\n        {spinResult && (\n          <div className=\"mt-4 text-center\">\n            <h3 className=\"text-xl font-bold mb-2\">\n              {spinResult.prize?.name || 'No Prize'}\n            </h3>\n            <p className=\"text-gray-400\">\n              {spinResult.prize?.type === 'none'\n                ? 'Better luck next time!'\n                : 'Congratulations!'}\n            </p>\n          </div>\n        )}\n        {lastSpinTime && (\n          <div className=\"text-xs text-gray-400 mt-2\">\n            Last spin: {lastSpinTime.toLocaleString()}\n          </div>\n        )}\n      </Card>\n      <Card className=\"p-6\">\n        <h3 className=\"font-semibold mb-4\">Prize History</h3>\n        {prizeHistory.length === 0 ? (\n          <div className=\"text-gray-500\">No spins yet.</div>\n        ) : (\n          <ul className=\"space-y-2\">\n            {prizeHistory\n              .slice()\n              .reverse()\n              .map((item, i) => (\n                <li key={i} className=\"flex items-center gap-2\">\n                  <span className=\"font-medium text-otw-gold-600\">\n                    {item.prize}\n                  </span>\n                  <span className=\"text-xs text-gray-400\">\n                    {new Date(item.date).toLocaleString()}\n                  </span>\n                </li>\n              ))}\n          </ul>\n        )}\n      </Card>\n    </div>\n  );\n}\n\n// Removed unused functions and state related to handleRedemption, fetchUserData, etc.\n// If they are needed, they should be properly typed and integrated.\n// For example, if firebase is used directly:\n// import firebase from 'firebase/app'; // Or your specific firebase setup\n// import 'firebase/firestore';\n\n// Example of how firebase might be typed if used directly (adjust based on your setup)\n/*\ninterface FirebaseApp {\n  auth: () => firebase.auth.Auth;\n  firestore: () => firebase.firestore.Firestore;\n  // Add other firebase services you use\n}\n\n// If you have a global firebase instance or context:\n// const firebaseApp = (window as any).firebase as FirebaseApp;\n*/\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/rewards/SpinGame.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":291,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":291,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9319,9322],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9319,9322],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport type React from 'react';\nimport { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport { FaPlay, FaVolumeUp, FaVolumeMute } from 'react-icons/fa';\nimport { useRewards } from '../../lib/context/RewardsContext';\n\ninterface SpinGameProps {\n  onComplete: (points: number) => void;\n  customSegments?: number[];\n  customColors?: string[];\n  wheelSize?: number;\n  animationDuration?: number;\n}\n\ninterface Particle {\n  x: number;\n  y: number;\n  vx: number;\n  vy: number;\n  life: number;\n  maxLife: number;\n  color: string;\n  size: number;\n}\n\nconst SpinGame: React.FC<SpinGameProps> = ({\n  onComplete,\n  customSegments,\n  customColors,\n  wheelSize = 300,\n  animationDuration = 4000,\n}) => {\n  const { addPoints } = useRewards();\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const particleCanvasRef = useRef<HTMLCanvasElement>(null);\n  const _audioRef = useRef<HTMLAudioElement>(null);\n  const [isSpinning, setIsSpinning] = useState(false);\n  const [result, setResult] = useState<number | null>(null);\n  const [canSpin, setCanSpin] = useState(true);\n  const [spinAngle, setSpinAngle] = useState(0);\n  const [finalPoints, setFinalPoints] = useState(0);\n  const [particles, setParticles] = useState<Particle[]>([]);\n  const [soundEnabled, setSoundEnabled] = useState(true);\n  const [spinVelocity, setSpinVelocity] = useState(0);\n  const [isHovering, setIsHovering] = useState(false);\n  const [currentReward, setCurrentReward] = useState<number>(0);\n  const [_highlightedSegment, setHighlightedSegment] = useState<number>(-1);\n\n  // Dynamic wheel segments with better distribution\n  const segments = useMemo(() => {\n    if (customSegments) {return customSegments;}\n    return [\n      50, 100, 75, 150, 25, 200, 125, 300, 175, 500, 250, 1000,\n    ];\n  }, [customSegments]);\n\n  // Dynamic colors with gradients\n  const colors = useMemo(() => {\n    if (customColors) {return customColors;}\n    return [\n      '#FFD700', // Gold\n      '#FF6B6B', // Coral Red\n      '#4ECDC4', // Turquoise\n      '#45B7D1', // Sky Blue\n      '#96CEB4', // Mint Green\n      '#FFEAA7', // Light Yellow\n      '#DDA0DD', // Plum\n      '#98D8C8', // Mint\n      '#F7DC6F', // Light Gold\n      '#BB8FCE', // Light Purple\n      '#85C1E9', // Light Blue\n      '#F8C471',  // Peach\n    ];\n  }, [customColors]);\n\n  // Calculate which segment the pointer is currently on\n  const getCurrentSegment = useCallback((angle: number) => {\n    const normalizedAngle = ((360 - (angle % 360)) + 360) % 360;\n    const segmentAngle = 360 / segments.length;\n    const segmentIndex = Math.floor(normalizedAngle / segmentAngle);\n    return segmentIndex % segments.length;\n  }, [segments.length]);\n\n  // Enhanced wheel drawing with gradients and effects - completely dynamic\n  const drawWheel = useCallback(\n    (\n      ctx: CanvasRenderingContext2D,\n      width: number,\n      height: number,\n      angle: number,\n    ) => {\n      // Force complete canvas reset\n      ctx.save();\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\n      ctx.clearRect(0, 0, width, height);\n      ctx.restore();\n      const centerX = width / 2;\n      const centerY = height / 2;\n      const radius = Math.min(centerX, centerY) - 20;\n      const segmentAngle = (2 * Math.PI) / segments.length;\n\n      // Calculate current segment for highlighting\n      const currentSegmentIndex = getCurrentSegment(angle);\n      setCurrentReward(segments[currentSegmentIndex] || 0);\n      setHighlightedSegment(currentSegmentIndex);\n\n      // Draw outer glow\n      ctx.shadowColor = '#FFD700';\n      ctx.shadowBlur = 20;\n      ctx.beginPath();\n      ctx.arc(centerX, centerY, radius + 10, 0, 2 * Math.PI);\n      ctx.strokeStyle = '#FFD700';\n      ctx.lineWidth = 2;\n      ctx.stroke();\n      ctx.shadowBlur = 0;\n\n      // Draw segments with gradients and highlighting\n      for (let i = 0; i < segments.length; i++) {\n        const startAngle = i * segmentAngle + (angle * Math.PI) / 180;\n        const endAngle = (i + 1) * segmentAngle + (angle * Math.PI) / 180;\n        const isHighlighted = i === currentSegmentIndex && isSpinning;\n\n        // Create gradient for each segment\n        const gradient = ctx.createRadialGradient(\n          centerX, centerY, 0,\n          centerX, centerY, radius,\n        );\n        let baseColor = colors[i] || '#FFD700';\n\n        // Brighten highlighted segment\n        if (isHighlighted) {\n          baseColor = adjustBrightness(baseColor, 40);\n        }\n\n        gradient.addColorStop(0, baseColor);\n        gradient.addColorStop(1, adjustBrightness(baseColor, -30));\n\n        ctx.beginPath();\n        ctx.moveTo(centerX, centerY);\n        ctx.arc(centerX, centerY, radius, startAngle, endAngle);\n        ctx.closePath();\n\n        ctx.fillStyle = gradient;\n        ctx.fill();\n\n        // Enhanced stroke for highlighted segment\n        ctx.strokeStyle = isHighlighted ? '#FFD700' : '#333';\n        ctx.lineWidth = isHighlighted ? 4 : 2;\n        ctx.stroke();\n\n        // Add pulsing glow effect for highlighted segment\n        if (isHighlighted) {\n          ctx.shadowColor = '#FFD700';\n          ctx.shadowBlur = 15;\n          ctx.strokeStyle = '#FFD700';\n          ctx.lineWidth = 2;\n          ctx.stroke();\n          ctx.shadowBlur = 0;\n        }\n\n        // Draw text with better styling\n        ctx.save();\n        ctx.translate(centerX, centerY);\n        ctx.rotate(startAngle + segmentAngle / 2);\n        ctx.textAlign = 'center';\n\n        // Enhanced text for highlighted segment\n        if (isHighlighted) {\n          ctx.fillStyle = '#000';\n          ctx.font = 'bold 16px Arial';\n          ctx.strokeStyle = '#FFD700';\n          ctx.lineWidth = 4;\n        } else {\n          ctx.fillStyle = '#000';\n          ctx.font = 'bold 14px Arial';\n          ctx.strokeStyle = '#fff';\n          ctx.lineWidth = 3;\n        }\n\n        ctx.strokeText((segments[i] || 0).toString(), radius - 30, 5);\n        ctx.fillText((segments[i] || 0).toString(), radius - 30, 5);\n        ctx.restore();\n      }\n\n      // Draw center hub with gradient\n      const centerGradient = ctx.createRadialGradient(\n        centerX, centerY, 0,\n        centerX, centerY, 25,\n      );\n      centerGradient.addColorStop(0, '#FFD700');\n      centerGradient.addColorStop(1, '#B8860B');\n\n      ctx.beginPath();\n      ctx.arc(centerX, centerY, 25, 0, 2 * Math.PI);\n      ctx.fillStyle = centerGradient;\n      ctx.fill();\n      ctx.strokeStyle = '#8B4513';\n      ctx.lineWidth = 3;\n      ctx.stroke();\n\n      // Draw animated pointer\n      const pointerGlow = isSpinning ? 10 : 5;\n      ctx.shadowColor = '#FF0000';\n      ctx.shadowBlur = pointerGlow;\n      ctx.beginPath();\n      ctx.moveTo(centerX, centerY - radius - 15);\n      ctx.lineTo(centerX - 15, centerY - radius + 15);\n      ctx.lineTo(centerX + 15, centerY - radius + 15);\n      ctx.closePath();\n      ctx.fillStyle = isSpinning ? '#FF4444' : '#FF0000';\n      ctx.fill();\n      ctx.strokeStyle = '#8B0000';\n      ctx.lineWidth = 2;\n      ctx.stroke();\n      ctx.shadowBlur = 0;\n    },\n    [segments, colors, isSpinning, getCurrentSegment],\n  );\n\n  // Utility function to adjust color brightness\n  const adjustBrightness = (color: string, amount: number): string => {\n    const num = parseInt(color.replace('#', ''), 16);\n    const amt = Math.round(2.55 * amount);\n    const R = (num >> 16) + amt;\n    const G = (num >> 8 & 0x00FF) + amt;\n    const B = (num & 0x0000FF) + amt;\n    return '#' + (0x1000000 + (R < 255 ? R < 1 ? 0 : R : 255) * 0x10000 +\n      (G < 255 ? G < 1 ? 0 : G : 255) * 0x100 +\n      (B < 255 ? B < 1 ? 0 : B : 255)).toString(16).slice(1);\n  };\n\n  // Create celebration particles\n  const createParticles = (centerX: number, centerY: number) => {\n    const newParticles: Particle[] = [];\n    for (let i = 0; i < 50; i++) {\n      newParticles.push({\n        x: centerX + (Math.random() - 0.5) * 100,\n        y: centerY + (Math.random() - 0.5) * 100,\n        vx: (Math.random() - 0.5) * 10,\n        vy: (Math.random() - 0.5) * 10,\n        life: 60,\n        maxLife: 60,\n        color: colors[Math.floor(Math.random() * colors.length)],\n        size: Math.random() * 5 + 2,\n      });\n    }\n    setParticles(newParticles);\n  };\n\n  // Animate particles\n  const updateParticles = useCallback(() => {\n    setParticles(prev =>\n      prev.map(particle => ({\n        ...particle,\n        x: particle.x + particle.vx,\n        y: particle.y + particle.vy,\n        vy: particle.vy + 0.2, // gravity\n        life: particle.life - 1,\n      })).filter(particle => particle.life > 0),\n    );\n  }, []);\n\n  // Draw particles\n  const drawParticles = useCallback(() => {\n    const canvas = particleCanvasRef.current;\n    if (!canvas) {return;}\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {return;}\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    particles.forEach(particle => {\n      const alpha = particle.life / particle.maxLife;\n      ctx.globalAlpha = alpha;\n      ctx.fillStyle = particle.color;\n      ctx.beginPath();\n      ctx.arc(particle.x, particle.y, particle.size, 0, 2 * Math.PI);\n      ctx.fill();\n    });\n\n    ctx.globalAlpha = 1;\n  }, [particles]);\n\n  // Play sound effect\n  const playSound = (type: 'spin' | 'win') => {\n    if (!soundEnabled) {return;}\n\n    // Create audio context for sound effects\n    const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n    const oscillator = audioContext.createOscillator();\n    const gainNode = audioContext.createGain();\n\n    oscillator.connect(gainNode);\n    gainNode.connect(audioContext.destination);\n\n    if (type === 'spin') {\n      oscillator.frequency.setValueAtTime(200, audioContext.currentTime);\n      oscillator.frequency.exponentialRampToValueAtTime(100, audioContext.currentTime + 0.5);\n      gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);\n      gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5);\n      oscillator.start();\n      oscillator.stop(audioContext.currentTime + 0.5);\n    } else if (type === 'win') {\n      oscillator.frequency.setValueAtTime(523, audioContext.currentTime);\n      oscillator.frequency.setValueAtTime(659, audioContext.currentTime + 0.1);\n      oscillator.frequency.setValueAtTime(784, audioContext.currentTime + 0.2);\n      gainNode.gain.setValueAtTime(0.2, audioContext.currentTime);\n      gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.3);\n      oscillator.start();\n      oscillator.stop(audioContext.currentTime + 0.3);\n    }\n  };\n\n  // Enhanced spinning animation with dynamic effects\n  const spinTheWheel = () => {\n    if (!canSpin || isSpinning) {return;}\n\n    setIsSpinning(true);\n    setResult(null);\n    playSound('spin');\n\n    // Weighted random selection (higher values are rarer)\n    const weights = segments.map(segment => {\n      if (segment >= 500) {return 0.5;}  // Very rare\n      if (segment >= 200) {return 1;}    // Rare\n      if (segment >= 100) {return 3;}    // Uncommon\n      return 5;                        // Common\n    });\n\n    const totalWeight = weights.reduce((sum, weight) => sum + weight, 0);\n    let random = Math.random() * totalWeight;\n    let randomSegmentIndex = 0;\n\n    for (let i = 0; i < weights.length; i++) {\n      random -= weights[i];\n      if (random <= 0) {\n        randomSegmentIndex = i;\n        break;\n      }\n    }\n\n    const points = segments[randomSegmentIndex] || 50;\n    setFinalPoints(points);\n\n    // Calculate target rotation with more randomness\n    const segmentAngle = 360 / segments.length;\n    const extraSpins = 5 + Math.random() * 3; // 5-8 full rotations\n    const segmentOffset = (Math.random() - 0.5) * (segmentAngle * 0.8); // Random position within segment\n    const targetRotation = 360 * extraSpins - (randomSegmentIndex * segmentAngle + segmentAngle / 2 + segmentOffset);\n\n    // Dynamic animation with variable speed\n    let start = 0;\n    const startAngle = spinAngle;\n    let currentVelocity = 0;\n    const _maxVelocity = 20;\n\n    // Enhanced easing with bounce effect\n    const easeOutElastic = (t: number): number => {\n      const c4 = (2 * Math.PI) / 3;\n      return t === 0 ? 0 : t === 1 ? 1 :\n        Math.pow(2, -10 * t) * Math.sin((t * 10 - 0.75) * c4) + 1;\n    };\n\n    const animate = (timestamp: number) => {\n      if (!start) {start = timestamp;}\n      const progress = timestamp - start;\n      const time = Math.min(progress / animationDuration, 1);\n\n      // Use different easing for different phases\n      let easedTime;\n      if (time < 0.7) {\n        // Acceleration phase\n        easedTime = time / 0.7;\n        easedTime = 1 - Math.pow(1 - easedTime, 3); // ease-out-cubic\n      } else {\n        // Deceleration phase with elastic effect\n        const decelerationTime = (time - 0.7) / 0.3;\n        easedTime = 0.7 + 0.3 * easeOutElastic(decelerationTime);\n      }\n\n      const newAngle = startAngle + (targetRotation - startAngle) * easedTime;\n      setSpinAngle(newAngle);\n\n      // Calculate velocity for visual effects\n      currentVelocity = Math.abs(newAngle - spinAngle) * 0.1;\n      setSpinVelocity(currentVelocity);\n\n      // Force complete wheel redraw from scratch\n      const canvas = canvasRef.current;\n      if (canvas) {\n        const ctx = canvas.getContext('2d');\n        if (ctx) {\n          // Clear all cached state and force fresh render\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          ctx.save();\n          ctx.setTransform(1, 0, 0, 1, 0, 0);\n          drawWheel(ctx, canvas.width, canvas.height, newAngle);\n          ctx.restore();\n        }\n      }\n\n      if (time < 1) {\n        requestAnimationFrame(animate);\n      } else {\n        setIsSpinning(false);\n        setResult(points);\n        setCanSpin(false);\n        setSpinVelocity(0);\n        playSound('win');\n\n        // Create celebration particles\n        const canvas = canvasRef.current;\n        if (canvas) {\n          createParticles(canvas.width / 2, canvas.height / 2);\n        }\n      }\n    };\n\n    requestAnimationFrame(animate);\n  };\n\n  // Initialize wheel and particle system - force fresh render every time\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const ctx = canvas.getContext('2d');\n      if (ctx) {\n        // Clear any cached rendering state\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        // Force complete redraw from scratch\n        drawWheel(ctx, canvas.width, canvas.height, spinAngle);\n      }\n    }\n  }, [spinAngle, drawWheel, segments, colors]);\n\n  // Particle animation loop\n  useEffect(() => {\n    if (particles.length > 0) {\n      const interval = setInterval(() => {\n        updateParticles();\n        drawParticles();\n      }, 16); // ~60fps\n\n      return () => clearInterval(interval);\n    }\n  }, [particles, updateParticles, drawParticles]);\n\n  // Idle animation when not spinning - force dynamic updates\n  useEffect(() => {\n    if (!isSpinning && canSpin) {\n      const interval = setInterval(() => {\n        setSpinAngle(prev => {\n          const newAngle = prev + 0.5; // Slow idle rotation\n          // Force canvas refresh on each update\n          const canvas = canvasRef.current;\n          if (canvas) {\n            const ctx = canvas.getContext('2d');\n            if (ctx) {\n              ctx.clearRect(0, 0, canvas.width, canvas.height);\n              drawWheel(ctx, canvas.width, canvas.height, newAngle);\n            }\n          }\n          return newAngle;\n        });\n      }, 100);\n\n      return () => clearInterval(interval);\n    }\n  }, [isSpinning, canSpin, drawWheel]);\n\n  // Handle claiming points\n  const handleClaim = () => {\n    if (result !== null) {\n      addPoints(finalPoints);\n      onComplete(finalPoints);\n    }\n  };\n\n  return (\n    <div className=\"text-center relative\">\n      {/* Sound toggle */}\n      <button\n        onClick={() => setSoundEnabled(!soundEnabled)}\n        className=\"absolute top-0 right-0 p-2 text-gray-400 hover:text-white transition-colors\"\n        title={soundEnabled ? 'Mute sounds' : 'Enable sounds'}\n      >\n        {soundEnabled ? <FaVolumeUp size={20} /> : <FaVolumeMute size={20} />}\n      </button>\n\n      <div className=\"relative mb-6\">\n        {/* Main wheel canvas - dynamically rendered */}\n        <canvas\n          ref={canvasRef}\n          width={wheelSize}\n          height={wheelSize}\n          className={`mx-auto transition-all duration-300 ${\n            isHovering && !isSpinning ? 'scale-105' : ''\n          } ${\n            isSpinning ? 'drop-shadow-2xl' : 'drop-shadow-lg'\n          }`}\n          onMouseEnter={() => {\n            setIsHovering(true);\n            // Force redraw on hover for dynamic effects\n            const canvas = canvasRef.current;\n            if (canvas) {\n              const ctx = canvas.getContext('2d');\n              if (ctx) {\n                ctx.clearRect(0, 0, canvas.width, canvas.height);\n                drawWheel(ctx, canvas.width, canvas.height, spinAngle);\n              }\n            }\n          }}\n          onMouseLeave={() => {\n            setIsHovering(false);\n            // Force redraw when leaving hover\n            const canvas = canvasRef.current;\n            if (canvas) {\n              const ctx = canvas.getContext('2d');\n              if (ctx) {\n                ctx.clearRect(0, 0, canvas.width, canvas.height);\n                drawWheel(ctx, canvas.width, canvas.height, spinAngle);\n              }\n            }\n          }}\n        />\n\n        {/* Particle canvas overlay */}\n        <canvas\n          ref={particleCanvasRef}\n          width={wheelSize}\n          height={wheelSize}\n          className=\"absolute top-0 left-1/2 transform -translate-x-1/2 pointer-events-none\"\n        />\n\n        {/* Dynamic spin button */}\n        {!isSpinning && !result && (\n          <button\n            className={`absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 \n              bg-gradient-to-r from-yellow-400 to-yellow-600 text-black \n              w-20 h-20 rounded-full flex items-center justify-center \n              hover:from-yellow-300 hover:to-yellow-500 \n              transition-all duration-300 shadow-lg hover:shadow-xl\n              ${isHovering ? 'scale-110' : 'scale-100'}\n              ${canSpin ? 'animate-pulse' : 'opacity-50 cursor-not-allowed'}`}\n            onClick={spinTheWheel}\n            disabled={!canSpin}\n            onMouseEnter={() => setIsHovering(true)}\n            onMouseLeave={() => setIsHovering(false)}\n          >\n            <FaPlay size={24} className={isHovering ? 'ml-1' : ''} />\n          </button>\n        )}\n\n        {/* Dynamic reward display */}\n        {isSpinning && (\n          <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n            <div className=\"bg-black/80 text-white px-4 py-2 rounded-lg border-2 border-yellow-400 animate-pulse\">\n              <div className=\"text-center\">\n                <div className=\"text-xs text-yellow-400 font-semibold\">CURRENT REWARD</div>\n                <div className=\"text-2xl font-bold text-yellow-300\">{currentReward}</div>\n                <div className=\"text-xs text-gray-300\">POINTS</div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Spinning indicator ring */}\n        {isSpinning && (\n          <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n            <div className=\"w-32 h-32 border-4 border-yellow-400/30 border-t-yellow-400 rounded-full animate-spin\"></div>\n          </div>\n        )}\n      </div>\n\n      {/* Results section with enhanced animations */}\n      {result !== null ? (\n        <div className=\"animate-bounce-in\">\n          <div className=\"bg-gradient-to-r from-green-400 to-blue-500 text-white p-6 rounded-lg shadow-xl mb-4\">\n            <h3 className=\"text-2xl font-bold mb-2 animate-pulse\">🎉 Congratulations! 🎉</h3>\n            <p className=\"text-lg mb-4\">\n              You won{' '}\n              <span className=\"text-yellow-300 font-bold text-3xl animate-bounce inline-block\">\n                {finalPoints}\n              </span>\n              {' '}points!\n            </p>\n            {finalPoints >= 500 && (\n              <p className=\"text-yellow-200 text-sm animate-pulse\">🌟 MEGA WIN! 🌟</p>\n            )}\n          </div>\n          <button\n            className=\"btn-primary w-full transform hover:scale-105 transition-transform duration-200 shadow-lg\"\n            onClick={handleClaim}\n          >\n            🎁 Claim Your Points 🎁\n          </button>\n        </div>\n      ) : (\n        <div className=\"space-y-4\">\n          {isSpinning ? (\n            <div className=\"bg-blue-500/20 p-4 rounded-lg\">\n              <p className=\"text-blue-300 animate-pulse text-lg\">🎰 Spinning the wheel of fortune... 🎰</p>\n              <div className=\"mt-3 grid grid-cols-2 gap-4 text-sm\">\n                <div className=\"bg-gray-800/50 p-2 rounded\">\n                  <div className=\"text-gray-400\">Current Reward</div>\n                  <div className=\"text-yellow-300 font-bold text-lg\">{currentReward} pts</div>\n                </div>\n                <div className=\"bg-gray-800/50 p-2 rounded\">\n                  <div className=\"text-gray-400\">Spin Speed</div>\n                  <div className=\"text-blue-300 font-bold text-lg\">{Math.round(spinVelocity * 10)}/10</div>\n                </div>\n              </div>\n              <div className=\"mt-2 text-xs text-gray-400 text-center\">\n                🎯 Watch the highlighted segment for your potential reward!\n              </div>\n            </div>\n          ) : (\n            <div className=\"bg-gray-800/50 p-4 rounded-lg\">\n              <p className=\"text-gray-300 text-lg\">\n                {canSpin\n                  ? '🎯 Ready to test your luck? Click the wheel to spin! 🎯'\n                  : '⏰ You&apos;ve used your daily spin. Come back tomorrow for another chance! ⏰'}\n              </p>\n              {canSpin && (\n                <div className=\"mt-3 space-y-2\">\n                  <div className=\"text-sm text-gray-400\">\n                    <p>🎁 Possible rewards: {Math.min(...segments)} - {Math.max(...segments)} points</p>\n                    <p>🍀 Higher values are rarer - good luck!</p>\n                  </div>\n                  <div className=\"bg-gray-700/50 p-3 rounded-lg\">\n                    <div className=\"text-xs text-gray-400 mb-2\">REWARD BREAKDOWN:</div>\n                    <div className=\"grid grid-cols-4 gap-1 text-xs\">\n                      {segments.map((segment, index) => (\n                        <div\n                          key={index}\n                          className={`p-1 rounded text-center ${\n                            segment >= 500 ? 'bg-purple-600/30 text-purple-300' :\n                            segment >= 200 ? 'bg-red-600/30 text-red-300' :\n                            segment >= 100 ? 'bg-orange-600/30 text-orange-300' :\n                            'bg-green-600/30 text-green-300'\n                          }`}\n                        >\n                          {segment}\n                        </div>\n                      ))}\n                    </div>\n                    <div className=\"mt-2 text-xs text-gray-500\">\n                      <span className=\"text-purple-300\">●</span> Legendary (500+)\n                      <span className=\"text-red-300 ml-2\">●</span> Rare (200+)\n                      <span className=\"text-orange-300 ml-2\">●</span> Uncommon (100+)\n                      <span className=\"text-green-300 ml-2\">●</span> Common\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Custom CSS for animations */}\n      <style>{`\n        @keyframes bounce-in {\n          0% {\n            transform: scale(0.3);\n            opacity: 0;\n          }\n          50% {\n            transform: scale(1.05);\n          }\n          70% {\n            transform: scale(0.9);\n          }\n          100% {\n            transform: scale(1);\n            opacity: 1;\n          }\n        }\n        \n        .animate-bounce-in {\n          animation: bounce-in 0.6s ease-out;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default SpinGame;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/services/ServiceBooking.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/services/ServiceBookingForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/shop/CategoryFilter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/shop/Newsletter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/shop/ProductCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/shop/ProductQuickView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/theme-provider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/tracking/LiveTracker.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-function","severity":1,"message":"Unexpected empty arrow function.","line":45,"column":33,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":45,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\nimport dynamic from 'next/dynamic';\nimport type { Socket } from 'socket.io-client';\n\n// Dynamically import the map component to avoid SSR issues\nconst MapComponent = dynamic(() => import('@/components/maps/MapSearch'), {\n  ssr: false,\n  loading: () => (\n    <div className=\"h-[400px] w-full bg-gray-100 animate-pulse\"></div>\n  ),\n});\n\ninterface Location {\n  lat: number;\n  lng: number;\n  timestamp: Date;\n}\n\ninterface LiveTrackerProps {\n  orderId: string;\n  socket: Socket;\n}\n\nexport function LiveTracker({ orderId, socket }: LiveTrackerProps) {\n  const [location, setLocation] = useState<Location | null>(null);\n  // Removed unused eta state\n\n  useEffect(() => {\n    socket.emit('join_tracking', orderId);\n\n    socket.on('location_update', (data: Location) => {\n      setLocation(data);\n      // Calculate new ETA\n    });\n\n    return () => {\n      socket.emit('leave_tracking', orderId);\n      socket.off('location_update');\n    };\n  }, [orderId, socket]);\n\n  return (\n    <div className=\"rounded-lg overflow-hidden\">\n      <MapComponent\n        onLocationSelect={() => {}}\n        {...(location && { defaultLocation: { lat: location.lat, lng: location.lng } })}\n        showSearchBar={false}\n      />\n      {/* Removed eta reference but kept conditional rendering structure for future use */}\n      <div className=\"mt-4 p-4 bg-gray-100 rounded\">\n        <p className=\"text-sm text-gray-600\">\n          Tracking your order in real-time\n        </p>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/tracking/OrderTracking.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/tracking/TrackingStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/EmergencyButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/QRCodeTip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/chart.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[504,507],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[504,507],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type React from 'react';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\n\nimport { cn } from '../../lib/utils';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n);\n\ninterface ChartProps {\n  data: {\n    labels: string[];\n    datasets: {\n      label: string;\n      data: number[];\n      backgroundColor: string;\n    }[];\n  };\n  options?: any;\n  className?: string;\n}\n\nconst Chart: React.FC<ChartProps> = ({ data, options, className }) => {\n  const defaultOptions = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top' as const,\n      },\n      title: {\n        display: true,\n        text: 'Chart',\n      },\n    },\n  };\n\n  const mergedOptions = { ...defaultOptions, ...options };\n\n  return (\n    <div className={cn('w-full', className)}>\n      <Bar options={mergedOptions} data={data} />\n    </div>\n  );\n};\n\nexport default Chart;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/error-boundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/icons.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/loading-animation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/loading-overlay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/logo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/meta-tags.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/navigation-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/scroll-to-top.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/section.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/toast-notification.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/ui/use-toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/verification/IDVerificationModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/volunteer/OpportunityCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/volunteer/RequirementCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/volunteer/TestimonialSlider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/volunteer/VolunteerForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/components/volunteers/VolunteerFeed.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/contexts/AuthContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":91,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2710,2713],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2710,2713],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":110,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3273,3276],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3273,3276],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":122,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3559,3562],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3559,3562],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":131,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":131,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3814,3817],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3814,3817],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport {\n  User as FirebaseUser,\n  onAuthStateChanged,\n  signInWithEmailAndPassword,\n  createUserWithEmailAndPassword,\n  signOut,\n  updateProfile,\n  sendPasswordResetEmail,\n} from 'firebase/auth';\nimport { doc, setDoc, getDoc } from 'firebase/firestore';\nimport { auth, db } from '../lib/firebase-config';\nimport { useRouter } from 'next/navigation';\n\ninterface User {\n  uid: string;\n  email: string | null;\n  displayName: string | null;\n  photoURL: string | null;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  signIn: (email: string, password: string) => Promise<void>;\n  signUp: (email: string, password: string, displayName: string) => Promise<void>;\n  logout: () => Promise<void>;\n  resetPassword: (email: string) => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType>({} as AuthContextType);\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  const router = useRouter();\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async (firebaseUser: FirebaseUser | null) => {\n      if (firebaseUser) {\n        const userData: User = {\n          uid: firebaseUser.uid,\n          email: firebaseUser.email,\n          displayName: firebaseUser.displayName,\n          photoURL: firebaseUser.photoURL,\n        };\n        setUser(userData);\n\n        // Create or update user document in Firestore\n        try {\n          const userDocRef = doc(db, 'users', firebaseUser.uid);\n          const userDoc = await getDoc(userDocRef);\n\n          if (!userDoc.exists()) {\n            await setDoc(userDocRef, {\n              uid: firebaseUser.uid,\n              email: firebaseUser.email,\n              displayName: firebaseUser.displayName,\n              photoURL: firebaseUser.photoURL,\n              createdAt: new Date().toISOString(),\n              updatedAt: new Date().toISOString(),\n            });\n          }\n        } catch (error) {\n          console.error('Error creating user document:', error);\n        }\n      } else {\n        setUser(null);\n      }\n      setLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, []);\n\n  const signIn = async (email: string, password: string) => {\n    try {\n      setLoading(true);\n      await signInWithEmailAndPassword(auth, email, password);\n      router.push('/dashboard');\n    } catch (error: any) {\n      console.error('Sign in error:', error);\n      throw new Error(error.message || 'Failed to sign in');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signUp = async (email: string, password: string, displayName: string) => {\n    try {\n      setLoading(true);\n      const { user: firebaseUser } = await createUserWithEmailAndPassword(auth, email, password);\n\n      // Update the user's display name\n      await updateProfile(firebaseUser, {\n        displayName: displayName,\n      });\n\n      router.push('/dashboard');\n    } catch (error: any) {\n      console.error('Sign up error:', error);\n      throw new Error(error.message || 'Failed to create account');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await signOut(auth);\n      router.push('/');\n    } catch (error: any) {\n      console.error('Logout error:', error);\n      throw new Error(error.message || 'Failed to log out');\n    }\n  };\n\n  const resetPassword = async (email: string) => {\n    try {\n      await sendPasswordResetEmail(auth, email);\n    } catch (error: any) {\n      console.error('Password reset error:', error);\n      throw new Error(error.message || 'Failed to send password reset email');\n    }\n  };\n\n  const value = {\n    user,\n    loading,\n    signIn,\n    signUp,\n    logout,\n    resetPassword,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/hooks/use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/hooks/useAnalytics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/hooks/useAuth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/hooks/useExternalAPIs.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":152,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4022,4025],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4022,4025],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":211,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":211,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5597,5600],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5597,5600],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":230,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":230,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6116,6119],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6116,6119],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":230,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":230,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6129,6132],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6129,6132],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":287,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":287,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7689,7692],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7689,7692],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback } from 'react';\nimport {\n  DocumenuRestaurant,\n  ZomatoRestaurant,\n  YelpBusiness,\n  KrogerProduct,\n  BestBuyProduct,\n} from '@/lib/services/external-apis';\n\ninterface APIResponse<T> {\n  success: boolean;\n  data?: T;\n  error?: string;\n}\n\ninterface UnifiedRestaurantResults {\n  documenu: DocumenuRestaurant[];\n  zomato: ZomatoRestaurant[];\n  yelp: YelpBusiness[];\n  errors: string[];\n}\n\ninterface UnifiedProductResults {\n  kroger: KrogerProduct[];\n  bestbuy: BestBuyProduct[];\n  errors: string[];\n}\n\nexport function useExternalAPIs() {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const makeAPICall = useCallback(async <T>(url: string): Promise<T | null> => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const response = await fetch(url);\n      const result: APIResponse<T> = await response.json();\n\n      if (!result.success) {\n        throw new Error(result.error || 'API call failed');\n      }\n\n      return result.data || null;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';\n      setError(errorMessage);\n      console.error('API call error:', err);\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Documenu API calls\n  const searchDocumenuRestaurants = useCallback(async (params: {\n    lat?: number;\n    lon?: number;\n    distance?: number;\n    size?: number;\n    page?: number;\n    fullmenu?: boolean;\n    key_phrase?: string;\n    exact_match?: boolean;\n  }) => {\n    const searchParams = new URLSearchParams({\n      action: 'search',\n      ...Object.fromEntries(\n        Object.entries(params)\n          .filter(([, v]) => v !== undefined)\n          .map(([k, v]) => [k, String(v)]),\n      ),\n    });\n\n    return makeAPICall<DocumenuRestaurant[]>(`/api/external/documenu?${searchParams}`);\n  }, [makeAPICall]);\n\n  const getDocumenuMenu = useCallback(async (restaurantId: string) => {\n    const searchParams = new URLSearchParams({\n      action: 'menu',\n      restaurantId,\n    });\n\n    return makeAPICall<DocumenuRestaurant>(`/api/external/documenu?${searchParams}`);\n  }, [makeAPICall]);\n\n  // Zomato API calls\n  const searchZomatoRestaurants = useCallback(async (params: {\n    entity_id?: number;\n    entity_type?: string;\n    q?: string;\n    start?: number;\n    count?: number;\n    lat?: number;\n    lon?: number;\n    radius?: number;\n    cuisines?: string;\n    establishment_type?: string;\n    collection_id?: number;\n    category?: string;\n    sort?: string;\n    order?: string;\n  }) => {\n    const searchParams = new URLSearchParams({\n      action: 'search',\n      ...Object.fromEntries(\n        Object.entries(params)\n          .filter(([, v]) => v !== undefined)\n          .map(([k, v]) => [k, String(v)]),\n      ),\n    });\n\n    return makeAPICall<ZomatoRestaurant[]>(`/api/external/zomato?${searchParams}`);\n  }, [makeAPICall]);\n\n  const getZomatoRestaurantDetails = useCallback(async (restaurantId: string) => {\n    const searchParams = new URLSearchParams({\n      action: 'details',\n      restaurantId,\n    });\n\n    return makeAPICall<ZomatoRestaurant>(`/api/external/zomato?${searchParams}`);\n  }, [makeAPICall]);\n\n  // Yelp API calls\n  const searchYelpBusinesses = useCallback(async (params: {\n    term?: string;\n    location?: string;\n    latitude?: number;\n    longitude?: number;\n    radius?: number;\n    categories?: string;\n    locale?: string;\n    limit?: number;\n    offset?: number;\n    sort_by?: 'best_match' | 'rating' | 'review_count' | 'distance';\n    price?: '1' | '2' | '3' | '4';\n    open_now?: boolean;\n    open_at?: number;\n    attributes?: string;\n  }) => {\n    const searchParams = new URLSearchParams({\n      action: 'search',\n      ...Object.fromEntries(\n        Object.entries(params)\n          .filter(([, v]) => v !== undefined)\n          .map(([k, v]) => [k, String(v)]),\n      ),\n    });\n\n    return makeAPICall<{ businesses: YelpBusiness[]; total: number; region: any }>(\n      `/api/external/yelp?${searchParams}`,\n    );\n  }, [makeAPICall]);\n\n  const getYelpBusinessDetails = useCallback(async (businessId: string) => {\n    const searchParams = new URLSearchParams({\n      action: 'details',\n      businessId,\n    });\n\n    return makeAPICall<YelpBusiness>(`/api/external/yelp?${searchParams}`);\n  }, [makeAPICall]);\n\n  const getYelpBusinessReviews = useCallback(async (businessId: string, locale?: string) => {\n    const searchParams = new URLSearchParams({\n      action: 'reviews',\n      businessId,\n      ...(locale && { locale }),\n    });\n\n    return makeAPICall<{\n      reviews: Array<{\n        id: string;\n        url: string;\n        text: string;\n        rating: number;\n        time_created: string;\n        user: {\n          id: string;\n          profile_url: string;\n          image_url: string;\n          name: string;\n        };\n      }>;\n      total: number;\n      possible_languages: string[];\n    }>(`/api/external/yelp?${searchParams}`);\n  }, [makeAPICall]);\n\n  // Kroger API calls\n  const searchKrogerProducts = useCallback(async (params: {\n    q?: string;\n    locationId?: string;\n    productId?: string;\n    brand?: string;\n    fulfillment?: 'ais' | 'csp' | 'dug' | 'sto';\n    start?: number;\n    limit?: number;\n  }) => {\n    const searchParams = new URLSearchParams({\n      action: 'products',\n      ...Object.fromEntries(\n        Object.entries(params)\n          .filter(([, v]) => v !== undefined)\n          .map(([k, v]) => [k, String(v)]),\n      ),\n    });\n\n    return makeAPICall<{ data: KrogerProduct[]; meta: any }>(`/api/external/kroger?${searchParams}`);\n  }, [makeAPICall]);\n\n  const getKrogerLocations = useCallback(async (params: {\n    zipCode?: string;\n    radius?: number;\n    limit?: number;\n    chain?: string;\n    department?: string;\n  }) => {\n    const searchParams = new URLSearchParams({\n      action: 'locations',\n      ...Object.fromEntries(\n        Object.entries(params)\n          .filter(([, v]) => v !== undefined)\n          .map(([k, v]) => [k, String(v)]),\n      ),\n    });\n\n    return makeAPICall<{ data: any[]; meta: any }>(`/api/external/kroger?${searchParams}`);\n  }, [makeAPICall]);\n\n  // Best Buy API calls\n  const searchBestBuyProducts = useCallback(async (params: {\n    q?: string;\n    categoryId?: string;\n    format?: 'json' | 'xml';\n    show?: string;\n    sort?: string;\n    facet?: string;\n    cursorMark?: string;\n    pageSize?: number;\n    page?: number;\n  }) => {\n    const searchParams = new URLSearchParams({\n      action: 'products',\n      ...Object.fromEntries(\n        Object.entries(params)\n          .filter(([, v]) => v !== undefined)\n          .map(([k, v]) => [k, String(v)]),\n      ),\n    });\n\n    return makeAPICall<{ products: BestBuyProduct[]; total: number; totalPages: number }>(\n      `/api/external/bestbuy?${searchParams}`,\n    );\n  }, [makeAPICall]);\n\n  const getBestBuyProductDetails = useCallback(async (sku: number) => {\n    const searchParams = new URLSearchParams({\n      action: 'product',\n      sku: String(sku),\n    });\n\n    return makeAPICall<BestBuyProduct>(`/api/external/bestbuy?${searchParams}`);\n  }, [makeAPICall]);\n\n  const getBestBuyStores = useCallback(async (params: {\n    area?: string;\n    storeId?: number;\n    storeType?: string;\n    format?: 'json' | 'xml';\n    show?: string;\n    sort?: string;\n    page?: number;\n    pageSize?: number;\n  }) => {\n    const searchParams = new URLSearchParams({\n      action: 'stores',\n      ...Object.fromEntries(\n        Object.entries(params)\n          .filter(([, v]) => v !== undefined)\n          .map(([k, v]) => [k, String(v)]),\n      ),\n    });\n\n    return makeAPICall<{ stores: any[]; total: number; totalPages: number }>(\n      `/api/external/bestbuy?${searchParams}`,\n    );\n  }, [makeAPICall]);\n\n  const checkBestBuyProductAvailability = useCallback(async (sku: number, storeId: number) => {\n    const searchParams = new URLSearchParams({\n      action: 'availability',\n      sku: String(sku),\n      storeId: String(storeId),\n    });\n\n    return makeAPICall<{\n      sku: number;\n      storeId: number;\n      inStoreAvailability: boolean;\n      inStoreAvailabilityText: string;\n      inStoreAvailabilityUpdateDate: string;\n    }>(`/api/external/bestbuy?${searchParams}`);\n  }, [makeAPICall]);\n\n  // Unified search calls\n  const searchRestaurants = useCallback(async (params: {\n    latitude?: number;\n    longitude?: number;\n    location?: string;\n    term?: string;\n    radius?: number;\n    limit?: number;\n  }) => {\n    const searchParams = new URLSearchParams({\n      type: 'restaurants',\n      ...Object.fromEntries(\n        Object.entries(params)\n          .filter(([, v]) => v !== undefined)\n          .map(([k, v]) => [k, String(v)]),\n      ),\n    });\n\n    return makeAPICall<UnifiedRestaurantResults>(`/api/external/unified-search?${searchParams}`);\n  }, [makeAPICall]);\n\n  const searchProducts = useCallback(async (params: {\n    query: string;\n    location?: string;\n    limit?: number;\n  }) => {\n    const searchParams = new URLSearchParams({\n      type: 'products',\n      ...Object.fromEntries(\n        Object.entries(params)\n          .filter(([, v]) => v !== undefined)\n          .map(([k, v]) => [k, String(v)]),\n      ),\n    });\n\n    return makeAPICall<UnifiedProductResults>(`/api/external/unified-search?${searchParams}`);\n  }, [makeAPICall]);\n\n  return {\n    loading,\n    error,\n    // Documenu\n    searchDocumenuRestaurants,\n    getDocumenuMenu,\n    // Zomato\n    searchZomatoRestaurants,\n    getZomatoRestaurantDetails,\n    // Yelp\n    searchYelpBusinesses,\n    getYelpBusinessDetails,\n    getYelpBusinessReviews,\n    // Kroger\n    searchKrogerProducts,\n    getKrogerLocations,\n    // Best Buy\n    searchBestBuyProducts,\n    getBestBuyProductDetails,\n    getBestBuyStores,\n    checkBestBuyProductAvailability,\n    // Unified\n    searchRestaurants,\n    searchProducts,\n  };\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/hooks/useFirestore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/hooks/useGeocoding.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1671,1674],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1671,1674],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":282,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":282,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7103,7106],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7103,7106],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":285,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":285,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7260,7263],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7260,7263],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":288,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":288,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7420,7423],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7420,7423],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback, useRef, useEffect } from 'react';\n\nimport type {\n  GeocodeResult,\n  ReverseGeocodeResult,\n  AddressValidationResult,\n} from '../lib/services/geocoding-service';\nimport {\n  geocodeAddress,\n  reverseGeocodeCoordinates,\n  validateAddress,\n  GeocodingError,\n  GeocodingErrorType,\n} from '../lib/utils/geocoding-utils';\n\n/**\n * State for geocoding operations\n */\ninterface GeocodingState {\n  loading: boolean;\n  error: string | null;\n  result: GeocodeResult | ReverseGeocodeResult | AddressValidationResult | null;\n}\n\n/**\n * Options for the useGeocoding hook\n */\ninterface UseGeocodingOptions {\n  debounceMs?: number;\n  autoValidate?: boolean;\n  retries?: number;\n  timeout?: number;\n}\n\n/**\n * Hook for geocoding operations\n */\nexport function useGeocoding(options: UseGeocodingOptions = {}) {\n  const {\n    debounceMs = 300,\n    retries = 3,\n    timeout = 10000,\n  } = options;\n\n  const [state, setState] = useState<GeocodingState>({\n    loading: false,\n    error: null,\n    result: null,\n  });\n\n  const abortControllerRef = useRef<AbortController | null>(null);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    const controller = abortControllerRef.current;\n    return () => {\n      if (controller) {\n        controller.abort();\n      }\n    };\n  }, []);\n\n  /**\n   * Set loading state\n   */\n  const setLoading = useCallback((loading: boolean) => {\n    setState(prev => ({ ...prev, loading }));\n  }, []);\n\n  /**\n   * Set error state\n   */\n  const setError = useCallback((error: string | null) => {\n    setState(prev => ({ ...prev, error, loading: false }));\n  }, []);\n\n  /**\n   * Set result state\n   */\n  const setResult = useCallback((result: any) => {\n    setState(prev => ({ ...prev, result, error: null, loading: false }));\n  }, []);\n\n  /**\n   * Clear all state\n   */\n  const clearState = useCallback(() => {\n    setState({ loading: false, error: null, result: null });\n    const controller = abortControllerRef.current;\n    if (controller) {\n      controller.abort();\n    }\n  }, []);\n\n  /**\n   * Geocode an address\n   */\n  const geocode = useCallback(async (address: string): Promise<GeocodeResult | null> => {\n    if (!address.trim()) {\n      setError('Address is required');\n      return null;\n    }\n\n    // Cancel previous request\n    const controller = abortControllerRef.current;\n    if (controller) {\n      controller.abort();\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      const result = await geocodeAddress(address, { retries, timeout });\n      setResult(result);\n      return result;\n    } catch (error) {\n      if (error instanceof GeocodingError) {\n        switch (error.type) {\n          case GeocodingErrorType.RATE_LIMIT_ERROR:\n            setError(`Rate limit exceeded. Please try again in ${error.retryAfter || 60} seconds.`);\n            break;\n          case GeocodingErrorType.NETWORK_ERROR:\n            setError('Network error. Please check your connection and try again.');\n            break;\n          case GeocodingErrorType.API_ERROR:\n            setError(`API error: ${error.message}`);\n            break;\n          default:\n            setError(error.message);\n        }\n      } else {\n        setError('An unexpected error occurred');\n      }\n      return null;\n    }\n  }, [retries, timeout, setLoading, setError, setResult]);\n\n  /**\n   * Reverse geocode coordinates\n   */\n  const reverseGeocode = useCallback(async (\n    lat: number,\n    lng: number,\n  ): Promise<ReverseGeocodeResult | null> => {\n    if (typeof lat !== 'number' || typeof lng !== 'number') {\n      setError('Valid coordinates are required');\n      return null;\n    }\n\n    if (lat < -90 || lat > 90 || lng < -180 || lng > 180) {\n      setError('Coordinates are out of valid range');\n      return null;\n    }\n\n    // Cancel previous request\n    const controller = abortControllerRef.current;\n    if (controller) {\n      controller.abort();\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      const result = await reverseGeocodeCoordinates(lat, lng, { retries, timeout });\n      setResult(result);\n      return result;\n    } catch (error) {\n      if (error instanceof GeocodingError) {\n        switch (error.type) {\n          case GeocodingErrorType.RATE_LIMIT_ERROR:\n            setError(`Rate limit exceeded. Please try again in ${error.retryAfter || 60} seconds.`);\n            break;\n          case GeocodingErrorType.NETWORK_ERROR:\n            setError('Network error. Please check your connection and try again.');\n            break;\n          case GeocodingErrorType.API_ERROR:\n            setError(`API error: ${error.message}`);\n            break;\n          default:\n            setError(error.message);\n        }\n      } else {\n        setError('An unexpected error occurred');\n      }\n      return null;\n    }\n  }, [retries, timeout, setLoading, setError, setResult]);\n\n  /**\n   * Validate an address\n   */\n  const validate = useCallback(async (address: string): Promise<AddressValidationResult | null> => {\n    if (!address.trim()) {\n      setError('Address is required');\n      return null;\n    }\n\n    // Cancel previous request\n    const controller = abortControllerRef.current;\n    if (controller) {\n      controller.abort();\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      const result = await validateAddress(address, { retries, timeout });\n      setResult(result);\n      return result;\n    } catch (error) {\n      if (error instanceof GeocodingError) {\n        switch (error.type) {\n          case GeocodingErrorType.RATE_LIMIT_ERROR:\n            setError(`Rate limit exceeded. Please try again in ${error.retryAfter || 60} seconds.`);\n            break;\n          case GeocodingErrorType.NETWORK_ERROR:\n            setError('Network error. Please check your connection and try again.');\n            break;\n          case GeocodingErrorType.API_ERROR:\n            setError(`API error: ${error.message}`);\n            break;\n          default:\n            setError(error.message);\n        }\n      } else {\n        setError('An unexpected error occurred');\n      }\n      return null;\n    }\n  }, [retries, timeout, setLoading, setError, setResult]);\n\n  /**\n   * Debounced geocode function\n   */\n  const debouncedGeocode = useCallback(\n    (address: string) => {\n      const timeoutId = setTimeout(() => {\n        if (address.trim()) {\n          geocode(address);\n        }\n      }, debounceMs);\n      return () => clearTimeout(timeoutId);\n    },\n    [geocode, debounceMs],\n  );\n\n  /**\n   * Debounced validate function\n   */\n  const debouncedValidate = useCallback(\n    (address: string) => {\n      const timeoutId = setTimeout(() => {\n        if (address.trim()) {\n          validate(address);\n        }\n      }, debounceMs);\n      return () => clearTimeout(timeoutId);\n    },\n    [validate, debounceMs],\n  );\n\n  return {\n    // State\n    loading: state.loading,\n    error: state.error,\n    result: state.result,\n\n    // Actions\n    geocode,\n    reverseGeocode,\n    validate,\n    clearState,\n\n    // Debounced actions\n    debouncedGeocode,\n    debouncedValidate,\n\n    // Utilities\n    isGeocodeResult: (result: any): result is GeocodeResult => {\n      return result && 'formatted_address' in result && 'geometry' in result;\n    },\n    isReverseGeocodeResult: (result: any): result is ReverseGeocodeResult => {\n      return result && 'formatted_address' in result && 'geometry' in result;\n    },\n    isValidationResult: (result: any): result is AddressValidationResult => {\n      return result && 'isValid' in result && 'confidence' in result;\n    },\n  };\n}\n\n/**\n * Hook for address input with auto-validation\n */\nexport function useAddressInput(options: UseGeocodingOptions & {\n  onAddressSelect?: (result: GeocodeResult) => void;\n  onValidationChange?: (validation: AddressValidationResult) => void;\n} = {}) {\n  const {\n    onAddressSelect,\n    onValidationChange,\n    autoValidate = true,\n    ...geocodingOptions\n  } = options;\n\n  const [inputValue, setInputValue] = useState('');\n  const [selectedAddress, setSelectedAddress] = useState<GeocodeResult | null>(null);\n  const [validation, setValidation] = useState<AddressValidationResult | null>(null);\n\n  const {\n    loading,\n    error,\n    result,\n    geocode,\n    validate,\n    debouncedGeocode,\n    debouncedValidate,\n    clearState,\n    isGeocodeResult,\n    isValidationResult,\n  } = useGeocoding(geocodingOptions);\n\n  /**\n   * Handle input change\n   */\n  const handleInputChange = useCallback((value: string) => {\n    setInputValue(value);\n    setSelectedAddress(null);\n    setValidation(null);\n\n    if (value.trim()) {\n      if (autoValidate) {\n        debouncedValidate(value);\n      } else {\n        debouncedGeocode(value);\n      }\n    } else {\n      clearState();\n    }\n  }, [autoValidate, debouncedValidate, debouncedGeocode, clearState]);\n\n  /**\n   * Handle address selection\n   */\n  const handleAddressSelect = useCallback(async (address: string) => {\n    const result = await geocode(address);\n    if (result) {\n      setSelectedAddress(result);\n      setInputValue(result.formatted_address);\n      onAddressSelect?.(result);\n\n      // Also validate if auto-validation is enabled\n      if (autoValidate) {\n        const validationResult = await validate(address);\n        if (validationResult) {\n          setValidation(validationResult);\n          onValidationChange?.(validationResult);\n        }\n      }\n    }\n  }, [geocode, validate, autoValidate, onAddressSelect, onValidationChange]);\n\n  /**\n   * Clear input and state\n   */\n  const clearInput = useCallback(() => {\n    setInputValue('');\n    setSelectedAddress(null);\n    setValidation(null);\n    clearState();\n  }, [clearState]);\n\n  // Update validation when result changes\n  useEffect(() => {\n    if (isValidationResult(result)) {\n      setValidation(result);\n      onValidationChange?.(result);\n    }\n  }, [result, isValidationResult, onValidationChange]);\n\n  return {\n    // Input state\n    inputValue,\n    selectedAddress,\n    validation,\n\n    // Geocoding state\n    loading,\n    error,\n    suggestions: isGeocodeResult(result) ? [result] : [],\n\n    // Actions\n    handleInputChange,\n    handleAddressSelect,\n    clearInput,\n\n    // Manual actions\n    geocode,\n    validate,\n\n    // Validation helpers\n    isValid: validation?.isValid ?? null,\n    isDeliverable: validation?.isDeliverable ?? null,\n    confidence: validation?.confidence ?? null,\n    issues: validation?.issues ?? [],\n  };\n}\n\n/**\n * Hook for current location geocoding\n */\nexport function useCurrentLocation() {\n  const [location, setLocation] = useState<{\n    coords: { latitude: number; longitude: number } | null;\n    address: ReverseGeocodeResult | null;\n    loading: boolean;\n    error: string | null;\n  }>({\n    coords: null,\n    address: null,\n    loading: false,\n    error: null,\n  });\n\n  const { reverseGeocode } = useGeocoding();\n\n  /**\n   * Get current location\n   */\n  const getCurrentLocation = useCallback(async () => {\n    if (!navigator.geolocation) {\n      setLocation(prev => ({\n        ...prev,\n        error: 'Geolocation is not supported by this browser',\n      }));\n      return;\n    }\n\n    setLocation(prev => ({ ...prev, loading: true, error: null }));\n\n    try {\n      const position = await new Promise<GeolocationPosition>((resolve, reject) => {\n        navigator.geolocation.getCurrentPosition(resolve, reject, {\n          enableHighAccuracy: true,\n          timeout: 10000,\n          maximumAge: 300000, // 5 minutes\n        });\n      });\n\n      const coords = {\n        latitude: position.coords.latitude,\n        longitude: position.coords.longitude,\n      };\n\n      setLocation(prev => ({ ...prev, coords, loading: false }));\n\n      // Reverse geocode the coordinates\n      const address = await reverseGeocode(coords.latitude, coords.longitude);\n      setLocation(prev => ({ ...prev, address }));\n\n    } catch (error) {\n      let errorMessage = 'Failed to get current location';\n\n      if (error instanceof GeolocationPositionError) {\n        switch (error.code) {\n          case error.PERMISSION_DENIED:\n            errorMessage = 'Location access denied by user';\n            break;\n          case error.POSITION_UNAVAILABLE:\n            errorMessage = 'Location information is unavailable';\n            break;\n          case error.TIMEOUT:\n            errorMessage = 'Location request timed out';\n            break;\n        }\n      }\n\n      setLocation(prev => ({ ...prev, loading: false, error: errorMessage }));\n    }\n  }, [reverseGeocode]);\n\n  /**\n   * Clear location data\n   */\n  const clearLocation = useCallback(() => {\n    setLocation({\n      coords: null,\n      address: null,\n      loading: false,\n      error: null,\n    });\n  }, []);\n\n  return {\n    ...location,\n    getCurrentLocation,\n    clearLocation,\n    hasLocation: location.coords !== null,\n  };\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/hooks/useOnClickOutside.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/hooks/useTierBenefits.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/hooks/useTierMembership.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/hooks/useTracking.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/hooks/useVolunteer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/analytics.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[314,317],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[314,317],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Analytics } from '@vercel/analytics/react';\nimport { init, track } from '@amplitude/analytics-browser';\n\n// Initialize analytics\nif (typeof window !== 'undefined') {\n  init(process.env.NEXT_PUBLIC_AMPLITUDE_API_KEY || '');\n}\n\nexport function trackEvent(\n  eventName: string,\n  properties?: Record<string, any>,\n) {\n  track(eventName, properties);\n}\n\ninterface AnalyticsProviderProps {\n  children: React.ReactNode;\n}\n\nexport function AnalyticsProvider({ children }: AnalyticsProviderProps) {\n  return (\n    <>\n      {children}\n      <Analytics />\n    </>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/api-utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[201,204],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[201,204],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const runtime = 'nodejs';\nimport { NextResponse } from 'next/server';\n\nexport class ApiError extends Error {\n  constructor(\n    public statusCode: number,\n    message: string,\n    public data?: any,\n  ) {\n    super(message);\n    this.name = 'ApiError';\n  }\n}\n\nexport function successResponse<T>(data: T, message = 'Success') {\n  return NextResponse.json({\n    status: 'success',\n    message,\n    data,\n    timestamp: new Date().toISOString(),\n  });\n}\n\nexport function errorResponse(error: unknown) {\n  if (error instanceof ApiError) {\n    return NextResponse.json(\n      {\n        status: 'error',\n        message: error.message,\n        data: error.data,\n        timestamp: new Date().toISOString(),\n      },\n      { status: error.statusCode },\n    );\n  }\n\n  console.error('Unhandled error:', error);\n  return NextResponse.json(\n    {\n      status: 'error',\n      message: 'Internal server error',\n      timestamp: new Date().toISOString(),\n    },\n    { status: 500 },\n  );\n}\n\nexport async function handleApiRequest<T>(\n  handler: () => Promise<T>,\n  successMessage = 'Success',\n) {\n  try {\n    const data = await handler();\n    return successResponse(data, successMessage);\n  } catch (error) {\n    return errorResponse(error);\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/api.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":41,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1490,1493],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1490,1493],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":47,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1734,1737],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1734,1737],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2762,2765],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2762,2765],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { initializeApp, getApps } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\nimport { getFirestore } from 'firebase/firestore';\nimport { getStorage } from 'firebase/storage';\nimport { Stripe } from 'stripe';\n\n// Firebase Configuration\nconst firebaseConfig = {\n  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY || '',\n  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN || '',\n  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID || '',\n  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET || '',\n  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID || '',\n  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID || '',\n  measurementId: process.env.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID || '',\n};\n\n// Initialize Firebase\nif (!getApps().length) {\n  initializeApp(firebaseConfig);\n}\n\nexport const auth = getAuth();\nexport const db = getFirestore();\nexport const storage = getStorage();\n\n// Stripe Client (if needed)\nexport const stripe = process.env.STRIPE_SECRET_KEY\n  ? new Stripe(process.env.STRIPE_SECRET_KEY, { apiVersion: '2023-10-16' })\n  : null;\n\n// API Helper Functions\nexport const uploadFile = async (file: File, path: string): Promise<string> => {\n  const { ref, uploadBytes, getDownloadURL } = await import('firebase/storage');\n  const fileRef = ref(storage, path);\n  await uploadBytes(fileRef, file);\n  return await getDownloadURL(fileRef);\n};\n\n// Firebase Firestore helpers\nexport const createService = async (serviceData: any) => {\n  const { collection, addDoc } = await import('firebase/firestore');\n  const docRef = await addDoc(collection(db, 'services'), serviceData);\n  return { id: docRef.id, ...serviceData };\n};\n\nexport const createOrder = async (orderData: any) => {\n  const { collection, addDoc } = await import('firebase/firestore');\n  const docRef = await addDoc(collection(db, 'orders'), orderData);\n  return { id: docRef.id, ...orderData };\n};\n\nexport const updateServiceStatus = async (\n  serviceId: string,\n  status: string,\n) => {\n  const { doc, updateDoc, getDoc } = await import('firebase/firestore');\n  const serviceRef = doc(db, 'services', serviceId);\n  await updateDoc(serviceRef, { status });\n  const updatedDoc = await getDoc(serviceRef);\n  return { id: serviceId, ...updatedDoc.data() };\n};\n\nexport const getTierMembership = async (userId: string) => {\n  const { collection, query, where, getDocs } = await import(\n    'firebase/firestore'\n  );\n  const q = query(\n    collection(db, 'tier_memberships'),\n    where('userId', '==', userId),\n  );\n  const querySnapshot = await getDocs(q);\n  if (querySnapshot.empty) {return null;}\n  const doc = querySnapshot.docs[0];\n  return { id: doc.id, ...doc.data() };\n};\n\nexport const createTierMembership = async (membershipData: any) => {\n  const { collection, addDoc } = await import('firebase/firestore');\n  const docRef = await addDoc(\n    collection(db, 'tier_memberships'),\n    membershipData,\n  );\n  return { id: docRef.id, ...membershipData };\n};\n\nexport const getVolunteerHours = async (volunteerId: string) => {\n  const { collection, query, where, getDocs } = await import(\n    'firebase/firestore'\n  );\n  const q = query(\n    collection(db, 'volunteer_hours'),\n    where('volunteerId', '==', volunteerId),\n  );\n  const querySnapshot = await getDocs(q);\n  return querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));\n};\n\nexport const updateVolunteerHours = async (\n  volunteerId: string,\n  hours: number,\n) => {\n  const { doc, updateDoc, getDoc } = await import('firebase/firestore');\n  const volunteerRef = doc(db, 'volunteers', volunteerId);\n  await updateDoc(volunteerRef, { hoursServed: hours });\n  const updatedDoc = await getDoc(volunteerRef);\n  return { id: volunteerId, ...updatedDoc.data() };\n};\n\nexport const runtime = 'nodejs';\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/context/AgeVerificationContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/context/CartContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/context/ChatContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/context/DeliveryContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/context/MediaPlayerContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/context/Providers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/context/RewardsContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/context/UserContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/db.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/env.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/firebase-admin.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[420,423],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[420,423],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[442,445],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[442,445],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[462,465],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[462,465],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { initializeApp, getApps, cert } from 'firebase-admin/app';\nimport { getAuth } from 'firebase-admin/auth';\nimport { getFirestore } from 'firebase-admin/firestore';\n\n// Check if we're in a build environment and skip initialization\nconst isBuildTime = process.env.NODE_ENV === 'production' &&\n  (typeof window === 'undefined') &&\n  (!process.env.FIREBASE_PROJECT_ID || !process.env.FIREBASE_PRIVATE_KEY);\n\nlet app: any = null;\nlet auth: any = null;\nlet db: any = null;\n\n// Function to properly format the private key\nfunction formatPrivateKey(privateKey: string): string {\n  if (!privateKey) {\n    throw new Error('Private key is required');\n  }\n\n  // Remove any extra quotes and whitespace\n  let formattedKey = privateKey.trim();\n\n  // Remove surrounding quotes if present\n  if (formattedKey.startsWith('\"') && formattedKey.endsWith('\"')) {\n    formattedKey = formattedKey.slice(1, -1);\n  }\n\n  // Replace escaped newlines with actual newlines\n  formattedKey = formattedKey.replace(/\\\\n/g, '\\n');\n\n  // Ensure the key has proper PEM format\n  if (!formattedKey.includes('-----BEGIN PRIVATE KEY-----')) {\n    throw new Error('Invalid private key format: Missing PEM header');\n  }\n\n  if (!formattedKey.includes('-----END PRIVATE KEY-----')) {\n    throw new Error('Invalid private key format: Missing PEM footer');\n  }\n\n  return formattedKey;\n}\n\n// Only initialize if not in build time and all required env vars are present\nif (!isBuildTime && process.env.FIREBASE_PROJECT_ID && process.env.FIREBASE_PRIVATE_KEY) {\n  try {\n    const privateKey = formatPrivateKey(process.env.FIREBASE_PRIVATE_KEY);\n\n    const firebaseAdminConfig = {\n      projectId: process.env.FIREBASE_PROJECT_ID,\n      clientEmail: process.env.FIREBASE_CLIENT_EMAIL,\n      privateKey: privateKey,\n    };\n\n    // Validate required fields\n    if (!firebaseAdminConfig.projectId) {\n      throw new Error('FIREBASE_PROJECT_ID is required');\n    }\n    if (!firebaseAdminConfig.clientEmail) {\n      throw new Error('FIREBASE_CLIENT_EMAIL is required');\n    }\n    if (!firebaseAdminConfig.privateKey) {\n      throw new Error('FIREBASE_PRIVATE_KEY is required');\n    }\n\n    app = !getApps().length\n      ? initializeApp({\n          credential: cert(firebaseAdminConfig),\n          storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n        })\n      : getApps()[0];\n    auth = getAuth(app);\n    db = getFirestore(app);\n\n    console.log('Firebase Admin initialized successfully');\n  } catch (error) {\n    console.error('Firebase Admin initialization failed:', error);\n    // Set to null to indicate failure\n    app = null;\n    auth = null;\n    db = null;\n  }\n} else {\n  console.log('Firebase Admin initialization skipped (build time or missing env vars)');\n}\n\nexport { app, auth, db };\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/firebase-config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/firebase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/firebaseAdmin.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[504,507],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[504,507],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { initializeApp, getApps, cert } from 'firebase-admin/app';\nimport { getFirestore, Firestore } from 'firebase-admin/firestore';\nimport { getAuth, Auth } from 'firebase-admin/auth';\nimport { getStorage, Storage } from 'firebase-admin/storage';\n\n// Check if we're in a build environment and skip initialization\nconst isBuildTime = process.env.NODE_ENV === 'production' &&\n  (typeof window === 'undefined') &&\n  (!process.env.FIREBASE_PROJECT_ID || !process.env.FIREBASE_PRIVATE_KEY);\n\nlet adminApp: any = null;\nlet adminDb: Firestore | null = null;\nlet adminAuth: Auth | null = null;\nlet adminStorage: Storage | null = null;\n\n// Function to properly format the private key\nfunction formatPrivateKey(privateKey: string): string {\n  if (!privateKey) {\n    throw new Error('Private key is required');\n  }\n\n  // Remove any extra quotes and whitespace\n  let formattedKey = privateKey.trim();\n\n  // Remove surrounding quotes if present\n  if (formattedKey.startsWith('\"') && formattedKey.endsWith('\"')) {\n    formattedKey = formattedKey.slice(1, -1);\n  }\n\n  // Replace escaped newlines with actual newlines\n  formattedKey = formattedKey.replace(/\\\\n/g, '\\n');\n\n  // Ensure the key has proper PEM format\n  if (!formattedKey.includes('-----BEGIN PRIVATE KEY-----')) {\n    throw new Error('Invalid private key format: Missing PEM header');\n  }\n\n  if (!formattedKey.includes('-----END PRIVATE KEY-----')) {\n    throw new Error('Invalid private key format: Missing PEM footer');\n  }\n\n  return formattedKey;\n}\n\n// Only initialize if not in build time and all required env vars are present\nif (!isBuildTime && process.env.FIREBASE_PROJECT_ID && process.env.FIREBASE_PRIVATE_KEY) {\n  try {\n    const privateKey = formatPrivateKey(process.env.FIREBASE_PRIVATE_KEY);\n\n    const firebaseAdminConfig = {\n      projectId: process.env.FIREBASE_PROJECT_ID,\n      clientEmail: process.env.FIREBASE_CLIENT_EMAIL,\n      privateKey: privateKey,\n    };\n\n    // Validate required fields\n    if (!firebaseAdminConfig.projectId) {\n      throw new Error('FIREBASE_PROJECT_ID is required');\n    }\n    if (!firebaseAdminConfig.clientEmail) {\n      throw new Error('FIREBASE_CLIENT_EMAIL is required');\n    }\n    if (!firebaseAdminConfig.privateKey) {\n      throw new Error('FIREBASE_PRIVATE_KEY is required');\n    }\n\n    adminApp = !getApps().length\n      ? initializeApp({\n          credential: cert(firebaseAdminConfig),\n          storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n        })\n      : getApps()[0];\n    adminDb = getFirestore(adminApp);\n    adminAuth = getAuth(adminApp);\n    adminStorage = getStorage(adminApp);\n\n    console.log('Firebase Admin initialized successfully');\n  } catch (error) {\n    console.error('Firebase Admin initialization failed:', error);\n    // Set to null to indicate failure\n    adminApp = null;\n    adminDb = null;\n    adminAuth = null;\n    adminStorage = null;\n  }\n} else {\n  console.log('Firebase Admin initialization skipped (build time or missing env vars)');\n}\n\nexport { adminApp, adminDb, adminAuth, adminStorage };\n\n// Export aliases for backward compatibility\nexport const firestore = adminDb;\nexport const auth = adminAuth;\nexport const storage = adminStorage;\n\n// Export initialization function for explicit initialization\nexport function initAdmin() {\n  return adminApp;\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/firestoreModels.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/maps.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/restaurants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/scrapeMenus.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'enhanceDescription' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":34,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/services/__tests__/geocoding-service.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[422,425],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[422,425],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":1,"message":"Unexpected empty arrow function.","line":382,"column":76,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":382,"endColumn":78}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { GeocodingService } from '../geocoding-service';\nimport { Client } from '@googlemaps/google-maps-services-js';\n\n// Mock the Google Maps client\njest.mock('@googlemaps/google-maps-services-js', () => ({\n  Client: jest.fn().mockImplementation(() => ({\n    geocode: jest.fn(),\n    reverseGeocode: jest.fn(),\n  })),\n}));\n\ndescribe('GeocodingService', () => {\n  let geocodingService: GeocodingService;\n  let mockClient: any;\n\n  beforeEach(() => {\n    // Reset mocks\n    jest.clearAllMocks();\n\n    // Create service instance with test configuration\n    geocodingService = new GeocodingService({\n      apiKey: 'test-api-key',\n      enableCaching: true,\n      cacheTimeout: 1000, // 1 second for testing\n      rateLimitPerMinute: 10,\n      defaultLanguage: 'en',\n      defaultRegion: 'US',\n    });\n\n    // Get the mocked client\n    mockClient = new Client();\n  });\n\n  afterEach(() => {\n    // Clear cache after each test\n    geocodingService.clearCache();\n  });\n\n  describe('geocode', () => {\n    const mockGeocodeResponse = {\n      data: {\n        results: [{\n          formatted_address: '1600 Amphitheatre Pkwy, Mountain View, CA 94043, USA',\n          geometry: {\n            location: { lat: 37.4224764, lng: -122.0842499 },\n            location_type: 'ROOFTOP',\n            viewport: {\n              northeast: { lat: 37.4238253802915, lng: -122.0829009197085 },\n              southwest: { lat: 37.4211274197085, lng: -122.0855988802915 },\n            },\n          },\n          place_id: 'ChIJ2eUgeAK6j4ARbn5u_wAGqWA',\n          types: ['street_address'],\n          address_components: [\n            {\n              long_name: '1600',\n              short_name: '1600',\n              types: ['street_number'],\n            },\n            {\n              long_name: 'Amphitheatre Parkway',\n              short_name: 'Amphitheatre Pkwy',\n              types: ['route'],\n            },\n          ],\n          partial_match: false,\n        }],\n      },\n    };\n\n    it('should geocode an address successfully', async () => {\n      mockClient.geocode.mockResolvedValue(mockGeocodeResponse);\n\n      const result = await geocodingService.geocode('1600 Amphitheatre Parkway, Mountain View, CA');\n\n      expect(result).toBeDefined();\n      expect(result?.formatted_address).toBe('1600 Amphitheatre Pkwy, Mountain View, CA 94043, USA');\n      expect(result?.geometry.location.lat).toBe(37.4224764);\n      expect(result?.geometry.location.lng).toBe(-122.0842499);\n      expect(mockClient.geocode).toHaveBeenCalledTimes(1);\n    });\n\n    it('should return null for address not found', async () => {\n      mockClient.geocode.mockResolvedValue({ data: { results: [] } });\n\n      const result = await geocodingService.geocode('Invalid Address 12345');\n\n      expect(result).toBeNull();\n    });\n\n    it('should use cache for repeated requests', async () => {\n      mockClient.geocode.mockResolvedValue(mockGeocodeResponse);\n\n      // First request\n      const result1 = await geocodingService.geocode('1600 Amphitheatre Parkway');\n\n      // Second request (should use cache)\n      const result2 = await geocodingService.geocode('1600 Amphitheatre Parkway');\n\n      expect(result1).toEqual(result2);\n      expect(mockClient.geocode).toHaveBeenCalledTimes(1); // Only called once due to caching\n    });\n\n    it('should handle API errors gracefully', async () => {\n      mockClient.geocode.mockRejectedValue(new Error('API Error'));\n\n      await expect(geocodingService.geocode('Test Address'))\n        .rejects.toThrow('Failed to geocode address: Test Address');\n    });\n\n    it('should throw error when API key is missing', async () => {\n      const serviceWithoutKey = new GeocodingService({ apiKey: '' });\n\n      await expect(serviceWithoutKey.geocode('Test Address'))\n        .rejects.toThrow('Google Maps API key is required for geocoding');\n    });\n\n    it('should apply component restrictions', async () => {\n      mockClient.geocode.mockResolvedValue(mockGeocodeResponse);\n\n      await geocodingService.geocode('Test Address', {\n        componentRestrictions: {\n          country: 'US',\n          locality: 'Mountain View',\n        },\n      });\n\n      expect(mockClient.geocode).toHaveBeenCalledWith({\n        params: expect.objectContaining({\n          components: 'country:US|locality:Mountain View',\n        }),\n      });\n    });\n  });\n\n  describe('reverseGeocode', () => {\n    const mockReverseGeocodeResponse = {\n      data: {\n        results: [{\n          formatted_address: '1600 Amphitheatre Pkwy, Mountain View, CA 94043, USA',\n          geometry: {\n            location: { lat: 37.4224764, lng: -122.0842499 },\n            location_type: 'ROOFTOP',\n          },\n          place_id: 'ChIJ2eUgeAK6j4ARbn5u_wAGqWA',\n          types: ['street_address'],\n          address_components: [],\n        }],\n      },\n    };\n\n    it('should reverse geocode coordinates successfully', async () => {\n      mockClient.reverseGeocode.mockResolvedValue(mockReverseGeocodeResponse);\n\n      const result = await geocodingService.reverseGeocode(37.4224764, -122.0842499);\n\n      expect(result).toBeDefined();\n      expect(result?.formatted_address).toBe('1600 Amphitheatre Pkwy, Mountain View, CA 94043, USA');\n      expect(mockClient.reverseGeocode).toHaveBeenCalledTimes(1);\n    });\n\n    it('should return null when no results found', async () => {\n      mockClient.reverseGeocode.mockResolvedValue({ data: { results: [] } });\n\n      const result = await geocodingService.reverseGeocode(0, 0);\n\n      expect(result).toBeNull();\n    });\n\n    it('should apply result type filters', async () => {\n      mockClient.reverseGeocode.mockResolvedValue(mockReverseGeocodeResponse);\n\n      await geocodingService.reverseGeocode(37.4224764, -122.0842499, {\n        resultTypes: ['street_address'],\n        locationTypes: ['ROOFTOP'],\n      });\n\n      expect(mockClient.reverseGeocode).toHaveBeenCalledWith({\n        params: expect.objectContaining({\n          result_type: 'street_address',\n          location_type: 'ROOFTOP',\n        }),\n      });\n    });\n  });\n\n  describe('validateAddress', () => {\n    const mockValidGeocodeResponse = {\n      data: {\n        results: [{\n          formatted_address: '1600 Amphitheatre Pkwy, Mountain View, CA 94043, USA',\n          geometry: {\n            location: { lat: 37.4224764, lng: -122.0842499 },\n            location_type: 'ROOFTOP',\n          },\n          place_id: 'ChIJ2eUgeAK6j4ARbn5u_wAGqWA',\n          types: ['street_address'],\n          address_components: [\n            {\n              long_name: '1600',\n              short_name: '1600',\n              types: ['street_number'],\n            },\n            {\n              long_name: 'Amphitheatre Parkway',\n              short_name: 'Amphitheatre Pkwy',\n              types: ['route'],\n            },\n            {\n              long_name: 'Mountain View',\n              short_name: 'Mountain View',\n              types: ['locality'],\n            },\n          ],\n          partial_match: false,\n        }],\n      },\n    };\n\n    it('should validate a valid address', async () => {\n      mockClient.geocode.mockResolvedValue(mockValidGeocodeResponse);\n\n      const result = await geocodingService.validateAddress('1600 Amphitheatre Parkway, Mountain View, CA');\n\n      expect(result.isValid).toBe(true);\n      expect(result.isDeliverable).toBe(true);\n      expect(result.confidence).toBe('high');\n      expect(result.geocodeResult).toBeDefined();\n    });\n\n    it('should detect partial matches', async () => {\n      const partialMatchResponse = {\n        ...mockValidGeocodeResponse,\n        data: {\n          results: [{\n            ...mockValidGeocodeResponse.data.results[0],\n            partial_match: true,\n          }],\n        },\n      };\n\n      mockClient.geocode.mockResolvedValue(partialMatchResponse);\n\n      const result = await geocodingService.validateAddress('Partial Address');\n\n      expect(result.isValid).toBe(true);\n      expect(result.confidence).toBe('medium');\n      expect(result.issues).toContain('Address is a partial match - please verify');\n    });\n\n    it('should detect missing street number for delivery', async () => {\n      const noStreetNumberResponse = {\n        ...mockValidGeocodeResponse,\n        data: {\n          results: [{\n            ...mockValidGeocodeResponse.data.results[0],\n            address_components: [\n              {\n                long_name: 'Amphitheatre Parkway',\n                short_name: 'Amphitheatre Pkwy',\n                types: ['route'],\n              },\n            ],\n          }],\n        },\n      };\n\n      mockClient.geocode.mockResolvedValue(noStreetNumberResponse);\n\n      const result = await geocodingService.validateAddress('Amphitheatre Parkway', {\n        checkDeliverability: true,\n      });\n\n      expect(result.isValid).toBe(true);\n      expect(result.isDeliverable).toBe(false);\n      expect(result.issues).toContain('No street number found - please provide a complete address');\n    });\n\n    it('should reject PO Box addresses when not allowed', async () => {\n      const poBoxResponse = {\n        ...mockValidGeocodeResponse,\n        data: {\n          results: [{\n            ...mockValidGeocodeResponse.data.results[0],\n            formatted_address: 'PO Box 123, Mountain View, CA 94043, USA',\n          }],\n        },\n      };\n\n      mockClient.geocode.mockResolvedValue(poBoxResponse);\n\n      const result = await geocodingService.validateAddress('PO Box 123', {\n        allowPOBoxes: false,\n      });\n\n      expect(result.isValid).toBe(true);\n      expect(result.isDeliverable).toBe(false);\n      expect(result.issues).toContain('PO Box addresses are not supported');\n    });\n\n    it('should check required components', async () => {\n      mockClient.geocode.mockResolvedValue(mockValidGeocodeResponse);\n\n      const result = await geocodingService.validateAddress('Test Address', {\n        requiredComponents: ['street_number', 'route', 'locality', 'postal_code'],\n      });\n\n      expect(result.isValid).toBe(true);\n      expect(result.isDeliverable).toBe(false); // Missing postal_code\n      expect(result.issues).toContain('Missing required address components: postal_code');\n    });\n  });\n\n  describe('batchGeocode', () => {\n    it('should process multiple addresses', async () => {\n      const mockResponse = {\n        data: {\n          results: [{\n            formatted_address: 'Test Address',\n            geometry: { location: { lat: 37.4224764, lng: -122.0842499 }, location_type: 'ROOFTOP' },\n            place_id: 'test-place-id',\n            types: ['street_address'],\n            address_components: [],\n          }],\n        },\n      };\n\n      mockClient.geocode.mockResolvedValue(mockResponse);\n\n      const result = await geocodingService.batchGeocode({\n        addresses: ['Address 1', 'Address 2'],\n        options: { validateDelivery: false },\n      });\n\n      expect(result.summary.total).toBe(2);\n      expect(result.summary.successful).toBe(2);\n      expect(result.summary.failed).toBe(0);\n      expect(result.results).toHaveLength(2);\n      expect(mockClient.geocode).toHaveBeenCalledTimes(2);\n    });\n\n    it('should handle mixed success and failure', async () => {\n      mockClient.geocode\n        .mockResolvedValueOnce({\n          data: {\n            results: [{\n              formatted_address: 'Valid Address',\n              geometry: { location: { lat: 37.4224764, lng: -122.0842499 }, location_type: 'ROOFTOP' },\n              place_id: 'test-place-id',\n              types: ['street_address'],\n              address_components: [],\n            }],\n          },\n        })\n        .mockResolvedValueOnce({ data: { results: [] } }); // No results for second address\n\n      const result = await geocodingService.batchGeocode({\n        addresses: ['Valid Address', 'Invalid Address'],\n      });\n\n      expect(result.summary.total).toBe(2);\n      expect(result.summary.successful).toBe(1);\n      expect(result.summary.failed).toBe(1);\n      expect(result.results[0].success).toBe(true);\n      expect(result.results[1].success).toBe(false);\n      expect(result.results[1].error).toBe('Address not found');\n    });\n  });\n\n  describe('rate limiting', () => {\n    it('should track rate limit usage', () => {\n      const stats = geocodingService.getStats();\n\n      expect(stats.rateLimitPerMinute).toBe(10);\n      expect(stats.remainingRequests).toBeLessThanOrEqual(10);\n    });\n\n    it('should throw error when rate limit exceeded', async () => {\n      // Exhaust rate limit\n      const promises = [];\n      for (let i = 0; i < 15; i++) {\n        promises.push(geocodingService.geocode(`Address ${i}`).catch(() => {}));\n      }\n\n      await Promise.all(promises);\n\n      // This should fail due to rate limit\n      await expect(geocodingService.geocode('Test Address'))\n        .rejects.toThrow('Rate limit exceeded');\n    });\n  });\n\n  describe('caching', () => {\n    it('should cache results', async () => {\n      const mockResponse = {\n        data: {\n          results: [{\n            formatted_address: 'Cached Address',\n            geometry: { location: { lat: 37.4224764, lng: -122.0842499 }, location_type: 'ROOFTOP' },\n            place_id: 'cached-place-id',\n            types: ['street_address'],\n            address_components: [],\n          }],\n        },\n      };\n\n      mockClient.geocode.mockResolvedValue(mockResponse);\n\n      // First call\n      await geocodingService.geocode('Test Address');\n\n      // Second call should use cache\n      await geocodingService.geocode('Test Address');\n\n      expect(mockClient.geocode).toHaveBeenCalledTimes(1);\n\n      const stats = geocodingService.getStats();\n      expect(stats.cacheSize).toBeGreaterThan(0);\n    });\n\n    it('should clear cache', async () => {\n      const mockResponse = {\n        data: {\n          results: [{\n            formatted_address: 'Test Address',\n            geometry: { location: { lat: 37.4224764, lng: -122.0842499 }, location_type: 'ROOFTOP' },\n            place_id: 'test-place-id',\n            types: ['street_address'],\n            address_components: [],\n          }],\n        },\n      };\n\n      mockClient.geocode.mockResolvedValue(mockResponse);\n\n      await geocodingService.geocode('Test Address');\n      expect(geocodingService.getStats().cacheSize).toBeGreaterThan(0);\n\n      geocodingService.clearCache();\n      expect(geocodingService.getStats().cacheSize).toBe(0);\n    });\n  });\n\n  describe('healthCheck', () => {\n    it('should return healthy status when service is working', async () => {\n      mockClient.geocode.mockResolvedValue({\n        data: {\n          results: [{\n            formatted_address: 'Test',\n            geometry: { location: { lat: 37.4224764, lng: -122.0842499 }, location_type: 'ROOFTOP' },\n            place_id: 'test',\n            types: ['street_address'],\n            address_components: [],\n          }],\n        },\n      });\n\n      const health = await geocodingService.healthCheck();\n\n      expect(health.status).toBe('healthy');\n      expect(health.apiKeyConfigured).toBe(true);\n      expect(health.cacheEnabled).toBe(true);\n    });\n\n    it('should return unhealthy status when API key is missing', async () => {\n      const serviceWithoutKey = new GeocodingService({ apiKey: '' });\n\n      const health = await serviceWithoutKey.healthCheck();\n\n      expect(health.status).toBe('unhealthy');\n      expect(health.apiKeyConfigured).toBe(false);\n    });\n  });\n});","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/services/analytics.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[768,771],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[768,771],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":59,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1305,1308],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1305,1308],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1507,1510],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1507,1510],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { env } from '../env';\n\ntype EventName =\n  | 'page_view'\n  | 'sign_up'\n  | 'login'\n  | 'add_to_cart'\n  | 'remove_from_cart'\n  | 'begin_checkout'\n  | 'purchase'\n  | 'search'\n  | 'view_item'\n  | 'view_item_list'\n  | 'select_item'\n  | 'share'\n  | 'custom_event';\n\ntype EventProperties = Record<string, string | number | boolean | null>;\n\nclass AnalyticsService {\n  private isEnabled: boolean;\n\n  constructor() {\n    this.isEnabled = env.ENABLE_ANALYTICS;\n  }\n\n  /**\n   * Track a user event\n   */\n  public trackEvent(eventName: EventName, properties?: EventProperties): void {\n    if (!this.isEnabled) {return;}\n\n    try {\n      // Send to Google Analytics if available\n      if (typeof window !== 'undefined' && 'gtag' in window) {\n        const gtag = (window as any).gtag;\n        gtag('event', eventName, properties);\n      }\n\n      // Log to console in development\n      if (process.env.NODE_ENV === 'development') {\n        console.log(`[Analytics] ${eventName}`, properties);\n      }\n    } catch (error) {\n      console.error('[Analytics Error]', error);\n    }\n  }\n\n  /**\n   * Track page view\n   */\n  public trackPageView(url: string): void {\n    this.trackEvent('page_view', { page_path: url });\n  }\n\n  /**\n   * Identify user\n   */\n  public identifyUser(userId: string, traits?: Record<string, any>): void {\n    if (!this.isEnabled) {return;}\n\n    try {\n      // Send to Google Analytics if available\n      if (typeof window !== 'undefined' && 'gtag' in window) {\n        const gtag = (window as any).gtag;\n        gtag('set', 'user_properties', {\n          user_id: userId,\n          ...traits,\n        });\n      }\n\n      // Log to console in development\n      if (process.env.NODE_ENV === 'development') {\n        console.log(`[Analytics] Identify User: ${userId}`, traits);\n      }\n    } catch (error) {\n      console.error('[Analytics Error]', error);\n    }\n  }\n}\n\nexport const analytics = new AnalyticsService();\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/services/database.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/services/delivery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/services/error-service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[178,181],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[178,181],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"type ErrorSeverity = 'low' | 'medium' | 'high' | 'critical';\n\ninterface ErrorDetails {\n  message: string;\n  code?: string;\n  severity?: ErrorSeverity;\n  context?: Record<string, any>;\n  stack?: string;\n}\n\nclass ErrorService {\n  /**\n   * Log an error to the console and optionally to an error tracking service\n   */\n  public logError(\n    error: Error | string,\n    details?: Partial<ErrorDetails>,\n  ): void {\n    const errorMessage = typeof error === 'string' ? error : error.message;\n    const errorStack =\n      typeof error === 'string' ? new Error().stack : error.stack;\n\n    const errorDetails: ErrorDetails = {\n      message: errorMessage,\n      severity: details?.severity || 'medium',\n      context: details?.context || {},\n      stack: errorStack,\n      code: details?.code,\n    };\n\n    // Log to console in development\n    if (process.env.NODE_ENV === 'development') {\n      console.error('[Error]', errorDetails);\n    }\n\n    // Here you would send to your error tracking service\n    // Example: Sentry.captureException(error, { extra: errorDetails });\n  }\n\n  /**\n   * Format an error message for display to users\n   */\n  public formatErrorForUser(error: Error | string | unknown): string {\n    if (typeof error === 'string') {\n      return error;\n    }\n\n    if (error instanceof Error) {\n      // Remove technical details from error messages\n      return this.sanitizeErrorMessage(error.message);\n    }\n\n    return 'An unexpected error occurred. Please try again.';\n  }\n\n  /**\n   * Sanitize error messages to remove sensitive or technical information\n   */\n  private sanitizeErrorMessage(message: string): string {\n    // Remove any sensitive information like API keys, tokens, etc.\n    const sanitized = message\n      .replace(/key[-_]?[0-9a-zA-Z]{5,}/gi, '[REDACTED]')\n      .replace(/token[-_]?[0-9a-zA-Z]{5,}/gi, '[REDACTED]')\n      .replace(/password[-_]?[0-9a-zA-Z]{5,}/gi, '[REDACTED]');\n\n    // Map technical errors to user-friendly messages\n    const errorMap: Record<string, string> = {\n      ECONNREFUSED:\n        'Unable to connect to the server. Please check your internet connection.',\n      ETIMEDOUT: 'The request timed out. Please try again later.',\n      NetworkError: 'Network error. Please check your internet connection.',\n      AbortError: 'The request was cancelled. Please try again.',\n    };\n\n    for (const [technical, friendly] of Object.entries(errorMap)) {\n      if (sanitized.includes(technical)) {\n        return friendly;\n      }\n    }\n\n    return sanitized;\n  }\n}\n\nexport const errorService = new ErrorService();\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/services/external-apis.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":175,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":175,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3606,3609],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3606,3609],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":176,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":176,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3624,3627],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3624,3627],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":177,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":177,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3647,3650],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3647,3650],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":180,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":180,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3734,3737],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3734,3737],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":183,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":183,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3821,3824],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3821,3824],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":184,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":184,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3843,3846],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3843,3846],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":185,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":185,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3869,3872],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3869,3872],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":186,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":186,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3893,3896],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3893,3896],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":189,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3970,3973],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3970,3973],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":191,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":191,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4020,4023],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4020,4023],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":218,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":218,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4545,4548],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4545,4548],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":242,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":242,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5152,5155],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5152,5155],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":243,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":243,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5178,5181],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5178,5181],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":245,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":245,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5237,5240],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5237,5240],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":246,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":246,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5265,5268],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5265,5268],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":288,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":288,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6236,6239],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6236,6239],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":424,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":424,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10010,10013],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10010,10013],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":466,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":466,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11186,11189],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11186,11189],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":563,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":563,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13613,13616],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13613,13616],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":594,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":594,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14440,14443],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14440,14443],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":594,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":594,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14453,14456],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14453,14456],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":683,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":683,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16747,16750],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16747,16750],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":780,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":780,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19476,19479],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19476,19479],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { env } from '../env';\n\n// Types for external API responses\nexport interface DocumenuRestaurant {\n  restaurant_id: string;\n  restaurant_name: string;\n  restaurant_phone?: string;\n  restaurant_website?: string;\n  hours?: string;\n  price_range?: string;\n  price_range_100?: number;\n  restaurant_logo?: string;\n  menus?: DocumenuMenu[];\n}\n\nexport interface DocumenuMenu {\n  menu_name: string;\n  menu_sections: DocumenuSection[];\n}\n\nexport interface DocumenuSection {\n  section_name: string;\n  menu_items: DocumenuMenuItem[];\n}\n\nexport interface DocumenuMenuItem {\n  menu_item_name: string;\n  menu_item_description?: string;\n  menu_item_price?: string;\n  menu_item_pricing?: Array<{\n    price: string;\n    currency: string;\n    priceString: string;\n  }>;\n}\n\nexport interface ZomatoRestaurant {\n  id: string;\n  name: string;\n  url: string;\n  location: {\n    address: string;\n    locality: string;\n    city: string;\n    latitude: string;\n    longitude: string;\n  };\n  cuisines: string;\n  average_cost_for_two: number;\n  price_range: number;\n  currency: string;\n  thumb: string;\n  featured_image: string;\n  photos_url: string;\n  menu_url: string;\n  events_url: string;\n  user_rating: {\n    aggregate_rating: string;\n    rating_text: string;\n    rating_color: string;\n    votes: string;\n  };\n}\n\nexport interface YelpBusiness {\n  id: string;\n  alias: string;\n  name: string;\n  image_url: string;\n  is_closed: boolean;\n  url: string;\n  review_count: number;\n  categories: Array<{\n    alias: string;\n    title: string;\n  }>;\n  rating: number;\n  coordinates: {\n    latitude: number;\n    longitude: number;\n  };\n  transactions: string[];\n  price?: string;\n  location: {\n    address1: string;\n    address2?: string;\n    address3?: string;\n    city: string;\n    zip_code: string;\n    country: string;\n    state: string;\n    display_address: string[];\n  };\n  phone: string;\n  display_phone: string;\n  distance?: number;\n}\n\nexport interface KrogerProduct {\n  productId: string;\n  upc: string;\n  aisleLocations: Array<{\n    bayNumber: string;\n    description: string;\n    number: string;\n    numberOfFacings: string;\n    sequenceNumber: string;\n    side: string;\n    shelfNumber: string;\n    shelfPositionInBay: string;\n  }>;\n  brand: string;\n  categories: string[];\n  countryOrigin: string;\n  description: string;\n  items: Array<{\n    itemId: string;\n    favorite: boolean;\n    fulfillment: {\n      curbside: boolean;\n      delivery: boolean;\n      inStore: boolean;\n      shipToHome: boolean;\n    };\n    price: {\n      regular: number;\n      promo: number;\n    };\n    size: string;\n    soldBy: string;\n  }>;\n  productType: string;\n  publishedDate: string;\n  romanceDescription: string;\n  tags: string[];\n  temperature: {\n    indicator: string;\n    heatSensitive: boolean;\n  };\n}\n\nexport interface BestBuyProduct {\n  sku: number;\n  customerReviewCount: number;\n  customerReviewAverage: number;\n  inStoreAvailability: boolean;\n  inStoreAvailabilityText: string;\n  inStoreAvailabilityUpdateDate: string;\n  itemUpdateDate: string;\n  lineOfBusiness: string;\n  onlineAvailability: boolean;\n  onlineAvailabilityText: string;\n  onlineAvailabilityUpdateDate: string;\n  releaseDate: string;\n  name: string;\n  type: string;\n  startDate: string;\n  new: boolean;\n  active: boolean;\n  lowPriceGuarantee: boolean;\n  activeUpdateDate: string;\n  regularPrice: number;\n  salePrice: number;\n  clearance: boolean;\n  onSale: boolean;\n  planPrice: number;\n  priceWithPlan: number;\n  priceRestriction: string;\n  priceUpdateDate: string;\n  digital: boolean;\n  preowned: boolean;\n  carriers: Array<{\n    name: string;\n  }>;\n  planFeatures: any[];\n  devices: any[];\n  carrierPlans: any[];\n  technologyCode: string;\n  carrierModelNumber: string;\n  earlyTerminationFees: any[];\n  outletCenter: boolean;\n  secondaryMarket: boolean;\n  frequentlyPurchasedWith: any[];\n  accessories: any[];\n  relatedProducts: any[];\n  requiredParts: any[];\n  energyGuide: string;\n  longDescription: string;\n  includedItemList: any[];\n  instantSavings: boolean;\n  currentOffer: any[];\n  quantityLimit: number;\n  color: string;\n  depth: string;\n  height: string;\n  weight: string;\n  width: string;\n  warrantyLabor: string;\n  warrantyParts: string;\n  softwareAge: string;\n  softwareGrade: string;\n  platform: string;\n  numberOfPlayers: string;\n  genre: string;\n  esrbRating: string;\n  longDescriptionHtml: string;\n  features: Array<{\n    feature: string;\n  }>;\n  categoryPath: Array<{\n    id: string;\n    name: string;\n  }>;\n  alternateCategories: Array<{\n    id: string;\n    name: string;\n  }>;\n  lists: any[];\n  customerTopRated: boolean;\n  url: string;\n  spin360Url: string;\n  mobileUrl: string;\n  affiliateUrl: string;\n  addToCartUrl: string;\n  affiliateAddToCartUrl: string;\n  linkShareAffiliateUrl: string;\n  linkShareAffiliateAddToCartUrl: string;\n  upc: string;\n  productTemplate: string;\n  categoryId: string;\n  categoryName: string;\n  subclass: string;\n  subclassId: string;\n  class: string;\n  classId: string;\n  department: string;\n  departmentId: string;\n  protectionPlanTerm: string;\n  protectionPlanType: string;\n  protectionPlanLowPrice: string;\n  protectionPlanHighPrice: string;\n  buybackPlans: any[];\n  protectionPlans: any[];\n  protectionPlanDetails: string;\n  productFamilies: any[];\n  productVariations: any[];\n  aspectRatio: string;\n  screenFormat: string;\n  lengthInMinutes: number;\n  mpaaRating: string;\n  plot: string;\n  studio: string;\n  theatricalReleaseDate: string;\n  description: string;\n  manufacturer: string;\n  modelNumber: string;\n  images: Array<{\n    rel: string;\n    unitOfMeasure: string;\n    width: string;\n    height: string;\n    href: string;\n    primary: boolean;\n  }>;\n  image: string;\n  largeFrontImage: string;\n  mediumImage: string;\n  thumbnailImage: string;\n  largeImage: string;\n  alternateViewsImage: string;\n  angleImage: string;\n  backViewImage: string;\n  energyGuideImage: string;\n  leftViewImage: string;\n  accessoriesImage: string;\n  remoteControlImage: string;\n  rightViewImage: string;\n  topViewImage: string;\n  albumTitle: string;\n  artistName: string;\n  artistId: number;\n  originalReleaseDate: string;\n  parentalAdvisory: boolean;\n  mediaCount: number;\n  monoStereo: string;\n  studioLive: string;\n  copyrightYear: number;\n  audioTracks: any[];\n  originalLanguage: string;\n  subtitleLanguage: string;\n  dubLanguage: string;\n  dtsDigitalSurround: boolean;\n  dolbyDigital: boolean;\n  dolbyDigitalEx: boolean;\n  dolbyProLogic: boolean;\n  dolbyProLogicII: boolean;\n  dolbyDigitalSurroundEX: boolean;\n}\n\n// Kroger OAuth token management\nlet krogerAccessToken: string | null = null;\nlet krogerTokenExpiry: number = 0;\n\nasync function getKrogerAccessToken(): Promise<string> {\n  if (krogerAccessToken && Date.now() < krogerTokenExpiry) {\n    return krogerAccessToken;\n  }\n\n  const response = await fetch('https://api.kroger.com/v1/connect/oauth2/token', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Authorization': `Basic ${Buffer.from(`${env.KROGER_CLIENT_ID}:${env.KROGER_CLIENT_SECRET}`).toString('base64')}`,\n    },\n    body: 'grant_type=client_credentials&scope=product.compact',\n  });\n\n  if (!response.ok) {\n    throw new Error(`Kroger OAuth failed: ${response.statusText}`);\n  }\n\n  const data = await response.json();\n  krogerAccessToken = data.access_token;\n  krogerTokenExpiry = Date.now() + (data.expires_in * 1000) - 60000; // Refresh 1 minute early\n\n  return krogerAccessToken;\n}\n\n// Documenu API Service\nexport class DocumenuService {\n  private static readonly BASE_URL = 'https://api.documenu.com/v2';\n\n  static async searchRestaurants(params: {\n    lat?: number;\n    lon?: number;\n    distance?: number;\n    size?: number;\n    page?: number;\n    fullmenu?: boolean;\n    key_phrase?: string;\n    exact_match?: boolean;\n  }): Promise<DocumenuRestaurant[]> {\n    if (!env.DOCUMENU_API_KEY) {\n      throw new Error('Documenu API key not configured');\n    }\n\n    const searchParams = new URLSearchParams({\n      key: env.DOCUMENU_API_KEY,\n      ...Object.fromEntries(\n        Object.entries(params).map(([k, v]) => [k, String(v)]),\n      ),\n    });\n\n    const response = await fetch(`${this.BASE_URL}/restaurants/search/geo?${searchParams}`);\n\n    if (!response.ok) {\n      throw new Error(`Documenu API error: ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    return data.data || [];\n  }\n\n  static async getRestaurantMenu(restaurantId: string): Promise<DocumenuRestaurant> {\n    if (!env.DOCUMENU_API_KEY) {\n      throw new Error('Documenu API key not configured');\n    }\n\n    const response = await fetch(\n      `${this.BASE_URL}/restaurant/${restaurantId}?key=${env.DOCUMENU_API_KEY}`,\n    );\n\n    if (!response.ok) {\n      throw new Error(`Documenu API error: ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    return data.data;\n  }\n}\n\n// Zomato API Service (via RapidAPI)\nexport class ZomatoService {\n  private static readonly BASE_URL = 'https://zomato.p.rapidapi.com';\n\n  static async searchRestaurants(params: {\n    entity_id?: number;\n    entity_type?: string;\n    q?: string;\n    start?: number;\n    count?: number;\n    lat?: number;\n    lon?: number;\n    radius?: number;\n    cuisines?: string;\n    establishment_type?: string;\n    collection_id?: number;\n    category?: string;\n    sort?: string;\n    order?: string;\n  }): Promise<ZomatoRestaurant[]> {\n    if (!env.ZOMATO_API_KEY) {\n      throw new Error('Zomato API key not configured');\n    }\n\n    const searchParams = new URLSearchParams(\n      Object.fromEntries(\n        Object.entries(params).map(([k, v]) => [k, String(v)]),\n      ),\n    );\n\n    const response = await fetch(`${this.BASE_URL}/search?${searchParams}`, {\n      headers: {\n        'X-RapidAPI-Key': env.ZOMATO_API_KEY,\n        'X-RapidAPI-Host': 'zomato.p.rapidapi.com',\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(`Zomato API error: ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    return data.restaurants?.map((r: any) => r.restaurant) || [];\n  }\n\n  static async getRestaurantDetails(restaurantId: string): Promise<ZomatoRestaurant> {\n    if (!env.ZOMATO_API_KEY) {\n      throw new Error('Zomato API key not configured');\n    }\n\n    const response = await fetch(`${this.BASE_URL}/restaurant?res_id=${restaurantId}`, {\n      headers: {\n        'X-RapidAPI-Key': env.ZOMATO_API_KEY,\n        'X-RapidAPI-Host': 'zomato.p.rapidapi.com',\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(`Zomato API error: ${response.statusText}`);\n    }\n\n    return await response.json();\n  }\n}\n\n// Yelp Fusion API Service\nexport class YelpService {\n  private static readonly BASE_URL = 'https://api.yelp.com/v3';\n\n  static async searchBusinesses(params: {\n    term?: string;\n    location?: string;\n    latitude?: number;\n    longitude?: number;\n    radius?: number;\n    categories?: string;\n    locale?: string;\n    limit?: number;\n    offset?: number;\n    sort_by?: 'best_match' | 'rating' | 'review_count' | 'distance';\n    price?: '1' | '2' | '3' | '4';\n    open_now?: boolean;\n    open_at?: number;\n    attributes?: string;\n  }): Promise<{ businesses: YelpBusiness[]; total: number; region: any }> {\n    if (!env.YELP_API_KEY) {\n      throw new Error('Yelp API key not configured');\n    }\n\n    const searchParams = new URLSearchParams(\n      Object.fromEntries(\n        Object.entries(params)\n          .filter(([, v]) => v !== undefined)\n          .map(([k, v]) => [k, String(v)]),\n      ),\n    );\n\n    const response = await fetch(`${this.BASE_URL}/businesses/search?${searchParams}`, {\n      headers: {\n        'Authorization': `Bearer ${env.YELP_API_KEY}`,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(`Yelp API error: ${response.statusText}`);\n    }\n\n    return await response.json();\n  }\n\n  static async getBusinessDetails(businessId: string): Promise<YelpBusiness> {\n    if (!env.YELP_API_KEY) {\n      throw new Error('Yelp API key not configured');\n    }\n\n    const response = await fetch(`${this.BASE_URL}/businesses/${businessId}`, {\n      headers: {\n        'Authorization': `Bearer ${env.YELP_API_KEY}`,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(`Yelp API error: ${response.statusText}`);\n    }\n\n    return await response.json();\n  }\n\n  static async getBusinessReviews(businessId: string, locale?: string): Promise<{\n    reviews: Array<{\n      id: string;\n      url: string;\n      text: string;\n      rating: number;\n      time_created: string;\n      user: {\n        id: string;\n        profile_url: string;\n        image_url: string;\n        name: string;\n      };\n    }>;\n    total: number;\n    possible_languages: string[];\n  }> {\n    if (!env.YELP_API_KEY) {\n      throw new Error('Yelp API key not configured');\n    }\n\n    const searchParams = new URLSearchParams();\n    if (locale) {searchParams.append('locale', locale);}\n\n    const response = await fetch(\n      `${this.BASE_URL}/businesses/${businessId}/reviews?${searchParams}`,\n      {\n        headers: {\n          'Authorization': `Bearer ${env.YELP_API_KEY}`,\n        },\n      },\n    );\n\n    if (!response.ok) {\n      throw new Error(`Yelp API error: ${response.statusText}`);\n    }\n\n    return await response.json();\n  }\n}\n\n// Kroger API Service\nexport class KrogerService {\n  private static readonly BASE_URL = 'https://api.kroger.com/v1';\n\n  static async searchProducts(params: {\n    q?: string;\n    locationId?: string;\n    productId?: string;\n    brand?: string;\n    fulfillment?: 'ais' | 'csp' | 'dug' | 'sto';\n    start?: number;\n    limit?: number;\n  }): Promise<{ data: KrogerProduct[]; meta: any }> {\n    const token = await getKrogerAccessToken();\n\n    const searchParams = new URLSearchParams(\n      Object.fromEntries(\n        Object.entries(params)\n          .filter(([, v]) => v !== undefined)\n          .map(([k, v]) => [k, String(v)]),\n      ),\n    );\n\n    const response = await fetch(`${this.BASE_URL}/products?${searchParams}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Accept': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(`Kroger API error: ${response.statusText}`);\n    }\n\n    return await response.json();\n  }\n\n  static async getLocations(params: {\n    'filter.zipCode.near'?: string;\n    'filter.radiusInMiles'?: number;\n    'filter.limit'?: number;\n    'filter.chain'?: string;\n    'filter.department'?: string;\n  }): Promise<{ data: any[]; meta: any }> {\n    const token = await getKrogerAccessToken();\n\n    const searchParams = new URLSearchParams(\n      Object.fromEntries(\n        Object.entries(params)\n          .filter(([, v]) => v !== undefined)\n          .map(([k, v]) => [k, String(v)]),\n      ),\n    );\n\n    const response = await fetch(`${this.BASE_URL}/locations?${searchParams}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Accept': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(`Kroger API error: ${response.statusText}`);\n    }\n\n    return await response.json();\n  }\n}\n\n// Best Buy API Service\nexport class BestBuyService {\n  private static readonly BASE_URL = 'https://api.bestbuy.com/v1';\n\n  static async searchProducts(params: {\n    q?: string;\n    categoryId?: string;\n    format?: 'json' | 'xml';\n    show?: string;\n    sort?: string;\n    facet?: string;\n    cursorMark?: string;\n    pageSize?: number;\n    page?: number;\n  }): Promise<{ products: BestBuyProduct[]; total: number; totalPages: number }> {\n    if (!env.BESTBUY_API_KEY) {\n      throw new Error('Best Buy API key not configured');\n    }\n\n    const searchParams = new URLSearchParams({\n      apiKey: env.BESTBUY_API_KEY,\n      format: 'json',\n      ...Object.fromEntries(\n        Object.entries(params)\n          .filter(([, v]) => v !== undefined)\n          .map(([k, v]) => [k, String(v)]),\n      ),\n    });\n\n    const response = await fetch(`${this.BASE_URL}/products?${searchParams}`);\n\n    if (!response.ok) {\n      throw new Error(`Best Buy API error: ${response.statusText}`);\n    }\n\n    return await response.json();\n  }\n\n  static async getProductDetails(sku: number): Promise<BestBuyProduct> {\n    if (!env.BESTBUY_API_KEY) {\n      throw new Error('Best Buy API key not configured');\n    }\n\n    const response = await fetch(\n      `${this.BASE_URL}/products/${sku}.json?apiKey=${env.BESTBUY_API_KEY}`,\n    );\n\n    if (!response.ok) {\n      throw new Error(`Best Buy API error: ${response.statusText}`);\n    }\n\n    return await response.json();\n  }\n\n  static async getStores(params: {\n    area?: string;\n    storeId?: number;\n    storeType?: string;\n    format?: 'json' | 'xml';\n    show?: string;\n    sort?: string;\n    page?: number;\n    pageSize?: number;\n  }): Promise<{ stores: any[]; total: number; totalPages: number }> {\n    if (!env.BESTBUY_API_KEY) {\n      throw new Error('Best Buy API key not configured');\n    }\n\n    const searchParams = new URLSearchParams({\n      apiKey: env.BESTBUY_API_KEY,\n      format: 'json',\n      ...Object.fromEntries(\n        Object.entries(params)\n          .filter(([, v]) => v !== undefined)\n          .map(([k, v]) => [k, String(v)]),\n      ),\n    });\n\n    const response = await fetch(`${this.BASE_URL}/stores?${searchParams}`);\n\n    if (!response.ok) {\n      throw new Error(`Best Buy API error: ${response.statusText}`);\n    }\n\n    return await response.json();\n  }\n\n  static async checkProductAvailability(sku: number, storeId: number): Promise<{\n    sku: number;\n    storeId: number;\n    inStoreAvailability: boolean;\n    inStoreAvailabilityText: string;\n    inStoreAvailabilityUpdateDate: string;\n  }> {\n    if (!env.BESTBUY_API_KEY) {\n      throw new Error('Best Buy API key not configured');\n    }\n\n    const response = await fetch(\n      `${this.BASE_URL}/products/${sku}/stores/${storeId}.json?apiKey=${env.BESTBUY_API_KEY}`,\n    );\n\n    if (!response.ok) {\n      throw new Error(`Best Buy API error: ${response.statusText}`);\n    }\n\n    return await response.json();\n  }\n}\n\n// Unified search service that aggregates results from multiple APIs\nexport class UnifiedSearchService {\n  static async searchRestaurants(params: {\n    latitude?: number;\n    longitude?: number;\n    location?: string;\n    term?: string;\n    radius?: number;\n    limit?: number;\n  }) {\n    const results = {\n      documenu: [] as DocumenuRestaurant[],\n      zomato: [] as ZomatoRestaurant[],\n      yelp: [] as YelpBusiness[],\n      errors: [] as string[],\n    };\n\n    // Search Documenu\n    try {\n      if (params.latitude && params.longitude) {\n        results.documenu = await DocumenuService.searchRestaurants({\n          lat: params.latitude,\n          lon: params.longitude,\n          distance: params.radius || 5000,\n          size: params.limit || 20,\n          fullmenu: true,\n          key_phrase: params.term,\n        });\n      }\n    } catch (error) {\n      results.errors.push(`Documenu: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n\n    // Search Zomato\n    try {\n      if (params.latitude && params.longitude) {\n        results.zomato = await ZomatoService.searchRestaurants({\n          lat: params.latitude,\n          lon: params.longitude,\n          radius: params.radius || 5000,\n          q: params.term,\n          count: params.limit || 20,\n        });\n      }\n    } catch (error) {\n      results.errors.push(`Zomato: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n\n    // Search Yelp\n    try {\n      const yelpParams: any = {\n        term: params.term,\n        limit: params.limit || 20,\n      };\n\n      if (params.latitude && params.longitude) {\n        yelpParams.latitude = params.latitude;\n        yelpParams.longitude = params.longitude;\n        yelpParams.radius = Math.min(params.radius || 5000, 40000); // Yelp max radius\n      } else if (params.location) {\n        yelpParams.location = params.location;\n      }\n\n      const yelpResponse = await YelpService.searchBusinesses(yelpParams);\n      results.yelp = yelpResponse.businesses;\n    } catch (error) {\n      results.errors.push(`Yelp: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n\n    return results;\n  }\n\n  static async searchProducts(params: {\n    query: string;\n    location?: string;\n    limit?: number;\n  }) {\n    const results = {\n      kroger: [] as KrogerProduct[],\n      bestbuy: [] as BestBuyProduct[],\n      errors: [] as string[],\n    };\n\n    // Search Kroger\n    try {\n      const krogerResponse = await KrogerService.searchProducts({\n        q: params.query,\n        limit: params.limit || 20,\n      });\n      results.kroger = krogerResponse.data;\n    } catch (error) {\n      results.errors.push(`Kroger: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n\n    // Search Best Buy\n    try {\n      const bestbuyResponse = await BestBuyService.searchProducts({\n        q: params.query,\n        pageSize: params.limit || 20,\n      });\n      results.bestbuy = bestbuyResponse.products;\n    } catch (error) {\n      results.errors.push(`Best Buy: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n\n    return results;\n  }\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/services/fee-calculator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/services/firebase.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[480,483],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[480,483],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[495,498],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[495,498],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[508,511],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[508,511],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[526,529],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[526,529],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":71,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2146,2149],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2146,2149],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":1,"message":"Unexpected empty arrow function.","line":86,"column":16,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":86,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nconst firebaseConfig = {\n  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\n  measurementId: process.env.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID,\n};\n\nlet app: any;\nlet auth: any;\nlet db: any;\nlet storage: any;\n\n// Initialize Firebase\nconst initializeFirebase = async () => {\n  if (typeof window !== 'undefined') {\n    const { initializeApp, getApps, getApp } = await import('firebase/app');\n    const { getAuth } = await import('firebase/auth');\n    const { getFirestore } = await import('firebase/firestore');\n    const { getStorage } = await import('firebase/storage');\n\n    app = !getApps().length ? initializeApp(firebaseConfig) : getApp();\n    auth = getAuth(app);\n    db = getFirestore(app);\n    storage = getStorage(app);\n  }\n};\n\n// Initialize Firebase on the client side\nif (typeof window !== 'undefined') {\n  initializeFirebase();\n}\n\n// Generate a local user ID instead of using anonymous authentication\nexport const getLocalUser = () => {\n  // Check if we already have a local user ID in localStorage\n  if (typeof window !== 'undefined') {\n    const localUserId = localStorage.getItem('localUserId');\n    if (localUserId) {\n      return {\n        uid: localUserId,\n        isAnonymous: true,\n        isLocalFallback: true,\n      };\n    }\n\n    // Generate a new local user ID\n    const newLocalUserId = `local-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;\n    localStorage.setItem('localUserId', newLocalUserId);\n\n    return {\n      uid: newLocalUserId,\n      isAnonymous: true,\n      isLocalFallback: true,\n    };\n  }\n\n  // Fallback for SSR\n  return {\n    uid: `local-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,\n    isAnonymous: true,\n    isLocalFallback: true,\n  };\n};\n\n// Listen for auth state changes with local fallback\nexport const onAuthStateChange = async (callback: (user: any) => void) => {\n  if (typeof window !== 'undefined') {\n    const { onAuthStateChanged } = await import('firebase/auth');\n    // First check if there's a signed-in user\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\n      if (user) {\n        callback(user);\n      } else {\n        // If no user, use local fallback\n        callback(getLocalUser());\n      }\n    });\n\n    return unsubscribe;\n  }\n  return () => {};\n};\n\n// Store verification status with fallback to localStorage\nexport const storeVerificationStatus = async (\n  userId: string,\n  isVerified: boolean,\n  expiryDays = 30,\n) => {\n  try {\n    // Only attempt to store in Firestore if it's not a local fallback user\n    if (!userId.startsWith('local-') && typeof window !== 'undefined') {\n      const { doc, setDoc, Timestamp } = await import('firebase/firestore');\n      const expiryDate = new Date();\n      expiryDate.setDate(expiryDate.getDate() + expiryDays);\n\n      await setDoc(doc(db, 'verifications', userId), {\n        verified: isVerified,\n        timestamp: Timestamp.now(),\n        expiryDate: Timestamp.fromDate(expiryDate),\n      });\n    }\n\n    // Always store in localStorage as a fallback\n    if (typeof window !== 'undefined') {\n      const expiryDate = new Date();\n      expiryDate.setDate(expiryDate.getDate() + expiryDays);\n\n      localStorage.setItem('ageVerified', isVerified.toString());\n      localStorage.setItem('ageVerifiedExpiry', expiryDate.toISOString());\n    }\n\n    return true;\n  } catch (error) {\n    console.error('Error storing verification status:', error);\n\n    // Fallback to localStorage\n    if (typeof window !== 'undefined') {\n      const expiryDate = new Date();\n      expiryDate.setDate(expiryDate.getDate() + expiryDays);\n\n      localStorage.setItem('ageVerified', isVerified.toString());\n      localStorage.setItem('ageVerifiedExpiry', expiryDate.toISOString());\n    }\n\n    return true; // Return true since we successfully stored in localStorage\n  }\n};\n\n// Get verification status with fallback from localStorage\nexport const getVerificationStatus = async (userId: string) => {\n  try {\n    // Only attempt to get from Firestore if it's not a local fallback user\n    if (!userId.startsWith('local-') && typeof window !== 'undefined') {\n      const { doc, getDoc } = await import('firebase/firestore');\n      const docRef = doc(db, 'verifications', userId);\n      const docSnap = await getDoc(docRef);\n\n      if (docSnap.exists()) {\n        const data = docSnap.data();\n        const now = new Date();\n        const expiryDate = data.expiryDate.toDate();\n\n        // Check if verification has expired\n        if (now > expiryDate) {\n          return false;\n        }\n\n        return data.verified;\n      }\n    }\n\n    // Fallback to localStorage\n    if (typeof window !== 'undefined') {\n      const verified = localStorage.getItem('ageVerified');\n      const expiryStr = localStorage.getItem('ageVerifiedExpiry');\n\n      if (verified && expiryStr) {\n        const now = new Date();\n        const expiryDate = new Date(expiryStr);\n\n        // Check if verification has expired\n        if (now > expiryDate) {\n          return false;\n        }\n\n        return verified === 'true';\n      }\n    }\n\n    return false;\n  } catch (error) {\n    console.error('Error getting verification status:', error);\n\n    // Fallback to localStorage\n    if (typeof window !== 'undefined') {\n      const verified = localStorage.getItem('ageVerified');\n      const expiryStr = localStorage.getItem('ageVerifiedExpiry');\n\n      if (verified && expiryStr) {\n        const now = new Date();\n        const expiryDate = new Date(expiryStr);\n\n        // Check if verification has expired\n        if (now > expiryDate) {\n          return false;\n        }\n\n        return verified === 'true';\n      }\n    }\n\n    return false;\n  }\n};\n\nexport { app, auth, db, storage };\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/services/firebase/firebase-auth-provider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/services/firebase/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/services/geocoding-service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":74,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1817,1820],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1817,1820],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2025,2028],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2025,2028],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":91,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2196,2199],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2196,2199],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":207,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":207,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5195,5198],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5195,5198],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":308,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":308,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8354,8357],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8354,8357],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Client } from '@googlemaps/google-maps-services-js';\nimport type { LatLngLiteral } from '@googlemaps/google-maps-services-js';\nimport { geocodeAddress, reverseGeocode, validateAddress } from '../maps';\n\n// Enhanced interfaces for geocoding service\nexport interface GeocodingResult {\n  formatted_address: string;\n  geometry: {\n    location: {\n      lat: number;\n      lng: number;\n    };\n    location_type: string;\n    viewport?: {\n      northeast: { lat: number; lng: number };\n      southwest: { lat: number; lng: number };\n    };\n  };\n  place_id: string;\n  types: string[];\n  address_components: google.maps.GeocoderAddressComponent[];\n  partial_match?: boolean;\n}\n\nexport interface BatchGeocodingRequest {\n  addresses: string[];\n  options?: {\n    validateDelivery?: boolean;\n    includeTimezone?: boolean;\n    language?: string;\n    region?: string;\n  };\n}\n\nexport interface BatchGeocodingResult {\n  results: Array<{\n    address: string;\n    success: boolean;\n    result?: GeocodingResult;\n    validation?: {\n      isValid: boolean;\n      isDeliverable: boolean;\n      issues?: string[];\n    };\n    error?: string;\n  }>;\n  summary: {\n    total: number;\n    successful: number;\n    failed: number;\n    processingTime: number;\n  };\n}\n\nexport interface AddressValidationOptions {\n  strictValidation?: boolean;\n  checkDeliverability?: boolean;\n  allowPOBoxes?: boolean;\n  allowApproximateMatches?: boolean;\n  requiredComponents?: string[]; // e.g., ['street_number', 'route', 'locality']\n}\n\nexport interface GeocodingServiceOptions {\n  apiKey?: string;\n  enableCaching?: boolean;\n  cacheTimeout?: number; // in milliseconds\n  rateLimitPerMinute?: number;\n  defaultLanguage?: string;\n  defaultRegion?: string;\n}\n\n// Simple in-memory cache (in production, use Redis or similar)\ninterface CacheEntry {\n  result: any;\n  timestamp: number;\n  ttl: number;\n}\n\nclass GeocodingCache {\n  private cache = new Map<string, CacheEntry>();\n  private readonly defaultTTL = 24 * 60 * 60 * 1000; // 24 hours\n\n  set(key: string, value: any, ttl?: number): void {\n    this.cache.set(key, {\n      result: value,\n      timestamp: Date.now(),\n      ttl: ttl || this.defaultTTL,\n    });\n  }\n\n  get(key: string): any | null {\n    const entry = this.cache.get(key);\n    if (!entry) {return null;}\n\n    if (Date.now() - entry.timestamp > entry.ttl) {\n      this.cache.delete(key);\n      return null;\n    }\n\n    return entry.result;\n  }\n\n  clear(): void {\n    this.cache.clear();\n  }\n\n  size(): number {\n    return this.cache.size;\n  }\n}\n\n// Rate limiter for API calls\nclass RateLimiter {\n  private requests: number[] = [];\n  private readonly limit: number;\n  private readonly windowMs = 60 * 1000; // 1 minute\n\n  constructor(requestsPerMinute: number = 50) {\n    this.limit = requestsPerMinute;\n  }\n\n  async checkLimit(): Promise<boolean> {\n    const now = Date.now();\n    // Remove requests older than 1 minute\n    this.requests = this.requests.filter(time => now - time < this.windowMs);\n\n    if (this.requests.length >= this.limit) {\n      return false;\n    }\n\n    this.requests.push(now);\n    return true;\n  }\n\n  getRemainingRequests(): number {\n    const now = Date.now();\n    this.requests = this.requests.filter(time => now - time < this.windowMs);\n    return Math.max(0, this.limit - this.requests.length);\n  }\n}\n\nexport class GeocodingService {\n  private client: Client;\n  private cache: GeocodingCache;\n  private rateLimiter: RateLimiter;\n  private options: Required<GeocodingServiceOptions>;\n\n  constructor(options: GeocodingServiceOptions = {}) {\n    this.options = {\n      apiKey: options.apiKey || process.env.GOOGLE_MAPS_API_KEY || '',\n      enableCaching: options.enableCaching ?? true,\n      cacheTimeout: options.cacheTimeout || 24 * 60 * 60 * 1000, // 24 hours\n      rateLimitPerMinute: options.rateLimitPerMinute || 50,\n      defaultLanguage: options.defaultLanguage || 'en',\n      defaultRegion: options.defaultRegion || 'US',\n    };\n\n    this.client = new Client({});\n    this.cache = new GeocodingCache();\n    this.rateLimiter = new RateLimiter(this.options.rateLimitPerMinute);\n\n    if (!this.options.apiKey) {\n      console.warn('Google Maps API key not provided to GeocodingService');\n    }\n  }\n\n  /**\n   * Enhanced geocoding with caching and rate limiting\n   */\n  async geocode(\n    address: string,\n    options: {\n      language?: string;\n      region?: string;\n      bounds?: {\n        northeast: LatLngLiteral;\n        southwest: LatLngLiteral;\n      };\n      componentRestrictions?: {\n        country?: string;\n        postalCode?: string;\n        locality?: string;\n      };\n    } = {},\n  ): Promise<GeocodingResult | null> {\n    if (!this.options.apiKey) {\n      throw new Error('Google Maps API key is required for geocoding');\n    }\n\n    // Create cache key\n    const cacheKey = `geocode:${address}:${JSON.stringify(options)}`;\n\n    // Check cache first\n    if (this.options.enableCaching) {\n      const cached = this.cache.get(cacheKey);\n      if (cached) {\n        return cached;\n      }\n    }\n\n    // Check rate limit\n    if (!(await this.rateLimiter.checkLimit())) {\n      throw new Error('Rate limit exceeded. Please try again later.');\n    }\n\n    try {\n      const params: any = {\n        address,\n        key: this.options.apiKey,\n        language: options.language || this.options.defaultLanguage,\n        region: options.region || this.options.defaultRegion,\n      };\n\n      if (options.bounds) {\n        params.bounds = `${options.bounds.southwest.lat},${options.bounds.southwest.lng}|${options.bounds.northeast.lat},${options.bounds.northeast.lng}`;\n      }\n\n      if (options.componentRestrictions) {\n        const components = [];\n        if (options.componentRestrictions.country) {\n          components.push(`country:${options.componentRestrictions.country}`);\n        }\n        if (options.componentRestrictions.postalCode) {\n          components.push(`postal_code:${options.componentRestrictions.postalCode}`);\n        }\n        if (options.componentRestrictions.locality) {\n          components.push(`locality:${options.componentRestrictions.locality}`);\n        }\n        if (components.length > 0) {\n          params.components = components.join('|');\n        }\n      }\n\n      const response = await this.client.geocode({ params });\n\n      if (response.data.results.length === 0) {\n        return null;\n      }\n\n      const result = response.data.results[0];\n      const geocodingResult: GeocodingResult = {\n        formatted_address: result.formatted_address,\n        geometry: {\n          location: {\n            lat: result.geometry.location.lat,\n            lng: result.geometry.location.lng,\n          },\n          location_type: result.geometry.location_type,\n          viewport: result.geometry.viewport ? {\n            northeast: {\n              lat: result.geometry.viewport.northeast.lat,\n              lng: result.geometry.viewport.northeast.lng,\n            },\n            southwest: {\n              lat: result.geometry.viewport.southwest.lat,\n              lng: result.geometry.viewport.southwest.lng,\n            },\n          } : undefined,\n        },\n        place_id: result.place_id,\n        types: result.types,\n        address_components: result.address_components,\n        partial_match: result.partial_match,\n      };\n\n      // Cache the result\n      if (this.options.enableCaching) {\n        this.cache.set(cacheKey, geocodingResult, this.options.cacheTimeout);\n      }\n\n      return geocodingResult;\n    } catch (error) {\n      console.error('Geocoding error:', error);\n      throw new Error(`Failed to geocode address: ${address}`);\n    }\n  }\n\n  /**\n   * Enhanced reverse geocoding\n   */\n  async reverseGeocode(\n    lat: number,\n    lng: number,\n    options: {\n      language?: string;\n      resultTypes?: string[];\n      locationTypes?: string[];\n    } = {},\n  ): Promise<GeocodingResult | null> {\n    if (!this.options.apiKey) {\n      throw new Error('Google Maps API key is required for reverse geocoding');\n    }\n\n    const cacheKey = `reverse:${lat}:${lng}:${JSON.stringify(options)}`;\n\n    if (this.options.enableCaching) {\n      const cached = this.cache.get(cacheKey);\n      if (cached) {\n        return cached;\n      }\n    }\n\n    if (!(await this.rateLimiter.checkLimit())) {\n      throw new Error('Rate limit exceeded. Please try again later.');\n    }\n\n    try {\n      const params: any = {\n        latlng: { lat, lng },\n        key: this.options.apiKey,\n        language: options.language || this.options.defaultLanguage,\n      };\n\n      if (options.resultTypes && options.resultTypes.length > 0) {\n        params.result_type = options.resultTypes.join('|');\n      }\n\n      if (options.locationTypes && options.locationTypes.length > 0) {\n        params.location_type = options.locationTypes.join('|');\n      }\n\n      const response = await this.client.reverseGeocode({ params });\n\n      if (response.data.results.length === 0) {\n        return null;\n      }\n\n      const result = response.data.results[0];\n      const geocodingResult: GeocodingResult = {\n        formatted_address: result.formatted_address,\n        geometry: {\n          location: {\n            lat: result.geometry.location.lat,\n            lng: result.geometry.location.lng,\n          },\n          location_type: result.geometry.location_type,\n        },\n        place_id: result.place_id,\n        types: result.types,\n        address_components: result.address_components,\n      };\n\n      if (this.options.enableCaching) {\n        this.cache.set(cacheKey, geocodingResult, this.options.cacheTimeout);\n      }\n\n      return geocodingResult;\n    } catch (error) {\n      console.error('Reverse geocoding error:', error);\n      throw new Error(`Failed to reverse geocode coordinates: ${lat}, ${lng}`);\n    }\n  }\n\n  /**\n   * Enhanced address validation\n   */\n  async validateAddress(\n    address: string,\n    options: AddressValidationOptions = {},\n  ): Promise<{\n    isValid: boolean;\n    isDeliverable: boolean;\n    geocodeResult?: GeocodingResult;\n    issues?: string[];\n    confidence?: 'high' | 'medium' | 'low';\n  }> {\n    try {\n      const geocodeResult = await this.geocode(address);\n\n      if (!geocodeResult) {\n        return {\n          isValid: false,\n          isDeliverable: false,\n          issues: ['Address not found'],\n          confidence: 'low',\n        };\n      }\n\n      const issues: string[] = [];\n      let isDeliverable = true;\n      let confidence: 'high' | 'medium' | 'low' = 'high';\n\n      // Check for partial matches\n      if (geocodeResult.partial_match) {\n        issues.push('Address is a partial match - please verify');\n        confidence = 'medium';\n        if (options.strictValidation) {\n          isDeliverable = false;\n        }\n      }\n\n      // Check location type precision\n      if (geocodeResult.geometry.location_type === 'APPROXIMATE') {\n        issues.push('Address is approximate - please provide more specific details');\n        confidence = 'low';\n        if (!options.allowApproximateMatches) {\n          isDeliverable = false;\n        }\n      }\n\n      // Check required components\n      if (options.requiredComponents && options.requiredComponents.length > 0) {\n        const missingComponents = options.requiredComponents.filter(required =>\n          !geocodeResult.address_components.some(component =>\n            component.types.includes(required),\n          ),\n        );\n\n        if (missingComponents.length > 0) {\n          issues.push(`Missing required address components: ${missingComponents.join(', ')}`);\n          isDeliverable = false;\n        }\n      }\n\n      // Check for street number if deliverability is required\n      if (options.checkDeliverability) {\n        const hasStreetNumber = geocodeResult.address_components.some(\n          component => component.types.includes('street_number'),\n        );\n\n        if (!hasStreetNumber) {\n          issues.push('No street number found - please provide a complete address');\n          isDeliverable = false;\n        }\n      }\n\n      // Check for PO Box\n      if (!options.allowPOBoxes && geocodeResult.formatted_address.toLowerCase().includes('po box')) {\n        issues.push('PO Box addresses are not supported');\n        isDeliverable = false;\n      }\n\n      return {\n        isValid: true,\n        isDeliverable,\n        geocodeResult,\n        issues: issues.length > 0 ? issues : undefined,\n        confidence,\n      };\n    } catch (error) {\n      console.error('Address validation error:', error);\n      return {\n        isValid: false,\n        isDeliverable: false,\n        issues: ['Failed to validate address'],\n        confidence: 'low',\n      };\n    }\n  }\n\n  /**\n   * Batch geocoding for multiple addresses\n   */\n  async batchGeocode(request: BatchGeocodingRequest): Promise<BatchGeocodingResult> {\n    const startTime = Date.now();\n    const results: BatchGeocodingResult['results'] = [];\n    let successful = 0;\n    let failed = 0;\n\n    for (const address of request.addresses) {\n      try {\n        const geocodeResult = await this.geocode(address, {\n          language: request.options?.language,\n        });\n\n        if (geocodeResult) {\n          let validation;\n          if (request.options?.validateDelivery) {\n            validation = await this.validateAddress(address, {\n              checkDeliverability: true,\n            });\n          }\n\n          results.push({\n            address,\n            success: true,\n            result: geocodeResult,\n            validation,\n          });\n          successful++;\n        } else {\n          results.push({\n            address,\n            success: false,\n            error: 'Address not found',\n          });\n          failed++;\n        }\n      } catch (error) {\n        results.push({\n          address,\n          success: false,\n          error: error instanceof Error ? error.message : 'Unknown error',\n        });\n        failed++;\n      }\n\n      // Add small delay to respect rate limits\n      await new Promise(resolve => setTimeout(resolve, 100));\n    }\n\n    return {\n      results,\n      summary: {\n        total: request.addresses.length,\n        successful,\n        failed,\n        processingTime: Date.now() - startTime,\n      },\n    };\n  }\n\n  /**\n   * Get service statistics\n   */\n  getStats(): {\n    cacheSize: number;\n    remainingRequests: number;\n    rateLimitPerMinute: number;\n  } {\n    return {\n      cacheSize: this.cache.size(),\n      remainingRequests: this.rateLimiter.getRemainingRequests(),\n      rateLimitPerMinute: this.options.rateLimitPerMinute,\n    };\n  }\n\n  /**\n   * Clear cache\n   */\n  clearCache(): void {\n    this.cache.clear();\n  }\n\n  /**\n   * Health check for the service\n   */\n  async healthCheck(): Promise<{\n    status: 'healthy' | 'degraded' | 'unhealthy';\n    apiKeyConfigured: boolean;\n    cacheEnabled: boolean;\n    rateLimitRemaining: number;\n    lastError?: string;\n  }> {\n    const stats = this.getStats();\n\n    try {\n      // Test with a simple geocoding request\n      if (this.options.apiKey) {\n        await this.geocode('1600 Amphitheatre Parkway, Mountain View, CA');\n      }\n\n      return {\n        status: 'healthy',\n        apiKeyConfigured: !!this.options.apiKey,\n        cacheEnabled: this.options.enableCaching,\n        rateLimitRemaining: stats.remainingRequests,\n      };\n    } catch (error) {\n      return {\n        status: this.options.apiKey ? 'degraded' : 'unhealthy',\n        apiKeyConfigured: !!this.options.apiKey,\n        cacheEnabled: this.options.enableCaching,\n        rateLimitRemaining: stats.remainingRequests,\n        lastError: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n}\n\n// Export singleton instance\nexport const geocodingService = new GeocodingService();\n\n// Export utility functions for backward compatibility\nexport { geocodeAddress, reverseGeocode, validateAddress };","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/services/openai-chat.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":47,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1770,1773],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1770,1773],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import OpenAI from 'openai';\nimport { vectorStore } from '../utils/vectorStore';\n\n// Initialize OpenAI client with the provided API key\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n});\n\n// System prompt template\nconst SYSTEM_PROMPT = `You are BroskiBot, the AI assistant for Broski's Kitchen, a luxury street gourmet restaurant.\nYour goal is to provide helpful, accurate information about Broski's Kitchen to customers.\nYou should be friendly, professional, and knowledgeable about the restaurant's menu, locations, events, and services.\nIf you don't know the answer to a question, you should say so and offer to help with something else.\nHere is some information about Broski's Kitchen that you can use to answer questions:\n\n{{context}}\n\nRemember to stay in character as BroskiBot and only provide information related to Broski's Kitchen.`;\n\n// Function to generate a response using OpenAI\nexport async function generateChatResponse(\n  messages: { role: string; text: string }[],\n  query: string,\n): Promise<string> {\n  try {\n    // Search for relevant content\n    const searchResults = vectorStore.search(query);\n\n    // Create context from search results\n    const context = searchResults.map((result) => result.text).join('\\n\\n');\n\n    // Create system message with context\n    const systemMessage = SYSTEM_PROMPT.replace('{{context}}', context);\n\n    // Format messages for OpenAI\n    const formattedMessages = [\n      { role: 'system', content: systemMessage },\n      ...messages.map((msg) => ({\n        role: msg.role === 'user' ? 'user' : 'assistant',\n        content: msg.text,\n      })),\n    ];\n\n    // Call OpenAI API\n    const response = await openai.chat.completions.create({\n      model: 'gpt-4o',\n      messages: formattedMessages as any,\n      temperature: 0.7,\n      max_tokens: 500,\n    });\n\n    // Return the generated response\n    return (\n      response.choices[0].message.content ||\n      \"I'm sorry, I couldn't generate a response.\"\n    );\n  } catch (error) {\n    console.error('Error generating chat response:', error);\n    return \"I'm having trouble connecting to my services. Please try again later.\";\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/services/openai.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/stripe.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'buffer' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":16,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'NextApiRequest' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":29,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/theme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/types/firebase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/utils/apiErrors.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[403,406],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[403,406],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[804,807],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[804,807],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":37,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[917,920],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[917,920],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1026,1029],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1026,1029],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1139,1142],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1139,1142],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":46,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1259,1262],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1259,1262],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1386,1389],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1386,1389],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1517,1520],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1517,1520],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":74,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2049,2052],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2049,2052],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":90,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2504,2507],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2504,2507],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\n\nexport type ErrorCode =\n  | 'UNAUTHORIZED'\n  | 'FORBIDDEN'\n  | 'NOT_FOUND'\n  | 'BAD_REQUEST'\n  | 'VALIDATION_ERROR'\n  | 'RATE_LIMIT_EXCEEDED'\n  | 'INTERNAL_ERROR';\n\nexport class APIError extends Error {\n  constructor(\n    public readonly message: string,\n    public readonly code: ErrorCode,\n    public readonly status: number,\n    public readonly details?: any,\n  ) {\n    super(message);\n    this.name = 'APIError';\n  }\n\n  toResponse(): NextResponse {\n    const body = {\n      error: this.message,\n      code: this.code,\n      ...(process.env.NODE_ENV === 'development' && { details: this.details }),\n    };\n    return NextResponse.json(body, { status: this.status });\n  }\n}\n\nexport const createError = {\n  unauthorized: (message = 'Unauthorized', details?: any) =>\n    new APIError(message, 'UNAUTHORIZED', 401, details),\n\n  forbidden: (message = 'Forbidden', details?: any) =>\n    new APIError(message, 'FORBIDDEN', 403, details),\n\n  notFound: (message = 'Not Found', details?: any) =>\n    new APIError(message, 'NOT_FOUND', 404, details),\n\n  badRequest: (message = 'Bad Request', details?: any) =>\n    new APIError(message, 'BAD_REQUEST', 400, details),\n\n  validation: (message = 'Validation Error', details?: any) =>\n    new APIError(message, 'VALIDATION_ERROR', 422, details),\n\n  rateLimit: (message = 'Rate Limit Exceeded', details?: any) =>\n    new APIError(message, 'RATE_LIMIT_EXCEEDED', 429, details),\n\n  internal: (message = 'Internal Server Error', details?: any) =>\n    new APIError(message, 'INTERNAL_ERROR', 500, details),\n};\n\nexport const handleError = (error: unknown): NextResponse => {\n  console.error('API Error:', error);\n\n  if (error instanceof APIError) {\n    return error.toResponse();\n  }\n\n  const internalError = createError.internal(\n    'An unexpected error occurred',\n    process.env.NODE_ENV === 'development' ? error : undefined,\n  );\n  return internalError.toResponse();\n};\n\nexport function createAPIError(\n  message: string,\n  status = 500,\n  code?: string,\n  details?: any,\n) {\n  return new APIError(message, code as ErrorCode, status, details);\n}\n\n// Common error creators\nexport const apiErrors = {\n  unauthorized: (message = 'Unauthorized') =>\n    createAPIError(message, 401, 'UNAUTHORIZED'),\n\n  forbidden: (message = 'Forbidden') =>\n    createAPIError(message, 403, 'FORBIDDEN'),\n\n  notFound: (message = 'Resource not found') =>\n    createAPIError(message, 404, 'NOT_FOUND'),\n\n  badRequest: (message: string, details?: any) =>\n    createAPIError(message, 400, 'BAD_REQUEST', details),\n\n  conflict: (message: string) => createAPIError(message, 409, 'CONFLICT'),\n\n  tooManyRequests: (message = 'Too many requests') =>\n    createAPIError(message, 429, 'RATE_LIMIT_EXCEEDED'),\n\n  internal: (message = 'Internal server error') =>\n    createAPIError(message, 500, 'INTERNAL_ERROR'),\n};\n\nexport class ApiError extends Error {\n  constructor(\n    public statusCode: number,\n    message: string,\n  ) {\n    super(message);\n    this.name = 'ApiError';\n  }\n}\n\nexport class ValidationError extends ApiError {\n  constructor(message: string) {\n    super(400, message);\n    this.name = 'ValidationError';\n  }\n}\n\nexport class AuthenticationError extends ApiError {\n  constructor(message = 'Authentication required') {\n    super(401, message);\n    this.name = 'AuthenticationError';\n  }\n}\n\nexport class AuthorizationError extends ApiError {\n  constructor(message = 'Permission denied') {\n    super(403, message);\n    this.name = 'AuthorizationError';\n  }\n}\n\nexport class NotFoundError extends ApiError {\n  constructor(message = 'Resource not found') {\n    super(404, message);\n    this.name = 'NotFoundError';\n  }\n}\n\nexport function handleApiError(error: unknown) {\n  if (error instanceof ApiError) {\n    return new Response(\n      JSON.stringify({\n        error: error.message,\n      }),\n      {\n        status: error.statusCode,\n        headers: { 'Content-Type': 'application/json' },\n      },\n    );\n  }\n\n  console.error('Unhandled error:', error);\n  return new Response(\n    JSON.stringify({\n      error: 'Internal server error',\n    }),\n    {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' },\n    },\n  );\n}\n\nexport function handleAPIError(error: unknown) {\n  console.error('API Error:', error);\n\n  if (error instanceof APIError) {\n    return NextResponse.json(\n      {\n        error: error.message,\n        code: error.code,\n      },\n      { status: error.status },\n    );\n  }\n\n  if (error instanceof Error) {\n    return NextResponse.json(\n      {\n        error: error.message,\n      },\n      { status: 500 },\n    );\n  }\n\n  return NextResponse.json(\n    {\n      error: 'An unexpected error occurred',\n    },\n    { status: 500 },\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/utils/contentIndexer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/utils/geocoding-utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":305,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":305,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8423,8426],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8423,8426],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":325,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":325,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8889,8892],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8889,8892],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":440,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":440,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11659,11662],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11659,11662],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":440,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":440,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11669,11672],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11669,11672],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":455,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":455,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11996,11999],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11996,11999],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":455,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":455,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12006,12009],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12006,12009],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { GeocodeResult, ReverseGeocodeResult, AddressValidationResult } from '../services/geocoding-service';\n\n/**\n * Frontend utility functions for geocoding operations\n */\n\n/**\n * API endpoints for geocoding operations\n */\nexport const GEOCODING_ENDPOINTS = {\n  GEOCODE: '/api/maps?action=geocode',\n  REVERSE_GEOCODE: '/api/maps?action=reverse-geocode',\n  VALIDATE: '/api/maps?action=validate',\n  BATCH_GEOCODE: '/api/maps?action=batch-geocode',\n  HEALTH: '/api/maps?action=health',\n  STATS: '/api/maps?action=stats',\n  CLEAR_CACHE: '/api/maps?action=clear-cache',\n} as const;\n\n/**\n * Error types for geocoding operations\n */\nexport enum GeocodingErrorType {\n  NETWORK_ERROR = 'NETWORK_ERROR',\n  API_ERROR = 'API_ERROR',\n  RATE_LIMIT_ERROR = 'RATE_LIMIT_ERROR',\n  VALIDATION_ERROR = 'VALIDATION_ERROR',\n  UNKNOWN_ERROR = 'UNKNOWN_ERROR'\n}\n\n/**\n * Geocoding error class\n */\nexport class GeocodingError extends Error {\n  constructor(\n    public type: GeocodingErrorType,\n    message: string,\n    public statusCode?: number,\n    public retryAfter?: number,\n  ) {\n    super(message);\n    this.name = 'GeocodingError';\n  }\n}\n\n/**\n * Options for geocoding requests\n */\nexport interface GeocodingRequestOptions {\n  timeout?: number;\n  retries?: number;\n  retryDelay?: number;\n}\n\n/**\n * Geocode an address using the backend service\n */\nexport async function geocodeAddress(\n  address: string,\n  options: GeocodingRequestOptions = {},\n): Promise<GeocodeResult | null> {\n  const { timeout = 10000, retries = 3, retryDelay = 1000 } = options;\n\n  for (let attempt = 0; attempt <= retries; attempt++) {\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), timeout);\n\n      const response = await fetch(GEOCODING_ENDPOINTS.GEOCODE, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ address }),\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n\n        if (response.status === 429) {\n          const retryAfter = parseInt(response.headers.get('Retry-After') || '60');\n          throw new GeocodingError(\n            GeocodingErrorType.RATE_LIMIT_ERROR,\n            'Rate limit exceeded',\n            response.status,\n            retryAfter,\n          );\n        }\n\n        throw new GeocodingError(\n          GeocodingErrorType.API_ERROR,\n          errorData.error || `HTTP ${response.status}`,\n          response.status,\n        );\n      }\n\n      const data = await response.json();\n      return data.result || null;\n\n    } catch (error) {\n      if (error instanceof GeocodingError) {\n        if (error.type === GeocodingErrorType.RATE_LIMIT_ERROR && attempt < retries) {\n          await new Promise(resolve => setTimeout(resolve, (error.retryAfter || 60) * 1000));\n          continue;\n        }\n        throw error;\n      }\n\n      if (error instanceof DOMException && error.name === 'AbortError') {\n        throw new GeocodingError(\n          GeocodingErrorType.NETWORK_ERROR,\n          'Request timeout',\n        );\n      }\n\n      if (attempt < retries) {\n        await new Promise(resolve => setTimeout(resolve, retryDelay * Math.pow(2, attempt)));\n        continue;\n      }\n\n      throw new GeocodingError(\n        GeocodingErrorType.UNKNOWN_ERROR,\n        error instanceof Error ? error.message : 'Unknown error occurred',\n      );\n    }\n  }\n\n  throw new GeocodingError(\n    GeocodingErrorType.UNKNOWN_ERROR,\n    'Max retries exceeded',\n  );\n}\n\n/**\n * Reverse geocode coordinates using the backend service\n */\nexport async function reverseGeocodeCoordinates(\n  lat: number,\n  lng: number,\n  options: GeocodingRequestOptions = {},\n): Promise<ReverseGeocodeResult | null> {\n  const { timeout = 10000, retries = 3, retryDelay = 1000 } = options;\n\n  for (let attempt = 0; attempt <= retries; attempt++) {\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), timeout);\n\n      const response = await fetch(GEOCODING_ENDPOINTS.REVERSE_GEOCODE, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ lat, lng }),\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n\n        if (response.status === 429) {\n          const retryAfter = parseInt(response.headers.get('Retry-After') || '60');\n          throw new GeocodingError(\n            GeocodingErrorType.RATE_LIMIT_ERROR,\n            'Rate limit exceeded',\n            response.status,\n            retryAfter,\n          );\n        }\n\n        throw new GeocodingError(\n          GeocodingErrorType.API_ERROR,\n          errorData.error || `HTTP ${response.status}`,\n          response.status,\n        );\n      }\n\n      const data = await response.json();\n      return data.result || null;\n\n    } catch (error) {\n      if (error instanceof GeocodingError) {\n        if (error.type === GeocodingErrorType.RATE_LIMIT_ERROR && attempt < retries) {\n          await new Promise(resolve => setTimeout(resolve, (error.retryAfter || 60) * 1000));\n          continue;\n        }\n        throw error;\n      }\n\n      if (error instanceof DOMException && error.name === 'AbortError') {\n        throw new GeocodingError(\n          GeocodingErrorType.NETWORK_ERROR,\n          'Request timeout',\n        );\n      }\n\n      if (attempt < retries) {\n        await new Promise(resolve => setTimeout(resolve, retryDelay * Math.pow(2, attempt)));\n        continue;\n      }\n\n      throw new GeocodingError(\n        GeocodingErrorType.UNKNOWN_ERROR,\n        error instanceof Error ? error.message : 'Unknown error occurred',\n      );\n    }\n  }\n\n  throw new GeocodingError(\n    GeocodingErrorType.UNKNOWN_ERROR,\n    'Max retries exceeded',\n  );\n}\n\n/**\n * Validate an address using the backend service\n */\nexport async function validateAddress(\n  address: string,\n  options: GeocodingRequestOptions = {},\n): Promise<AddressValidationResult> {\n  const { timeout = 10000, retries = 3, retryDelay = 1000 } = options;\n\n  for (let attempt = 0; attempt <= retries; attempt++) {\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), timeout);\n\n      const response = await fetch(GEOCODING_ENDPOINTS.VALIDATE, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ address }),\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n\n        if (response.status === 429) {\n          const retryAfter = parseInt(response.headers.get('Retry-After') || '60');\n          throw new GeocodingError(\n            GeocodingErrorType.RATE_LIMIT_ERROR,\n            'Rate limit exceeded',\n            response.status,\n            retryAfter,\n          );\n        }\n\n        throw new GeocodingError(\n          GeocodingErrorType.API_ERROR,\n          errorData.error || `HTTP ${response.status}`,\n          response.status,\n        );\n      }\n\n      const data = await response.json();\n      return data.result;\n\n    } catch (error) {\n      if (error instanceof GeocodingError) {\n        if (error.type === GeocodingErrorType.RATE_LIMIT_ERROR && attempt < retries) {\n          await new Promise(resolve => setTimeout(resolve, (error.retryAfter || 60) * 1000));\n          continue;\n        }\n        throw error;\n      }\n\n      if (error instanceof DOMException && error.name === 'AbortError') {\n        throw new GeocodingError(\n          GeocodingErrorType.NETWORK_ERROR,\n          'Request timeout',\n        );\n      }\n\n      if (attempt < retries) {\n        await new Promise(resolve => setTimeout(resolve, retryDelay * Math.pow(2, attempt)));\n        continue;\n      }\n\n      throw new GeocodingError(\n        GeocodingErrorType.UNKNOWN_ERROR,\n        error instanceof Error ? error.message : 'Unknown error occurred',\n      );\n    }\n  }\n\n  throw new GeocodingError(\n    GeocodingErrorType.UNKNOWN_ERROR,\n    'Max retries exceeded',\n  );\n}\n\n/**\n * Get geocoding service health status\n */\nexport async function getGeocodingHealth(): Promise<any> {\n  try {\n    const response = await fetch(GEOCODING_ENDPOINTS.HEALTH);\n\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    throw new GeocodingError(\n      GeocodingErrorType.API_ERROR,\n      error instanceof Error ? error.message : 'Failed to get health status',\n    );\n  }\n}\n\n/**\n * Get geocoding service statistics\n */\nexport async function getGeocodingStats(): Promise<any> {\n  try {\n    const response = await fetch(GEOCODING_ENDPOINTS.STATS);\n\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    throw new GeocodingError(\n      GeocodingErrorType.API_ERROR,\n      error instanceof Error ? error.message : 'Failed to get statistics',\n    );\n  }\n}\n\n/**\n * Clear geocoding cache\n */\nexport async function clearGeocodingCache(): Promise<void> {\n  try {\n    const response = await fetch(GEOCODING_ENDPOINTS.CLEAR_CACHE, {\n      method: 'POST',\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}`);\n    }\n  } catch (error) {\n    throw new GeocodingError(\n      GeocodingErrorType.API_ERROR,\n      error instanceof Error ? error.message : 'Failed to clear cache',\n    );\n  }\n}\n\n/**\n * Format geocoding result for display\n */\nexport function formatGeocodeResult(result: GeocodeResult): string {\n  return result.formatted_address;\n}\n\n/**\n * Extract address components from geocoding result\n */\nexport function extractAddressComponents(result: GeocodeResult) {\n  const components: Record<string, string> = {};\n\n  result.address_components.forEach(component => {\n    component.types.forEach(type => {\n      components[type] = component.long_name;\n    });\n  });\n\n  return {\n    streetNumber: components.street_number || '',\n    route: components.route || '',\n    locality: components.locality || '',\n    administrativeAreaLevel1: components.administrative_area_level_1 || '',\n    administrativeAreaLevel2: components.administrative_area_level_2 || '',\n    country: components.country || '',\n    postalCode: components.postal_code || '',\n    formattedAddress: result.formatted_address,\n  };\n}\n\n/**\n * Check if coordinates are valid\n */\nexport function isValidCoordinates(lat: number, lng: number): boolean {\n  return (\n    typeof lat === 'number' &&\n    typeof lng === 'number' &&\n    lat >= -90 &&\n    lat <= 90 &&\n    lng >= -180 &&\n    lng <= 180 &&\n    !isNaN(lat) &&\n    !isNaN(lng)\n  );\n}\n\n/**\n * Calculate distance between two coordinates (in kilometers)\n */\nexport function calculateDistance(\n  lat1: number,\n  lng1: number,\n  lat2: number,\n  lng2: number,\n): number {\n  const R = 6371; // Earth's radius in kilometers\n  const dLat = toRadians(lat2 - lat1);\n  const dLng = toRadians(lng2 - lng1);\n\n  const a =\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(toRadians(lat1)) *\n    Math.cos(toRadians(lat2)) *\n    Math.sin(dLng / 2) *\n    Math.sin(dLng / 2);\n\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n}\n\nfunction toRadians(degrees: number): number {\n  return degrees * (Math.PI / 180);\n}\n\n/**\n * Debounce function for address input\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number,\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout;\n\n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func(...args), wait);\n  };\n}\n\n/**\n * Throttle function for geocoding requests\n */\nexport function throttle<T extends (...args: any[]) => any>(\n  func: T,\n  limit: number,\n): (...args: Parameters<T>) => void {\n  let inThrottle: boolean;\n\n  return (...args: Parameters<T>) => {\n    if (!inThrottle) {\n      func(...args);\n      inThrottle = true;\n      setTimeout(() => (inThrottle = false), limit);\n    }\n  };\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/utils/logger.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[287,290],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[287,290],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[335,338],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[335,338],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":1,"message":"Unexpected empty constructor.","line":28,"column":25,"nodeType":"FunctionExpression","messageId":"unexpected","endLine":28,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":37,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[791,794],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[791,794],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":37,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[797,800],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[797,800],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1116,1119],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1116,1119],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1122,1125],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1122,1125],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1353,1356],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1353,1356],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":155,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":155,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3947,3950],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3947,3950],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\n// import { firestore } from \"../firebaseAdmin\";\n\ninterface LogEntry {\n  timestamp: Date;\n  method: string;\n  path: string;\n  query?: Record<string, string>;\n  userId?: string;\n  ip?: string;\n  userAgent?: string;\n  requestBody?: any;\n  responseStatus: number;\n  responseBody?: any;\n  duration: number;\n  error?: {\n    message: string;\n    code?: string;\n    stack?: string;\n  };\n}\n\nclass Logger {\n  private static instance: Logger;\n  private readonly collection = 'api_logs';\n  private readonly maxBodySize = 10000; // characters\n\n  private constructor() {}\n\n  public static getInstance(): Logger {\n    if (!Logger.instance) {\n      Logger.instance = new Logger();\n    }\n    return Logger.instance;\n  }\n\n  private truncateBody(body: any): any {\n    const stringified = JSON.stringify(body);\n    if (stringified.length > this.maxBodySize) {\n      return {\n        _truncated: true,\n        preview: stringified.substring(0, this.maxBodySize) + '...',\n        originalSize: stringified.length,\n      };\n    }\n    return body;\n  }\n\n  private sanitizeBody(body: any): any {\n    if (!body) {return body;}\n\n    const sensitiveFields = [\n      'password',\n      'token',\n      'secret',\n      'authorization',\n      'apiKey',\n    ];\n    const sanitized = { ...body };\n\n    const sanitizeObject = (obj: any) => {\n      for (const key in obj) {\n        if (\n          sensitiveFields.some((field) =>\n            key.toLowerCase().includes(field.toLowerCase()),\n          )\n        ) {\n          obj[key] = '[REDACTED]';\n        } else if (typeof obj[key] === 'object' && obj[key] !== null) {\n          sanitizeObject(obj[key]);\n        }\n      }\n    };\n\n    sanitizeObject(sanitized);\n    return sanitized;\n  }\n\n  private async saveLog(entry: LogEntry): Promise<void> {\n    try {\n      // Store only the last 30 days of logs\n      const thirtyDaysAgo = new Date();\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n      // Temporarily disabled during Firebase setup\n      // Delete old logs periodically (1% chance per request)\n      // if (Math.random() < 0.01) {\n      //   const oldLogs = await firestore\n      //     .collection(this.collection)\n      //     .where(\"timestamp\", \"<\", thirtyDaysAgo)\n      //     .limit(100)\n      //     .get();\n\n      //   const batch = firestore.batch();\n      //   oldLogs.docs.forEach((doc) => batch.delete(doc.ref));\n      //   await batch.commit();\n      // }\n\n      // Save new log\n      // await firestore.collection(this.collection).add({\n      //   ...entry,\n      //   _ttl: thirtyDaysAgo, // For Firestore TTL if enabled\n      // });\n\n      // Console log for now\n      console.log('Log entry:', entry);\n    } catch (error) {\n      console.error('Failed to save log entry:', error);\n    }\n  }\n\n  public async logRequest(\n    req: NextRequest,\n    res: NextResponse,\n    userId: string | undefined,\n    startTime: number,\n    error?: Error,\n  ): Promise<void> {\n    const endTime = Date.now();\n    const duration = endTime - startTime;\n\n    let requestBody;\n    if (req.body) {\n      try {\n        const clone = req.clone();\n        requestBody = await clone.json();\n      } catch {\n        requestBody = undefined;\n      }\n    }\n\n    let responseBody;\n    try {\n      responseBody = await res.clone().json();\n    } catch {\n      responseBody = undefined;\n    }\n\n    const url = new URL(req.url);\n    const entry: LogEntry = {\n      timestamp: new Date(),\n      method: req.method,\n      path: url.pathname,\n      query: Object.fromEntries(url.searchParams),\n      userId,\n      ip: req.ip,\n      userAgent: req.headers.get('user-agent') || undefined,\n      requestBody: this.truncateBody(this.sanitizeBody(requestBody)),\n      responseStatus: res.status,\n      responseBody: this.truncateBody(this.sanitizeBody(responseBody)),\n      duration,\n      error: error\n        ? {\n            message: error.message,\n            code: (error as any).code,\n            stack:\n              process.env.NODE_ENV === 'development' ? error.stack : undefined,\n          }\n        : undefined,\n    };\n\n    await this.saveLog(entry);\n  }\n\n  public async getRecentLogs(\n    userId?: string,\n    path?: string,\n    limit = 100,\n  ): Promise<LogEntry[]> {\n    // Temporarily disabled during Firebase setup\n    // let query = firestore\n    //   .collection(this.collection)\n    //   .orderBy(\"timestamp\", \"desc\")\n    //   .limit(limit);\n\n    // if (userId) {\n    //   query = query.where(\"userId\", \"==\", userId);\n    // }\n    // if (path) {\n    //   query = query.where(\"path\", \"==\", path);\n    // }\n\n    // const snapshot = await query.get();\n    // return snapshot.docs.map((doc) => doc.data() as LogEntry);\n\n    console.log('getRecentLogs called with:', { userId, path, limit });\n    return [];\n  }\n\n  public async getErrorLogs(hours = 24, limit = 100): Promise<LogEntry[]> {\n    // Temporarily disabled during Firebase setup\n    // const since = new Date();\n    // since.setHours(since.getHours() - hours);\n\n    // const snapshot = await firestore\n    //   .collection(this.collection)\n    //   .where(\"timestamp\", \">\", since)\n    //   .where(\"error\", \"!=\", null)\n    //   .orderBy(\"timestamp\", \"desc\")\n    //   .limit(limit)\n    //   .get();\n\n    // return snapshot.docs.map((doc) => doc.data() as LogEntry);\n\n    console.log('getErrorLogs called with:', { hours, limit });\n    return [];\n  }\n\n  public async getEndpointMetrics(\n    path: string,\n    hours = 24,\n  ): Promise<{\n    totalRequests: number;\n    averageDuration: number;\n    errorRate: number;\n    statusCodes: Record<number, number>;\n  }> {\n    const since = new Date();\n    since.setHours(since.getHours() - hours);\n\n    // Temporarily disabled during Firebase setup\n    // const snapshot = await firestore\n    //   .collection(this.collection)\n    //   .where(\"path\", \"==\", path)\n    //   .where(\"timestamp\", \">\", since)\n    //   .get();\n\n    // const logs = snapshot.docs.map((doc) => doc.data() as LogEntry);\n    const logs: LogEntry[] = [];\n    const totalRequests = logs.length;\n    const totalDuration = logs.reduce((sum, log) => sum + log.duration, 0);\n    const errorCount = logs.filter((log) => log.error).length;\n\n    const statusCodes = logs.reduce(\n      (acc, log) => {\n        acc[log.responseStatus] = (acc[log.responseStatus] || 0) + 1;\n        return acc;\n      },\n      {} as Record<number, number>,\n    );\n\n    return {\n      totalRequests,\n      averageDuration: totalRequests ? totalDuration / totalRequests : 0,\n      errorRate: totalRequests ? errorCount / totalRequests : 0,\n      statusCodes,\n    };\n  }\n}\n\nexport const logger = Logger.getInstance();\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/utils/rateLimit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/utils/validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/utils/vectorStore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/utils/withLogging.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[190,193],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[190,193],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[349,352],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[349,352],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { logger } from './logger';\n// import { auth } from \"../firebaseAdmin\";\n\ntype RouteHandler = (\n  req: NextRequest,\n  context: any,\n) => Promise<NextResponse> | NextResponse;\n\nexport function withLogging(handler: RouteHandler): RouteHandler {\n  return async (req: NextRequest, context: any) => {\n    const start = Date.now();\n    let userId: string | undefined;\n    let response: NextResponse | undefined;\n    let error: Error | undefined;\n\n    try {\n      // Extract user ID from auth token if present\n      // Temporarily disabled during Firebase setup\n      // const authHeader = req.headers.get(\"authorization\");\n      // if (authHeader?.startsWith(\"Bearer \")) {\n      //   const tokenParts = authHeader.split(\" \");\n      //   const idToken = tokenParts[1];\n      //   if (idToken) {\n      //     try {\n      //       const decoded = await auth.verifyIdToken(idToken);\n      //       userId = decoded.uid;\n      //     } catch {\n      //       // Ignore token verification errors here as they'll be handled by the route\n      //     }\n      //   }\n      // }\n\n      // Execute the route handler\n      response = await handler(req, context);\n      const duration = Date.now() - start;\n      console.log(\n        `${req.method} ${req.url} - ${response.status} (${duration}ms)`,\n      );\n    } catch (e) {\n      error = e as Error;\n      const duration = Date.now() - start;\n      console.error(`${req.method} ${req.url} - Error (${duration}ms):`, error);\n      // Re-throw the error to be handled by the global error handler\n      throw e;\n    } finally {\n      // Always log the request, even if it errors\n      const res = response || new NextResponse(null, { status: 500 });\n      await logger.logRequest(req, res, userId, start, error);\n    }\n\n    return response;\n  };\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/lib/utils/withMiddleware.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[252,255],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[252,255],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { rateLimit, rateLimits } from './rateLimit';\nimport { withLogging } from './withLogging';\nimport { handleError } from './apiErrors';\n\ntype RouteHandler = (\n  req: NextRequest,\n  context: any,\n) => Promise<NextResponse> | NextResponse;\n\ntype Middleware = (handler: RouteHandler) => RouteHandler;\n\nexport const withMiddleware = (\n  handler: RouteHandler,\n  options: {\n    rateLimit?: 'default' | 'admin' | false;\n    logging?: boolean;\n  } = {},\n): RouteHandler => {\n  let enhancedHandler = handler;\n\n  // Apply rate limiting if enabled\n  if (options.rateLimit !== false) {\n    const config =\n      options.rateLimit === 'admin' ? rateLimits.admin : rateLimits.default;\n\n    const rateLimitMiddleware: Middleware = (handler) => {\n      return async (req, context) => {\n        const rateLimitResponse = await rateLimit(config)(req);\n        if (rateLimitResponse) {return rateLimitResponse;}\n        return handler(req, context);\n      };\n    };\n\n    enhancedHandler = rateLimitMiddleware(enhancedHandler);\n  }\n\n  // Apply logging if enabled (default: true)\n  if (options.logging !== false) {\n    enhancedHandler = withLogging(enhancedHandler);\n  }\n\n  // Always apply error handling\n  const withErrorHandling: Middleware = (handler) => {\n    return async (req, context) => {\n      try {\n        return await handler(req, context);\n      } catch (error) {\n        return handleError(error);\n      }\n    };\n  };\n\n  enhancedHandler = withErrorHandling(enhancedHandler);\n\n  return enhancedHandler;\n};\n\n// Helper to create route handlers with default middleware\nexport const createHandler = (\n  handler: RouteHandler,\n  options?: Parameters<typeof withMiddleware>[1],\n) => {\n  return withMiddleware(handler, options);\n};\n\n// Helper to create admin route handlers\nexport const createAdminHandler = (\n  handler: RouteHandler,\n  options?: Omit<Parameters<typeof withMiddleware>[1], 'rateLimit'>,\n) => {\n  return withMiddleware(handler, { ...options, rateLimit: 'admin' });\n};\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/middleware/geocoding.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":135,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3620,3623],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3620,3623],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":135,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3636,3639],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3636,3639],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":136,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3661,3664],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3661,3664],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":149,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":149,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3885,3888],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3885,3888],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":162,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":162,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4137,4140],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4137,4140],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":163,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":163,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4152,4155],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4152,4155],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { geocodingService } from '@/lib/services/geocoding-service';\n\n// Geocoding middleware for request preprocessing and validation\nexport async function geocodingMiddleware(request: NextRequest) {\n  // Skip middleware for non-geocoding requests\n  if (!request.nextUrl.pathname.startsWith('/api/maps')) {\n    return NextResponse.next();\n  }\n\n  // Add CORS headers for geocoding API\n  const response = NextResponse.next();\n\n  // Allow requests from your domain in production\n  const allowedOrigins = [\n    'http://localhost:3000',\n    'http://localhost:3001',\n    'https://your-domain.com', // Replace with your actual domain\n  ];\n\n  const origin = request.headers.get('origin');\n  if (origin && allowedOrigins.includes(origin)) {\n    response.headers.set('Access-Control-Allow-Origin', origin);\n  }\n\n  response.headers.set('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');\n  response.headers.set('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n  response.headers.set('Access-Control-Max-Age', '86400');\n\n  // Handle preflight requests\n  if (request.method === 'OPTIONS') {\n    return new Response(null, { status: 200, headers: response.headers });\n  }\n\n  // Add rate limiting headers\n  try {\n    const stats = geocodingService.getStats();\n    response.headers.set('X-RateLimit-Limit', stats.rateLimitPerMinute.toString());\n    response.headers.set('X-RateLimit-Remaining', stats.remainingRequests.toString());\n    response.headers.set('X-Cache-Size', stats.cacheSize.toString());\n  } catch (error) {\n    // Silently fail if service is not available\n    console.warn('Failed to get geocoding service stats:', error);\n  }\n\n  return response;\n}\n\n// Request validation utilities\nexport function validateGeocodingRequest(searchParams: URLSearchParams, requiredParams: string[]) {\n  const missing = requiredParams.filter(param => !searchParams.get(param));\n\n  if (missing.length > 0) {\n    return {\n      isValid: false,\n      error: `Missing required parameters: ${missing.join(', ')}`,\n      status: 400,\n    };\n  }\n\n  return { isValid: true };\n}\n\nexport function validateCoordinates(lat: string | null, lng: string | null) {\n  if (!lat || !lng) {\n    return {\n      isValid: false,\n      error: 'Latitude and longitude are required',\n      status: 400,\n    };\n  }\n\n  const latitude = parseFloat(lat);\n  const longitude = parseFloat(lng);\n\n  if (isNaN(latitude) || isNaN(longitude)) {\n    return {\n      isValid: false,\n      error: 'Invalid latitude or longitude format',\n      status: 400,\n    };\n  }\n\n  if (latitude < -90 || latitude > 90) {\n    return {\n      isValid: false,\n      error: 'Latitude must be between -90 and 90',\n      status: 400,\n    };\n  }\n\n  if (longitude < -180 || longitude > 180) {\n    return {\n      isValid: false,\n      error: 'Longitude must be between -180 and 180',\n      status: 400,\n    };\n  }\n\n  return {\n    isValid: true,\n    coordinates: { lat: latitude, lng: longitude },\n  };\n}\n\nexport function validateAddress(address: string | null) {\n  if (!address) {\n    return {\n      isValid: false,\n      error: 'Address is required',\n      status: 400,\n    };\n  }\n\n  if (address.trim().length < 3) {\n    return {\n      isValid: false,\n      error: 'Address must be at least 3 characters long',\n      status: 400,\n    };\n  }\n\n  if (address.length > 500) {\n    return {\n      isValid: false,\n      error: 'Address must be less than 500 characters',\n      status: 400,\n    };\n  }\n\n  return { isValid: true, address: address.trim() };\n}\n\n// Response formatting utilities\nexport function formatSuccessResponse(data: any, metadata?: any) {\n  const response: any = {\n    success: true,\n    data,\n    timestamp: new Date().toISOString(),\n  };\n\n  if (metadata) {\n    response.metadata = metadata;\n  }\n\n  return response;\n}\n\nexport function formatErrorResponse(error: string, details?: any, status = 500) {\n  return {\n    success: false,\n    error,\n    details,\n    timestamp: new Date().toISOString(),\n    status,\n  };\n}\n\n// Logging utilities for geocoding operations\nexport function logGeocodingOperation(\n  operation: string,\n  input: any,\n  result: any,\n  duration: number,\n  success: boolean,\n) {\n  const logData = {\n    operation,\n    input: typeof input === 'string' ? input : JSON.stringify(input),\n    success,\n    duration,\n    timestamp: new Date().toISOString(),\n    resultType: success ? typeof result : 'error',\n  };\n\n  if (process.env.NODE_ENV === 'development') {\n    console.log('Geocoding Operation:', logData);\n  }\n\n  // In production, you might want to send this to a logging service\n  // like DataDog, LogRocket, or your own analytics endpoint\n}\n\n// Health check utilities\nexport async function performHealthCheck() {\n  try {\n    const health = await geocodingService.healthCheck();\n    const stats = geocodingService.getStats();\n\n    return {\n      status: health.status,\n      timestamp: new Date().toISOString(),\n      service: {\n        apiKeyConfigured: health.apiKeyConfigured,\n        cacheEnabled: health.cacheEnabled,\n        rateLimitRemaining: health.rateLimitRemaining,\n        cacheSize: stats.cacheSize,\n      },\n      environment: {\n        nodeEnv: process.env.NODE_ENV,\n        hasApiKey: !!process.env.GOOGLE_MAPS_API_KEY,\n      },\n    };\n  } catch (error) {\n    return {\n      status: 'unhealthy',\n      timestamp: new Date().toISOString(),\n      error: error instanceof Error ? error.message : 'Unknown error',\n      environment: {\n        nodeEnv: process.env.NODE_ENV,\n        hasApiKey: !!process.env.GOOGLE_MAPS_API_KEY,\n      },\n    };\n  }\n}\n\n// Configuration validation\nexport function validateGeocodingConfig() {\n  const issues: string[] = [];\n\n  if (!process.env.GOOGLE_MAPS_API_KEY) {\n    issues.push('GOOGLE_MAPS_API_KEY environment variable is not set');\n  }\n\n  if (process.env.GOOGLE_MAPS_API_KEY && process.env.GOOGLE_MAPS_API_KEY.length < 30) {\n    issues.push('GOOGLE_MAPS_API_KEY appears to be invalid (too short)');\n  }\n\n  return {\n    isValid: issues.length === 0,\n    issues,\n  };\n}\n\n// Export middleware configuration\nexport const config = {\n  matcher: '/api/maps/:path*',\n};","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/pages/api/events/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/pages/api/groceries/[store].ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/pages/api/locations/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[326,329],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[326,329],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextApiRequest, NextApiResponse } from 'next';\nimport { databaseService } from '@/lib/services/database';\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse,\n) {\n  if (req.method === 'GET') {\n    try {\n      const { city, state, featured, limit } = req.query;\n\n      const filters: any = {};\n      if (city) {filters.city = city as string;}\n      if (state) {filters.state = state as string;}\n      if (featured !== undefined) {filters.featured = featured === 'true';}\n      if (limit) {filters.limit = parseInt(limit as string);}\n\n      const locations = await databaseService.getLocations(filters);\n      res.status(200).json(locations);\n    } catch (error) {\n      console.error('Error fetching locations:', error);\n      res.status(500).json({ error: 'Failed to fetch locations' });\n    }\n  } else if (req.method === 'POST') {\n    try {\n      const locationId = await databaseService.createLocation(req.body);\n      if (locationId) {\n        const location = await databaseService.getLocation(locationId);\n        res.status(201).json(location);\n      } else {\n        res.status(500).json({ error: 'Failed to create location' });\n      }\n    } catch (error) {\n      console.error('Error creating location:', error);\n      res.status(500).json({ error: 'Failed to create location' });\n    }\n  } else {\n    res.setHeader('Allow', ['GET', 'POST']);\n    res.status(405).end(`Method ${req.method} Not Allowed`);\n  }\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/pages/api/menu/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/pages/api/restaurants/[id]/menu.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/pages/api/restaurants/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/pages/api/rewards/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]},{"filePath":"/Users/carltonmayne/Downloads/ezy-zip/src/pages/api/volunteers/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]}]}]