name: Firebase Deploy

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean
      deploy_functions_only:
        description: 'Deploy only Cloud Functions'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '22'
  FIREBASE_CLI_VERSION: 'latest'

jobs:
  # =============================================================================
  # SETUP AND VALIDATION
  # =============================================================================
  setup:
    name: Setup and Validate
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      project-id: ${{ steps.set-env.outputs.project-id }}
      should-deploy: ${{ steps.set-env.outputs.should-deploy }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Set environment variables
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            ENVIRONMENT="production"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            ENVIRONMENT="staging"
          else
            ENVIRONMENT="staging"
          fi
          
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          
          if [[ "$ENVIRONMENT" == "production" ]]; then
            echo "project-id=${{ secrets.FIREBASE_PROJECT_ID_PROD }}" >> $GITHUB_OUTPUT
          else
            echo "project-id=${{ secrets.FIREBASE_PROJECT_ID_STAGING }}" >> $GITHUB_OUTPUT
          fi
          
          # Determine if we should deploy
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          fi

      - name: Validate Firebase configuration
        run: |
          if [[ ! -f "firebase.json" ]]; then
            echo "❌ firebase.json not found"
            exit 1
          fi
          
          if [[ ! -f "firestore.rules" ]]; then
            echo "❌ firestore.rules not found"
            exit 1
          fi
          
          if [[ ! -f "storage.rules" ]]; then
            echo "❌ storage.rules not found"
            exit 1
          fi
          
          if [[ ! -f "firestore.indexes.json" ]]; then
            echo "❌ firestore.indexes.json not found"
            exit 1
          fi
          
          echo "✅ Firebase configuration files validated"

  # =============================================================================
  # INSTALL DEPENDENCIES
  # =============================================================================
  install:
    name: Install Dependencies
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install root dependencies
        run: |
          npm ci
          echo "✅ Root dependencies installed"

      - name: Install functions dependencies
        run: |
          cd functions
          npm ci
          echo "✅ Functions dependencies installed"

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            functions/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

  # =============================================================================
  # LINTING AND CODE QUALITY
  # =============================================================================
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    needs: [setup, install]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            functions/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Run ESLint
        run: |
          npm run lint
          echo "✅ ESLint passed"

      - name: Check code formatting
        run: |
          npm run format:check
          echo "✅ Code formatting check passed"

      - name: Run functions linting
        run: |
          cd functions
          npm run lint
          echo "✅ Functions ESLint passed"

  # =============================================================================
  # TESTING
  # =============================================================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [setup, install]
    if: github.event.inputs.skip_tests != 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            functions/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install Firebase CLI
        run: |
          npm install -g firebase-tools@${{ env.FIREBASE_CLI_VERSION }}
          echo "✅ Firebase CLI installed"

      - name: Start Firebase Emulators
        run: |
          firebase emulators:start --only firestore,auth,functions,storage --project demo-project &
          sleep 30
          echo "✅ Firebase Emulators started"

      - name: Run unit tests
        run: |
          npm test
          echo "✅ Unit tests passed"
        env:
          FIRESTORE_EMULATOR_HOST: localhost:8080
          FIREBASE_AUTH_EMULATOR_HOST: localhost:9099
          FIREBASE_STORAGE_EMULATOR_HOST: localhost:9199

      - name: Run functions tests
        run: |
          cd functions
          npm test
          echo "✅ Functions tests passed"
        env:
          FIRESTORE_EMULATOR_HOST: localhost:8080
          FIREBASE_AUTH_EMULATOR_HOST: localhost:9099
          FIREBASE_STORAGE_EMULATOR_HOST: localhost:9199

      - name: Run integration tests
        run: |
          npm run test:integration
          echo "✅ Integration tests passed"
        env:
          FIRESTORE_EMULATOR_HOST: localhost:8080
          FIREBASE_AUTH_EMULATOR_HOST: localhost:9099
          FIREBASE_STORAGE_EMULATOR_HOST: localhost:9199

      - name: Stop Firebase Emulators
        run: |
          pkill -f firebase || true
          echo "✅ Firebase Emulators stopped"

  # =============================================================================
  # BUILD
  # =============================================================================
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [setup, install, lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            functions/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Set environment variables
        run: |
          if [[ "${{ needs.setup.outputs.environment }}" == "production" ]]; then
            echo "REACT_APP_FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY_PROD }}" >> $GITHUB_ENV
            echo "REACT_APP_FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN_PROD }}" >> $GITHUB_ENV
            echo "REACT_APP_FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID_PROD }}" >> $GITHUB_ENV
            echo "REACT_APP_FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET_PROD }}" >> $GITHUB_ENV
            echo "REACT_APP_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID_PROD }}" >> $GITHUB_ENV
            echo "REACT_APP_FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID_PROD }}" >> $GITHUB_ENV
          else
            echo "REACT_APP_FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY_STAGING }}" >> $GITHUB_ENV
            echo "REACT_APP_FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN_STAGING }}" >> $GITHUB_ENV
            echo "REACT_APP_FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID_STAGING }}" >> $GITHUB_ENV
            echo "REACT_APP_FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET_STAGING }}" >> $GITHUB_ENV
            echo "REACT_APP_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID_STAGING }}" >> $GITHUB_ENV
            echo "REACT_APP_FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID_STAGING }}" >> $GITHUB_ENV
          fi

      - name: Build application
        run: |
          npm run build
          echo "✅ Application built successfully"

      - name: Build functions
        run: |
          cd functions
          npm run build
          echo "✅ Functions built successfully"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ needs.setup.outputs.environment }}
          path: |
            build/
            functions/lib/
          retention-days: 7

  # =============================================================================
  # SECURITY SCAN
  # =============================================================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [setup, install]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Run npm audit
        run: |
          npm audit --audit-level=high
          echo "✅ npm audit passed"

      - name: Run functions npm audit
        run: |
          cd functions
          npm audit --audit-level=high
          echo "✅ Functions npm audit passed"

      - name: Check for secrets in code
        run: |
          if grep -r "sk_live_" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "❌ Live Stripe keys found in code!"
            exit 1
          fi
          
          if grep -r "AIza" . --exclude-dir=node_modules --exclude-dir=.git --exclude="*.md"; then
            echo "⚠️ Potential API keys found in code. Please verify they are not sensitive."
          fi
          
          echo "✅ Security scan completed"

  # =============================================================================
  # DEPLOY TO FIREBASE
  # =============================================================================
  deploy:
    name: Deploy to Firebase
    runs-on: ubuntu-latest
    needs: [setup, install, lint, build, security]
    if: needs.setup.outputs.should-deploy == 'true' && (needs.test.result == 'success' || needs.test.result == 'skipped')
    environment:
      name: ${{ needs.setup.outputs.environment }}
      url: ${{ steps.deploy.outputs.hosting-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-${{ needs.setup.outputs.environment }}

      - name: Install Firebase CLI
        run: |
          npm install -g firebase-tools@${{ env.FIREBASE_CLI_VERSION }}
          echo "✅ Firebase CLI installed"

      - name: Authenticate with Firebase
        run: |
          if [[ "${{ needs.setup.outputs.environment }}" == "production" ]]; then
            echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_PROD }}" | base64 -d > service-account.json
          else
            echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_STAGING }}" | base64 -d > service-account.json
          fi
          
          export GOOGLE_APPLICATION_CREDENTIALS="service-account.json"
          firebase use ${{ needs.setup.outputs.project-id }}
          echo "✅ Firebase authentication completed"

      - name: Set functions environment variables
        run: |
          if [[ "${{ needs.setup.outputs.environment }}" == "production" ]]; then
            firebase functions:config:set \
              stripe.secret_key="${{ secrets.STRIPE_SECRET_KEY_PROD }}" \
              stripe.webhook_secret="${{ secrets.STRIPE_WEBHOOK_SECRET_PROD }}" \
              email.smtp_host="${{ secrets.SMTP_HOST }}" \
              email.smtp_user="${{ secrets.SMTP_USER }}" \
              email.smtp_pass="${{ secrets.SMTP_PASS }}" \
              --project ${{ needs.setup.outputs.project-id }}
          else
            firebase functions:config:set \
              stripe.secret_key="${{ secrets.STRIPE_SECRET_KEY_STAGING }}" \
              stripe.webhook_secret="${{ secrets.STRIPE_WEBHOOK_SECRET_STAGING }}" \
              email.smtp_host="${{ secrets.SMTP_HOST }}" \
              email.smtp_user="${{ secrets.SMTP_USER }}" \
              email.smtp_pass="${{ secrets.SMTP_PASS }}" \
              --project ${{ needs.setup.outputs.project-id }}
          fi
          echo "✅ Functions environment variables set"

      - name: Deploy Firestore rules and indexes
        if: github.event.inputs.deploy_functions_only != 'true'
        run: |
          firebase deploy --only firestore:rules,firestore:indexes --project ${{ needs.setup.outputs.project-id }}
          echo "✅ Firestore rules and indexes deployed"

      - name: Deploy Storage rules
        if: github.event.inputs.deploy_functions_only != 'true'
        run: |
          firebase deploy --only storage:rules --project ${{ needs.setup.outputs.project-id }}
          echo "✅ Storage rules deployed"

      - name: Deploy Cloud Functions
        run: |
          firebase deploy --only functions --project ${{ needs.setup.outputs.project-id }}
          echo "✅ Cloud Functions deployed"

      - name: Deploy Hosting
        id: deploy
        if: github.event.inputs.deploy_functions_only != 'true'
        run: |
          HOSTING_URL=$(firebase deploy --only hosting --project ${{ needs.setup.outputs.project-id }} --json | jq -r '.result.hosting."${{ needs.setup.outputs.project-id }}".url')
          echo "hosting-url=$HOSTING_URL" >> $GITHUB_OUTPUT
          echo "✅ Hosting deployed to: $HOSTING_URL"

      - name: Cleanup
        if: always()
        run: |
          rm -f service-account.json
          echo "✅ Cleanup completed"

  # =============================================================================
  # POST-DEPLOYMENT VERIFICATION
  # =============================================================================
  verify:
    name: Post-Deployment Verification
    runs-on: ubuntu-latest
    needs: [setup, deploy]
    if: needs.deploy.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm install axios

      - name: Verify deployment
        run: |
          # Wait for deployment to propagate
          sleep 60
          
          # Check if hosting is accessible
          if [[ "${{ needs.deploy.outputs.hosting-url }}" != "" ]]; then
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" ${{ needs.deploy.outputs.hosting-url }})
            if [[ $HTTP_STATUS -eq 200 ]]; then
              echo "✅ Hosting is accessible"
            else
              echo "❌ Hosting returned status: $HTTP_STATUS"
              exit 1
            fi
          fi
          
          # Verify functions are deployed (basic health check)
          # This would need to be customized based on your functions
          echo "✅ Deployment verification completed"

  # =============================================================================
  # NOTIFICATION
  # =============================================================================
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [setup, deploy, verify]
    if: always() && needs.setup.outputs.should-deploy == 'true'
    steps:
      - name: Determine deployment status
        id: status
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" && "${{ needs.verify.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ Deployment to ${{ needs.setup.outputs.environment }} completed successfully" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ Deployment to ${{ needs.setup.outputs.environment }} failed" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack notification
        if: env.SLACK_WEBHOOK_URL != ''
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "text": "${{ steps.status.outputs.message }}",
              "attachments": [{
                "color": "${{ steps.status.outputs.status == 'success' && 'good' || 'danger' }}",
                "fields": [
                  {
                    "title": "Environment",
                    "value": "${{ needs.setup.outputs.environment }}",
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  },
                  {
                    "title": "Commit",
                    "value": "${{ github.sha }}",
                    "short": true
                  },
                  {
                    "title": "Actor",
                    "value": "${{ github.actor }}",
                    "short": true
                  }
                ]
              }]
            }' \
            ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create GitHub deployment status
        uses: actions/github-script@v6
        with:
          script: |
            const { data: deployment } = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: '${{ needs.setup.outputs.environment }}',
              description: 'Firebase deployment',
              auto_merge: false,
              required_contexts: []
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.id,
              state: '${{ steps.status.outputs.status }}',
              description: '${{ steps.status.outputs.message }}',
              environment_url: '${{ needs.deploy.outputs.hosting-url }}'
            });