rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidImageFile() {
      return request.resource.contentType.matches('image/.*');
    }
    
    function isValidFileSize() {
      return request.resource.size < 10 * 1024 * 1024; // 10MB limit
    }
    
    // Screenshots - authenticated users can upload and read their own screenshots
    match /screenshots/{userId}/{allPaths=**} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) && isValidImageFile() && isValidFileSize();
    }
    
    // Profile images - authenticated users can upload and read their own profile images
    match /profile-images/{userId}/{allPaths=**} {
      allow read: if true; // Public read for profile images
      allow write: if isOwner(userId) && isValidImageFile() && isValidFileSize();
    }
    
    // Restaurant images - public read, authenticated write
    match /restaurant-images/{allPaths=**} {
      allow read: if true;
      allow write: if isAuthenticated() && isValidImageFile() && isValidFileSize();
    }
    
    // Menu images - public read, authenticated write
    match /menu-images/{allPaths=**} {
      allow read: if true;
      allow write: if isAuthenticated() && isValidImageFile() && isValidFileSize();
    }
    
    // Event images - public read, authenticated write
    match /event-images/{allPaths=**} {
      allow read: if true;
      allow write: if isAuthenticated() && isValidImageFile() && isValidFileSize();
    }
    
    // Documents and receipts - users can only access their own
    match /documents/{userId}/{allPaths=**} {
      allow read, write: if isOwner(userId) && isValidFileSize();
    }
    
    // Public assets - read only for everyone
    match /public/{allPaths=**} {
      allow read: if true;
      allow write: if false; // Only allow through admin SDK
    }
  }
}


