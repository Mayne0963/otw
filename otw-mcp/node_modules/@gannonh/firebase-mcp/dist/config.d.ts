/**
 * Configuration Module
 *
 * This module centralizes configuration settings for the Firebase MCP server.
 * It handles environment variable parsing and provides default values for various settings.
 *
 * Environment variables:
 * - SERVICE_ACCOUNT_KEY_PATH: Path to Firebase service account key (required)
 * - FIREBASE_STORAGE_BUCKET: Firebase Storage bucket name (optional)
 * - MCP_TRANSPORT: Transport type to use (stdio, http) (default: stdio)
 * - MCP_HTTP_PORT: Port for HTTP transport (default: 3000)
 * - MCP_HTTP_HOST: Host for HTTP transport (default: localhost)
 * - MCP_HTTP_PATH: Path for HTTP transport (default: /mcp)
 *
 * @module firebase-mcp/config
 */
/**
 * Transport types supported by the server
 */
export declare enum TransportType {
    STDIO = "stdio",
    HTTP = "http"
}
/**
 * Server configuration interface
 */
export interface ServerConfig {
    /** Firebase service account key path */
    serviceAccountKeyPath: string | null;
    /** Firebase storage bucket name */
    storageBucket: string | null;
    /** Transport type (stdio, http) */
    transport: TransportType;
    /** HTTP transport configuration */
    http: {
        /** HTTP port */
        port: number;
        /** HTTP host */
        host: string;
        /** HTTP path */
        path: string;
    };
    /** Server version */
    version: string;
    /** Server name */
    name: string;
}
/**
 * Detect if we're being run in a stdio context
 * @returns True if running in a stdio context
 */
export declare function isStdioContext(): boolean;
/**
 * Check if an HTTP server is already running on the specified host and port
 * @param host Host to check
 * @param port Port to check
 * @returns Promise that resolves to true if a server is running
 */
export declare function isHttpServerRunning(host: string, port: number): Promise<boolean>;
/**
 * Get configuration from environment variables
 * @returns Server configuration object
 */
export declare function getConfig(): ServerConfig;
declare const _default: ServerConfig;
export default _default;
