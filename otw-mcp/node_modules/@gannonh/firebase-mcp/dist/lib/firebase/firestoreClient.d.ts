/**
 * Firebase Firestore Client
 *
 * This module provides functions for interacting with Firebase Firestore database.
 * It includes operations for listing collections, querying documents, and performing CRUD operations.
 * All functions return data in a format compatible with the MCP protocol response structure.
 *
 * @module firebase-mcp/firestore
 */
interface FirestoreResponse {
    content: Array<{
        type: string;
        text: string;
    }>;
    isError?: boolean;
}
/**
 * Lists collections in Firestore, either at the root level or under a specific document.
 * Results are paginated and include links to the Firebase console.
 *
 * @param {string} [documentPath] - Optional path to a document to list subcollections
 * @param {number} [_limit=20] - Maximum number of collections to return (currently unused)
 * @param {string} [_pageToken] - Token for pagination (collection ID to start after) (currently unused)
 * @returns {Promise<Object>} MCP-formatted response with collection data
 * @throws {Error} If Firebase is not initialized or if there's a Firestore error
 *
 * @example
 * // List root collections
 * const rootCollections = await list_collections();
 *
 * @example
 * // List subcollections of a document
 * const subCollections = await list_collections('users/user123');
 */
export declare function list_collections(documentPath?: string, _limit?: number, _pageToken?: string, adminInstance?: any): Promise<FirestoreResponse>;
/**
 * Lists documents in a Firestore collection with optional filtering and pagination.
 * Results include document data, IDs, and links to the Firebase console.
 *
 * @param {string} collection - The collection path to query
 * @param {Array<Object>} [filters=[]] - Array of filter conditions with field, operator, and value
 * @param {number} [limit=20] - Maximum number of documents to return
 * @param {string} [pageToken] - Token for pagination (document ID to start after)
 * @returns {Promise<Object>} MCP-formatted response with document data
 * @throws {Error} If Firebase is not initialized or if there's a Firestore error
 *
 * @example
 * // List all documents in a collection
 * const allDocs = await listDocuments('users');
 *
 * @example
 * // List documents with filtering
 * const filteredDocs = await listDocuments('users', [
 *   { field: 'age', operator: '>=', value: 21 },
 *   { field: 'status', operator: '==', value: 'active' }
 * ]);
 */
export declare function listDocuments(collection: string, filters?: Array<{
    field: string;
    operator: FirebaseFirestore.WhereFilterOp;
    value: unknown;
}>, limit?: number, pageToken?: string): Promise<FirestoreResponse>;
/**
 * Adds a new document to a Firestore collection with auto-generated ID.
 *
 * @param {string} collection - The collection path to add the document to
 * @param {any} data - The document data to add
 * @returns {Promise<Object>} MCP-formatted response with the new document ID and data
 * @throws {Error} If Firebase is not initialized or if there's a Firestore error
 *
 * @example
 * // Add a new user document
 * const result = await addDocument('users', {
 *   name: 'John Doe',
 *   email: 'john@example.com',
 *   createdAt: new Date()
 * });
 */
export declare function addDocument(collection: string, data: object): Promise<FirestoreResponse>;
/**
 * Retrieves a specific document from a Firestore collection by ID.
 *
 * @param {string} collection - The collection path containing the document
 * @param {string} id - The document ID to retrieve
 * @returns {Promise<Object>} MCP-formatted response with the document data
 * @throws {Error} If Firebase is not initialized or if there's a Firestore error
 *
 * @example
 * // Get a specific user document
 * const user = await getDocument('users', 'user123');
 */
export declare function getDocument(collection: string, id: string): Promise<FirestoreResponse>;
/**
 * Updates an existing document in a Firestore collection.
 *
 * @param {string} collection - The collection path containing the document
 * @param {string} id - The document ID to update
 * @param {any} data - The document data to update (fields will be merged)
 * @returns {Promise<Object>} MCP-formatted response with the updated document data
 * @throws {Error} If Firebase is not initialized or if there's a Firestore error
 *
 * @example
 * // Update a user's status
 * const result = await updateDocument('users', 'user123', {
 *   status: 'inactive',
 *   lastUpdated: new Date()
 * });
 */
export declare function updateDocument(collection: string, id: string, data: object): Promise<FirestoreResponse>;
/**
 * Deletes a document from a Firestore collection.
 *
 * @param {string} collection - The collection path containing the document
 * @param {string} id - The document ID to delete
 * @returns {Promise<Object>} MCP-formatted response confirming deletion
 * @throws {Error} If Firebase is not initialized or if there's a Firestore error
 *
 * @example
 * // Delete a user document
 * const result = await deleteDocument('users', 'user123');
 */
export declare function deleteDocument(collection: string, id: string): Promise<FirestoreResponse>;
/**
 * Queries across all subcollections with the same name regardless of their parent document.
 * This is useful for searching data across multiple parent documents.
 *
 * @param {string} collectionId - The collection ID to query (without parent path)
 * @param {Array<Object>} [filters=[]] - Array of filter conditions with field, operator, and value
 * @param {Array<Object>} [orderBy=[]] - Array of fields to order results by
 * @param {number} [limit=20] - Maximum number of documents to return
 * @param {string} [pageToken] - Token for pagination (document path to start after)
 * @returns {Promise<Object>} MCP-formatted response with document data
 * @throws {Error} If Firebase is not initialized or if there's a Firestore error
 *
 * @example
 * // Query across all 'comments' subcollections
 * const allComments = await queryCollectionGroup('comments');
 *
 * @example
 * // Query with filtering
 * const filteredComments = await queryCollectionGroup('comments', [
 *   { field: 'rating', operator: '>', value: 3 }
 * ]);
 */
export declare function queryCollectionGroup(collectionId: string, filters?: Array<{
    field: string;
    operator: FirebaseFirestore.WhereFilterOp;
    value: unknown;
}>, orderBy?: Array<{
    field: string;
    direction?: 'asc' | 'desc';
}>, limit?: number, pageToken?: string): Promise<FirestoreResponse>;
export {};
