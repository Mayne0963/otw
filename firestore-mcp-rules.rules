// Enhanced Firestore Security Rules with MCP Integration
// This file provides comprehensive security rules with automated validation,
// role-based access control, and MCP integration for dynamic rule management.

rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============================================================================
    // HELPER FUNCTIONS
    // ============================================================================
    
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check if user is the owner of the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Check if user has admin role
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Check if user has moderator role or higher
    function isModerator() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'moderator'];
    }
    
    // Check if user has premium subscription
    function isPremiumUser() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.subscription.status == 'active' &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.subscription.plan in ['premium', 'enterprise'];
    }
    
    // Validate email format
    function isValidEmail(email) {
      return email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }
    
    // Check if data contains required fields
    function hasRequiredFields(data, fields) {
      return fields.toSet().difference(data.keys().toSet()).size() == 0;
    }
    
    // Validate timestamp is not in the future
    function isValidTimestamp(timestamp) {
      return timestamp <= request.time;
    }
    
    // Check if user can access resource based on privacy settings
    function canAccessPrivateResource(resourceUserId, privacy) {
      return isOwner(resourceUserId) || 
             privacy == 'public' || 
             (privacy == 'friends' && isFriend(resourceUserId));
    }
    
    // Check if users are friends
    function isFriend(userId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/friendships/$(request.auth.uid + '_' + userId)) ||
             exists(/databases/$(database)/documents/friendships/$(userId + '_' + request.auth.uid));
    }
    
    // Validate data size limits
    function isWithinSizeLimit(data, maxSize) {
      return data.size() <= maxSize;
    }
    
    // Check rate limiting (simplified version)
    function isWithinRateLimit(collection, timeWindow) {
      // This is a simplified check - in practice, you'd use Cloud Functions
      // for more sophisticated rate limiting
      return true;
    }
    
    // ============================================================================
    // USER PROFILES
    // ============================================================================
    
    match /users/{userId} {
      // Users can read their own profile and public profiles
      allow read: if isOwner(userId) || 
                     resource.data.privacy == 'public' ||
                     (resource.data.privacy == 'friends' && isFriend(userId)) ||
                     isModerator();
      
      // Users can create their own profile during signup
      allow create: if isOwner(userId) && 
                       hasRequiredFields(request.resource.data, ['email', 'displayName', 'createdAt']) &&
                       isValidEmail(request.resource.data.email) &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.email == request.auth.token.email &&
                       isWithinSizeLimit(request.resource.data, 50);
      
      // Users can update their own profile with validation
      allow update: if isOwner(userId) && 
                       // Prevent changing critical fields
                       !('role' in request.resource.data.diff(resource.data).affectedKeys()) &&
                       !('email' in request.resource.data.diff(resource.data).affectedKeys()) &&
                       !('createdAt' in request.resource.data.diff(resource.data).affectedKeys()) &&
                       // Ensure updatedAt is set correctly
                       request.resource.data.updatedAt == request.time &&
                       isWithinSizeLimit(request.resource.data, 50);
      
      // Only admins can delete user profiles
      allow delete: if isAdmin();
      
      // Nested collections within user profiles
      match /private/{document=**} {
        allow read, write: if isOwner(userId);
      }
      
      match /notifications/{notificationId} {
        allow read, write: if isOwner(userId);
        allow create: if isAuthenticated() && 
                         hasRequiredFields(request.resource.data, ['title', 'message', 'createdAt']) &&
                         request.resource.data.createdAt == request.time;
      }
    }
    
    // ============================================================================
    // ORDERS AND TRANSACTIONS
    // ============================================================================
    
    match /orders/{orderId} {
      // Users can read their own orders, admins can read all
      allow read: if isOwner(resource.data.userId) || isAdmin();
      
      // Users can create orders with proper validation
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       hasRequiredFields(request.resource.data, ['userId', 'items', 'total', 'status', 'createdAt']) &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.status == 'pending' &&
                       request.resource.data.total > 0 &&
                       request.resource.data.items.size() > 0 &&
                       isWithinRateLimit('orders', 3600); // 1 hour window
      
      // Users can update their own pending orders, admins can update any order
      allow update: if (isOwner(resource.data.userId) && resource.data.status == 'pending') ||
                       isAdmin() &&
                       request.resource.data.updatedAt == request.time;
      
      // Only admins can delete orders
      allow delete: if isAdmin();
    }
    
    match /screenshot_orders/{orderId} {
      // Similar rules to regular orders but with additional validation
      allow read: if isOwner(resource.data.userId) || isAdmin();
      
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       hasRequiredFields(request.resource.data, ['userId', 'url', 'options', 'status', 'createdAt']) &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.status == 'pending' &&
                       request.resource.data.url.matches('^https?://.*') &&
                       isWithinRateLimit('screenshot_orders', 3600);
      
      allow update: if (isOwner(resource.data.userId) && resource.data.status in ['pending', 'processing']) ||
                       isAdmin() &&
                       request.resource.data.updatedAt == request.time;
      
      allow delete: if isAdmin();
    }
    
    // ============================================================================
    // RESTAURANTS AND PUBLIC DATA
    // ============================================================================
    
    match /restaurants/{restaurantId} {
      // Public read access for restaurants
      allow read: if true;
      
      // Only admins and restaurant owners can create/update restaurants
      allow create, update: if isAdmin() || 
                               (isAuthenticated() && 
                                request.resource.data.ownerId == request.auth.uid &&
                                hasRequiredFields(request.resource.data, ['name', 'address', 'ownerId', 'createdAt']) &&
                                request.resource.data.createdAt == request.time);
      
      allow delete: if isAdmin();
      
      // Restaurant menu items
      match /menu/{itemId} {
        allow read: if true;
        allow write: if isAdmin() || 
                        (isAuthenticated() && 
                         get(/databases/$(database)/documents/restaurants/$(restaurantId)).data.ownerId == request.auth.uid);
      }
      
      // Restaurant reviews
      match /reviews/{reviewId} {
        allow read: if true;
        allow create: if isAuthenticated() && 
                         request.resource.data.userId == request.auth.uid &&
                         hasRequiredFields(request.resource.data, ['userId', 'rating', 'comment', 'createdAt']) &&
                         request.resource.data.rating >= 1 && request.resource.data.rating <= 5 &&
                         request.resource.data.createdAt == request.time;
        allow update: if isOwner(resource.data.userId) && 
                         request.resource.data.updatedAt == request.time;
        allow delete: if isOwner(resource.data.userId) || isAdmin();
      }
    }
    
    // ============================================================================
    // ANALYTICS AND LOGGING
    // ============================================================================
    
    match /analytics_events/{eventId} {
      // Only allow creation of analytics events, no reading/updating/deleting
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       hasRequiredFields(request.resource.data, ['eventName', 'userId', 'timestamp']) &&
                       isValidTimestamp(request.resource.data.timestamp);
    }
    
    match /operation_logs/{logId} {
      // Only system (Cloud Functions) can write operation logs
      // Users cannot read operation logs for privacy
      allow read, write: if false;
    }
    
    match /error_logs/{logId} {
      // Only system (Cloud Functions) can write error logs
      allow read, write: if false;
    }
    
    // ============================================================================
    // CONTENT MANAGEMENT
    // ============================================================================
    
    match /posts/{postId} {
      // Public read access for published posts
      allow read: if resource.data.status == 'published' || 
                     isOwner(resource.data.authorId) || 
                     isModerator();
      
      // Users can create posts
      allow create: if isAuthenticated() && 
                       request.resource.data.authorId == request.auth.uid &&
                       hasRequiredFields(request.resource.data, ['title', 'content', 'authorId', 'status', 'createdAt']) &&
                       request.resource.data.status in ['draft', 'published'] &&
                       request.resource.data.createdAt == request.time &&
                       isWithinSizeLimit(request.resource.data, 100);
      
      // Authors can update their own posts, moderators can update any
      allow update: if (isOwner(resource.data.authorId) || isModerator()) &&
                       request.resource.data.updatedAt == request.time;
      
      // Authors can delete their own posts, moderators can delete any
      allow delete: if isOwner(resource.data.authorId) || isModerator();
      
      // Comments on posts
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isAuthenticated() && 
                         request.resource.data.authorId == request.auth.uid &&
                         hasRequiredFields(request.resource.data, ['content', 'authorId', 'createdAt']) &&
                         request.resource.data.createdAt == request.time &&
                         isWithinSizeLimit(request.resource.data, 20);
        allow update: if isOwner(resource.data.authorId) && 
                         request.resource.data.updatedAt == request.time;
        allow delete: if isOwner(resource.data.authorId) || isModerator();
      }
    }
    
    // ============================================================================
    // FILE METADATA AND STORAGE REFERENCES
    // ============================================================================
    
    match /image_metadata/{metadataId} {
      // Users can read metadata for their own images
      allow read: if isAuthenticated() && 
                     (resource.data.userId == request.auth.uid || 
                      resource.data.privacy == 'public' ||
                      isModerator());
      
      // Only system (Cloud Functions) can create image metadata
      allow create: if false;
      
      // Users can update privacy settings of their own images
      allow update: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid &&
                       request.resource.data.keys().hasOnly(['privacy', 'updatedAt']) &&
                       request.resource.data.updatedAt == request.time;
      
      // Users can delete their own image metadata, admins can delete any
      allow delete: if (isAuthenticated() && resource.data.userId == request.auth.uid) || 
                       isAdmin();
    }
    
    // ============================================================================
    // SOCIAL FEATURES
    // ============================================================================
    
    match /friendships/{friendshipId} {
      // Users can read friendships they're part of
      allow read: if isAuthenticated() && 
                     (friendshipId.split('_')[0] == request.auth.uid || 
                      friendshipId.split('_')[1] == request.auth.uid);
      
      // Users can create friendship requests
      allow create: if isAuthenticated() && 
                       (request.resource.data.requesterId == request.auth.uid || 
                        request.resource.data.receiverId == request.auth.uid) &&
                       hasRequiredFields(request.resource.data, ['requesterId', 'receiverId', 'status', 'createdAt']) &&
                       request.resource.data.status == 'pending' &&
                       request.resource.data.createdAt == request.time;
      
      // Users can update friendship status (accept/reject)
      allow update: if isAuthenticated() && 
                       (resource.data.requesterId == request.auth.uid || 
                        resource.data.receiverId == request.auth.uid) &&
                       request.resource.data.updatedAt == request.time;
      
      // Users can delete friendships they're part of
      allow delete: if isAuthenticated() && 
                       (resource.data.requesterId == request.auth.uid || 
                        resource.data.receiverId == request.auth.uid);
    }
    
    match /messages/{messageId} {
      // Users can read messages they're part of
      allow read: if isAuthenticated() && 
                     (resource.data.senderId == request.auth.uid || 
                      resource.data.receiverId == request.auth.uid);
      
      // Users can send messages to friends
      allow create: if isAuthenticated() && 
                       request.resource.data.senderId == request.auth.uid &&
                       hasRequiredFields(request.resource.data, ['senderId', 'receiverId', 'content', 'createdAt']) &&
                       request.resource.data.createdAt == request.time &&
                       isFriend(request.resource.data.receiverId) &&
                       isWithinSizeLimit(request.resource.data, 10);
      
      // Users can mark their own messages as read
      allow update: if isAuthenticated() && 
                       resource.data.receiverId == request.auth.uid &&
                       request.resource.data.keys().hasOnly(['read', 'readAt']) &&
                       request.resource.data.readAt == request.time;
      
      // Users can delete their own sent messages
      allow delete: if isAuthenticated() && resource.data.senderId == request.auth.uid;
    }
    
    // ============================================================================
    // SUBSCRIPTION AND BILLING
    // ============================================================================
    
    match /subscriptions/{subscriptionId} {
      // Users can read their own subscription info
      allow read: if isOwner(resource.data.userId) || isAdmin();
      
      // Only system (webhooks) can create/update subscriptions
      allow create, update: if false;
      
      // Only admins can delete subscriptions
      allow delete: if isAdmin();
    }
    
    match /payments/{paymentId} {
      // Users can read their own payment history
      allow read: if isOwner(resource.data.userId) || isAdmin();
      
      // Only system (webhooks) can create payments
      allow create: if false;
      
      // No updates or deletes allowed
      allow update, delete: if false;
    }
    
    // ============================================================================
    // ADMIN AND MODERATION
    // ============================================================================
    
    match /admin_logs/{logId} {
      // Only admins can read admin logs
      allow read: if isAdmin();
      
      // System creates admin logs automatically
      allow create: if false;
      
      // No updates or deletes
      allow update, delete: if false;
    }
    
    match /reports/{reportId} {
      // Users can read their own reports, moderators can read all
      allow read: if isOwner(resource.data.reporterId) || isModerator();
      
      // Users can create reports
      allow create: if isAuthenticated() && 
                       request.resource.data.reporterId == request.auth.uid &&
                       hasRequiredFields(request.resource.data, ['reporterId', 'type', 'targetId', 'reason', 'createdAt']) &&
                       request.resource.data.createdAt == request.time;
      
      // Only moderators can update reports (change status)
      allow update: if isModerator() && 
                       request.resource.data.updatedAt == request.time;
      
      // Only admins can delete reports
      allow delete: if isAdmin();
    }
    
    // ============================================================================
    // SYSTEM COLLECTIONS (RESTRICTED ACCESS)
    // ============================================================================
    
    match /system_config/{configId} {
      // Only admins can read system configuration
      allow read: if isAdmin();
      
      // Only super admins can modify system configuration
      allow write: if isAdmin() && 
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'super_admin';
    }
    
    match /feature_flags/{flagId} {
      // All authenticated users can read feature flags
      allow read: if isAuthenticated();
      
      // Only admins can modify feature flags
      allow write: if isAdmin();
    }
    
    // ============================================================================
    // CATCH-ALL RULE (DENY BY DEFAULT)
    // ============================================================================
    
    // Deny access to any collection not explicitly defined above
    match /{document=**} {
      allow read, write: if false;
    }
  }
}